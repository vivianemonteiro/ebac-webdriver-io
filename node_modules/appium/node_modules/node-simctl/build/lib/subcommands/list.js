"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../helpers");

var _logger = _interopRequireWildcard(require("../logger"));

const commands = {};

commands.getDevicesByParsing = async function getDevicesByParsing(platform) {
  const {
    stdout
  } = await this.exec('list', {
    args: ['devices']
  });
  const deviceSectionRe = _lodash.default.isEmpty(platform) ? new RegExp(`\\-\\-\\s+(\\S+)\\s+(\\S+)\\s+\\-\\-(\\n\\s{4}.+)*`, 'mgi') : new RegExp(`\\-\\-\\s+${_lodash.default.escapeRegExp(platform)}\\s+(\\S+)\\s+\\-\\-(\\n\\s{4}.+)*`, 'mgi');
  const matches = [];
  let match;

  while (match = deviceSectionRe.exec(stdout)) {
    matches.push(match);
  }

  if (_lodash.default.isEmpty(matches)) {
    throw new Error('Could not find device section');
  }

  const lineRe = /([^\s].+) \((\w+-.+\w+)\) \((\w+\s?\w+)\)/;
  const devices = {};

  for (match of matches) {
    const sdk = platform ? match[1] : match[2];
    devices[sdk] = devices[sdk] || [];

    for (const line of match[0].split('\n').slice(1)) {
      if (line.includes('(unavailable, ')) {
        continue;
      }

      const lineMatch = lineRe.exec(line);

      if (!lineMatch) {
        throw new Error(`Could not match line: ${line}`);
      }

      devices[sdk].push({
        name: lineMatch[1],
        udid: lineMatch[2],
        state: lineMatch[3],
        sdk,
        platform: platform || match[1]
      });
    }
  }

  return devices;
};

commands.getDevices = async function getDevices(forSdk, platform) {
  let devices = {};

  try {
    const {
      stdout
    } = await this.exec('list', {
      args: ['devices', '-j']
    });
    const versionMatchRe = _lodash.default.isEmpty(platform) ? new RegExp(`^([^\\s-]+)[\\s-](\\S+)`, 'i') : new RegExp(`^${_lodash.default.escapeRegExp(platform)}[\\s-](\\S+)`, 'i');

    for (let [sdkName, entries] of _lodash.default.toPairs(JSON.parse(stdout).devices)) {
      sdkName = sdkName.replace(_helpers.SIM_RUNTIME_NAME, '');
      const versionMatch = versionMatchRe.exec(sdkName);

      if (!versionMatch) {
        continue;
      }

      const sdk = (platform ? versionMatch[1] : versionMatch[2]).replace('-', '.');
      devices[sdk] = devices[sdk] || [];
      devices[sdk].push(...entries.filter(el => _lodash.default.isUndefined(el.isAvailable) || el.isAvailable).map(el => {
        delete el.availability;
        return {
          sdk,
          ...el,
          platform: platform || versionMatch[1]
        };
      }));
    }
  } catch (err) {
    _logger.default.debug(_logger.LOG_PREFIX, `Unable to get JSON device list: ${err.stack}`);

    _logger.default.debug(_logger.LOG_PREFIX, 'Falling back to manual parsing');

    devices = await this.getDevicesByParsing(platform);
  }

  if (!forSdk) {
    return devices;
  }

  if (devices[forSdk]) {
    return devices[forSdk];
  }

  let errMsg = `'${forSdk}' does not exist in the list of simctl SDKs.`;

  const availableSDKs = _lodash.default.keys(devices);

  errMsg += availableSDKs.length ? ` Only the following Simulator SDK versions are available on your system: ${availableSDKs.join(', ')}` : ` No Simulator SDK versions are available on your system. Please install some via Xcode preferences.`;
  throw new Error(errMsg);
};

commands.getRuntimeForPlatformVersionViaJson = async function getRuntimeForPlatformVersionViaJson(platformVersion, platform = 'iOS') {
  const {
    stdout
  } = await this.exec('list', {
    args: ['runtimes', '--json']
  });

  for (const {
    version,
    identifier,
    name
  } of JSON.parse(stdout).runtimes) {
    if ((0, _helpers.normalizeVersion)(version) === (0, _helpers.normalizeVersion)(platformVersion) && name.toLowerCase().startsWith(platform.toLowerCase())) {
      return identifier;
    }
  }

  throw new Error(`Could not use --json flag to parse platform version`);
};

commands.getRuntimeForPlatformVersion = async function getRuntimeForPlatformVersion(platformVersion, platform = 'iOS') {
  try {
    const {
      stdout
    } = await this.exec('list', {
      args: ['runtimes']
    });
    const runtimeRe = new RegExp(`${_lodash.default.escapeRegExp(platform)}\\s+(\\d+\\.\\d+)\\s+\\((\\d+\\.\\d+\\.*\\d*)`, 'i');

    for (const line of stdout.split('\n')) {
      const match = runtimeRe.exec(line);

      if (match && match[1] === platformVersion) {
        return match[2];
      }
    }
  } catch (ign) {}

  return platformVersion;
};

commands.getDeviceTypes = async function getDeviceTypes() {
  const {
    stdout
  } = await this.exec('list', {
    args: ['devicetypes', '-j']
  });

  try {
    const deviceTypes = JSON.parse(stdout.trim());
    return deviceTypes.devicetypes.map(type => type.name);
  } catch (err) {
    throw new Error(`Unable to get list of device types: ${err.message}`);
  }
};

commands.list = async function list() {
  const {
    stdout
  } = await this.exec('list', {
    args: ['-j']
  });

  try {
    return JSON.parse(stdout.trim());
  } catch (e) {
    throw new Error(`Unable to parse simctl list: ${e.message}`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
