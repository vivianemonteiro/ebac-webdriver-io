"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

const commands = {};

commands.startBootMonitor = async function startBootMonitor(opts = {}) {
  const {
    timeout = 240000,
    onWaitingDataMigration,
    onWaitingSystemApp,
    onFinished,
    onError
  } = opts;
  const udid = this.requireUdid('bootstatus');
  let status = '';
  let isBootingFinished = false;
  let error = null;
  let timeoutHandler = null;
  const bootMonitor = await this.exec('bootstatus', {
    args: [udid],
    asynchronous: true
  });
  bootMonitor.on('output', (stdout, stderr) => {
    status += stdout || stderr;

    if (stdout) {
      if (stdout.includes('Waiting on Data Migration') && onWaitingDataMigration) {
        onWaitingDataMigration();
      } else if (stdout.includes('Waiting on System App') && onWaitingSystemApp) {
        onWaitingSystemApp();
      }
    }
  });
  bootMonitor.on('exit', (code, signal) => {
    if (timeoutHandler) {
      clearTimeout(timeoutHandler);
    }

    if (code === 0) {
      if (onFinished) {
        onFinished();
      }

      isBootingFinished = true;
    } else {
      status = status || signal;
      error = new Error(status);

      if (onError) {
        onError(error);
      }
    }
  });
  await bootMonitor.start(0);

  const stopMonitor = async () => {
    if (bootMonitor.isRunning) {
      try {
        await bootMonitor.stop();
      } catch (e) {
        _logger.default.warn(e.message);
      }
    }
  };

  const start = process.hrtime();

  if (onFinished) {
    timeoutHandler = setTimeout(stopMonitor, timeout);
  } else {
    try {
      await (0, _asyncbox.waitForCondition)(() => {
        if (error) {
          throw error;
        }

        return isBootingFinished;
      }, {
        waitMs: timeout,
        intervalMs: 500
      });
    } catch (err) {
      await stopMonitor();
      const [seconds] = process.hrtime(start);
      throw new Error(`The simulator ${udid} has failed to finish booting after ${seconds}s. ` + `Original status: ${status}`);
    }
  }

  return bootMonitor;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
