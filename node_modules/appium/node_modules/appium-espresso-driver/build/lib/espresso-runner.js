"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TEST_APK_PKG = exports.REQUIRED_PARAMS = exports.EspressoRunner = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _serverBuilder = require("./server-builder");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _package = require("../../package.json");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _utils = require("./utils");

var _axios = _interopRequireDefault(require("axios"));

const TEST_SERVER_ROOT = _path.default.resolve(__dirname, '..', '..', 'espresso-server');

const TEST_APK_PKG = 'io.appium.espressoserver.test';
exports.TEST_APK_PKG = TEST_APK_PKG;
const REQUIRED_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'appPackage', 'forceEspressoRebuild'];
exports.REQUIRED_PARAMS = REQUIRED_PARAMS;
const ESPRESSO_SERVER_LAUNCH_TIMEOUT_MS = 45000;
const TARGET_PACKAGE_CONTAINER = '/data/local/tmp/espresso.apppackage';

class EspressoProxy extends _appiumBaseDriver.JWProxy {
  async proxyCommand(url, method, body = null) {
    const {
      crashed,
      exited
    } = this.instrumentationState;

    if (exited) {
      throw new _appiumBaseDriver.errors.InvalidContextError(`'${method} ${url}' cannot be proxied to Espresso server because ` + `the instrumentation process has ${crashed ? 'crashed' : 'been unexpectedly terminated'}. ` + `Check the Appium server log and the logcat output for more details`);
    }

    return await super.proxyCommand(url, method, body);
  }

}

class EspressoRunner {
  constructor(opts = {}) {
    for (let req of REQUIRED_PARAMS) {
      if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.jwproxy = new EspressoProxy({
      server: this.host,
      port: this.systemPort,
      base: '',
      keepAlive: true
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.jwproxy.instrumentationState = {
      exited: false,
      crashed: false
    };

    const modServerName = _appiumSupport.fs.sanitizeName(`${TEST_APK_PKG}_${_package.version}_${this.appPackage}_${this.adb.curDeviceId}.apk`, {
      replacement: '-'
    });

    this.modServerPath = _path.default.resolve(this.tmpDir, modServerName);
    this.showGradleLog = opts.showGradleLog;
    this.espressoBuildConfig = opts.espressoBuildConfig;
    this.serverLaunchTimeout = opts.serverLaunchTimeout || ESPRESSO_SERVER_LAUNCH_TIMEOUT_MS;
    this.androidInstallTimeout = opts.androidInstallTimeout;
    this.disableSuppressAccessibilityService = opts.disableSuppressAccessibilityService;

    if (opts.useKeystore && opts.keystorePath && opts.keystorePassword && opts.keyAlias && opts.keyPassword) {
      this.signingConfig = (0, _serverBuilder.buildServerSigningConfig)({
        keystoreFile: opts.keystorePath,
        keystorePassword: opts.keystorePassword,
        keyAlias: opts.keyAlias,
        keyPassword: opts.keyPassword
      });
    } else {
      this.signingConfig = null;
    }
  }

  async isAppPackageChanged() {
    if (!(await this.adb.fileExists(TARGET_PACKAGE_CONTAINER))) {
      _logger.default.debug('The previous target application package is unknown');

      return true;
    }

    const previousAppPackage = (await this.adb.shell(['cat', TARGET_PACKAGE_CONTAINER])).trim();

    _logger.default.debug(`The previous target application package was '${previousAppPackage}'. ` + `The current package is '${this.appPackage}'`);

    return previousAppPackage !== this.appPackage;
  }

  async installServer() {
    const appState = await this.adb.getApplicationInstallState(this.modServerPath, TEST_APK_PKG);
    const shouldUninstallApp = [this.adb.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED, this.adb.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED].includes(appState);
    const shouldInstallApp = shouldUninstallApp || [this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);

    if (shouldUninstallApp) {
      _logger.default.info(`Uninstalling Espresso Test Server apk from the target device (pkg: '${TEST_APK_PKG}')`);

      try {
        await this.adb.uninstallApk(TEST_APK_PKG);
      } catch (err) {
        _logger.default.warn(`Error uninstalling '${TEST_APK_PKG}': ${err.message}`);
      }
    }

    if (shouldInstallApp) {
      _logger.default.info(`Installing Espresso Test Server apk from the target device (path: '${this.modServerPath}')`);

      try {
        await this.adb.install(this.modServerPath, {
          replace: false,
          timeout: this.androidInstallTimeout
        });

        _logger.default.info(`Installed Espresso Test Server apk '${this.modServerPath}' (pkg: '${TEST_APK_PKG}')`);
      } catch (err) {
        _logger.default.errorAndThrow(`Cannot install '${this.modServerPath}' because of '${err.message}'`);
      }
    }
  }

  async installTestApk() {
    let rebuild = this.forceEspressoRebuild;

    if (rebuild) {
      _logger.default.debug(`'forceEspressoRebuild' capability is enabled`);
    } else if (await this.isAppPackageChanged()) {
      _logger.default.info(`Forcing Espresso server rebuild because of changed application package`);

      rebuild = true;
    }

    if (rebuild && (await _appiumSupport.fs.exists(this.modServerPath))) {
      _logger.default.debug(`Deleting the obsolete Espresso server package '${this.modServerPath}'`);

      await _appiumSupport.fs.unlink(this.modServerPath);
    }

    if (!(await _appiumSupport.fs.exists(this.modServerPath))) {
      await this.buildNewModServer();
    }

    const isSigned = await this.adb.checkApkCert(this.modServerPath, TEST_APK_PKG);

    if (!isSigned) {
      await this.adb.sign(this.modServerPath);
    }

    if ((rebuild || !isSigned) && (await this.adb.uninstallApk(TEST_APK_PKG))) {
      _logger.default.info('Uninstalled the obsolete Espresso server package from the device under test');
    }

    await this.installServer();
  }

  async buildNewModServer() {
    let buildConfiguration = {};

    if (this.espressoBuildConfig) {
      let buildConfigurationStr;

      if (await _appiumSupport.fs.exists(this.espressoBuildConfig)) {
        _logger.default.info(`Loading the build configuration from '${this.espressoBuildConfig}'`);

        buildConfigurationStr = await _appiumSupport.fs.readFile(this.espressoBuildConfig, 'utf8');
      } else {
        _logger.default.info(`Loading the build configuration from 'espressoBuildConfig' capability`);

        buildConfigurationStr = this.espressoBuildConfig;
      }

      try {
        buildConfiguration = JSON.parse(buildConfigurationStr);
      } catch (e) {
        _logger.default.error('Cannot parse the build configuration JSON', e);

        throw e;
      }
    }

    const dirName = _appiumSupport.fs.sanitizeName(`espresso-server-${this.adb.curDeviceId}`, {
      replacement: '-'
    });

    const serverPath = _path.default.resolve(this.tmpDir, dirName);

    _logger.default.info(`Building espresso server in '${serverPath}'`);

    _logger.default.debug(`The build folder root could be customized by changing the 'tmpDir' capability`);

    await _appiumSupport.fs.rimraf(serverPath);
    await (0, _appiumSupport.mkdirp)(serverPath);

    _logger.default.debug(`Copying espresso server template from ('${TEST_SERVER_ROOT}' to '${serverPath}')`);

    await (0, _utils.copyGradleProjectRecursively)(TEST_SERVER_ROOT, serverPath);

    _logger.default.debug('Bulding espresso server');

    await new _serverBuilder.ServerBuilder({
      serverPath,
      buildConfiguration,
      showGradleLog: this.showGradleLog,
      testAppPackage: this.appPackage,
      signingConfig: this.signingConfig
    }).build();

    const apkPath = _path.default.resolve(serverPath, 'app', 'build', 'outputs', 'apk', 'androidTest', 'debug', 'app-debug-androidTest.apk');

    _logger.default.debug(`Copying built apk from '${apkPath}' to '${this.modServerPath}'`);

    await _appiumSupport.fs.copyFile(apkPath, this.modServerPath);
  }

  async cleanupSessionLeftovers() {
    _logger.default.debug('Performing cleanup of automation leftovers');

    try {
      const {
        value
      } = (await (0, _axios.default)({
        url: `http://${this.host}:${this.systemPort}/sessions`,
        timeout: 500
      })).data;
      const activeSessionIds = value.map(sess => sess.id);

      if (activeSessionIds.length) {
        _logger.default.debug(`The following obsolete sessions are still running: ${JSON.stringify(activeSessionIds)}`);

        _logger.default.debug('Cleaning up the obsolete sessions');

        await _bluebird.default.all(activeSessionIds.map(id => (0, _axios.default)({
          url: `http://${this.host}:${this.systemPort}/session/${id}`,
          method: 'DELETE'
        })));
        await _bluebird.default.delay(1000);
      } else {
        _logger.default.debug('No obsolete sessions have been detected');
      }
    } catch (e) {
      _logger.default.debug(`No obsolete sessions have been detected (${e.message})`);
    }
  }

  async startSession(caps) {
    await this.cleanupSessionLeftovers();
    const cmd = ['shell', 'am', 'instrument', '-w', '-e', 'debug', process.env.ESPRESSO_JAVA_DEBUG === 'true', '-e', 'disableAnalytics', true];

    if (_lodash.default.isBoolean(this.disableSuppressAccessibilityService)) {
      cmd.push('-e', 'DISABLE_SUPPRESS_ACCESSIBILITY_SERVICES', this.disableSuppressAccessibilityService);
    }

    cmd.push(`${TEST_APK_PKG}/androidx.test.runner.AndroidJUnitRunner`);

    _logger.default.info(`Starting Espresso Server v${_package.version} with cmd: adb ${cmd.join(' ')}`);

    let hasSocketError = false;
    this.jwproxy.instrumentationState = {
      exited: false,
      crashed: false
    };
    this.instProcess = this.adb.createSubProcess(cmd);
    this.instProcess.on('exit', (code, signal) => {
      _logger.default.info(`Instrumentation process exited with code ${code} from signal ${signal}`);

      this.jwproxy.instrumentationState.exited = true;
    });
    this.instProcess.on('output', (stdout, stderr) => {
      const line = stdout || stderr;

      if (_lodash.default.isEmpty(line.trim())) {
        return;
      }

      _logger.default.debug(`[Instrumentation] ${line.trim()}`);

      if (line.toLowerCase().includes('java.net.socketexception')) {
        hasSocketError = true;
      } else if (line.includes('Process crashed')) {
        this.jwproxy.instrumentationState.crashed = true;
      }
    });
    const timer = new _appiumSupport.timing.Timer().start();
    await this.instProcess.start(0);

    _logger.default.info(`Waiting up to ${this.serverLaunchTimeout}ms for Espresso server to be online`);

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (hasSocketError) {
          _logger.default.errorAndThrow(`Espresso server has failed to start due to an unexpected exception. ` + `Make sure the 'INTERNET' permission is requested in the Android manifest of your ` + `application under test (<uses-permission android:name="android.permission.INTERNET" />)`);
        } else if (this.jwproxy.instrumentationState.exited) {
          _logger.default.errorAndThrow(`Espresso server process has been unexpectedly terminated. ` + `Check the Appium server log and the logcat output for more details`);
        }

        try {
          await this.jwproxy.command('/status', 'GET');
          return true;
        } catch (e) {
          return false;
        }
      }, {
        waitMs: this.serverLaunchTimeout,
        intervalMs: 500
      });
    } catch (e) {
      if (/Condition unmet/.test(e.message)) {
        _logger.default.errorAndThrow(`Timed out waiting for Espresso server to be ` + `online within ${this.serverLaunchTimeout}ms. The timeout value could be ` + `customized using 'espressoServerLaunchTimeout' capability`);
      }

      throw e;
    }

    _logger.default.info(`Espresso server is online. ` + `The initialization process took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

    _logger.default.info('Starting the session');

    await this.jwproxy.command('/session', 'POST', {
      capabilities: {
        firstMatch: [caps],
        alwaysMatch: {}
      }
    });
    await this.recordTargetAppPackage();
  }

  async recordTargetAppPackage() {
    await this.adb.shell([`echo "${this.appPackage}" > "${TARGET_PACKAGE_CONTAINER}"`]);

    _logger.default.info(`Recorded the target application package '${this.appPackage}' to ${TARGET_PACKAGE_CONTAINER}`);
  }

  async deleteSession() {
    _logger.default.debug('Deleting Espresso server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation Espresso deleteSession worked; ` + `Error was: ${err}`);
    }

    if (this.instProcess && this.instProcess.isRunning) {
      await this.instProcess.stop();
    }
  }

}

exports.EspressoRunner = EspressoRunner;
var _default = EspressoRunner;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
