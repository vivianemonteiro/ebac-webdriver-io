"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qualifyActivityName = qualifyActivityName;
exports.copyGradleProjectRecursively = copyGradleProjectRecursively;
exports.requireOptions = requireOptions;
exports.updateDependencyLines = updateDependencyLines;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

function qualifyActivityName(activityName, packageName) {
  if ([activityName, packageName].some(name => !name || _lodash.default.includes(name, '*'))) {
    return activityName;
  }

  const dotPos = activityName.indexOf('.');

  if (dotPos > 0) {
    return activityName;
  }

  return `${packageName}${dotPos === 0 ? '' : '.'}${activityName}`;
}

async function copyGradleProjectRecursively(sourceBaseDir, targetBaseDir) {
  await _appiumSupport.fs.walkDir(sourceBaseDir, true, async (itemPath, isDirectory) => {
    const relativePath = _path.default.relative(sourceBaseDir, itemPath);

    const targetPath = _path.default.resolve(targetBaseDir, relativePath);

    const isInGradleBuildDir = `${_path.default.sep}${itemPath}`.includes(`${_path.default.sep}build${_path.default.sep}`);

    if (isInGradleBuildDir) {
      return false;
    }

    if (isDirectory) {
      await (0, _appiumSupport.mkdirp)(targetPath);
    } else {
      await _appiumSupport.fs.copyFile(itemPath, targetPath);
    }

    return false;
  });
}

function requireOptions(opts, requiredKeys = []) {
  const missingKeys = _lodash.default.difference(requiredKeys, _lodash.default.keys(opts));

  if (!_lodash.default.isEmpty(missingKeys)) {
    throw new Error(`The following options are required: ${missingKeys}`);
  }

  return opts;
}

function updateDependencyLines(originalContent, dependencyPlaceholder, dependencyLines) {
  const configurationLines = originalContent.split('\n');
  const searchRe = new RegExp(`^\\s*//\\s*\\b${_lodash.default.escapeRegExp(dependencyPlaceholder)}\\b`, 'm');
  const placeholderIndex = configurationLines.findIndex(line => searchRe.test(line));

  if (placeholderIndex < 0) {
    return originalContent;
  }

  const placeholderLine = configurationLines[placeholderIndex];

  const indentLen = placeholderLine.length - _lodash.default.trimStart(placeholderLine).length;

  configurationLines.splice(placeholderIndex + 1, 0, ...dependencyLines.map(line => `${' '.repeat(indentLen)}${line}`));
  return configurationLines.join('\n');
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJxdWFsaWZ5QWN0aXZpdHlOYW1lIiwiYWN0aXZpdHlOYW1lIiwicGFja2FnZU5hbWUiLCJzb21lIiwibmFtZSIsIl8iLCJpbmNsdWRlcyIsImRvdFBvcyIsImluZGV4T2YiLCJjb3B5R3JhZGxlUHJvamVjdFJlY3Vyc2l2ZWx5Iiwic291cmNlQmFzZURpciIsInRhcmdldEJhc2VEaXIiLCJmcyIsIndhbGtEaXIiLCJpdGVtUGF0aCIsImlzRGlyZWN0b3J5IiwicmVsYXRpdmVQYXRoIiwicGF0aCIsInJlbGF0aXZlIiwidGFyZ2V0UGF0aCIsInJlc29sdmUiLCJpc0luR3JhZGxlQnVpbGREaXIiLCJzZXAiLCJjb3B5RmlsZSIsInJlcXVpcmVPcHRpb25zIiwib3B0cyIsInJlcXVpcmVkS2V5cyIsIm1pc3NpbmdLZXlzIiwiZGlmZmVyZW5jZSIsImtleXMiLCJpc0VtcHR5IiwiRXJyb3IiLCJ1cGRhdGVEZXBlbmRlbmN5TGluZXMiLCJvcmlnaW5hbENvbnRlbnQiLCJkZXBlbmRlbmN5UGxhY2Vob2xkZXIiLCJkZXBlbmRlbmN5TGluZXMiLCJjb25maWd1cmF0aW9uTGluZXMiLCJzcGxpdCIsInNlYXJjaFJlIiwiUmVnRXhwIiwiZXNjYXBlUmVnRXhwIiwicGxhY2Vob2xkZXJJbmRleCIsImZpbmRJbmRleCIsImxpbmUiLCJ0ZXN0IiwicGxhY2Vob2xkZXJMaW5lIiwiaW5kZW50TGVuIiwibGVuZ3RoIiwidHJpbVN0YXJ0Iiwic3BsaWNlIiwibWFwIiwicmVwZWF0Iiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFTQSxTQUFTQSxtQkFBVCxDQUE4QkMsWUFBOUIsRUFBNENDLFdBQTVDLEVBQXlEO0FBSXZELE1BQUksQ0FBQ0QsWUFBRCxFQUFlQyxXQUFmLEVBQTRCQyxJQUE1QixDQUFrQ0MsSUFBRCxJQUFVLENBQUNBLElBQUQsSUFBU0MsZ0JBQUVDLFFBQUYsQ0FB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LEVBRE0sQ0FBdkQ7QUFFQSxTQUFPUCxrQkFBa0IsQ0FBQ2dCLElBQW5CLENBQXdCLElBQXhCLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzLCBta2RpcnAgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8qKlxuICogaHR0cHM6Ly9hbmRyb2lkLmdvb2dsZXNvdXJjZS5jb20vcGxhdGZvcm0vZnJhbWV3b3Jrcy9iYXNlLysvbWFzdGVyL3Rvb2xzL2FhcHQvUmVzb3VyY2UuY3BwIzc1NVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpdml0eU5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWNrYWdlTmFtZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHF1YWxpZmllZCBhY3Rpdml0eSBuYW1lXG4gKi9cbmZ1bmN0aW9uIHF1YWxpZnlBY3Rpdml0eU5hbWUgKGFjdGl2aXR5TmFtZSwgcGFja2FnZU5hbWUpIHtcbiAgLy8gaWYgZWl0aGVyIGFjdGl2aXR5IG9yIHBhY2thZ2UgbmFtZSBpcyBub3Qgc2V0XG4gIC8vIG9yIGFueSBvZiB0aGVzZSBjb250YWluIHdpbGRjYXJkcyB0aGVuIHRoZXJlIGlzXG4gIC8vIG5vIHBvaW50IGluIHF1YWxpZnlpbmcgdGhlIGFjdGl2aXR5IG5hbWVcbiAgaWYgKFthY3Rpdml0eU5hbWUsIHBhY2thZ2VOYW1lXS5zb21lKChuYW1lKSA9PiAhbmFtZSB8fCBfLmluY2x1ZGVzKG5hbWUsICcqJykpKSB7XG4gICAgcmV0dXJuIGFjdGl2aXR5TmFtZTtcbiAgfVxuXG4gIGNvbnN0IGRvdFBvcyA9IGFjdGl2aXR5TmFtZS5pbmRleE9mKCcuJyk7XG4gIGlmIChkb3RQb3MgPiAwKSB7XG4gICAgcmV0dXJuIGFjdGl2aXR5TmFtZTtcbiAgfVxuICByZXR1cm4gYCR7cGFja2FnZU5hbWV9JHtkb3RQb3MgPT09IDAgPyAnJyA6ICcuJ30ke2FjdGl2aXR5TmFtZX1gO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNvcHkgYWxsIGZpbGVzIGV4Y2VwdCBidWlsZCBkaXJlY3RvcmllcyBjb250ZW50c1xuICogQHBhcmFtIHNvdXJjZUJhc2VEaXIge3N0cmluZ30gZGlyZWN0b3J5IHRvIGNvcHkgZmlsZXMgZnJvbVxuICogQHBhcmFtIHRhcmdldEJhc2VEaXIge3N0cmluZ30gZGlyZWN0b3J5IHRvIGNvcHkgZmlsZXMgdG9cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29weUdyYWRsZVByb2plY3RSZWN1cnNpdmVseSAoc291cmNlQmFzZURpciwgdGFyZ2V0QmFzZURpcikge1xuICBhd2FpdCBmcy53YWxrRGlyKHNvdXJjZUJhc2VEaXIsIHRydWUsIGFzeW5jIChpdGVtUGF0aCwgaXNEaXJlY3RvcnkpID0+IHtcbiAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBwYXRoLnJlbGF0aXZlKHNvdXJjZUJhc2VEaXIsIGl0ZW1QYXRoKTtcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gcGF0aC5yZXNvbHZlKHRhcmdldEJhc2VEaXIsIHJlbGF0aXZlUGF0aCk7XG5cbiAgICBjb25zdCBpc0luR3JhZGxlQnVpbGREaXIgPSBgJHtwYXRoLnNlcH0ke2l0ZW1QYXRofWAuaW5jbHVkZXMoYCR7cGF0aC5zZXB9YnVpbGQke3BhdGguc2VwfWApO1xuICAgIGlmIChpc0luR3JhZGxlQnVpbGREaXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXJlY3RvcnkpIHtcbiAgICAgIGF3YWl0IG1rZGlycCh0YXJnZXRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgZnMuY29weUZpbGUoaXRlbVBhdGgsIHRhcmdldFBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXF1aXJlT3B0aW9ucyAob3B0cywgcmVxdWlyZWRLZXlzID0gW10pIHtcbiAgY29uc3QgbWlzc2luZ0tleXMgPSBfLmRpZmZlcmVuY2UocmVxdWlyZWRLZXlzLCBfLmtleXMob3B0cykpO1xuICBpZiAoIV8uaXNFbXB0eShtaXNzaW5nS2V5cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcmUgcmVxdWlyZWQ6ICR7bWlzc2luZ0tleXN9YCk7XG4gIH1cbiAgcmV0dXJuIG9wdHM7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURlcGVuZGVuY3lMaW5lcyAob3JpZ2luYWxDb250ZW50LCBkZXBlbmRlbmN5UGxhY2Vob2xkZXIsIGRlcGVuZGVuY3lMaW5lcykge1xuICBjb25zdCBjb25maWd1cmF0aW9uTGluZXMgPSBvcmlnaW5hbENvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICBjb25zdCBzZWFyY2hSZSA9IG5ldyBSZWdFeHAoYF5cXFxccyovL1xcXFxzKlxcXFxiJHtfLmVzY2FwZVJlZ0V4cChkZXBlbmRlbmN5UGxhY2Vob2xkZXIpfVxcXFxiYCwgJ20nKTtcbiAgY29uc3QgcGxhY2Vob2xkZXJJbmRleCA9IGNvbmZpZ3VyYXRpb25MaW5lcy5maW5kSW5kZXgoKGxpbmUpID0+IHNlYXJjaFJlLnRlc3QobGluZSkpO1xuICBpZiAocGxhY2Vob2xkZXJJbmRleCA8IDApIHtcbiAgICByZXR1cm4gb3JpZ2luYWxDb250ZW50O1xuICB9XG5cbiAgY29uc3QgcGxhY2Vob2xkZXJMaW5lID0gY29uZmlndXJhdGlvbkxpbmVzW3BsYWNlaG9sZGVySW5kZXhdO1xuICBjb25zdCBpbmRlbnRMZW4gPSBwbGFjZWhvbGRlckxpbmUubGVuZ3RoIC0gXy50cmltU3RhcnQocGxhY2Vob2xkZXJMaW5lKS5sZW5ndGg7XG4gIGNvbmZpZ3VyYXRpb25MaW5lcy5zcGxpY2UocGxhY2Vob2xkZXJJbmRleCArIDEsIDAsIC4uLihkZXBlbmRlbmN5TGluZXNcbiAgICAubWFwKChsaW5lKSA9PiBgJHsnICcucmVwZWF0KGluZGVudExlbil9JHtsaW5lfWApKSk7XG4gIHJldHVybiBjb25maWd1cmF0aW9uTGluZXMuam9pbignXFxuJyk7XG59XG5cbmV4cG9ydCB7IHF1YWxpZnlBY3Rpdml0eU5hbWUsIGNvcHlHcmFkbGVQcm9qZWN0UmVjdXJzaXZlbHksIHJlcXVpcmVPcHRpb25zLCB1cGRhdGVEZXBlbmRlbmN5TGluZXMgfTtcbiJdLCJmaWxlIjoibGliL3V0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
