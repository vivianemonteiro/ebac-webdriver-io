"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AfcDecoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _protocol = require("../protocol");

class AfcDecoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }

  _transform(data, encoding, callback) {
    this._decode(data);

    callback();
  }

  _decode(data) {
    const magicNumber = data.slice(0, 8);

    if (magicNumber.compare(_protocol.MAGIC_NUMBER) !== 0) {
      throw new Error(`Unexpected magic number: ${magicNumber}`);
    }

    const messageLength = this.readUInt64LE(data, 8);
    const thisLength = this.readUInt64LE(data, 16);
    const packetNumber = this.readUInt64LE(data, 24);
    const opCode = this.readUInt64LE(data, 32);
    const headerPayload = data.slice(_protocol.AFC_PACKET_HEADER_SIZE, thisLength);
    const content = data.slice(thisLength, messageLength);
    this.push({
      messageLength,
      packetNumber,
      opCode,
      headerPayload,
      content
    });
  }

  readUInt64LE(buffer, index) {
    return buffer.readUInt32LE(index);
  }

}

exports.AfcDecoder = AfcDecoder;
var _default = AfcDecoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZmMvdHJhbnNmb3JtZXIvYWZjZGVjb2Rlci5qcyJdLCJuYW1lcyI6WyJBZmNEZWNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiX2RlY29kZSIsIm1hZ2ljTnVtYmVyIiwic2xpY2UiLCJjb21wYXJlIiwiTUFHSUNfTlVNQkVSIiwiRXJyb3IiLCJtZXNzYWdlTGVuZ3RoIiwicmVhZFVJbnQ2NExFIiwidGhpc0xlbmd0aCIsInBhY2tldE51bWJlciIsIm9wQ29kZSIsImhlYWRlclBheWxvYWQiLCJBRkNfUEFDS0VUX0hFQURFUl9TSVpFIiwiY29udGVudCIsInB1c2giLCJidWZmZXIiLCJpbmRleCIsInJlYWRVSW50MzJMRSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxVQUFOLFNBQXlCQyxnQkFBT0MsU0FBaEMsQ0FBMEM7QUFFeENDLEVBQUFBLFdBQVcsR0FBSTtBQUNiLFVBQU07QUFBRUMsTUFBQUEsVUFBVSxFQUFFO0FBQWQsS0FBTjtBQUNEOztBQUVEQyxFQUFBQSxVQUFVLENBQUVDLElBQUYsRUFBUUMsUUFBUixFQUFrQkMsUUFBbEIsRUFBNEI7QUFDcEMsU0FBS0MsT0FBTCxDQUFhSCxJQUFiOztBQUNBRSxJQUFBQSxRQUFRO0FBQ1Q7O0FBRURDLEVBQUFBLE9BQU8sQ0FBRUgsSUFBRixFQUFRO0FBQ2IsVUFBTUksV0FBVyxHQUFHSixJQUFJLENBQUNLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxDQUFwQjs7QUFDQSxRQUFJRCxXQUFXLENBQUNFLE9BQVosQ0FBb0JDLHNCQUFwQixNQUFzQyxDQUExQyxFQUE2QztBQUMzQyxZQUFNLElBQUlDLEtBQUosQ0FBVyw0QkFBMkJKLFdBQVksRUFBbEQsQ0FBTjtBQUNEOztBQUNELFVBQU1LLGFBQWEsR0FBRyxLQUFLQyxZQUFMLENBQWtCVixJQUFsQixFQUF3QixDQUF4QixDQUF0QjtBQUNBLFVBQU1XLFVBQVUsR0FBRyxLQUFLRCxZQUFMLENBQWtCVixJQUFsQixFQUF3QixFQUF4QixDQUFuQjtBQUNBLFVBQU1ZLFlBQVksR0FBRyxLQUFLRixZQUFMLENBQWtCVixJQUFsQixFQUF3QixFQUF4QixDQUFyQjtBQUNBLFVBQU1hLE1BQU0sR0FBRyxLQUFLSCxZQUFMLENBQWtCVixJQUFsQixFQUF3QixFQUF4QixDQUFmO0FBRUEsVUFBTWMsYUFBYSxHQUFHZCxJQUFJLENBQUNLLEtBQUwsQ0FBV1UsZ0NBQVgsRUFBbUNKLFVBQW5DLENBQXRCO0FBQ0EsVUFBTUssT0FBTyxHQUFHaEIsSUFBSSxDQUFDSyxLQUFMLENBQVdNLFVBQVgsRUFBdUJGLGFBQXZCLENBQWhCO0FBRUEsU0FBS1EsSUFBTCxDQUFVO0FBQUVSLE1BQUFBLGFBQUY7QUFBaUJHLE1BQUFBLFlBQWpCO0FBQStCQyxNQUFBQSxNQUEvQjtBQUF1Q0MsTUFBQUEsYUFBdkM7QUFBc0RFLE1BQUFBO0FBQXRELEtBQVY7QUFDRDs7QUFFRE4sRUFBQUEsWUFBWSxDQUFFUSxNQUFGLEVBQVVDLEtBQVYsRUFBaUI7QUFFM0IsV0FBT0QsTUFBTSxDQUFDRSxZQUFQLENBQW9CRCxLQUFwQixDQUFQO0FBQ0Q7O0FBOUJ1Qzs7O2VBa0MzQnpCLFUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3MgKi9cbmltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IE1BR0lDX05VTUJFUiwgQUZDX1BBQ0tFVF9IRUFERVJfU0laRSB9IGZyb20gJy4uL3Byb3RvY29sJztcblxuXG5jbGFzcyBBZmNEZWNvZGVyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX2RlY29kZShkYXRhKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgX2RlY29kZSAoZGF0YSkge1xuICAgIGNvbnN0IG1hZ2ljTnVtYmVyID0gZGF0YS5zbGljZSgwLCA4KTtcbiAgICBpZiAobWFnaWNOdW1iZXIuY29tcGFyZShNQUdJQ19OVU1CRVIpICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgbWFnaWMgbnVtYmVyOiAke21hZ2ljTnVtYmVyfWApO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlTGVuZ3RoID0gdGhpcy5yZWFkVUludDY0TEUoZGF0YSwgOCk7XG4gICAgY29uc3QgdGhpc0xlbmd0aCA9IHRoaXMucmVhZFVJbnQ2NExFKGRhdGEsIDE2KTtcbiAgICBjb25zdCBwYWNrZXROdW1iZXIgPSB0aGlzLnJlYWRVSW50NjRMRShkYXRhLCAyNCk7XG4gICAgY29uc3Qgb3BDb2RlID0gdGhpcy5yZWFkVUludDY0TEUoZGF0YSwgMzIpO1xuXG4gICAgY29uc3QgaGVhZGVyUGF5bG9hZCA9IGRhdGEuc2xpY2UoQUZDX1BBQ0tFVF9IRUFERVJfU0laRSwgdGhpc0xlbmd0aCk7XG4gICAgY29uc3QgY29udGVudCA9IGRhdGEuc2xpY2UodGhpc0xlbmd0aCwgbWVzc2FnZUxlbmd0aCk7XG5cbiAgICB0aGlzLnB1c2goeyBtZXNzYWdlTGVuZ3RoLCBwYWNrZXROdW1iZXIsIG9wQ29kZSwgaGVhZGVyUGF5bG9hZCwgY29udGVudCB9KTtcbiAgfVxuXG4gIHJlYWRVSW50NjRMRSAoYnVmZmVyLCBpbmRleCkge1xuICAgIC8vIElnbm9yZSB0aGUgZmlyc3QgNCBieXRlcyBzaW5jZSB3ZSBkb24ndCBkbyBhbnl0aGluZyB3aXRoIGxvbmdzXG4gICAgcmV0dXJuIGJ1ZmZlci5yZWFkVUludDMyTEUoaW5kZXgpO1xuICB9XG59XG5cbmV4cG9ydCB7IEFmY0RlY29kZXIgfTtcbmV4cG9ydCBkZWZhdWx0IEFmY0RlY29kZXI7Il0sImZpbGUiOiJsaWIvYWZjL3RyYW5zZm9ybWVyL2FmY2RlY29kZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
