"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SIMULATE_LOCATION_SERVICE_NAME = exports.SimulateLocationService = void 0;

require("source-map-support/register");

const SIMULATE_LOCATION_SERVICE_NAME = 'com.apple.dt.simulatelocation';
exports.SIMULATE_LOCATION_SERVICE_NAME = SIMULATE_LOCATION_SERVICE_NAME;
const RESET_MESSAGE = Buffer.from([0, 0, 0, 1]);
const SET_LOCATION_MESSAGE = Buffer.from([0, 0, 0, 0]);

class SimulateLocationService {
  constructor(socketClient) {
    this._socketClient = socketClient;
  }

  resetLocation() {
    this._socketClient.write(RESET_MESSAGE);
  }

  setLocation(lat, long) {
    lat = `${lat}`;
    long = `${long}`;
    const lat_length = Buffer.alloc(4);
    lat_length.writeInt32BE(lat.length);
    const long_length = Buffer.alloc(4);
    long_length.writeInt32BE(long.length);

    this._socketClient.write(SET_LOCATION_MESSAGE);

    this._socketClient.write(lat_length);

    this._socketClient.write(lat);

    this._socketClient.write(long_length);

    this._socketClient.write(long);
  }

  close() {
    this._socketClient.destroy();
  }

}

exports.SimulateLocationService = SimulateLocationService;
var _default = SimulateLocationService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0ZWxvY2F0aW9uL2luZGV4LmpzIl0sIm5hbWVzIjpbIlNJTVVMQVRFX0xPQ0FUSU9OX1NFUlZJQ0VfTkFNRSIsIlJFU0VUX01FU1NBR0UiLCJCdWZmZXIiLCJmcm9tIiwiU0VUX0xPQ0FUSU9OX01FU1NBR0UiLCJTaW11bGF0ZUxvY2F0aW9uU2VydmljZSIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiX3NvY2tldENsaWVudCIsInJlc2V0TG9jYXRpb24iLCJ3cml0ZSIsInNldExvY2F0aW9uIiwibGF0IiwibG9uZyIsImxhdF9sZW5ndGgiLCJhbGxvYyIsIndyaXRlSW50MzJCRSIsImxlbmd0aCIsImxvbmdfbGVuZ3RoIiwiY2xvc2UiLCJkZXN0cm95Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFNQSw4QkFBOEIsR0FBRywrQkFBdkM7O0FBRUEsTUFBTUMsYUFBYSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBWixDQUF0QjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHRixNQUFNLENBQUNDLElBQVAsQ0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBWixDQUE3Qjs7QUFFQSxNQUFNRSx1QkFBTixDQUE4QjtBQUU1QkMsRUFBQUEsV0FBVyxDQUFFQyxZQUFGLEVBQWdCO0FBQ3pCLFNBQUtDLGFBQUwsR0FBcUJELFlBQXJCO0FBQ0Q7O0FBSURFLEVBQUFBLGFBQWEsR0FBSTtBQUNmLFNBQUtELGFBQUwsQ0FBbUJFLEtBQW5CLENBQXlCVCxhQUF6QjtBQUNEOztBQU9EVSxFQUFBQSxXQUFXLENBQUVDLEdBQUYsRUFBT0MsSUFBUCxFQUFhO0FBQ3RCRCxJQUFBQSxHQUFHLEdBQUksR0FBRUEsR0FBSSxFQUFiO0FBQ0FDLElBQUFBLElBQUksR0FBSSxHQUFFQSxJQUFLLEVBQWY7QUFFQSxVQUFNQyxVQUFVLEdBQUdaLE1BQU0sQ0FBQ2EsS0FBUCxDQUFhLENBQWIsQ0FBbkI7QUFDQUQsSUFBQUEsVUFBVSxDQUFDRSxZQUFYLENBQXdCSixHQUFHLENBQUNLLE1BQTVCO0FBRUEsVUFBTUMsV0FBVyxHQUFHaEIsTUFBTSxDQUFDYSxLQUFQLENBQWEsQ0FBYixDQUFwQjtBQUNBRyxJQUFBQSxXQUFXLENBQUNGLFlBQVosQ0FBeUJILElBQUksQ0FBQ0ksTUFBOUI7O0FBRUEsU0FBS1QsYUFBTCxDQUFtQkUsS0FBbkIsQ0FBeUJOLG9CQUF6Qjs7QUFFQSxTQUFLSSxhQUFMLENBQW1CRSxLQUFuQixDQUF5QkksVUFBekI7O0FBQ0EsU0FBS04sYUFBTCxDQUFtQkUsS0FBbkIsQ0FBeUJFLEdBQXpCOztBQUVBLFNBQUtKLGFBQUwsQ0FBbUJFLEtBQW5CLENBQXlCUSxXQUF6Qjs7QUFDQSxTQUFLVixhQUFMLENBQW1CRSxLQUFuQixDQUF5QkcsSUFBekI7QUFDRDs7QUFLRE0sRUFBQUEsS0FBSyxHQUFJO0FBQ1AsU0FBS1gsYUFBTCxDQUFtQlksT0FBbkI7QUFDRDs7QUF6QzJCOzs7ZUE4Q2ZmLHVCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU0lNVUxBVEVfTE9DQVRJT05fU0VSVklDRV9OQU1FID0gJ2NvbS5hcHBsZS5kdC5zaW11bGF0ZWxvY2F0aW9uJztcblxuY29uc3QgUkVTRVRfTUVTU0FHRSA9IEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAxXSk7XG5jb25zdCBTRVRfTE9DQVRJT05fTUVTU0FHRSA9IEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAwXSk7XG5cbmNsYXNzIFNpbXVsYXRlTG9jYXRpb25TZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvciAoc29ja2V0Q2xpZW50KSB7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50ID0gc29ja2V0Q2xpZW50O1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgbW9jayBsb2NhdGlvbiB0byB0aGUgcGhvbmVzIG9yaWdpbmFsIHNldHRpbmdzXG4gICAqL1xuICByZXNldExvY2F0aW9uICgpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQud3JpdGUoUkVTRVRfTUVTU0FHRSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBtb2NrIGxvY2F0aW9uIG9uIHRoZSBkZXZpY2VcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsYXQgVGhlIGxhdGl0dWRlIHRoYXQgd2FudHMgdG8gYmUgc2V0IG9uIHRoZSBkZXZpY2VcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsb25nIFRoZSBsb25naXR1ZGUgdGhhdCB3YW50cyB0byBiZSBzZXQgb24gdGhlIGRldmljZVxuICAgKi9cbiAgc2V0TG9jYXRpb24gKGxhdCwgbG9uZykge1xuICAgIGxhdCA9IGAke2xhdH1gO1xuICAgIGxvbmcgPSBgJHtsb25nfWA7XG5cbiAgICBjb25zdCBsYXRfbGVuZ3RoID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgIGxhdF9sZW5ndGgud3JpdGVJbnQzMkJFKGxhdC5sZW5ndGgpO1xuXG4gICAgY29uc3QgbG9uZ19sZW5ndGggPSBCdWZmZXIuYWxsb2MoNCk7XG4gICAgbG9uZ19sZW5ndGgud3JpdGVJbnQzMkJFKGxvbmcubGVuZ3RoKTtcblxuICAgIHRoaXMuX3NvY2tldENsaWVudC53cml0ZShTRVRfTE9DQVRJT05fTUVTU0FHRSk7XG5cbiAgICB0aGlzLl9zb2NrZXRDbGllbnQud3JpdGUobGF0X2xlbmd0aCk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LndyaXRlKGxhdCk7XG5cbiAgICB0aGlzLl9zb2NrZXRDbGllbnQud3JpdGUobG9uZ19sZW5ndGgpO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC53cml0ZShsb25nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHVuZGVybHlpbmcgc29ja2V0IGNvbW11bmljYXRpbmcgd2l0aCB0aGUgcGhvbmVcbiAgICovXG4gIGNsb3NlICgpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgU2ltdWxhdGVMb2NhdGlvblNlcnZpY2UsIFNJTVVMQVRFX0xPQ0FUSU9OX1NFUlZJQ0VfTkFNRSB9O1xuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdGVMb2NhdGlvblNlcnZpY2U7Il0sImZpbGUiOiJsaWIvc2ltdWxhdGVsb2NhdGlvbi9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
