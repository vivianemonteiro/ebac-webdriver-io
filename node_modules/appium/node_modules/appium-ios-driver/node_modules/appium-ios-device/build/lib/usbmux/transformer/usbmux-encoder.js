"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UsbmuxEncoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _appiumSupport = require("appium-support");

const HEADER_LENGTH = 16;
const VERSION = 1;
const TYPE = 8;

class UsbmuxEncoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
    this.tag = 0;
  }

  _transform(data, encoding, callback) {
    this._encode(data);

    callback();
  }

  _encode(data) {
    let payloadBuffer = Buffer.from(_appiumSupport.plist.createPlist(data, false));
    let header = {
      length: HEADER_LENGTH + payloadBuffer.length,
      version: VERSION,
      type: TYPE,
      tag: this.tag++
    };
    let headerBuffer = Buffer.alloc(HEADER_LENGTH);
    headerBuffer.writeUInt32LE(header.length, 0);
    headerBuffer.writeUInt32LE(header.version, 4);
    headerBuffer.writeUInt32LE(header.type, 8);
    headerBuffer.writeUInt32LE(header.tag, 12);
    this.push(Buffer.concat([headerBuffer, payloadBuffer], headerBuffer.length + payloadBuffer.length));
  }

}

exports.UsbmuxEncoder = UsbmuxEncoder;
var _default = UsbmuxEncoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91c2JtdXgvdHJhbnNmb3JtZXIvdXNibXV4LWVuY29kZXIuanMiXSwibmFtZXMiOlsiSEVBREVSX0xFTkdUSCIsIlZFUlNJT04iLCJUWVBFIiwiVXNibXV4RW5jb2RlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwib2JqZWN0TW9kZSIsInRhZyIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsIl9lbmNvZGUiLCJwYXlsb2FkQnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsInBsaXN0IiwiY3JlYXRlUGxpc3QiLCJoZWFkZXIiLCJsZW5ndGgiLCJ2ZXJzaW9uIiwidHlwZSIsImhlYWRlckJ1ZmZlciIsImFsbG9jIiwid3JpdGVVSW50MzJMRSIsInB1c2giLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsYUFBYSxHQUFHLEVBQXRCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLENBQWhCO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLENBQWI7O0FBRUEsTUFBTUMsYUFBTixTQUE0QkMsZ0JBQU9DLFNBQW5DLENBQTZDO0FBQzNDQyxFQUFBQSxXQUFXLEdBQUk7QUFDYixVQUFNO0FBQUVDLE1BQUFBLFVBQVUsRUFBRTtBQUFkLEtBQU47QUFFQSxTQUFLQyxHQUFMLEdBQVcsQ0FBWDtBQUNEOztBQUVEQyxFQUFBQSxVQUFVLENBQUVDLElBQUYsRUFBUUMsUUFBUixFQUFrQkMsUUFBbEIsRUFBNEI7QUFDcEMsU0FBS0MsT0FBTCxDQUFhSCxJQUFiOztBQUNBRSxJQUFBQSxRQUFRO0FBQ1Q7O0FBRURDLEVBQUFBLE9BQU8sQ0FBRUgsSUFBRixFQUFRO0FBQ2IsUUFBSUksYUFBYSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUMscUJBQU1DLFdBQU4sQ0FBa0JSLElBQWxCLEVBQXdCLEtBQXhCLENBQVosQ0FBcEI7QUFFQSxRQUFJUyxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsTUFBTSxFQUFFcEIsYUFBYSxHQUFHYyxhQUFhLENBQUNNLE1BRDNCO0FBRVhDLE1BQUFBLE9BQU8sRUFBRXBCLE9BRkU7QUFHWHFCLE1BQUFBLElBQUksRUFBRXBCLElBSEs7QUFJWE0sTUFBQUEsR0FBRyxFQUFFLEtBQUtBLEdBQUw7QUFKTSxLQUFiO0FBT0EsUUFBSWUsWUFBWSxHQUFHUixNQUFNLENBQUNTLEtBQVAsQ0FBYXhCLGFBQWIsQ0FBbkI7QUFDQXVCLElBQUFBLFlBQVksQ0FBQ0UsYUFBYixDQUEyQk4sTUFBTSxDQUFDQyxNQUFsQyxFQUEwQyxDQUExQztBQUNBRyxJQUFBQSxZQUFZLENBQUNFLGFBQWIsQ0FBMkJOLE1BQU0sQ0FBQ0UsT0FBbEMsRUFBMkMsQ0FBM0M7QUFDQUUsSUFBQUEsWUFBWSxDQUFDRSxhQUFiLENBQTJCTixNQUFNLENBQUNHLElBQWxDLEVBQXdDLENBQXhDO0FBQ0FDLElBQUFBLFlBQVksQ0FBQ0UsYUFBYixDQUEyQk4sTUFBTSxDQUFDWCxHQUFsQyxFQUF1QyxFQUF2QztBQUVBLFNBQUtrQixJQUFMLENBQVVYLE1BQU0sQ0FBQ1ksTUFBUCxDQUFjLENBQUNKLFlBQUQsRUFBZVQsYUFBZixDQUFkLEVBQTZDUyxZQUFZLENBQUNILE1BQWIsR0FBc0JOLGFBQWEsQ0FBQ00sTUFBakYsQ0FBVjtBQUNEOztBQTdCMEM7OztlQWlDOUJqQixhIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzICovXG5pbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBwbGlzdCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuY29uc3QgSEVBREVSX0xFTkdUSCA9IDE2O1xuY29uc3QgVkVSU0lPTiA9IDE7XG5jb25zdCBUWVBFID0gODtcblxuY2xhc3MgVXNibXV4RW5jb2RlciBleHRlbmRzIFN0cmVhbS5UcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuXG4gICAgdGhpcy50YWcgPSAwO1xuICB9XG5cbiAgX3RyYW5zZm9ybSAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fZW5jb2RlKGRhdGEpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBfZW5jb2RlIChkYXRhKSB7XG4gICAgbGV0IHBheWxvYWRCdWZmZXIgPSBCdWZmZXIuZnJvbShwbGlzdC5jcmVhdGVQbGlzdChkYXRhLCBmYWxzZSkpO1xuXG4gICAgbGV0IGhlYWRlciA9IHtcbiAgICAgIGxlbmd0aDogSEVBREVSX0xFTkdUSCArIHBheWxvYWRCdWZmZXIubGVuZ3RoLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICAgIHR5cGU6IFRZUEUsXG4gICAgICB0YWc6IHRoaXMudGFnKytcbiAgICB9O1xuXG4gICAgbGV0IGhlYWRlckJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhIRUFERVJfTEVOR1RIKTtcbiAgICBoZWFkZXJCdWZmZXIud3JpdGVVSW50MzJMRShoZWFkZXIubGVuZ3RoLCAwKTtcbiAgICBoZWFkZXJCdWZmZXIud3JpdGVVSW50MzJMRShoZWFkZXIudmVyc2lvbiwgNCk7XG4gICAgaGVhZGVyQnVmZmVyLndyaXRlVUludDMyTEUoaGVhZGVyLnR5cGUsIDgpO1xuICAgIGhlYWRlckJ1ZmZlci53cml0ZVVJbnQzMkxFKGhlYWRlci50YWcsIDEyKTtcblxuICAgIHRoaXMucHVzaChCdWZmZXIuY29uY2F0KFtoZWFkZXJCdWZmZXIsIHBheWxvYWRCdWZmZXJdLCBoZWFkZXJCdWZmZXIubGVuZ3RoICsgcGF5bG9hZEJ1ZmZlci5sZW5ndGgpKTtcbiAgfVxufVxuXG5leHBvcnQgeyBVc2JtdXhFbmNvZGVyfTtcbmV4cG9ydCBkZWZhdWx0IFVzYm11eEVuY29kZXI7XG4iXSwiZmlsZSI6ImxpYi91c2JtdXgvdHJhbnNmb3JtZXIvdXNibXV4LWVuY29kZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
