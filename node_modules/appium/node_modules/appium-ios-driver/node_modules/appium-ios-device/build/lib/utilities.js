"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectedDevices = getConnectedDevices;
exports.getOSVersion = getOSVersion;
exports.getDeviceName = getDeviceName;
exports.getDeviceTime = getDeviceTime;
exports.startLockdownSession = startLockdownSession;
exports.connectPort = connectPort;
exports.connectPortSSL = connectPortSSL;

require("source-map-support/register");

var _usbmux = _interopRequireDefault(require("./usbmux"));

var _sslHelper = require("./ssl-helper");

var _lodash = _interopRequireDefault(require("lodash"));

const LOCKDOWN_REQUEST = {
  DEVICE_TIME: {
    Key: 'TimeIntervalSince1970'
  },
  DEVICE_UTC_OFFSET: {
    Key: 'TimeZoneOffsetFromUTC'
  },
  DEVICE_VERSION: {
    Key: 'ProductVersion'
  },
  DEVICE_NAME: {
    Key: 'DeviceName'
  }
};

async function getConnectedDevices(socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const devices = await usbmux.listDevices();
    const udids = devices.map(device => device.Properties.SerialNumber);
    return _lodash.default.uniq(udids);
  } finally {
    usbmux.close();
  }
}

async function getOSVersion(udid, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const lockdown = await usbmux.connectLockdown(udid);
    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_VERSION);
  } finally {
    usbmux.close();
  }
}

async function getDeviceName(udid, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const lockdown = await usbmux.connectLockdown(udid);
    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_NAME);
  } finally {
    usbmux.close();
  }
}

async function getDeviceTime(udid, socket) {
  const lockdown = await startLockdownSession(udid, socket);

  try {
    const timestamp = await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_TIME);
    const utcOffset = (await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_UTC_OFFSET)) / 60;
    return {
      timestamp,
      utcOffset
    };
  } finally {
    lockdown.close();
  }
}

async function startLockdownSession(udid, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const pairRecord = await usbmux.readPairRecord(udid);

    if (!pairRecord) {
      throw new Error(`Couldn't find a pair record for device ${udid}. Please first pair with the device`);
    }

    const lockdown = await usbmux.connectLockdown(udid);
    await lockdown.startSession(pairRecord.HostID, pairRecord.SystemBUID);
    lockdown.enableSessionSSL(pairRecord.HostPrivateKey, pairRecord.HostCertificate);
    return lockdown;
  } catch (e) {
    usbmux.close();
    throw e;
  }
}

async function connectPortSSL(udid, port, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const device = await usbmux.findDevice(udid);

    if (!device) {
      throw new Error(`Couldn't find the expected device ${udid}`);
    }

    const pairRecord = await usbmux.readPairRecord(udid);

    if (!pairRecord) {
      throw new Error(`Couldn't find a pair record for device ${udid}. Please first pair with the device`);
    }

    const socket = await usbmux.connect(device.Properties.DeviceID, port);
    return (0, _sslHelper.upgradeToSSL)(socket, pairRecord.HostPrivateKey, pairRecord.HostCertificate);
  } catch (e) {
    usbmux.close();
    throw e;
  }
}

async function connectPort(udid, port, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const device = await usbmux.findDevice(udid);

    if (!device) {
      throw new Error(`Couldn't find the expected device ${udid}`);
    }

    return await usbmux.connect(device.Properties.DeviceID, port);
  } catch (e) {
    usbmux.close();
    throw e;
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlsaXRpZXMuanMiXSwibmFtZXMiOlsiTE9DS0RPV05fUkVRVUVTVCIsIkRFVklDRV9USU1FIiwiS2V5IiwiREVWSUNFX1VUQ19PRkZTRVQiLCJERVZJQ0VfVkVSU0lPTiIsIkRFVklDRV9OQU1FIiwiZ2V0Q29ubmVjdGVkRGV2aWNlcyIsInNvY2tldCIsInVzYm11eCIsIlVzYm11eCIsImRldmljZXMiLCJsaXN0RGV2aWNlcyIsInVkaWRzIiwibWFwIiwiZGV2aWNlIiwiUHJvcGVydGllcyIsIlNlcmlhbE51bWJlciIsIl8iLCJ1bmlxIiwiY2xvc2UiLCJnZXRPU1ZlcnNpb24iLCJ1ZGlkIiwibG9ja2Rvd24iLCJjb25uZWN0TG9ja2Rvd24iLCJnZXRWYWx1ZSIsImdldERldmljZU5hbWUiLCJnZXREZXZpY2VUaW1lIiwic3RhcnRMb2NrZG93blNlc3Npb24iLCJ0aW1lc3RhbXAiLCJ1dGNPZmZzZXQiLCJwYWlyUmVjb3JkIiwicmVhZFBhaXJSZWNvcmQiLCJFcnJvciIsInN0YXJ0U2Vzc2lvbiIsIkhvc3RJRCIsIlN5c3RlbUJVSUQiLCJlbmFibGVTZXNzaW9uU1NMIiwiSG9zdFByaXZhdGVLZXkiLCJIb3N0Q2VydGlmaWNhdGUiLCJlIiwiY29ubmVjdFBvcnRTU0wiLCJwb3J0IiwiZmluZERldmljZSIsImNvbm5lY3QiLCJEZXZpY2VJRCIsImNvbm5lY3RQb3J0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGdCQUFnQixHQUFHO0FBQ3ZCQyxFQUFBQSxXQUFXLEVBQUU7QUFBRUMsSUFBQUEsR0FBRyxFQUFFO0FBQVAsR0FEVTtBQUV2QkMsRUFBQUEsaUJBQWlCLEVBQUU7QUFBRUQsSUFBQUEsR0FBRyxFQUFFO0FBQVAsR0FGSTtBQUd2QkUsRUFBQUEsY0FBYyxFQUFFO0FBQUVGLElBQUFBLEdBQUcsRUFBRTtBQUFQLEdBSE87QUFJdkJHLEVBQUFBLFdBQVcsRUFBRTtBQUFFSCxJ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LE1BQVgsQ0FBZjs7QUFDQSxNQUFJO0FBQ0YsVUFBTU8sTUFBTSxHQUFHLE1BQU1OLE1BQU0sQ0FBQ2tDLFVBQVAsQ0FBa0JyQixJQUFsQixDQUFyQjs7QUFDQSxRQUFJLENBQUNQLE1BQUwsRUFBYTtBQUNYLFlBQU0sSUFBSWtCLEtBQUosQ0FBVyxxQ0FBb0NYLElBQUssRUFBcEQsQ0FBTjtBQUNEOztBQUNELFdBQU8sTUFBTWIsTUFBTSxDQUFDbUMsT0FBUCxDQUFlN0IsTUFBTSxDQUFDQyxVQUFQLENBQWtCNkIsUUFBakMsRUFBMkNILElBQTNDLENBQWI7QUFDRCxHQU5ELENBTUUsT0FBT0YsQ0FBUCxFQUFVO0FBQ1YvQixJQUFBQSxNQUFNLENBQUNXLEtBQVA7QUFDQSxVQUFNb0IsQ0FBTjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVXNibXV4IGZyb20gJy4vdXNibXV4JztcbmltcG9ydCB7IHVwZ3JhZGVUb1NTTCB9IGZyb20gJy4vc3NsLWhlbHBlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBMT0NLRE9XTl9SRVFVRVNUID0ge1xuICBERVZJQ0VfVElNRTogeyBLZXk6ICdUaW1lSW50ZXJ2YWxTaW5jZTE5NzAnIH0sXG4gIERFVklDRV9VVENfT0ZGU0VUOiB7IEtleTogJ1RpbWVab25lT2Zmc2V0RnJvbVVUQycgfSxcbiAgREVWSUNFX1ZFUlNJT046IHsgS2V5OiAnUHJvZHVjdFZlcnNpb24nIH0sXG4gIERFVklDRV9OQU1FOiB7IEtleTogJ0RldmljZU5hbWUnIH1cbn07XG5cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIHVkaWRzIG9mIHRoZSBjb25uZWN0ZWQgZGV2aWNlc1xuICpcbiAqIEBwYXJhbSB7P25ldC5Tb2NrZXR9IHNvY2tldCB0aGUgc29ja2V0IG9mIHVzYm11eGQuIEl0IHdpbGwgZGVmYXVsdCB0byAvdmFyL3J1bi91c2JtdXhkIGlmIGl0IGlzIG5vdCBwYXNzZWRcbiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q29ubmVjdGVkRGV2aWNlcyAoc29ja2V0KSB7XG4gIGNvbnN0IHVzYm11eCA9IG5ldyBVc2JtdXgoc29ja2V0KTtcbiAgdHJ5IHtcbiAgICBjb25zdCBkZXZpY2VzID0gYXdhaXQgdXNibXV4Lmxpc3REZXZpY2VzKCk7XG4gICAgY29uc3QgdWRpZHMgPSBkZXZpY2VzLm1hcCgoZGV2aWNlKSA9PiBkZXZpY2UuUHJvcGVydGllcy5TZXJpYWxOdW1iZXIpO1xuICAgIHJldHVybiBfLnVuaXEodWRpZHMpO1xuICB9IGZpbmFsbHkge1xuICAgIHVzYm11eC5jbG9zZSgpO1xuICB9XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBvcyB2ZXJzaW9uIG9mIHRoZSBkZXZpY2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdWRpZCBEZXZpY2UgVURJRFxuICogQHBhcmFtIHs/bmV0LlNvY2tldH0gc29ja2V0IHRoZSBzb2NrZXQgb2YgdXNibXV4ZC4gSXQgd2lsbCBkZWZhdWx0IHRvIC92YXIvcnVuL3VzYm11eGQgaWYgaXQgaXMgbm90IHBhc3NlZFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0T1NWZXJzaW9uICh1ZGlkLCBzb2NrZXQpIHtcbiAgY29uc3QgdXNibXV4ID0gbmV3IFVzYm11eChzb2NrZXQpO1xuICB0cnkge1xuICAgIC8vIGxvY2tkb3duIGRvZXNuJ3QgbmVlZCB0byBiZSBjbG9zZWQgc2luY2UgaXQgdXNlcyB0aGUgc2FtZSBzb2NrZXQgdXNibXV4IHVzZXNcbiAgICBjb25zdCBsb2NrZG93biA9IGF3YWl0IHVzYm11eC5jb25uZWN0TG9ja2Rvd24odWRpZCk7XG4gICAgcmV0dXJuIGF3YWl0IGxvY2tkb3duLmdldFZhbHVlKExPQ0tET1dOX1JFUVVFU1QuREVWSUNFX1ZFUlNJT04pO1xuICB9IGZpbmFsbHkge1xuICAgIHVzYm11eC5jbG9zZSgpO1xuICB9XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBuYW1lIG9mIHRoZSBkZXZpY2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdWRpZCBEZXZpY2UgVURJRFxuICogQHBhcmFtIHs/bmV0LlNvY2tldH0gc29ja2V0IHRoZSBzb2NrZXQgb2YgdXNibXV4ZC4gSXQgd2lsbCBkZWZhdWx0IHRvIC92YXIvcnVuL3VzYm11eGQgaWYgaXQgaXMgbm90IHBhc3NlZFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0RGV2aWNlTmFtZSAodWRpZCwgc29ja2V0KSB7XG4gIGNvbnN0IHVzYm11eCA9IG5ldyBVc2JtdXgoc29ja2V0KTtcbiAgdHJ5IHtcbiAgICAvLyBsb2NrZG93biBkb2Vzbid0IG5lZWQgdG8gYmUgY2xvc2VkIHNpbmNlIGl0IHVzZXMgdGhlIHNhbWUgc29ja2V0IHVzYm11eCB1c2VzXG4gICAgY29uc3QgbG9ja2Rvd24gPSBhd2FpdCB1c2JtdXguY29ubmVjdExvY2tkb3duKHVkaWQpO1xuICAgIHJldHVybiBhd2FpdCBsb2NrZG93bi5nZXRWYWx1ZShMT0NLRE9XTl9SRVFVRVNULkRFVklDRV9OQU1FKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB1c2JtdXguY2xvc2UoKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IERldmljZVRpbWVcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGltZXN0YW1wIFVuaXggdGltZXN0YW1wIGluIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1dGNPZmZzZXQgVGhlIGRpZmZlcmVuY2UgaW4gc2Vjb25kcyBiZXR3ZWVuIHRoZSBVVEMgdGltZSBhbmQgdGhlIGxvY2FsIGRldmljZSB0aW1lLlxuICogQ2FuIGJlIG5lZ2F0aXZlLlxuICovXG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBsb2NhbCB0aW1lIGZyb20gdGhlIGRldmljZSB1bmRlciB0ZXN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgRGV2aWNlIFVESURcbiAqIEBwYXJhbSB7P25ldC5Tb2NrZXR9IHNvY2tldCB0aGUgc29ja2V0IG9mIHVzYm11eGQuIEl0IHdpbGwgZGVmYXVsdCB0byAvdmFyL3J1bi91c2JtdXhkIGlmIGl0IGlzIG5vdCBwYXNzZWRcbiAqIEByZXR1cm5zIHtEZXZpY2VUaW1lfVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXREZXZpY2VUaW1lICh1ZGlkLCBzb2NrZXQpIHtcbiAgY29uc3QgbG9ja2Rvd24gPSBhd2FpdCBzdGFydExvY2tkb3duU2Vzc2lvbih1ZGlkLCBzb2NrZXQpO1xuICB0cnkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IGF3YWl0IGxvY2tkb3duLmdldFZhbHVlKExPQ0tET1dOX1JFUVVFU1QuREVWSUNFX1RJTUUpO1xuICAgIC8vIEFwcGxlIHJldHVybnMgdXRjT2Zmc2V0IGluIHNlY29uZHMgd2hpY2ggZG9lc250IGNvbXBseSB3aXRoIHRoZSBnZW5lcmFsIHN0YW5kYXJkXG4gICAgY29uc3QgdXRjT2Zmc2V0ID0gYXdhaXQgbG9ja2Rvd24uZ2V0VmFsdWUoTE9DS0RPV05fUkVRVUVTVC5ERVZJQ0VfVVRDX09GRlNFVCkgLyA2MDtcbiAgICByZXR1cm4ge1xuICAgICAgdGltZXN0YW1wLFxuICAgICAgdXRjT2Zmc2V0LFxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgbG9ja2Rvd24uY2xvc2UoKTtcbiAgfVxufVxuXG4vKipcbiAqIFN0YXJ0cyBhIGxvY2tkb3duIHNlc3Npb24gb24gdGhlIGdpdmVuIGRldmljZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIERldmljZSBVRElEXG4gKiBAcGFyYW0gez9uZXQuU29ja2V0fSBzb2NrZXQgdGhlIHNvY2tldCBvZiB1c2JtdXhkLiBJdCB3aWxsIGRlZmF1bHQgdG8gL3Zhci9ydW4vdXNibXV4ZCBpZiBpdCBpcyBub3QgcGFzc2VkXG4gKiBAcmV0dXJucyB7TG9ja2Rvd259XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0TG9ja2Rvd25TZXNzaW9uICh1ZGlkLCBzb2NrZXQpIHtcbiAgY29uc3QgdXNibXV4ID0gbmV3IFVzYm11eChzb2NrZXQpO1xuICB0cnkge1xuICAgIGNvbnN0IHBhaXJSZWNvcmQgPSBhd2FpdCB1c2JtdXgucmVhZFBhaXJSZWNvcmQodWRpZCk7XG4gICAgaWYgKCFwYWlyUmVjb3JkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkbid0IGZpbmQgYSBwYWlyIHJlY29yZCBmb3IgZGV2aWNlICR7dWRpZH0uIFBsZWFzZSBmaXJzdCBwYWlyIHdpdGggdGhlIGRldmljZWApO1xuICAgIH1cbiAgICAvLyBsb2NrZG93biBkb2Vzbid0IG5lZWQgdG8gYmUgY2xvc2VkIHNpbmNlIGl0IHVzZXMgdGhlIHNhbWUgc29ja2V0IHVzYm11eCB1c2VzXG4gICAgY29uc3QgbG9ja2Rvd24gPSBhd2FpdCB1c2JtdXguY29ubmVjdExvY2tkb3duKHVkaWQpO1xuICAgIGF3YWl0IGxvY2tkb3duLnN0YXJ0U2Vzc2lvbihwYWlyUmVjb3JkLkhvc3RJRCwgcGFpclJlY29yZC5TeXN0ZW1CVUlEKTtcbiAgICBsb2NrZG93bi5lbmFibGVTZXNzaW9uU1NMKHBhaXJSZWNvcmQuSG9zdFByaXZhdGVLZXksIHBhaXJSZWNvcmQuSG9zdENlcnRpZmljYXRlKTtcbiAgICByZXR1cm4gbG9ja2Rvd247XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1c2JtdXguY2xvc2UoKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbi8qKlxuICogQ29ubmVjdHMgdG8gYSBnaXZlbiBwb3J0IHdpdGggdGhlIGNlcnRzIGFuZCBrZXlzIHVzZWQgaW4gdGhlIHBhaXJpbmcgcHJvY2Vzc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIERldmljZSBVRElEXG4gKiBAcGFyYW0ge251bWJlcn0gcG9ydCBQb3J0IHRvIGNvbm5lY3RcbiAqIEBwYXJhbSB7P25ldC5Tb2NrZXR9IHNvY2tldCB0aGUgc29ja2V0IG9mIHVzYm11eGQuIEl0IHdpbGwgZGVmYXVsdCB0byAvdmFyL3J1bi91c2JtdXhkIGlmIGl0IGlzIG5vdCBwYXNzZWRcbiAqIEByZXR1cm5zIHt0bHMuVExTU29ja2V0fVxuICovXG5hc3luYyBmdW5jdGlvbiBjb25uZWN0UG9ydFNTTCAodWRpZCwgcG9ydCwgc29ja2V0KSB7XG4gIGNvbnN0IHVzYm11eCA9IG5ldyBVc2JtdXgoc29ja2V0KTtcbiAgdHJ5IHtcbiAgICBjb25zdCBkZXZpY2UgPSBhd2FpdCB1c2JtdXguZmluZERldmljZSh1ZGlkKTtcbiAgICBpZiAoIWRldmljZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBmaW5kIHRoZSBleHBlY3RlZCBkZXZpY2UgJHt1ZGlkfWApO1xuICAgIH1cbiAgICBjb25zdCBwYWlyUmVjb3JkID0gYXdhaXQgdXNibXV4LnJlYWRQYWlyUmVjb3JkKHVkaWQpO1xuICAgIGlmICghcGFpclJlY29yZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBmaW5kIGEgcGFpciByZWNvcmQgZm9yIGRldmljZSAke3VkaWR9LiBQbGVhc2UgZmlyc3QgcGFpciB3aXRoIHRoZSBkZXZpY2VgKTtcbiAgICB9XG4gICAgY29uc3Qgc29ja2V0ID0gYXdhaXQgdXNibXV4LmNvbm5lY3QoZGV2aWNlLlByb3BlcnRpZXMuRGV2aWNlSUQsIHBvcnQpO1xuICAgIHJldHVybiB1cGdyYWRlVG9TU0woc29ja2V0LCBwYWlyUmVjb3JkLkhvc3RQcml2YXRlS2V5LCBwYWlyUmVjb3JkLkhvc3RDZXJ0aWZpY2F0ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1c2JtdXguY2xvc2UoKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbi8qKlxuICogQ29ubmVjdHMgdG8gYSBnaXZlbiBwb3J0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgRGV2aWNlIFVESURcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3J0IFBvcnQgdG8gY29ubmVjdFxuICogQHBhcmFtIHs/bmV0LlNvY2tldH0gc29ja2V0IHRoZSBzb2NrZXQgb2YgdXNibXV4ZC4gSXQgd2lsbCBkZWZhdWx0IHRvIC92YXIvcnVuL3VzYm11eGQgaWYgaXQgaXMgbm90IHBhc3NlZFxuICogQHJldHVybnMge25ldC5Tb2NrZXR9XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RQb3J0ICh1ZGlkLCBwb3J0LCBzb2NrZXQpIHtcbiAgY29uc3QgdXNibXV4ID0gbmV3IFVzYm11eChzb2NrZXQpO1xuICB0cnkge1xuICAgIGNvbnN0IGRldmljZSA9IGF3YWl0IHVzYm11eC5maW5kRGV2aWNlKHVkaWQpO1xuICAgIGlmICghZGV2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkbid0IGZpbmQgdGhlIGV4cGVjdGVkIGRldmljZSAke3VkaWR9YCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB1c2JtdXguY29ubmVjdChkZXZpY2UuUHJvcGVydGllcy5EZXZpY2VJRCwgcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1c2JtdXguY2xvc2UoKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGdldENvbm5lY3RlZERldmljZXMsIGdldE9TVmVyc2lvbiwgZ2V0RGV2aWNlTmFtZSwgZ2V0RGV2aWNlVGltZSxcbiAgc3RhcnRMb2NrZG93blNlc3Npb24sIGNvbm5lY3RQb3J0LCBjb25uZWN0UG9ydFNTTCxcbn07XG4iXSwiZmlsZSI6ImxpYi91dGlsaXRpZXMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
