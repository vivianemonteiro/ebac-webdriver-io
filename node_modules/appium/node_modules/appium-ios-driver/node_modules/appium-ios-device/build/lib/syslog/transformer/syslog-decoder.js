"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SyslogDecoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

const NEW_LINE_CODE = 0x0A;
const NULL_DELIMETER_CODE = 0x00;

class SyslogDecoder extends _stream.default.Transform {
  constructor(bufferLength) {
    super({
      objectMode: true
    });
    this.bufferIndex = 0;
    this.buffer = Buffer.allocUnsafe(bufferLength);
  }

  _transform(data, encoding, callback) {
    this._decode(data);

    callback();
  }

  _decode(data) {
    for (let i = 0; i < data.length; i++) {
      if (data[i] === NULL_DELIMETER_CODE) {
        continue;
      }

      if (data[i] === NEW_LINE_CODE) {
        if (this.bufferIndex !== 0) {
          const stringBuffer = Buffer.allocUnsafe(this.bufferIndex);
          this.buffer.copy(stringBuffer, 0, 0, this.bufferIndex);
          this.push(stringBuffer.toString('utf8'), 'utf8');
          this.bufferIndex = 0;
        }

        continue;
      }

      this.buffer[this.bufferIndex] = data[i];
      this.bufferIndex++;
    }
  }

}

exports.SyslogDecoder = SyslogDecoder;
var _default = SyslogDecoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zeXNsb2cvdHJhbnNmb3JtZXIvc3lzbG9nLWRlY29kZXIuanMiXSwibmFtZXMiOlsiTkVXX0xJTkVfQ09ERSIsIk5VTExfREVMSU1FVEVSX0NPREUiLCJTeXNsb2dEZWNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJidWZmZXJMZW5ndGgiLCJvYmplY3RNb2RlIiwiYnVmZmVySW5kZXgiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsIl9kZWNvZGUiLCJpIiwibGVuZ3RoIiwic3RyaW5nQnVmZmVyIiwiY29weSIsInB1c2giLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFFQSxNQUFNQSxhQUFhLEdBQUcsSUFBdEI7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxJQUE1Qjs7QUFFQSxNQUFNQyxhQUFOLFNBQTRCQyxnQkFBT0MsU0FBbkMsQ0FBNkM7QUFFM0NDLEVBQUFBLFdBQVcsQ0FBRUMsWUFBRixFQUFnQjtBQUN6QixVQUFNO0FBQUVDLE1BQUFBLFVBQVUsRUFBRTtBQUFkLEtBQU47QUFDQSxTQUFLQyxXQUFMLEdBQW1CLENBQW5CO0FBQ0EsU0FBS0MsTUFBTCxHQUFjQyxNQUFNLENBQUNDLFdBQVAsQ0FBbUJMLFlBQW5CLENBQWQ7QUFDRDs7QUFFRE0sRUFBQUEsVUFBVSxDQUFFQyxJQUFGLEVBQVFDLFFBQVIsRUFBa0JDLFFBQWxCLEVBQTRCO0FBQ3BDLFNBQUtDLE9BQUwsQ0FBYUgsSUFBYjs7QUFDQUUsSUFBQUEsUUFBUTtBQUNUOztBQUVEQyxFQUFBQSxPQUFPLENBQUVILElBQUYsRUFBUTtBQUNiLFNBQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osSUFBSSxDQUFDSyxNQUF6QixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUVwQyxVQUFJSixJQUFJLENBQUNJLENBQUQsQ0FBSixLQUFZaEIsbUJBQWhCLEVBQXFDO0FBQ25DO0FBQ0Q7O0FBRUQsVUFBSVksSUFBSSxDQUFDSSxDQUFELENBQUosS0FBWWpCLGFBQWhCLEVBQStCO0FBQzdCLFlBQUksS0FBS1EsV0FBTCxLQUFxQixDQUF6QixFQUE0QjtBQUMxQixnQkFBTVcsWUFBWSxHQUFHVCxNQUFNLENBQUNDLFdBQVAsQ0FBbUIsS0FBS0gsV0FBeEIsQ0FBckI7QUFDQSxlQUFLQyxNQUFMLENBQVlXLElBQVosQ0FBaUJELFlBQWpCLEVBQStCLENBQS9CLEVBQWtDLENBQWxDLEVBQXFDLEtBQUtYLFdBQTFDO0FBQ0EsZUFBS2EsSUFBTCxDQUFVRixZQUFZLENBQUNHLFFBQWIsQ0FBc0IsTUFBdEIsQ0FBVixFQUF5QyxNQUF6QztBQUNBLGVBQUtkLFdBQUwsR0FBbUIsQ0FBbkI7QUFDRDs7QUFDRDtBQUNEOztBQUNELFdBQUtDLE1BQUwsQ0FBWSxLQUFLRCxXQUFqQixJQUFnQ0ssSUFBSSxDQUFDSSxDQUFELENBQXBDO0FBQ0EsV0FBS1QsV0FBTDtBQUNEO0FBQ0Y7O0FBaEMwQzs7O2VBb0M5Qk4sYSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrcyAqL1xuaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuXG5jb25zdCBORVdfTElORV9DT0RFID0gMHgwQTtcbmNvbnN0IE5VTExfREVMSU1FVEVSX0NPREUgPSAweDAwO1xuXG5jbGFzcyBTeXNsb2dEZWNvZGVyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IgKGJ1ZmZlckxlbmd0aCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgICB0aGlzLmJ1ZmZlckluZGV4ID0gMDtcbiAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShidWZmZXJMZW5ndGgpO1xuICB9XG5cbiAgX3RyYW5zZm9ybSAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fZGVjb2RlKGRhdGEpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBfZGVjb2RlIChkYXRhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgbnVsbCBkZWxpbWV0ZXIgbWVzc2FnZXNcbiAgICAgIGlmIChkYXRhW2ldID09PSBOVUxMX0RFTElNRVRFUl9DT0RFKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gUHVzaCB0aGUgZGF0YSB3aGVuIG5ldyBsaW5lIGlzIHNlbnRcbiAgICAgIGlmIChkYXRhW2ldID09PSBORVdfTElORV9DT0RFKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlckluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgY29uc3Qgc3RyaW5nQnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRoaXMuYnVmZmVySW5kZXgpO1xuICAgICAgICAgIHRoaXMuYnVmZmVyLmNvcHkoc3RyaW5nQnVmZmVyLCAwLCAwLCB0aGlzLmJ1ZmZlckluZGV4KTtcbiAgICAgICAgICB0aGlzLnB1c2goc3RyaW5nQnVmZmVyLnRvU3RyaW5nKCd1dGY4JyksICd1dGY4Jyk7XG4gICAgICAgICAgdGhpcy5idWZmZXJJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlckluZGV4XSA9IGRhdGFbaV07XG4gICAgICB0aGlzLmJ1ZmZlckluZGV4Kys7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFN5c2xvZ0RlY29kZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFN5c2xvZ0RlY29kZXI7XG4iXSwiZmlsZSI6ImxpYi9zeXNsb2cvdHJhbnNmb3JtZXIvc3lzbG9nLWRlY29kZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
