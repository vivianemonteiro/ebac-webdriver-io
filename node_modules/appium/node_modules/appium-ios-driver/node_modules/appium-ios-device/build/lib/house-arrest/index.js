"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HOUSE_ARREST_SERVICE_NAME = exports.HouseArrestService = void 0;

require("source-map-support/register");

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _constants = require("../constants");

var _afc = _interopRequireDefault(require("../afc"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const HOUSE_ARREST_SERVICE_NAME = 'com.apple.mobile.house_arrest';
exports.HOUSE_ARREST_SERVICE_NAME = HOUSE_ARREST_SERVICE_NAME;

class HouseArrestService {
  constructor(socketClient) {
    this._socketClient = socketClient;
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default(false, _constants.KB, 0, 4, 4);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);
  }

  async vendContainer(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendContainer',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application container. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  async vendDocuments(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendDocuments',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application documents. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  _receivePlistPromise(timeout = 10000) {
    return new _bluebird.default((resolve, reject) => {
      this._decoder.once('data', resolve);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
  }

  close() {
    this._socketClient.destroy();
  }

}

exports.HouseArrestService = HouseArrestService;
var _default = HouseArrestService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ob3VzZS1hcnJlc3QvaW5kZXguanMiXSwibmFtZXMiOlsiSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSIsIkhvdXNlQXJyZXN0U2VydmljZSIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiX3NvY2tldENsaWVudCIsIl9kZWNvZGVyIiwiUGxpc3RTZXJ2aWNlRGVjb2RlciIsIl9zcGxpdHRlciIsIkxlbmd0aEJhc2VkU3BsaXR0ZXIiLCJLQiIsInBpcGUiLCJfZW5jb2RlciIsIlBsaXN0U2VydmljZUVuY29kZXIiLCJ2ZW5kQ29udGFpbmVyIiwiYnVuZGxlSWQiLCJyZXNwb25zZVByb21pc2UiLCJfcmVjZWl2ZVBsaXN0UHJvbWlzZSIsIndyaXRlIiwiQ29tbWFuZCIsIklkZW50aWZpZXIiLCJyZXNwb25zZSIsIlN0YXR1cyIsIkVycm9yIiwidW5waXBlIiwiQWZjU2VydmljZSIsInZlbmREb2N1bWVudHMiLCJ0aW1lb3V0IiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJvbmNlIiwic2V0VGltZW91dCIsImNsb3NlIiwiZGVzdHJveSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSx5QkFBeUIsR0FBRywrQkFBbEM7OztBQUVBLE1BQU1DLGtCQUFOLENBQXlCO0FBQ3ZCQyxFQUFBQSxXQUFXLENBQUVDLFlBQUYsRUFBZ0I7QUFDekIsU0FBS0MsYUFBTCxHQUFxQkQsWUFBckI7QUFDQSxTQUFLRSxRQUFMLEdBQWdCLElBQUlDLDRCQUFKLEVBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFJQyw0QkFBSixDQUF3QixLQUF4QixFQUErQkMsYUFBL0IsRUFBbUMsQ0FBbkMsRUFBc0MsQ0FBdEMsRUFBeUMsQ0FBekMsQ0FBakI7O0FBQ0EsU0FBS0wsYUFBTCxDQUFtQk0sSUFBbkIsQ0FBd0IsS0FBS0gsU0FBN0IsRUFBd0NHLElBQXhDLENBQTZDLEtBQUtMLFFBQWxEOztBQUVBLFNBQUtNLFFBQUwsR0FBZ0IsSUFBSUMsNEJBQUosRUFBaEI7O0FBQ0EsU0FBS0QsUUFBTCxDQUFjRCxJQUFkLENBQW1CLEtBQUtOLGFBQXhCO0FBQ0Q7O0FBUUQsUUFBTVMsYUFBTixDQUFxQkMsUUFBckIsRUFBK0I7QUFDN0IsVUFBTUMsZUFBZSxHQUFHLEtBQUtDLG9CQUFMLEVBQXhCOztBQUNBLFNBQUtMLFFBQUwsQ0FBY00sS0FBZCxDQUFvQjtBQUNsQkMsTUFBQUEsT0FBTyxFQUFFLGVBRFM7QUFFbEJDLE1BQUFBLFVBQVUsRUFBRUw7QUFGTSxLQUFwQjs7QUFJQSxVQUFNTSxRQUFRLEdBQUcsTUFBTUwsZUFBdkI7O0FBQ0EsUUFBSUssUUFBUSxDQUFDQyxNQUFULEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDLFlBQU0sSUFBSUMsS0FBSixDQUFXLHlEQUF3REYsUUFBUSxDQUFDRSxLQUFNLEVBQWxGLENBQU47QUFDRDs7QUFDRCxTQUFLbEIsYUFBTCxDQUFtQm1CLE1BQW5CLENBQTBCLEtBQUtoQixTQUEvQjs7QUFDQSxTQUFLQSxTQUFMLENBQWVnQixNQUFmLENBQXNCLEtBQUtsQixRQUEzQjs7QUFDQSxXQUFPLElBQUltQixZQUFKLENBQWUsS0FBS3BCLGFBQXBCLENBQVA7QUFDRDs7QUFRRCxRQUFNcUIsYUFBTixDQUFxQlgsUUFBckIsRUFBK0I7QUFDN0IsVUFBTUMsZUFBZSxHQUFHLEtBQUtDLG9CQUFMLEVBQXhCOztBQUNBLFNBQUtMLFFBQUwsQ0FBY00sS0FBZCxDQUFvQjtBQUNsQkMsTUFBQUEsT0FBTyxFQUFFLGVBRFM7QUFFbEJDLE1BQUFBLFVBQVUsRUFBRUw7QUFGTSxLQUFwQjs7QUFJQSxVQUFNTSxRQUFRLEdBQUcsTUFBTUwsZUFBdkI7O0FBQ0EsUUFBSUssUUFBUSxDQUFDQyxNQUFULEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDLFlBQU0sSUFBSUMsS0FBSixDQUFXLHlEQUF3REYsUUFBUSxDQUFDRSxLQUFNLEVBQWxGLENBQU47QUFDRDs7QUFDRCxTQUFLbEIsYUFBTCxDQUFtQm1CLE1BQW5CLENBQTBCLEtBQUtoQixTQUEvQjs7QUFDQSxTQUFLQSxTQUFMLENBQWVnQixNQUFmLENBQXNCLEtBQUtsQixRQUEzQjs7QUFDQSxXQUFPLElBQUltQixZQUFKLENBQWUsS0FBS3BCLGFBQXBCLENBQVA7QUFDRDs7QUFFRFksRUFBQUEsb0JBQW9CLENBQUVVLE9BQU8sR0FBRyxLQUFaLEVBQW1CO0FBQ3JDLFdBQU8sSUFBSUMsaUJBQUosQ0FBTSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDaEMsV0FBS3hCLFFBQUwsQ0FBY3lCLElBQWQsQ0FBbUIsTUFBbkIsRUFBMkJGLE9BQTNCOztBQUNBRyxNQUFBQSxVQUFVLENBQUMsTUFBTUYsTUFBTSxDQUFDLElBQUlQLEtBQUosQ0FBVyxrREFBaURJLE9BQVEsRUFBcEUsQ0FBRCxDQUFiLEVBQXVGQSxPQUF2RixDQUFWO0FBQ0QsS0FITSxDQUFQO0FBSUQ7O0FBS0RNLEVBQUFBLEtBQUssR0FBSTtBQUNQLFNBQUs1QixhQUFMLENBQW1CNkIsT0FBbkI7QUFDRDs7QUFqRXNCOzs7ZUFxRVZoQyxrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQbGlzdFNlcnZpY2VEZWNvZGVyIGZyb20gJy4uL3BsaXN0LXNlcnZpY2UvdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1kZWNvZGVyJztcbmltcG9ydCBQbGlzdFNlcnZpY2VFbmNvZGVyIGZyb20gJy4uL3BsaXN0LXNlcnZpY2UvdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1lbmNvZGVyJztcbmltcG9ydCBMZW5ndGhCYXNlZFNwbGl0dGVyIGZyb20gJy4uL3V0aWwvdHJhbnNmb3JtZXIvbGVuZ3RoLWJhc2VkLXNwbGl0dGVyJztcbmltcG9ydCB7IEtCIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBBZmNTZXJ2aWNlIGZyb20gJy4uL2FmYyc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cbmNvbnN0IEhPVVNFX0FSUkVTVF9TRVJWSUNFX05BTUUgPSAnY29tLmFwcGxlLm1vYmlsZS5ob3VzZV9hcnJlc3QnO1xuXG5jbGFzcyBIb3VzZUFycmVzdFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvciAoc29ja2V0Q2xpZW50KSB7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50ID0gc29ja2V0Q2xpZW50O1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRGVjb2RlcigpO1xuICAgIHRoaXMuX3NwbGl0dGVyID0gbmV3IExlbmd0aEJhc2VkU3BsaXR0ZXIoZmFsc2UsIEtCLCAwLCA0LCA0KTtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQucGlwZSh0aGlzLl9zcGxpdHRlcikucGlwZSh0aGlzLl9kZWNvZGVyKTtcblxuICAgIHRoaXMuX2VuY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRW5jb2RlcigpO1xuICAgIHRoaXMuX2VuY29kZXIucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlbmRzIGludG8gdGhlIGFwcGxpY2F0aW9uIGNvbnRhaW5lciBhbmQgcmV0dXJucyBhbiBBZmNTZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgY29udGFpbmVyIHRoYXQgd2Ugd2lsbCBlbnRlciB0b1xuICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgaG91c2UgYXJyZXN0IGZhaWxzIHRvIGFjY2VzcyB0aGUgYXBwbGljYXRpb24ncyBjb250YWluZXJcbiAgICogQHJldHVybnMge0FmY1NlcnZpY2V9XG4gICAqL1xuICBhc3luYyB2ZW5kQ29udGFpbmVyIChidW5kbGVJZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHRoaXMuX3JlY2VpdmVQbGlzdFByb21pc2UoKTtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdWZW5kQ29udGFpbmVyJyxcbiAgICAgIElkZW50aWZpZXI6IGJ1bmRsZUlkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmIChyZXNwb25zZS5TdGF0dXMgIT09ICdDb21wbGV0ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHZlbmQgaW50byB0aGUgYXBwbGljYXRpb24gY29udGFpbmVyLiBFcnJvcjogJHtyZXNwb25zZS5FcnJvcn1gKTtcbiAgICB9XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHJldHVybiBuZXcgQWZjU2VydmljZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlbmRzIGludG8gdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50cyBhbmQgcmV0dXJucyBhbiBBZmNTZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgZG9jdW1lbnRzIHRoYXQgd2Ugd2lsbCBlbnRlciB0b1xuICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgaG91c2UgYXJyZXN0IGZhaWxzIHRvIGFjY2VzcyB0aGUgYXBwbGljYXRpb24ncyBkb2N1bWVudHNcbiAgICogQHJldHVybnMge0FmY1NlcnZpY2V9XG4gICAqL1xuICBhc3luYyB2ZW5kRG9jdW1lbnRzIChidW5kbGVJZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHRoaXMuX3JlY2VpdmVQbGlzdFByb21pc2UoKTtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdWZW5kRG9jdW1lbnRzJyxcbiAgICAgIElkZW50aWZpZXI6IGJ1bmRsZUlkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmIChyZXNwb25zZS5TdGF0dXMgIT09ICdDb21wbGV0ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHZlbmQgaW50byB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnRzLiBFcnJvcjogJHtyZXNwb25zZS5FcnJvcn1gKTtcbiAgICB9XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHJldHVybiBuZXcgQWZjU2VydmljZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgX3JlY2VpdmVQbGlzdFByb21pc2UgKHRpbWVvdXQgPSAxMDAwMCkge1xuICAgIHJldHVybiBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9kZWNvZGVyLm9uY2UoJ2RhdGEnLCByZXNvbHZlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIHJlY2VpdmUgYW55IGRhdGEgd2l0aGluIHRoZSB0aW1lb3V0OiAke3RpbWVvdXR9YCkpLCB0aW1lb3V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHVuZGVybHlpbmcgc29ja2V0IGNvbW11bmljYXRpbmcgd2l0aCB0aGUgcGhvbmVcbiAgICovXG4gIGNsb3NlICgpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICB9XG59XG5cbmV4cG9ydCB7IEhvdXNlQXJyZXN0U2VydmljZSwgSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSB9O1xuZXhwb3J0IGRlZmF1bHQgSG91c2VBcnJlc3RTZXJ2aWNlO1xuXG4iXSwiZmlsZSI6ImxpYi9ob3VzZS1hcnJlc3QvaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
