"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _vm = _interopRequireDefault(require("vm"));

var _logger = _interopRequireDefault(require("../logger"));

var _webdriverio = require("webdriverio");

const W3C_ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf';
const MJSONWP_ELEMENT_KEY = 'ELEMENT';

async function runScript(driverOpts, script, timeout) {
  if (!_lodash.default.isNumber(timeout)) {
    throw new Error('Timeout parameter must be a number');
  }

  const logLevels = ['error', 'warn', 'log'];
  const logs = {};
  const consoleFns = {};

  for (const level of logLevels) {
    logs[level] = [];

    consoleFns[level] = (...logMsgs) => logs[level].push(...logMsgs);
  }

  const driver = (0, _webdriverio.attach)(driverOpts);
  const fullScript = buildScript(script);

  const vmCtx = _vm.default.runInNewContext(fullScript, {}, {
    timeout
  });

  _logger.default.info('Running driver script in Node vm');

  let result = await vmCtx(driver, consoleFns, _bluebird.default);

  _logger.default.info('Ensuring driver script result is appropriate type for return');

  result = coerceScriptResult(result);
  return {
    result,
    logs
  };
}

function buildScript(script) {
  return `(async function execute (driver, console, Promise) {
    ${script}
  })`;
}

function coerceScriptResult(obj) {
  try {
    obj = JSON.parse(JSON.stringify(obj));
  } catch (e) {
    _logger.default.warn('Could not convert executeDriverScript to safe response!' + `Result was: ${obj}. Will make it null`);

    return null;
  }

  let res;

  if (_lodash.default.isPlainObject(obj)) {
    res = {};

    if (obj[MJSONWP_ELEMENT_KEY] || obj[W3C_ELEMENT_KEY]) {
      if (obj[MJSONWP_ELEMENT_KEY]) {
        res[MJSONWP_ELEMENT_KEY] = obj[MJSONWP_ELEMENT_KEY];
      }

      if (obj[W3C_ELEMENT_KEY]) {
        res[W3C_ELEMENT_KEY] = obj[W3C_ELEMENT_KEY];
      }

      return res;
    }

    for (const key of Object.keys(obj)) {
      res[key] = coerceScriptResult(obj[key]);
    }

    return res;
  }

  if (_lodash.default.isArray(obj)) {
    return obj.map(i => coerceScriptResult(i));
  }

  return obj;
}

async function main(driverOpts, script, timeout) {
  let res;

  try {
    res = {
      success: await runScript(driverOpts, script, timeout)
    };
  } catch (error) {
    res = {
      error: {
        message: error.message,
        stack: error.stack
      }
    };
  }

  await _bluebird.default.promisify(process.send, {
    context: process
  })(res);
}

if (require.main === module) {
  _logger.default.info('Running driver execution in child process');

  process.on('message', ({
    driverOpts,
    script,
    timeout
  }) => {
    _logger.default.info('Parameters received from parent process');

    main(driverOpts, script, timeout);
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
