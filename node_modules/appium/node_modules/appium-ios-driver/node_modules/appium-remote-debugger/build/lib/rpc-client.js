"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _remoteMessages = _interopRequireDefault(require("./remote-messages"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _remoteDebuggerMessageHandler = _interopRequireDefault(require("./remote-debugger-message-handler"));

var _helpers = require("./helpers");

var _appiumSupport = require("appium-support");

const DATA_LOG_LENGTH = {
  length: 200
};
const WAIT_FOR_TARGET_RETRIES = 10;
const WAIT_FOR_TARGET_INTERVAL = 1000;
const GENERIC_TARGET_ID = 'page-6';

class RpcClient {
  constructor(opts = {}) {
    this._targets = [];
    this._shouldCheckForTarget = !!opts.shouldCheckForTarget;
    const {
      bundleId,
      platformVersion = {},
      isSafari = true,
      specialMessageHandlers = {},
      logFullResponse = false
    } = opts;
    this.isSafari = isSafari;
    this.connected = false;
    this.connId = _uuidJs.default.create().toString();
    this.senderId = _uuidJs.default.create().toString();
    this.msgId = 0;
    this.logFullResponse = logFullResponse;
    this.bundleId = bundleId;
    this.platformVersion = platformVersion;
    this.specialMessageHandlers = specialMessageHandlers;
    this.setCommunicationProtocol((0, _helpers.isTargetBased)(isSafari, this.platformVersion));
  }

  setCommunicationProtocol(isTargetBased = false) {
    _logger.default.warn(`Setting communication protocol: using ${isTargetBased ? 'Target-based' : 'full Web Inspector protocol'} communication`);

    this.isTargetBased = isTargetBased;

    if (!this.remoteMessages) {
      this.remoteMessages = new _remoteMessages.default(isTargetBased);
    } else {
      this.remoteMessages.setCommunicationProtocol(isTargetBased);
    }

    if (!this.messageHandler) {
      this.messageHandler = new _remoteDebuggerMessageHandler.default(this.specialMessageHandlers, isTargetBased);
    } else {
      this.messageHandler.setCommunicationProtocol(isTargetBased);
    }
  }

  needsTarget() {
    return this.shouldCheckForTarget && this.isTargetBased;
  }

  async waitForTarget(appIdKey, pageIdKey) {
    if (!this.needsTarget()) {
      return;
    }

    if (_appiumSupport.util.compareVersions(this.platformVersion, '<', '13.0') && _lodash.default.isEmpty(this.getTarget(appIdKey, pageIdKey))) {
      if (this.isSafari) {
        this.addTarget({
          targetId: `page-${pageIdKey}`
        });
      } else {
        const targets = this.targets[appIdKey];

        const targetIds = _lodash.default.values(targets).map(targetId => targetId.replace('page-', '')).sort();

        const lastTargetId = _lodash.default.last(targetIds) || 0;
        this.addTarget({
          targetId: `page-${lastTargetId + 1}`
        });
      }

      return;
    }

    try {
      await (0, _asyncbox.retryInterval)(WAIT_FOR_TARGET_RETRIES, WAIT_FOR_TARGET_INTERVAL, () => {
        if (_lodash.default.isEmpty(this.getTarget(appIdKey, pageIdKey))) {
          throw new Error('No targets found, unable to communicate with device');
        }
      });
    } catch (err) {
      _logger.default.debug(`No target found. Trying '${GENERIC_TARGET_ID}', which seems to work`);

      this.addTarget({
        targetId: GENERIC_TARGET_ID
      });
    }
  }

  async send(command, opts = {}) {
    const startTime = process.hrtime();
    const {
      appIdKey,
      pageIdKey
    } = opts;

    try {
      await this.waitForTarget(appIdKey, pageIdKey);
      return await this.sendToDevice(command, opts);
    } catch (err) {
      if (err.message.includes(`'Target' domain was not found`)) {
        this.setCommunicationProtocol(false);
        return await this.sendToDevice(command, opts);
      } else if (err.message.includes(`domain was not found`)) {
        this.setCommunicationProtocol(true);
        await this.waitForTarget(appIdKey, pageIdKey);
        return await this.sendToDevice(command, opts);
      }

      throw new Error(err);
    } finally {
      _logger.default.debug(`Sending to Web Inspector took ${(0, _helpers.getElapsedTime)(startTime)}ms`);
    }
  }

  getLoggableResponse(res) {
    return _lodash.default.isString(res) ? res : this.logFullResponse ? JSON.stringify(res, null, 2) : _lodash.default.truncate(JSON.stringify(res), DATA_LOG_LENGTH);
  }

  async sendToDevice(command, opts = {}) {
    return await new _bluebird.default(async (resolve, reject) => {
      const msgId = this.msgId++;

      const sendOpts = _lodash.default.defaults({
        connId: this.connId,
        senderId: this.senderId
      }, opts);

      const cmd = this.remoteMessages.getRemoteCommand(command, sendOpts);
      let messageHandled = false;

      if (this.messageHandler.hasSpecialMessageHandler(cmd.__selector)) {
        messageHandled = true;
        const specialMessageHandler = this.getSpecialMessageHandler(cmd.__selector);
        this.setSpecialMessageHandler(cmd.__selector, reject, (...args) => {
          _logger.default.debug(`Received response from send (id: ${msgId}): '${this.getLoggableResponse(args)}'`);

          specialMessageHandler(...args);

          if (this.messageHandler.hasSpecialMessageHandler(cmd.__selector)) {
            this.setSpecialMessageHandler(cmd.__selector, null, specialMessageHandler);
          }

          resolve(args);
        });
      } else if (cmd.__argument && cmd.__argument.WIRSocketDataKey) {
        messageHandled = true;

        const errorHandler = function (err) {
          const msg = `Remote debugger error with code '${err.code}': ${err.message}`;
          reject(new Error(msg));
        };

        this.setDataMessageHandler(msgId.toString(), errorHandler, value => {
          _logger.default.debug(`Received data response from send (id: ${msgId}): '${this.getLoggableResponse(value)}'`);

          resolve(value);
        });

        if (cmd.__argument.WIRSocketDataKey.params) {
          cmd.__argument.WIRSocketDataKey.params.id = msgId;

          if (!cmd.__argument.WIRSocketDataKey.params.targetId && this.needsTarget()) {
            cmd.__argument.WIRSocketDataKey.params.targetId = this.getTarget(sendOpts.appIdKey, sendOpts.pageIdKey);
          }

          if (cmd.__argument.WIRSocketDataKey.params.message) {
            cmd.__argument.WIRSocketDataKey.params.message.id = msgId;
            cmd.__argument.WIRSocketDataKey.params.message = JSON.stringify(cmd.__argument.WIRSocketDataKey.params.message);
          }
        }

        cmd.__argument.WIRSocketDataKey.id = msgId;
        cmd.__argument.WIRSocketDataKey = Buffer.from(JSON.stringify(cmd.__argument.WIRSocketDataKey));
      }

      const msg = `Sending '${cmd.__selector}' message` + (sendOpts.appIdKey ? ` to app '${sendOpts.appIdKey}'` : '') + (sendOpts.pageIdKey ? `, page '${sendOpts.pageIdKey}'` : '') + (this.needsTarget() ? `, target '${this.getTarget(sendOpts.appIdKey, sendOpts.pageIdKey)}'` : '') + ` (id: ${msgId})`;

      _logger.default.debug(msg);

      try {
        const res = await this.sendMessage(cmd);

        if (!messageHandled) {
          resolve(res);
        }
      } catch (err) {
        return reject(err);
      }
    });
  }

  async sendMessage() {
    throw new Error(`Sub-classes need to implement a 'sendMessage' function`);
  }

  addTarget(targetInfo) {
    if (_lodash.default.isUndefined(targetInfo) || _lodash.default.isUndefined(targetInfo.targetId)) {
      _logger.default.warn(`Received 'targetCreated' event with no target. Skipping`);

      return;
    }

    if (_lodash.default.isEmpty(this.pendingTargetNotification)) {
      _logger.default.warn(`Received 'targetCreated' event with no pending request: ${JSON.stringify(targetInfo)}`);

      return;
    }

    const [appIdKey, pageIdKey] = this.pendingTargetNotification || [];
    this.pendingTargetNotification = null;

    _logger.default.debug(`Target created for app '${appIdKey}' and page '${pageIdKey}': ${JSON.stringify(targetInfo)}`);

    this.targets[appIdKey] = this.targets[appIdKey] || {};

    if (_lodash.default.isEmpty(this.targets[appIdKey][pageIdKey])) {
      this.targets[appIdKey][pageIdKey] = targetInfo.targetId;
    }
  }

  removeTarget(targetInfo) {
    if (_lodash.default.isUndefined(targetInfo) || _lodash.default.isUndefined(targetInfo.targetId)) {
      _logger.default.debug(`Received 'targetDestroyed' event with no target. Skipping`);

      return;
    }

    _logger.default.debug(`Target destroyed: ${JSON.stringify(targetInfo)}`);

    _lodash.default.pull(this.targets, targetInfo.targetId);
  }

  get targets() {
    this._targets = this._targets || {};
    return this._targets;
  }

  getTarget(appIdKey, pageIdKey) {
    const target = (this.targets[appIdKey] || {})[pageIdKey];
    return target;
  }

  get shouldCheckForTarget() {
    return this._shouldCheckForTarget;
  }

  set shouldCheckForTarget(shouldCheckForTarget) {
    this._shouldCheckForTarget = !!shouldCheckForTarget;
  }

  async connect() {
    throw new Error(`Sub-classes need to implement a 'connect' function`);
  }

  async disconnect() {
    throw new Error(`Sub-classes need to implement a 'disconnect' function`);
  }

  isConnected() {
    return this.connected;
  }

  setSpecialMessageHandler(key, errorHandler, handler) {
    this.messageHandler.setSpecialMessageHandler(key, errorHandler, handler);
  }

  getSpecialMessageHandler(key) {
    return this.messageHandler.getSpecialMessageHandler(key);
  }

  setDataMessageHandler(key, errorHandler, handler) {
    this.messageHandler.setDataMessageHandler(key, errorHandler, handler);
  }

  allowNavigationWithoutReload(allow = true) {
    this.messageHandler.allowNavigationWithoutReload(allow);
  }

  async selectPage(appIdKey, pageIdKey) {
    this.pendingTargetNotification = [appIdKey, pageIdKey];
    this.shouldCheckForTarget = false;
    await this.send('setSenderKey', {
      appIdKey,
      pageIdKey
    });

    _logger.default.debug('Sender key set');

    this.shouldCheckForTarget = true;
    await this.send('enablePage', {
      appIdKey,
      pageIdKey
    });

    _logger.default.debug('Enabled activity on page');
  }

  async selectApp(appIdKey, applicationConnectedHandler) {
    return await new _bluebird.default((resolve, reject) => {
      const onAppChange = dict => {
        let oldAppIdKey = dict.WIRHostApplicationIdentifierKey;
        let correctAppIdKey = dict.WIRApplicationIdentifierKey;

        if (oldAppIdKey && correctAppIdKey !== oldAppIdKey) {
          _logger.default.debug(`We were notified we might have connected to the wrong app. ` + `Using id ${correctAppIdKey} instead of ${oldAppIdKey}`);
        }

        applicationConnectedHandler(dict);
        reject(new Error('New application has connected'));
      };

      this.setSpecialMessageHandler('_rpc_applicationConnected:', reject, onAppChange);
      return (async () => {
        let pageDict, connectedAppIdKey;

        try {
          [connectedAppIdKey, pageDict] = await this.send('connectToApp', {
            appIdKey
          });
        } catch (err) {
          _logger.default.warn(`Unable to connect to app: ${err.message}`);

          reject(err);
        }

        if (_lodash.default.isEmpty(pageDict)) {
          let msg = 'Empty page dictionary received';

          _logger.default.debug(msg);

          reject(new Error(msg));
        } else {
          resolve([connectedAppIdKey, pageDict]);
        }
      })();
    }).finally(() => {
      this.setSpecialMessageHandler('_rpc_applicationConnected:', null, applicationConnectedHandler);
    });
  }

  async receive() {
    throw new Error(`Sub-classes need to implement a 'receive' function`);
  }

  setTimelineEventHandler(timelineEventHandler) {
    this.timelineEventHandler = timelineEventHandler;
    this.messageHandler.setTimelineEventHandler(timelineEventHandler);
  }

  setConsoleLogEventHandler(consoleEventHandler) {
    this.consoleEventHandler = consoleEventHandler;
    this.messageHandler.setConsoleLogEventHandler(consoleEventHandler);
  }

  setNetworkLogEventHandler(networkEventHandler) {
    this.networkEventHandler = networkEventHandler;
    this.messageHandler.setNetworkEventHandler(networkEventHandler);
  }

}

exports.default = RpcClient;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
