"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

var _appiumIosDevice = require("appium-ios-device");

class RpcClientRealDevice extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      udid
    } = opts;
    this.udid = udid;
  }

  async connect() {
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      osVersion: this.platformVersion
    });
    this.service.listenMessage(this.receive.bind(this));
    this.connected = true;
  }

  async disconnect() {
    if (this.isConnected()) {
      _logger.default.debug('Disconnecting from remote debugger');

      this.service.close();
    }

    this.connected = false;
  }

  async sendMessage(cmd) {
    this.service.sendMessage(cmd);
  }

  async receive(data) {
    if (!this.isConnected()) {
      return;
    }

    this.messageHandler.handleMessage(data);
  }

}

exports.default = RpcClientRealDevice;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ycGMtY2xpZW50LXJlYWwtZGV2aWNlLmpzIl0sIm5hbWVzIjpbIlJwY0NsaWVudFJlYWxEZXZpY2UiLCJScGNDbGllbnQiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJzaG91bGRDaGVja0ZvclRhcmdldCIsInVkaWQiLCJjb25uZWN0Iiwic2VydmljZSIsInNlcnZpY2VzIiwic3RhcnRXZWJJbnNwZWN0b3JTZXJ2aWNlIiwib3NWZXJzaW9uIiwicGxhdGZvcm1WZXJzaW9uIiwibGlzdGVuTWVzc2FnZSIsInJlY2VpdmUiLCJiaW5kIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdCIsImlzQ29ubmVjdGVkIiwibG9nIiwiZGVidWciLCJjbG9zZSIsInNlbmRNZXNzYWdlIiwiY21kIiwiZGF0YSIsIm1lc3NhZ2VIYW5kbGVyIiwiaGFuZGxlTWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHZSxNQUFNQSxtQkFBTixTQUFrQ0Msa0JBQWxDLENBQTRDO0FBQ3pEQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEIsVUFBTUMsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDbEJDLE1BQUFBLG9CQUFvQixFQUFFO0FBREosS0FBZCxFQUVISCxJQUZHLENBQU47QUFJQSxVQUFNO0FBQ0pJLE1BQUFBO0FBREksUUFFRkosSUFGSjtBQUlBLFNBQUtJLElBQUwsR0FBWUEsSUFBWjtBQUNEOztBQUVELFFBQU1DLE9BQU4sR0FBaUI7QUFDZixTQUFLQyxPQUFMLEdBQWUsTUFBTUMsMEJBQVNDLHdCQUFULENBQWtDLEtBQUtKLElBQXZDLEVBQTZDO0FBQ2hFSyxNQUFBQSxTQUFTLEVBQUUsS0FBS0M7QUFEZ0QsS0FBN0MsQ0FBckI7QUFHQSxTQUFLSixPQUFMLENBQWFLLGFBQWIsQ0FBMkIsS0FBS0MsT0FBTCxDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQTNCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFqQjtBQUNEOztBQUVELFFBQU1DLFVBQU4sR0FBb0I7QUFDbEIsUUFBSSxLQUFLQyxXQUFMLEVBQUosRUFBd0I7QUFDdEJDLHNCQUFJQyxLQUFKLENBQVUsb0NBQVY7O0FBQ0EsV0FBS1osT0FBTCxDQUFhYSxLQUFiO0FBQ0Q7O0FBQ0QsU0FBS0wsU0FBTCxHQUFpQixLQUFqQjtBQUNEOztBQUVELFFBQU1NLFdBQU4sQ0FBbUJDLEdBQW5CLEVBQXdCO0FBQ3RCLFNBQUtmLE9BQUwsQ0FBYWMsV0FBYixDQUF5QkMsR0FBekI7QUFDRDs7QUFFRCxRQUFNVCxPQUFOLENBQWVVLElBQWYsRUFBcUI7QUFDbkIsUUFBSSxDQUFDLEtBQUtOLFdBQUwsRUFBTCxFQUF5QjtBQUN2QjtBQUNEOztBQUNELFNBQUtPLGNBQUwsQ0FBb0JDLGFBQXBCLENBQWtDRixJQUFsQztBQUNEOztBQXRDd0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBScGNDbGllbnQgZnJvbSAnLi9ycGMtY2xpZW50JztcbmltcG9ydCB7IHNlcnZpY2VzIH0gZnJvbSAnYXBwaXVtLWlvcy1kZXZpY2UnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJwY0NsaWVudFJlYWxEZXZpY2UgZXh0ZW5kcyBScGNDbGllbnQge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7XG4gICAgICBzaG91bGRDaGVja0ZvclRhcmdldDogZmFsc2UsXG4gICAgfSwgb3B0cykpO1xuXG4gICAgY29uc3Qge1xuICAgICAgdWRpZCxcbiAgICB9ID0gb3B0cztcblxuICAgIHRoaXMudWRpZCA9IHVkaWQ7XG4gIH1cblxuICBhc3luYyBjb25uZWN0ICgpIHtcbiAgICB0aGlzLnNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydFdlYkluc3BlY3RvclNlcnZpY2UodGhpcy51ZGlkLCB7XG4gICAgICBvc1ZlcnNpb246IHRoaXMucGxhdGZvcm1WZXJzaW9uLFxuICAgIH0pO1xuICAgIHRoaXMuc2VydmljZS5saXN0ZW5NZXNzYWdlKHRoaXMucmVjZWl2ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIH1cblxuICBhc3luYyBkaXNjb25uZWN0ICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgbG9nLmRlYnVnKCdEaXNjb25uZWN0aW5nIGZyb20gcmVtb3RlIGRlYnVnZ2VyJyk7XG4gICAgICB0aGlzLnNlcnZpY2UuY2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRNZXNzYWdlIChjbWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhpcy5zZXJ2aWNlLnNlbmRNZXNzYWdlKGNtZCk7XG4gIH1cblxuICBhc3luYyByZWNlaXZlIChkYXRhKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuaGFuZGxlTWVzc2FnZShkYXRhKTtcbiAgfVxufVxuIl0sImZpbGUiOiJsaWIvcnBjLWNsaWVudC1yZWFsLWRldmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
