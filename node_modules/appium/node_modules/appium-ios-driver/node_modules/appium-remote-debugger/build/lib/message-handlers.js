"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _remoteDebugger = require("./remote-debugger");

var _helpers = require("./helpers");

var _lodash = _interopRequireDefault(require("lodash"));

function onPageChange(appIdKey, pageDict) {
  if (_lodash.default.isEmpty(pageDict)) {
    return;
  }

  const pageArray = (0, _helpers.pageArrayFromDict)(pageDict);

  if (this.appDict[appIdKey]) {
    if (this.appDict[appIdKey].pageArray) {
      if (this.appDict[appIdKey].pageArray.resolve) {
        this.appDict[appIdKey].pageArray.resolve();
      } else {
        if (_lodash.default.isEqual(this.appDict[appIdKey].pageArray, pageArray)) {
          _logger.default.debug(`Received page change notice for app '${appIdKey}' ` + `but the listing has not changed. Ignoring.`);

          return;
        }
      }
    }

    this.appDict[appIdKey].pageArray = pageArray;
  }

  if (this._navigatingToPage) {
    return;
  }

  this.logApplicationDictionary(this.appDict);

  _logger.default.debug(`Page changed: ${(0, _helpers.simpleStringify)(pageDict, true)}`);

  if (this.appIdKey !== appIdKey) {
    _logger.default.debug(`Received page change notice for app '${appIdKey}' ` + `but listening for '${this.appIdKey}'. Ignoring.`);

    return;
  }

  this.emit(_remoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, {
    appIdKey: appIdKey.replace('PID:', ''),
    pageArray
  });
}

function onAppConnect(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Notified that new application '${appIdKey}' has connected`);

  this.updateAppsWithDict(dict);
}

function onAppDisconnect(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Application '${appIdKey}' disconnected. Removing from app dictionary.`);

  _logger.default.debug(`Current app is ${this.appIdKey}`);

  delete this.appDict[appIdKey];

  if (this.appIdKey === appIdKey) {
    _logger.default.debug(`No longer have app id. Attempting to find new one.`);

    this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
  }

  if (!this.appDict) {
    _logger.default.debug('Main app disconnected. Disconnecting altogether.');

    this.connected = false;
    this.emit(_remoteDebugger.RemoteDebugger.EVENT_DISCONNECT, true);
  }
}

function onAppUpdate(dict) {
  this.updateAppsWithDict(dict);
}

function onTargetCreated(app, targetInfo) {
  this.rpcClient.addTarget(targetInfo);
}

function onTargetDestroyed(app, targetInfo) {
  this.rpcClient.removeTarget(targetInfo);
}

const messageHandlers = {
  onPageChange,
  onAppConnect,
  onAppDisconnect,
  onAppUpdate,
  onTargetCreated,
  onTargetDestroyed
};
var _default = messageHandlers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
