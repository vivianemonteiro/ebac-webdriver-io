#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "authorize", {
  enumerable: true,
  get: function () {
    return _authorizeIos.authorize;
  }
});
exports.appUtils = exports.uiauto = exports.utils = exports.device = exports.settings = exports.IOSPerformanceLog = exports.IOSCrashLog = exports.IOSLog = exports.default = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.startHttpsServer = exports.instrumentsUtils = exports.Instruments = exports.IWDP = exports.defaultServerCaps = exports.iosCommands = exports.commands = exports.desiredCapValidation = exports.desiredCapConstraints = exports.IosDriver = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var server = _interopRequireWildcard(require("./lib/server"));

var driver = _interopRequireWildcard(require("./lib/driver"));

var caps = _interopRequireWildcard(require("./lib/desired-caps"));

var commandIndex = _interopRequireWildcard(require("./lib/commands/index"));

var settings = _interopRequireWildcard(require("./lib/settings"));

exports.settings = settings;

var device = _interopRequireWildcard(require("./lib/device"));

exports.device = device;

var utils = _interopRequireWildcard(require("./lib/utils"));

exports.utils = utils;

var iwdp = _interopRequireWildcard(require("./lib/iwdp"));

var uiauto = _interopRequireWildcard(require("./lib/uiauto/uiauto"));

exports.uiauto = uiauto;

var instruments = _interopRequireWildcard(require("./lib/instruments/index"));

var context = _interopRequireWildcard(require("./lib/commands/context"));

var _iosLog = _interopRequireDefault(require("./lib/device-log/ios-log"));

var _iosCrashLog = _interopRequireDefault(require("./lib/device-log/ios-crash-log"));

var _iosPerformanceLog = _interopRequireDefault(require("./lib/device-log/ios-performance-log"));

var appUtils = _interopRequireWildcard(require("./lib/app-utils"));

exports.appUtils = appUtils;

var _authorizeIos = require("./bin/authorize-ios");

const DEFAULT_HOST = 'localhost';
const DEFAULT_PORT = 4723;

async function main() {
  const getArgValue = argName => {
    const argIndex = process.argv.indexOf(argName);
    return argIndex > 0 ? process.argv[argIndex + 1] : null;
  };

  const port = parseInt(getArgValue('--port'), 10) || DEFAULT_PORT;
  const host = getArgValue('--host') || DEFAULT_HOST;
  return await server.startServer(port, host);
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}

const startHttpsServer = server.startHttpsServer;
exports.startHttpsServer = startHttpsServer;
const {
  IosDriver,
  defaultServerCaps
} = driver;
exports.defaultServerCaps = defaultServerCaps;
exports.IosDriver = IosDriver;
const {
  desiredCapConstraints,
  desiredCapValidation
} = caps;
exports.desiredCapValidation = desiredCapValidation;
exports.desiredCapConstraints = desiredCapConstraints;
const {
  commands,
  iosCommands
} = commandIndex;
exports.iosCommands = iosCommands;
exports.commands = commands;
const {
  IWDP
} = iwdp;
exports.IWDP = IWDP;
const {
  Instruments,
  instrumentsUtils
} = instruments;
exports.instrumentsUtils = instrumentsUtils;
exports.Instruments = Instruments;
const {
  NATIVE_WIN,
  WEBVIEW_WIN
} = context;
exports.WEBVIEW_WIN = WEBVIEW_WIN;
exports.NATIVE_WIN = NATIVE_WIN;
var _default = IosDriver;
exports.default = _default;
const IOSLog = _iosLog.default;
exports.IOSLog = IOSLog;
const IOSCrashLog = _iosCrashLog.default;
exports.IOSCrashLog = IOSCrashLog;
const IOSPerformanceLog = _iosPerformanceLog.default;
exports.IOSPerformanceLog = IOSPerformanceLog;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfSE9TVCIsIkRFRkFVTFRfUE9SVCIsIm1haW4iLCJnZXRBcmdWYWx1ZSIsImFyZ05hbWUiLCJhcmdJbmRleCIsInByb2Nlc3MiLCJhcmd2IiwiaW5kZXhPZiIsInBvcnQiLCJwYXJzZUludCIsImhvc3QiLCJzZXJ2ZXIiLCJzdGFydFNlcnZlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJzdGFydEh0dHBzU2VydmVyIiwiSW9zRHJpdmVyIiwiZGVmYXVsdFNlcnZlckNhcHMiLCJkcml2ZXIiLCJkZXNpcmVkQ2FwQ29uc3RyYWludHMiLCJkZXNpcmVkQ2FwVmFsaWRhdGlvbiIsImNhcHMiLCJjb21tYW5kcyIsImlvc0NvbW1hbmRzIiwiY29tbWFuZEluZGV4IiwiSVdEUCIsIml3ZHAiLCJJbnN0cnVtZW50cyIsImluc3RydW1lbnRzVXRpbHMiLCJpbnN0cnVtZW50cyIsIk5BVElWRV9XSU4iLCJXRUJWSUVXX1dJTiIsImNvbnRleHQiLCJJT1NMb2ciLCJMb2ciLCJJT1NDcmFzaExvZyIsIkNyYXNoTG9nIiwiSU9TUGVyZm9ybWFuY2VMb2ciLCJQZXJmb3JtYW5jZUxvZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBb0JBOztBQUNBOztBQUNBOztBQVNBOzs7O0FBS0E7O0FBL0RBLE1BQU1BLFlBQVksR0FBRyxXQUFyQjtBQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFyQjs7QUFFQSxlQUFlQyxJQUFmLEdBQXVCO0FBQ3JCLFFBQU1DLFdBQVcsR0FBSUMsT0FBRCxJQUFhO0FBQy9CLFVBQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxJQUFSLENBQWFDLE9BQWIsQ0FBcUJKLE9BQXJCLENBQWpCO0FBQ0EsV0FBT0MsUUFBUSxHQUFHLENBQVgsR0FBZUMsT0FBTyxDQUFDQyxJQUFSLENBQWFGLFFBQVEsR0FBRyxDQUF4QixDQUFmLEdBQTRDLElBQW5EO0FBQ0QsR0FIRDs7QUFJQSxRQUFNSSxJQUFJLEdBQUdDLFFBQVEsQ0FBQ1AsV0FBVyxDQUFDLFFBQUQsQ0FBWixFQUF3QixFQUF4QixDQUFSLElBQXVDRixZQUFwRDtBQUNBLFFBQU1VLElBQUksR0FBR1IsV0FBVyxDQUFDLFFBQUQsQ0FBWCxJQUF5QkgsWUFBdEM7QUFDQSxTQUFPLE1BQU1ZLE1BQU0sQ0FBQ0MsV0FBUCxDQUFtQkosSUFBbkIsRUFBeUJFLElBQXpCLENBQWI7QUFDRDs7QUFFRCxJQUFJRyxPQUFPLENBQUNaLElBQVIsS0FBaUJhLE1BQXJCLEVBQTZCO0FBQzNCLDBCQUFTYixJQUFUO0FBQ0Q7O0FBY0QsTUFBTWMsZ0JBQWdCLEdBQUdKLE1BQU0sQ0FBQ0ksZ0JBQWhDOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsU0FBRjtBQUFhQyxFQUFBQTtBQUFiLElBQW1DQyxNQUF6Qzs7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxxQkFBRjtBQUF5QkMsRUFBQUE7QUFBekIsSUFBa0RDLElBQXhEOzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFFBQUY7QUFBWUMsRUFBQUE7QUFBWixJQUE0QkMsWUFBbEM7OztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFXQyxJQUFqQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFdBQUY7QUFBZUMsRUFBQUE7QUFBZixJQUFvQ0MsV0FBMUM7OztBQUNBLE1BQU07QUFBRUMsRUFBQUEsVUFBRjtBQUFjQyxFQUFBQTtBQUFkLElBQThCQyxPQUFwQzs7O2VBUWVoQixTOztBQVFmLE1BQU1pQixNQUFNLEdBQUdDLGVBQWY7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHQyxvQkFBcEI7O0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUdDLDBCQUExQiIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8vIHRyYW5zcGlsZTptYWluXG5cbmltcG9ydCB7IGFzeW5jaWZ5IH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0ICogYXMgc2VydmVyIGZyb20gJy4vbGliL3NlcnZlcic7XG5cbmNvbnN0IERFRkFVTFRfSE9TVCA9ICdsb2NhbGhvc3QnO1xuY29uc3QgREVGQVVMVF9QT1JUID0gNDcyMztcblxuYXN5bmMgZnVuY3Rpb24gbWFpbiAoKSB7XG4gIGNvbnN0IGdldEFyZ1ZhbHVlID0gKGFyZ05hbWUpID0+IHtcbiAgICBjb25zdCBhcmdJbmRleCA9IHByb2Nlc3MuYXJndi5pbmRleE9mKGFyZ05hbWUpO1xuICAgIHJldHVybiBhcmdJbmRleCA+IDAgPyBwcm9jZXNzLmFyZ3ZbYXJnSW5kZXggKyAxXSA6IG51bGw7XG4gIH07XG4gIGNvbnN0IHBvcnQgPSBwYXJzZUludChnZXRBcmdWYWx1ZSgnLS1wb3J0JyksIDEwKSB8fCBERUZBVUxUX1BPUlQ7XG4gIGNvbnN0IGhvc3QgPSBnZXRBcmdWYWx1ZSgnLS1ob3N0JykgfHwgREVGQVVMVF9IT1NUO1xuICByZXR1cm4gYXdhaXQgc2VydmVyLnN0YXJ0U2VydmVyKHBvcnQsIGhvc3QpO1xufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgYXN5bmNpZnkobWFpbik7XG59XG5cblxuaW1wb3J0ICogYXMgZHJpdmVyIGZyb20gJy4vbGliL2RyaXZlcic7XG5pbXBvcnQgKiBhcyBjYXBzIGZyb20gJy4vbGliL2Rlc2lyZWQtY2Fwcyc7XG5pbXBvcnQgKiBhcyBjb21tYW5kSW5kZXggZnJvbSAnLi9saWIvY29tbWFuZHMvaW5kZXgnO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSAnLi9saWIvc2V0dGluZ3MnO1xuaW1wb3J0ICogYXMgZGV2aWNlIGZyb20gJy4vbGliL2RldmljZSc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2xpYi91dGlscyc7XG5pbXBvcnQgKiBhcyBpd2RwIGZyb20gJy4vbGliL2l3ZHAnO1xuaW1wb3J0ICogYXMgdWlhdXRvIGZyb20gJy4vbGliL3VpYXV0by91aWF1dG8nO1xuaW1wb3J0ICogYXMgaW5zdHJ1bWVudHMgZnJvbSAnLi9saWIvaW5zdHJ1bWVudHMvaW5kZXgnO1xuaW1wb3J0ICogYXMgY29udGV4dCBmcm9tICcuL2xpYi9jb21tYW5kcy9jb250ZXh0JztcblxuY29uc3Qgc3RhcnRIdHRwc1NlcnZlciA9IHNlcnZlci5zdGFydEh0dHBzU2VydmVyO1xuY29uc3QgeyBJb3NEcml2ZXIsIGRlZmF1bHRTZXJ2ZXJDYXBzIH0gPSBkcml2ZXI7XG5jb25zdCB7IGRlc2lyZWRDYXBDb25zdHJhaW50cywgZGVzaXJlZENhcFZhbGlkYXRpb24gfSA9IGNhcHM7XG5jb25zdCB7IGNvbW1hbmRzLCBpb3NDb21tYW5kcyB9ID0gY29tbWFuZEluZGV4O1xuY29uc3QgeyBJV0RQIH0gPSBpd2RwO1xuY29uc3QgeyBJbnN0cnVtZW50cywgaW5zdHJ1bWVudHNVdGlscyB9ID0gaW5zdHJ1bWVudHM7XG5jb25zdCB7IE5BVElWRV9XSU4sIFdFQlZJRVdfV0lOIH0gPSBjb250ZXh0O1xuXG5leHBvcnQge1xuICBJb3NEcml2ZXIsIGRlc2lyZWRDYXBDb25zdHJhaW50cywgZGVzaXJlZENhcFZhbGlkYXRpb24sIGNvbW1hbmRzLCBpb3NDb21tYW5kcyxcbiAgc2V0dGluZ3MsIGRldmljZSwgZGVmYXVsdFNlcnZlckNhcHMsIHV0aWxzLCBJV0RQLCB1aWF1dG8sIEluc3RydW1lbnRzLFxuICBpbnN0cnVtZW50c1V0aWxzLCBzdGFydEh0dHBzU2VydmVyLCBOQVRJVkVfV0lOLCBXRUJWSUVXX1dJTixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IElvc0RyaXZlcjtcblxuXG4vLyBpb3MgbG9nIGFjY2Vzc1xuaW1wb3J0IExvZyBmcm9tICcuL2xpYi9kZXZpY2UtbG9nL2lvcy1sb2cnO1xuaW1wb3J0IENyYXNoTG9nIGZyb20gJy4vbGliL2RldmljZS1sb2cvaW9zLWNyYXNoLWxvZyc7XG5pbXBvcnQgUGVyZm9ybWFuY2VMb2cgZnJvbSAnLi9saWIvZGV2aWNlLWxvZy9pb3MtcGVyZm9ybWFuY2UtbG9nJztcblxuY29uc3QgSU9TTG9nID0gTG9nO1xuY29uc3QgSU9TQ3Jhc2hMb2cgPSBDcmFzaExvZztcbmNvbnN0IElPU1BlcmZvcm1hbmNlTG9nID0gUGVyZm9ybWFuY2VMb2c7XG5cbmV4cG9ydCB7IElPU0xvZywgSU9TQ3Jhc2hMb2csIElPU1BlcmZvcm1hbmNlTG9nIH07XG5cbi8vIGFwcCB1dGlsc1xuaW1wb3J0ICogYXMgYXBwVXRpbHMgZnJvbSAnLi9saWIvYXBwLXV0aWxzJztcblxuZXhwb3J0IHsgYXBwVXRpbHMgfTtcblxuLy8gaU9TIGF1dGhvcml6ZVxuaW1wb3J0IHsgYXV0aG9yaXplIH0gZnJvbSAnLi9iaW4vYXV0aG9yaXplLWlvcyc7XG5cbmV4cG9ydCB7IGF1dGhvcml6ZSB9O1xuIl0sImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLiJ9
