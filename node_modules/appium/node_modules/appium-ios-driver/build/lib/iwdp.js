"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IWDP = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _events = _interopRequireDefault(require("events"));

var _logger = _interopRequireDefault(require("./logger"));

var _axios = _interopRequireDefault(require("axios"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

const IWDP_CMD = 'ios_webkit_debug_proxy';
const MAX_RETRIES = 10;

const iwdpLogger = _appiumSupport.logger.getLogger('IWDP');

class IWDP extends _events.default {
  constructor(opts = {}) {
    super();
    this.udid = opts.udid || null;
    this.logStdout = !!opts.logStdout;
    this.attempts = 0;
    this.port = opts.webkitDebugProxyPort || 27753;
    this.process = this.createIWDPProcess();
    this.endpoint = `http://localhost:${this.port}`;
  }

  createIWDPProcess() {
    const process = new _teen_process.SubProcess(IWDP_CMD, ['-c', `${this.udid}:${this.port}`, '-d']);
    process.on('exit', () => this.onExit());
    process.on('lines-stderr', iwdpLogger.error);

    if (this.logStdout) {
      process.on('lines-stdout', iwdpLogger.debug);
    }

    return process;
  }

  async onExit() {
    if (!this.exitRequested) {
      this.process = this.createIWDPProcess();
      await this.start();
    }
  }

  async start() {
    if (++this.attempts > MAX_RETRIES) {
      return this.emit('error', new Error(`Failed to start IWDP server. Max retry attempts ${MAX_RETRIES} reached`));
    }

    this.exitRequested = false;

    if (!(await this.isSupported())) {
      _logger.default.errorAndThrow(`'ios_webkit_debug_proxy' not installed on this machine. Try 'brew install ios-webkit-debug-proxy`);
    }

    _logger.default.debug(`Starting ios_webkit_debug_proxy at port ${this.port} on device ${this.udid}`);

    await this.process.start(0);

    try {
      await (0, _asyncbox.retryInterval)(20, 500, async () => await (0, _axios.default)({
        url: this.endpoint
      }));
      this.emit('start');
    } catch (ign) {
      try {
        await this.process.stop();
      } catch (ign2) {}

      _logger.default.errorAndThrow(`Timed out waiting for ios_webkit_debug_proxy to open`);
    }
  }

  async stop() {
    this.attempts = 0;
    this.exitRequested = true;
    return await this.process.stop();
  }

  async isSupported() {
    if (typeof this.supported !== 'undefined') {
      return this.supported;
    }

    try {
      await _appiumSupport.fs.which(IWDP_CMD);
      this.supported = true;
    } catch (e) {
      this.supported = false;
    }

    return this.supported;
  }

}

exports.IWDP = IWDP;
var _default = IWDP;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pd2RwLmpzIl0sIm5hbWVzIjpbIklXRFBfQ01EIiwiTUFYX1JFVFJJRVMiLCJpd2RwTG9nZ2VyIiwiYmFzZUxvZ2dlciIsImdldExvZ2dlciIsIklXRFAiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJ1ZGlkIiwibG9nU3Rkb3V0IiwiYXR0ZW1wdHMiLCJwb3J0Iiwid2Via2l0RGVidWdQcm94eVBvcnQiLCJwcm9jZXNzIiwiY3JlYXRlSVdEUFByb2Nlc3MiLCJlbmRwb2ludCIsIlN1YlByb2Nlc3MiLCJvbiIsIm9uRXhpdCIsImVycm9yIiwiZGVidWciLCJleGl0UmVxdWVzdGVkIiwic3RhcnQiLCJlbWl0IiwiRXJyb3IiLCJpc1N1cHBvcnRlZCIsImxvZ2dlciIsImVycm9yQW5kVGhyb3ciLCJ1cmwiLCJpZ24iLCJzdG9wIiwiaWduMiIsInN1cHBvcnRlZCIsImZzIiwid2hpY2giLCJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFFBQVEsR0FBRyx3QkFBakI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsRUFBcEI7O0FBRUEsTUFBTUMsVUFBVSxHQUFHQyxzQkFBV0MsU0FBWCxDQUFxQixNQUFyQixDQUFuQjs7QUFFQSxNQUFNQyxJQUFOLFNBQW1CQyxlQUFuQixDQUFnQztBQUM5QkMsRUFBQUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhO0FBQ3RCO0FBRUEsU0FBS0MsSUFBTCxHQUFZRCxJQUFJLENBQUNDLElBQUwsSUFBYSxJQUF6QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsQ0FBQyxDQUFDRixJQUFJLENBQUNFLFNBQXhCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtDLElBQUwsR0FBWUosSUFBSSxDQUFDSyxvQkFBTCxJQUE2QixLQUF6QztBQUNBLFNBQUtDLE9BQUwsR0FBZSxLQUFLQyxpQkFBTCxFQUFmO0FBQ0EsU0FBS0MsUUFBTCxHQUFpQixvQkFBbUIsS0FBS0osSUFBSyxFQUE5QztBQUNEOztBQUVERyxFQUFBQSxpQkFBaUIsR0FBSTtBQUVuQixVQUFNRCxPQUFPLEdBQUcsSUFBSUcsd0JBQUosQ0FBZWpCLFFBQWYsRUFBeUIsQ0FBQyxJQUFELEVBQVEsR0FBRSxLQUFLUyxJQUFLLElBQUcsS0FBS0csSUFBSyxFQUFqQyxFQUFvQyxJQUFwQyxDQUF6QixDQUFoQjtBQUNBRSxJQUFBQSxPQUFPLENBQUNJLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLE1BQU0sS0FBS0MsTUFBTCxFQUF6QjtBQUNBTCxJQUFBQSxPQUFPLENBQUNJLEVBQVIsQ0FBVyxjQUFYLEVBQTJCaEIsVUFBVSxDQUFDa0IsS0FBdEM7O0FBQ0EsUUFBSSxLQUFLVixTQUFULEVBQW9CO0FBQ2xCSSxNQUFBQSxPQUFPLENBQUNJLEVBQVIsQ0FBVyxjQUFYLEVBQTJCaEIsVUFBVSxDQUFDbUIsS0FBdEM7QUFDRDs7QUFDRCxXQUFPUCxPQUFQO0FBQ0Q7O0FBRUQsUUFBTUssTUFBTixHQUFnQjtBQUVkLFFBQUksQ0FBQyxLQUFLRyxhQUFWLEVBQXlCO0FBQ3ZCLFdBQUtSLE9BQUwsR0FBZSxLQUFLQyxpQkFBTCxFQUFmO0FBQ0EsWUFBTSxLQUFLUSxLQUFMLEVBQU47QUFDRDtBQUNGOztBQUVELFFBQU1BLEtBQU4sR0FBZTtBQUNiLFFBQUksRUFBRSxLQUFLWixRQUFQLEdBQWtCVixXQUF0QixFQUFtQztBQUNqQyxhQUFPLEtBQUt1QixJQUFMLENBQVUsT0FBVixFQUFtQixJQUFJQyxLQUFKLENBQVcsbURBQWtEeEIsV0FBWSxVQUF6RSxDQUFuQixDQUFQO0FBQ0Q7O0FBQ0QsU0FBS3FCLGFBQUwsR0FBcUIsS0FBckI7O0FBR0EsUUFBSSxFQUFDLE1BQU0sS0FBS0ksV0FBTCxFQUFQLENBQUosRUFBK0I7QUFDN0JDLHNCQUFPQyxhQUFQLENBQXNCLGtHQUF0QjtBQUNEOztBQUVERCxvQkFBT04sS0FBUCxDQUFjLDJDQUEwQyxLQUFLVCxJQUFLLGNBQWEsS0FBS0gsSUFBSyxFQUF6Rjs7QUFDQSxVQUFNLEtBQUtLLE9BQUwsQ0FBYVMsS0FBYixDQUFtQixDQUFuQixDQUFOOztBQUdBLFFBQUk7QUFDRixZQUFNLDZCQUFjLEVBQWQsRUFBa0IsR0FBbEIsRUFBdUIsWUFBWSxNQUFNLG9CQUFNO0FBQUNNLFFBQUFBLEdBQUcsRUFBRSxLQUFLYjtBQUFYLE9BQU4sQ0FBekMsQ0FBTjtBQUNBLFdBQUtRLElBQUwsQ0FBVSxPQUFWO0FBQ0QsS0FIRCxDQUdFLE9BQU9NLEdBQVAsRUFBWTtBQUNaLFVBQUk7QUFDRixjQUFNLEtBQUtoQixPQUFMLENBQWFpQixJQUFiLEVBQU47QUFDRCxPQUZELENBRUUsT0FBT0MsSUFBUCxFQUFhLENBQUc7O0FBQ2xCTCxzQkFBT0MsYUFBUCxDQUFzQixzREFBdEI7QUFDRDtBQUNGOztBQUVELFFBQU1HLElBQU4sR0FBYztBQUNaLFNBQUtwQixRQUFMLEdBQWdCLENBQWhCO0FBQ0EsU0FBS1csYUFBTCxHQUFxQixJQUFyQjtBQUNBLFdBQU8sTUFBTSxLQUFLUixPQUFMLENBQWFpQixJQUFiLEVBQWI7QUFDRDs7QUFLRCxRQUFNTCxXQUFOLEdBQXFCO0FBQ25CLFFBQUksT0FBTyxLQUFLTyxTQUFaLEtBQTBCLFdBQTlCLEVBQTJDO0FBQ3pDLGFBQU8sS0FBS0EsU0FBWjtBQUNEOztBQUVELFFBQUk7QUFDRixZQUFNQyxrQkFBR0MsS0FBSCxDQUFTbkMsUUFBVCxDQUFOO0FBQ0EsV0FBS2lDLFNBQUwsR0FBaUIsSUFBakI7QUFDRCxLQUhELENBR0UsT0FBT0csQ0FBUCxFQUFVO0FBQ1YsV0FBS0gsU0FBTCxHQUFpQixLQUFqQjtBQUNEOztBQUNELFdBQU8sS0FBS0EsU0FBWjtBQUNEOztBQTlFNkI7OztlQWtGakI1QixJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgZnMsIGxvZ2dlciBhcyBiYXNlTG9nZ2VyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IElXRFBfQ01EID0gJ2lvc193ZWJraXRfZGVidWdfcHJveHknO1xuY29uc3QgTUFYX1JFVFJJRVMgPSAxMDtcblxuY29uc3QgaXdkcExvZ2dlciA9IGJhc2VMb2dnZXIuZ2V0TG9nZ2VyKCdJV0RQJyk7XG5cbmNsYXNzIElXRFAgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMudWRpZCA9IG9wdHMudWRpZCB8fCBudWxsO1xuICAgIHRoaXMubG9nU3Rkb3V0ID0gISFvcHRzLmxvZ1N0ZG91dDtcbiAgICB0aGlzLmF0dGVtcHRzID0gMDtcbiAgICB0aGlzLnBvcnQgPSBvcHRzLndlYmtpdERlYnVnUHJveHlQb3J0IHx8IDI3NzUzO1xuICAgIHRoaXMucHJvY2VzcyA9IHRoaXMuY3JlYXRlSVdEUFByb2Nlc3MoKTtcbiAgICB0aGlzLmVuZHBvaW50ID0gYGh0dHA6Ly9sb2NhbGhvc3Q6JHt0aGlzLnBvcnR9YDtcbiAgfVxuXG4gIGNyZWF0ZUlXRFBQcm9jZXNzICgpIHtcbiAgICAvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvaW9zLXdlYmtpdC1kZWJ1Zy1wcm94eSBmb3IgcmVmZXJlbmNlKVxuICAgIGNvbnN0IHByb2Nlc3MgPSBuZXcgU3ViUHJvY2VzcyhJV0RQX0NNRCwgWyctYycsIGAke3RoaXMudWRpZH06JHt0aGlzLnBvcnR9YCwgJy1kJ10pO1xuICAgIHByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiB0aGlzLm9uRXhpdCgpKTtcbiAgICBwcm9jZXNzLm9uKCdsaW5lcy1zdGRlcnInLCBpd2RwTG9nZ2VyLmVycm9yKTtcbiAgICBpZiAodGhpcy5sb2dTdGRvdXQpIHtcbiAgICAgIHByb2Nlc3Mub24oJ2xpbmVzLXN0ZG91dCcsIGl3ZHBMb2dnZXIuZGVidWcpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2VzcztcbiAgfVxuXG4gIGFzeW5jIG9uRXhpdCAoKSB7XG4gICAgLy8gSWYgdGhlIHByb2Nlc3MgZXhpdHMgYW5kIHRoZSBleGl0IHdhc24ndCByZXF1ZXN0ZWQgYnkgdGhlIEFQSSwgcmVzdGFydCBpdFxuICAgIGlmICghdGhpcy5leGl0UmVxdWVzdGVkKSB7XG4gICAgICB0aGlzLnByb2Nlc3MgPSB0aGlzLmNyZWF0ZUlXRFBQcm9jZXNzKCk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RhcnQgKCkge1xuICAgIGlmICgrK3RoaXMuYXR0ZW1wdHMgPiBNQVhfUkVUUklFUykge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoYEZhaWxlZCB0byBzdGFydCBJV0RQIHNlcnZlci4gTWF4IHJldHJ5IGF0dGVtcHRzICR7TUFYX1JFVFJJRVN9IHJlYWNoZWRgKSk7XG4gICAgfVxuICAgIHRoaXMuZXhpdFJlcXVlc3RlZCA9IGZhbHNlO1xuXG4gICAgLy8gVGhyb3cgZXJyb3IgaWYgaW9zX3dlYmtpdF9kZWJ1Z19wcm94eSBpcyBub3QgaW5zdGFsbGVkXG4gICAgaWYgKCFhd2FpdCB0aGlzLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGAnaW9zX3dlYmtpdF9kZWJ1Z19wcm94eScgbm90IGluc3RhbGxlZCBvbiB0aGlzIG1hY2hpbmUuIFRyeSAnYnJldyBpbnN0YWxsIGlvcy13ZWJraXQtZGVidWctcHJveHlgKTtcbiAgICB9XG5cbiAgICBsb2dnZXIuZGVidWcoYFN0YXJ0aW5nIGlvc193ZWJraXRfZGVidWdfcHJveHkgYXQgcG9ydCAke3RoaXMucG9ydH0gb24gZGV2aWNlICR7dGhpcy51ZGlkfWApO1xuICAgIGF3YWl0IHRoaXMucHJvY2Vzcy5zdGFydCgwKTtcblxuICAgIC8vIFJldHJ5IHBpbmdpbmcgdGhlIGl3ZHAgc2VydmVyIHVudGlsIGl0J3MgcmVhZHlcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgyMCwgNTAwLCBhc3luYyAoKSA9PiBhd2FpdCBheGlvcyh7dXJsOiB0aGlzLmVuZHBvaW50fSkpO1xuICAgICAgdGhpcy5lbWl0KCdzdGFydCcpO1xuICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzLnN0b3AoKTtcbiAgICAgIH0gY2F0Y2ggKGlnbjIpIHsgfVxuICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coYFRpbWVkIG91dCB3YWl0aW5nIGZvciBpb3Nfd2Via2l0X2RlYnVnX3Byb3h5IHRvIG9wZW5gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdG9wICgpIHtcbiAgICB0aGlzLmF0dGVtcHRzID0gMDtcbiAgICB0aGlzLmV4aXRSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc3Muc3RvcCgpO1xuICB9XG5cbiAgLyoqXG5cdCAqIElzICdpb3Nfd2Via2l0X2RlYnVnX3Byb3h5JyBhdmFpbGFibGU/XG5cdCAqL1xuICBhc3luYyBpc1N1cHBvcnRlZCAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnN1cHBvcnRlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1cHBvcnRlZDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZnMud2hpY2goSVdEUF9DTUQpO1xuICAgICAgdGhpcy5zdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN1cHBvcnRlZDtcbiAgfVxufVxuXG5leHBvcnQgeyBJV0RQIH07XG5leHBvcnQgZGVmYXVsdCBJV0RQO1xuIl0sImZpbGUiOiJsaWIvaXdkcC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
