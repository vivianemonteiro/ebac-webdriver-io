"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("../utils");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const FLICK_MS = 3000;

commands.nativeTap = async function nativeTap(el) {
  el = (0, _utils.unwrapEl)(el);
  let command = `au.tapById('${el}')`;
  await this.uiAutoClient.sendCommand(command);
};

commands.click = async function click(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    if (this.opts.nativeWebTap && !this.isRealDevice()) {
      await this.nativeWebTap(el);
    } else {
      let atomsElement = this.useAtomsElement(el);
      return await this.executeAtom('click', [atomsElement]);
    }
  } else {
    if (this.opts.useRobot) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    } else {
      await this.nativeTap(el);
    }
  }
};

commands.clickCurrent = async function clickCurrent() {
  if (this.isWebContext()) {
    if (_lodash.default.isNull(this.curWebCoords)) {
      throw new _appiumBaseDriver.errors.UnknownError('Cannot call click() before calling moveTo() to set coords');
    }

    await this.clickWebCoords();
  } else {
    if (this.curCoords === null) {
      throw new _appiumBaseDriver.errors.UnknownError('Cannot call click() before calling moveTo() to set coords');
    }

    await this.clickCoords(this.curCoords);
  }
};

helpers.clickCoords = async function clickCoords(coords) {
  if (this.opts.useRobot) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  } else {
    let opts = coords;
    opts.tapCount = 1;
    opts.duration = 0.3;
    opts.touchCount = 1;
    let command = `au.complexTap(${JSON.stringify(opts)})`;
    await this.uiAutoClient.sendCommand(command);
  }
};

commands.mobileRotation = async function mobileRotation(x, y, radius, rotation, touchCount, duration, el) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  }

  el = (0, _utils.unwrapEl)(el);
  let location = {
    x,
    y
  };
  let options = {
    duration,
    radius,
    rotation,
    touchCount
  };

  if (el) {
    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    await this.uiAutoClient.sendCommand(`au.getElement('${el}').rotateWithOptions(${JSON.stringify(options)})`);
  } else {
    await this.uiAutoClient.sendCommand(`target.rotateWithOptions(${JSON.stringify(location)}, ${JSON.stringify(options)})`);
  }
};

helpers.handleTap = async function handleTap(gesture) {
  let options = gesture.options;
  let cmdBase = options.element ? `au.getElement('${options.element}')` : 'UIATarget.localTarget().frontMostApp()';
  let rect = await this.uiAutoClient.sendCommand(`${cmdBase}.rect()`);
  let offsetX = 0.5;
  let offsetY = 0.5;
  let size = {
    w: rect.size.width,
    h: rect.size.height
  };
  options.x = options.x || size.w / 2;
  options.y = options.y || size.h / 2;
  offsetX = options.x / size.w;
  offsetY = options.y / size.h;
  let opts = {
    tapOffset: {
      x: offsetX,
      y: offsetY
    },
    tapCount: options.count || 1,
    touchCount: 1
  };
  let cmd = `${cmdBase}.tapWithOptions(${JSON.stringify(opts)})`;
  return await this.uiAutoClient.sendCommand(cmd);
};

helpers.isDrag = function isDrag(gestures) {
  return gestures.length === 4 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'moveTo' && gestures[3].action === 'release';
};

helpers.isPinchAndZoom = function isPinchAndZoom(gestures) {
  return gestures.length === 3 && gestures[0].action === 'press' && gestures[1].action === 'moveTo' && gestures[2].action === 'release';
};

helpers.getCoordinates = async function getCoordinates(gesture) {
  let el = gesture.options.element;
  let coordinates = {
    x: 0,
    y: 0,
    areOffsets: false
  };

  if (el) {
    let command = `au.getElement('${el}').rect()`;
    let rect = await this.uiAutoClient.sendCommand(command);
    let pos = {
      x: rect.origin.x,
      y: rect.origin.y
    };
    let size = {
      w: rect.size.width,
      h: rect.size.height
    };
    let offsetX = 0;
    let offsetY = 0;

    if (gesture.options.x || gesture.options.y) {
      offsetX = gesture.options.x || 0;
      offsetY = gesture.options.y || 0;
    } else {
      offsetX = size.w / 2;
      offsetY = size.h / 2;
    }

    coordinates.x = pos.x + offsetX;
    coordinates.y = pos.y + offsetY;
  } else {
    coordinates.areOffsets = gesture.action === 'moveTo';
    coordinates.x = gesture.options.x || 0;
    coordinates.y = gesture.options.y || 0;
  }

  return coordinates;
};

helpers.applyMoveToOffset = function applyMoveToOffset(firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

helpers.handleDrag = async function handleDrag(gestures) {
  let press = gestures[0];
  let wait = gestures[1];
  let moveTo = gestures[2];
  let pressCoordinates = await this.getCoordinates(press);
  let duration = parseInt(wait.options.ms, 10) / 1000;
  let moveToCoordinates = await this.getCoordinates(moveTo);
  moveToCoordinates = this.applyMoveToOffset(pressCoordinates, moveToCoordinates);
  let dragCommand = `au.dragApp(` + `${pressCoordinates.x}, ${pressCoordinates.y}, ` + `${moveToCoordinates.x}, ${moveToCoordinates.y}, ` + `${duration})`;
  return await this.uiAutoClient.sendCommand(dragCommand);
};

helpers.handlePinchAndZoom = async function handlePinchAndZoom(gestures) {
  let press = gestures[0];
  let moveTo = gestures[1];
  let pressCoordinates = await this.getCoordinates(press);
  let moveToCoordinates = await this.getCoordinates(moveTo);
  moveToCoordinates = this.applyMoveToOffset(pressCoordinates, moveToCoordinates);
  let pinchCommand = `au.dragApp(` + `${pressCoordinates.x}, ${pressCoordinates.y}, ` + `${moveToCoordinates.x}, ${moveToCoordinates.y}`;
  return await this.uiAutoClient.sendCommand(pinchCommand);
};

commands.performTouch = async function performTouch(gestures) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  }

  if (gestures.length === 1 && gestures[0].action === 'tap') {
    return await this.handleTap(gestures[0]);
  } else if (this.isDrag(gestures)) {
    return await this.handleDrag(gestures);
  }

  let touchStateObjects = await this.parseTouch(gestures);
  await this.uiAutoClient.sendCommand(`target.touch(${JSON.stringify(touchStateObjects)})`);
};

commands.parseTouch = async function parseTouch(gestures) {
  if (_lodash.default.last(gestures).action === 'release') {
    gestures.pop();
  }

  let touchStateObjects = [];

  let finishParsing = () => {
    let prevPos = null;
    let time = 0;

    for (let state of touchStateObjects) {
      if (state.touch[0] === false) {
        state.touch[0] = prevPos;
      } else if (state.touch[0].offset && prevPos) {
        state.touch[0].x += prevPos.x;
        state.touch[0].y += prevPos.y;
      }

      if (state.touch[0]) {
        delete state.touch[0].offset;
        prevPos = state.touch[0];
      }

      let timeOffset = state.timeOffset;
      time += timeOffset;
      state.time = time;
      delete state.timeOffset;
    }
  };

  const needsPoint = action => _lodash.default.includes(['press', 'moveTo', 'tap', 'longPress'], action);

  let cycleThroughGestures = async () => {
    let gesture = gestures.shift();

    if (typeof gesture === 'undefined') {
      return finishParsing();
    }

    let tapPoint = false;

    if (needsPoint(gesture.action)) {
      let el = gesture.options.element;

      if (el) {
        let command = `au.getElement('${el}').rect()`;
        let rect = await this.uiAutoClient.sendCommand(command);
        let pos = {
          x: rect.origin.x,
          y: rect.origin.y
        };
        let size = {
          w: rect.size.width,
          h: rect.size.height
        };

        if (gesture.options.x || gesture.options.y) {
          tapPoint = {
            offset: false,
            x: pos.x + (gesture.options.x || 0),
            y: pos.y + (gesture.options.y || 0)
          };
        } else {
          tapPoint = {
            offset: false,
            x: pos.x + size.w / 2,
            y: pos.y + size.h / 2
          };
        }

        let touchStateObject = {
          timeOffset: 0.2,
          touch: [tapPoint]
        };
        touchStateObjects.push(touchStateObject);
        await cycleThroughGestures();
      } else {
        tapPoint = {
          offset: true,
          x: gesture.options.x || 0,
          y: gesture.options.y || 0
        };
        let touchStateObject = {
          timeOffset: 0.2,
          touch: [tapPoint]
        };
        touchStateObjects.push(touchStateObject);
        await cycleThroughGestures();
      }
    } else {
      tapPoint = false;
      let offset = 0.2;

      if (gesture.action === 'wait') {
        if (typeof gesture.options.ms !== 'undefined' || gesture.options.ms !== null) {
          offset = parseInt(gesture.options.ms, 10) / 1000;
        }
      }

      let touchStateObject = {
        timeOffset: offset,
        touch: [tapPoint]
      };
      touchStateObjects.push(touchStateObject);
      await cycleThroughGestures();
    }
  };

  await cycleThroughGestures();
  return touchStateObjects;
};

const mergeStates = function mergeStates(states) {
  let getSlice = function (states, index) {
    let array = [];

    for (let i = 0; i < states.length; i++) {
      array.push(states[i][index]);
    }

    return array;
  };

  const timeSequence = function timeSequence(states) {
    let seq = [];

    _lodash.default.each(states, function eachState(state) {
      let times = _lodash.default.map(state, 'time');

      seq = _lodash.default.union(seq, times);
    });

    return seq.sort();
  };

  let merged = [];

  _lodash.default.each(timeSequence(states), function eachSequence(time, index) {
    let slice = getSlice(states, index);
    let obj = {
      time,
      touch: []
    };

    _lodash.default.each(slice, function eachSlice(action) {
      obj.touch.push(action.touch[0]);
    });

    merged.push(obj);
  });

  return merged;
};

commands.performMultiAction = async function performMultiAction(actions) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  }

  let states = [];

  let cycleThroughActions = async () => {
    let action = actions.shift();

    if (typeof action === 'undefined') {
      let mergedStates = mergeStates(states);

      if (this.isPinchAndZoom(mergedStates)) {
        await this.handlePinchAndZoom(mergedStates);
        return;
      } else {
        await this.uiAutoClient.sendCommand(`target.touch(${JSON.stringify(mergedStates)})`);
        return;
      }
    }

    let val = await this.parseTouch(action);
    states.push(val);
    await cycleThroughActions();
  };

  await cycleThroughActions();
};

helpers.mobileScroll = async function mobileScroll(opts = {}) {
  let direction = opts.direction;
  let el = opts.element;
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  } else {
    if (_appiumSupport.util.hasValue(el) && !_appiumSupport.util.hasValue(direction)) {
      await this.scrollToElement(el);
      return;
    }

    direction = _lodash.default.capitalize(direction);
    let command;

    if (_lodash.default.isNull(el) || _lodash.default.isUndefined(el)) {
      command = `au.scrollFirstView('${direction}')`;
    } else {
      command = `au.getElement('${el}').scroll${direction}()`;
    }

    try {
      await this.uiAutoClient.sendCommand(command);
    } catch (err) {
      if (!_lodash.default.includes(err.message, 'kAXErrorFailure')) throw err;

      _logger.default.warn('Received kAXErrorFailure, generally indicating an attempt ' + 'to scroll past the end of the view. Continuing.');
    }
  }
};

commands.scrollToElement = async function scrollToElement(element) {
  element = (0, _utils.unwrapEl)(element);
  const command = `au.getElement('${element}').scrollToVisible()`;
  await this.uiAutoClient.sendCommand(command);
};

commands.flick = async function flick(el, xspeed, yspeed, xoffset, yoffset, speed) {
  el = (0, _utils.unwrapEl)(el);

  if (_lodash.default.every([el, xoffset, yoffset, speed], p => !_lodash.default.isNull(p) && !_lodash.default.isUndefined(p))) {
    await this.flickElement(el, xoffset, yoffset, speed);
  } else if (_lodash.default.every([xspeed, yspeed], p => !_lodash.default.isNull(p) && !_lodash.default.isUndefined(p))) {
    await this.xySpeedFlick(xspeed, yspeed);
  } else {
    throw new _appiumBaseDriver.errors.UnknownError('Bad flick parameters, pass either (xspeed, yspeed) or (element, xoffset, yoffset, speed)!');
  }
};

helpers.xySpeedFlick = async function xySpeedFlick(xSpeed, ySpeed) {
  let command = `au.touchFlickFromSpeed(${xSpeed},${ySpeed})`;
  await _bluebird.default.all([this.uiAutoClient.sendCommand(command), _bluebird.default.delay(FLICK_MS)]);
};

helpers.flickElement = async function flickElement(el, xoffset, yoffset, speed) {
  el = (0, _utils.unwrapEl)(el);
  let command = '';

  if (this.isWebContext()) {
    await this.webFlickElement(el, xoffset, yoffset);
  } else {
    command = `au.getElement('${el}').touchFlick(${xoffset},${yoffset},${speed})`;
    await _bluebird.default.all([this.uiAutoClient.sendCommand(command), _bluebird.default.delay(FLICK_MS)]);
  }
};

commands.mobileShake = async function mobileShake() {
  await this.uiAutoClient.sendCommand('au.shake()');
};

commands.moveTo = async function moveTo(el, xoffset = 0, yoffset = 0) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let {
      x,
      y
    } = await this.getLocation(el);
    let coords = {
      x: x + xoffset,
      y: y + yoffset
    };
    this.curWebCoords = coords;
    let atomsElement = this.useAtomsElement(el);
    let relCoords = {
      x: xoffset,
      y: yoffset
    };
    await this.executeAtom('move_mouse', [atomsElement, relCoords]);
  } else {
    if (_lodash.default.isNull(el) || _lodash.default.isUndefined(el)) {
      if (!this.curCoords) {
        throw new _appiumBaseDriver.errors.UnknownException('Current cursor position unknown, please use moveTo with an element the first time.');
      }

      this.curCoords = {
        x: this.curCoords.x + xoffset,
        y: this.curCoords.y + yoffset
      };
    } else {
      let elPos = await this.getLocation(el);
      this.curCoords = {
        x: elPos.x + xoffset,
        y: elPos.y + yoffset
      };
    }
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
