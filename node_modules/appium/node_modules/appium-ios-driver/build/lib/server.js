"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startServer = startServer;
exports.startHttpsServer = startHttpsServer;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _driver = require("./driver");

var _https = _interopRequireDefault(require("https"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _axios = _interopRequireDefault(require("axios"));

var _url = _interopRequireDefault(require("url"));

var _portfinder = _interopRequireDefault(require("portfinder"));

const pem = _bluebird.default.promisifyAll(require('pem'));

async function startServer(port, host) {
  let driver = new _driver.IosDriver();
  let routeConfiguringFunction = (0, _appiumBaseDriver.routeConfiguringFunction)(driver);
  let server = await (0, _appiumBaseDriver.server)({
    routeConfiguringFunction,
    port,
    hostname: host
  });

  _logger.default.info(`IosDriver server listening on http://${host}:${port}`);

  return server;
}

async function startHttpsServer(port, host) {
  let privateKey = await pem.createPrivateKeyAsync();
  let keys = await pem.createCertificateAsync({
    days: 1,
    selfSigned: true,
    serviceKey: privateKey.key
  });
  let pemCertificate = keys.certificate;
  let httpsPort = await _portfinder.default.getPortPromise();
  const serverOpts = {
    key: keys.serviceKey,
    cert: pemCertificate
  };

  let sslServer = _https.default.createServer(serverOpts, function requestReceived(req, res) {
    _logger.default.debug(`Received HTTPS '${req.method}' request for '${req.url}'`);

    if (req.method === 'OPTIONS') {
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      res.writeHead(200);
      res.end();
    } else if (req.method === 'POST') {
      let body = '';
      req.on('data', function onData(data) {
        body += data;
      });
      req.on('end', async function onEnd() {
        let httpsUrl = _url.default.parse(req.url);

        let uri = `http://${host}:${port}${httpsUrl.pathname}`;

        _logger.default.debug(`Passing '${body}' to '${uri}'`);

        await (0, _axios.default)({
          method: 'POST',
          url: uri,
          data: body
        });
        res.writeHead(200);
        res.end();
      });
    }
  }).listen(httpsPort);

  return {
    sslServer,
    pemCertificate,
    httpsPort
  };
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2ZXIuanMiXSwibmFtZXMiOlsicGVtIiwiQiIsInByb21pc2lmeUFsbCIsInJlcXVpcmUiLCJzdGFydFNlcnZlciIsInBvcnQiLCJob3N0IiwiZHJpdmVyIiwiSW9zRHJpdmVyIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwic2VydmVyIiwiaG9zdG5hbWUiLCJsb2ciLCJpbmZvIiwic3RhcnRIdHRwc1NlcnZlciIsInByaXZhdGVLZXkiLCJjcmVhdGVQcml2YXRlS2V5QXN5bmMiLCJrZXlzIiwiY3JlYXRlQ2VydGlmaWNhdGVBc3luYyIsImRheXMiLCJzZWxmU2lnbmVkIiwic2VydmljZUtleSIsImtleSIsInBlbUNlcnRpZmljYXRlIiwiY2VydGlmaWNhdGUiLCJodHRwc1BvcnQiLCJwb3J0ZmluZGVyIiwiZ2V0UG9ydFByb21pc2UiLCJzZXJ2ZXJPcHRzIiwiY2VydCIsInNzbFNlcnZlciIsImh0dHBzIiwiY3JlYXRlU2VydmVyIiwicmVxdWVzdFJlY2VpdmVkIiwicmVxIiwicmVzIiwiZGVidWciLCJtZXRob2QiLCJ1cmwiLCJzZXRIZWFkZXIiLCJ3cml0ZUhlYWQiLCJlbmQiLCJib2R5Iiwib24iLCJvbkRhdGEiLCJkYXRhIiwib25FbmQiLCJodHRwc1VybCIsInBhcnNlIiwidXJpIiwicGF0aG5hbWUiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBLE1BQU1BLEdBQUcsR0FBR0Msa0JBQUVDLFlBQUYsQ0FBZUMsT0FBTyxDQUFDLEtBQUQsQ0FBdEIsQ0FBWjs7QUFHQSxlQUFlQyxXQUFmLENBQTRCQyxJQUE1QixFQUFrQ0MsSUFBbEMsRUFBd0M7QUFDdEMsTUFBSUMsTUFBTSxHQUFHLElBQUlDLGlCQUFKLEVBQWI7QUFDQSxNQUFJQyx3QkFBd0IsR0FBRyxnREFBV0YsTUFBWCxDQUEvQjtBQUNBLE1BQUlHLE1BQU0sR0FB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Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBzZXJ2ZXIgYXMgYmFzZVNlcnZlciwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIGFzIG1ha2VSb3V0ZXIgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgSW9zRHJpdmVyIH0gZnJvbSAnLi9kcml2ZXInO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgcG9ydGZpbmRlciBmcm9tICdwb3J0ZmluZGVyJztcbmNvbnN0IHBlbSA9IEIucHJvbWlzaWZ5QWxsKHJlcXVpcmUoJ3BlbScpKTtcblxuXG5hc3luYyBmdW5jdGlvbiBzdGFydFNlcnZlciAocG9ydCwgaG9zdCkge1xuICBsZXQgZHJpdmVyID0gbmV3IElvc0RyaXZlcigpO1xuICBsZXQgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uID0gbWFrZVJvdXRlcihkcml2ZXIpO1xuICBsZXQgc2VydmVyID0gYXdhaXQgYmFzZVNlcnZlcih7cm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLCBwb3J0LCBob3N0bmFtZTogaG9zdH0pO1xuICBsb2cuaW5mbyhgSW9zRHJpdmVyIHNlcnZlciBsaXN0ZW5pbmcgb24gaHR0cDovLyR7aG9zdH06JHtwb3J0fWApO1xuICByZXR1cm4gc2VydmVyO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzdGFydEh0dHBzU2VydmVyIChwb3J0LCBob3N0KSB7XG4gIC8vIENyZWF0ZSBhIHJhbmRvbSBwZW0gY2VydGlmaWNhdGVcbiAgbGV0IHByaXZhdGVLZXkgPSBhd2FpdCBwZW0uY3JlYXRlUHJpdmF0ZUtleUFzeW5jKCk7XG4gIGxldCBrZXlzID0gYXdhaXQgcGVtLmNyZWF0ZUNlcnRpZmljYXRlQXN5bmMoe2RheXM6IDEsIHNlbGZTaWduZWQ6IHRydWUsIHNlcnZpY2VLZXk6IHByaXZhdGVLZXkua2V5fSk7XG4gIGxldCBwZW1DZXJ0aWZpY2F0ZSA9IGtleXMuY2VydGlmaWNhdGU7XG5cbiAgLy8gZmluZCBhIHBvcnRcbiAgbGV0IGh0dHBzUG9ydCA9IGF3YWl0IHBvcnRmaW5kZXIuZ2V0UG9ydFByb21pc2UoKTtcblxuICAvLyBIb3N0IGFuIFNTTCBzZXJ2ZXIgdGhhdCB1c2VzIHRoYXQgY2VydGlmaWNhdGVcbiAgY29uc3Qgc2VydmVyT3B0cyA9IHtrZXk6IGtleXMuc2VydmljZUtleSwgY2VydDogcGVtQ2VydGlmaWNhdGV9O1xuICBsZXQgc3NsU2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKHNlcnZlck9wdHMsIGZ1bmN0aW9uIHJlcXVlc3RSZWNlaXZlZCAocmVxLCByZXMpIHtcbiAgICBsb2cuZGVidWcoYFJlY2VpdmVkIEhUVFBTICcke3JlcS5tZXRob2R9JyByZXF1ZXN0IGZvciAnJHtyZXEudXJsfSdgKTtcbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuICAgICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICdQT1NULCBHRVQsIE9QVElPTlMnKTtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnLCAnQ29udGVudC1UeXBlJyk7XG4gICAgICByZXMud3JpdGVIZWFkKDIwMCk7XG4gICAgICByZXMuZW5kKCk7XG4gICAgfSBlbHNlIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICAgIGxldCBib2R5ID0gJyc7XG4gICAgICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiBvbkRhdGEgKGRhdGEpIHtcbiAgICAgICAgYm9keSArPSBkYXRhO1xuICAgICAgfSk7XG4gICAgICByZXEub24oJ2VuZCcsIGFzeW5jIGZ1bmN0aW9uIG9uRW5kICgpIHtcbiAgICAgICAgbGV0IGh0dHBzVXJsID0gdXJsLnBhcnNlKHJlcS51cmwpO1xuICAgICAgICBsZXQgdXJpID0gYGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH0ke2h0dHBzVXJsLnBhdGhuYW1lfWA7XG4gICAgICAgIGxvZy5kZWJ1ZyhgUGFzc2luZyAnJHtib2R5fScgdG8gJyR7dXJpfSdgKTtcblxuICAgICAgICAvLyBub3cgd2Ugc2VuZCB0byB0aGUgcmlnaHQgcGxhY2VcbiAgICAgICAgYXdhaXQgYXhpb3Moe1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIHVybDogdXJpLFxuICAgICAgICAgIGRhdGE6IGJvZHksXG4gICAgICAgIH0pO1xuICAgICAgICByZXMud3JpdGVIZWFkKDIwMCk7XG4gICAgICAgIHJlcy5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSkubGlzdGVuKGh0dHBzUG9ydCk7XG5cbiAgcmV0dXJuIHtcbiAgICBzc2xTZXJ2ZXIsXG4gICAgcGVtQ2VydGlmaWNhdGUsXG4gICAgaHR0cHNQb3J0LFxuICB9O1xufVxuXG5leHBvcnQgeyBzdGFydFNlcnZlciwgc3RhcnRIdHRwc1NlcnZlciB9O1xuIl0sImZpbGUiOiJsaWIvc2VydmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
