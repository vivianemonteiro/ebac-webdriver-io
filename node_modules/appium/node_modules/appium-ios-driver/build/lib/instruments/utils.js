"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.killAllInstruments = killAllInstruments;
exports.cleanAllTraces = cleanAllTraces;
exports.getInstrumentsPath = getInstrumentsPath;
exports.getAvailableDevices = getAvailableDevices;
exports.parseLaunchTimeout = parseLaunchTimeout;
exports.getIwdPath = getIwdPath;
exports.quickLaunch = quickLaunch;
exports.quickInstruments = quickInstruments;
exports.rootDir = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _lodash = _interopRequireDefault(require("lodash"));

var _instruments = _interopRequireDefault(require("./instruments"));

const rootDir = _path.default.resolve(__dirname, '../..');

exports.rootDir = rootDir;
const INST_STALL_TIMEOUT = 12000;
const SIM_DEVICE_REGEXP = /^.+ \(\d+\.(\d+\.)?\d+( Simulator)?\) \[.+\]( \(Simulator\))?$/;

async function getInstrumentsPath() {
  let instrumentsPath;

  try {
    let {
      stdout
    } = await (0, _teen_process.exec)('xcrun', ['-find', 'instruments']);
    instrumentsPath = (stdout || '').trim().replace('\n$', '');
  } catch (err) {
    if (err) {
      _logger.default.error(err.message);
    }
  }

  if (!instrumentsPath) {
    _logger.default.errorAndThrow('Could not find the instruments binary. Please ensure ' + '`xcrun -find instruments` can locate it.');
  }

  _logger.default.debug(`Instruments is at: ${instrumentsPath}`);

  return instrumentsPath;
}

async function getAvailableDevices(timeout = INST_STALL_TIMEOUT) {
  _logger.default.debug('Getting list of devices instruments supports');

  let instrumentsPath = await getInstrumentsPath();
  let opts = {
    timeout
  };
  let lines;

  try {
    let {
      stdout
    } = await (0, _teen_process.exec)(instrumentsPath, ['-s', 'devices'], opts);
    lines = stdout.split('\n');
  } catch (err) {
    _logger.default.errorAndThrow(`Failed getting devices, err: ${err}.`);
  }

  const devices = lines.filter(line => SIM_DEVICE_REGEXP.test(line));

  _logger.default.debug(`Available devices: ${devices}`);

  return devices;
}

async function killAllInstruments() {
  _logger.default.debug('Killing all instruments');

  try {
    await (0, _teen_process.exec)('pkill', ['-f', 'instruments']);
  } catch (ign) {}
}

async function cleanAllTraces() {
  if (process.env.CLEAN_TRACES) {
    try {
      await _appiumSupport.fs.rimraf('instrumentscli*.trace');
    } catch (ign) {}
  }
}

function parseLaunchTimeout(launchTimeout) {
  if (_lodash.default.isString(launchTimeout)) {
    try {
      launchTimeout = JSON.parse(launchTimeout);
    } catch (err) {
      _logger.default.warn(`Invalid launch timeout: ${launchTimeout}`);
    }
  }

  if (_lodash.default.isNumber(launchTimeout)) {
    launchTimeout = {
      global: launchTimeout
    };
  }

  return launchTimeout;
}

async function getIwdPath(xcodeMajorVersion) {
  let thirdpartyPath = _path.default.resolve(rootDir, '..', 'instruments-iwd');

  let iwdPath = _path.default.resolve(thirdpartyPath, `iwd${xcodeMajorVersion}`);

  if (!(await _appiumSupport.fs.exists(iwdPath))) {
    iwdPath = _path.default.resolve(thirdpartyPath, 'iwd');
  }

  _logger.default.debug(`Found Insruments-Without-Delay: ${iwdPath}`);

  return iwdPath;
}

async function quickLaunch(udid, appPath = _path.default.resolve(__dirname, '..', '..', 'assets', 'TestApp.app')) {
  let traceTemplatePath = await _appiumXcode.default.getAutomationTraceTemplatePath();

  let scriptPath = _path.default.resolve(__dirname, '..', '..', 'assets', 'blank_instruments_test.js');

  let traceDocument = _path.default.resolve('/', 'tmp', 'testTrace.trace');

  let resultsPath = _path.default.resolve('/', 'tmp');

  await _appiumSupport.fs.rimraf(traceDocument);
  let args = ['instruments', '-D', traceDocument, '-t', traceTemplatePath, '-w', udid, appPath, '-e', 'UIASCRIPT', scriptPath, '-e', 'UIARESULTSPATH', resultsPath];

  _logger.default.debug(`Running command: 'xcrun ${args.join(' ')}'`);

  await (0, _teen_process.exec)('xcrun', args);
}

async function quickInstruments(opts = {}) {
  opts = _lodash.default.cloneDeep(opts);
  let xcodeTraceTemplatePath = opts.xcodeTraceTemplatePath || (await _appiumXcode.default.getAutomationTraceTemplatePath());

  _lodash.default.defaults(opts, {
    launchTimeout: 60000,
    template: xcodeTraceTemplatePath,
    withoutDelay: true,
    xcodeVersion: '8.1',
    webSocket: null,
    flakeyRetries: true,
    logNoColors: false
  });

  return new _instruments.default(opts);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
