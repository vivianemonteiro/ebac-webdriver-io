"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _through = require("through");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _utils = require("./utils");

var _streams = require("./streams");

require("colors");

const ERR_NEVER_CHECKED_IN = 'Instruments never checked in';
const ERR_CRASHED_ON_STARTUP = 'Instruments crashed on startup';
const ERR_AMBIGUOUS_DEVICE = 'Instruments Usage Error : Ambiguous device name/identifier';

class Instruments {
  static async quickInstruments(opts) {
    opts = _lodash.default.clone(opts);
    let xcodeTraceTemplatePath = await _appiumXcode.default.getAutomationTraceTemplatePath();

    _lodash.default.defaults(opts, {
      launchTimeout: 60000,
      template: xcodeTraceTemplatePath,
      withoutDelay: true,
      xcodeVersion: '8.1',
      webSocket: null,
      flakeyRetries: 2
    });

    return new Instruments(opts);
  }

  constructor(opts) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaults(opts, {
      termTimeout: 5000,
      tmpDir: '/tmp/appium-instruments',
      launchTimeout: 90000,
      flakeyRetries: 0,
      realDevice: false
    });

    const props = ['app', 'termTimeout', 'flakeyRetries', 'udid', 'bootstrap', 'template', 'withoutDelay', 'processArguments', 'realDevice', 'simulatorSdkAndDevice', 'tmpDir', 'traceDir', 'locale', 'language'];

    for (const f of props) {
      this[f] = opts[f];
    }

    this.traceDir = this.traceDir || this.tmpDir;
    this.launchTimeout = (0, _utils.parseLaunchTimeout)(opts.launchTimeout);
    this.proc = null;
    this.webSocket = opts.webSocket;
    this.instrumentsPath = opts.instrumentsPath;
    this.launchTries = 0;
    this.socketConnectDelays = [];
    this.gotFBSOpenApplicationError = false;
    this.onShutdown = new _bluebird.default((resolve, reject) => {
      this.onShutdownDeferred = {
        resolve,
        reject
      };
    });
    this.onShutdown.catch(() => {}).done();
  }

  async configure() {
    if (!this.xcodeVersion) {
      this.xcodeVersion = await _appiumXcode.default.getVersion(true);
    }

    if (this.xcodeVersion.major < 5 && this.withoutDelay) {
      _logger.default.info('instruments-without-delay for Xcode 4 has been removed ' + 'because of macOS notarization. ' + 'You can disable instruments-without-delay ' + 'with the --native-instruments-lib server flag');
    }

    if (this.xcodeVersion.versionFloat === 6.0 && this.withoutDelay) {
      _logger.default.info('In xcode 6.0, instruments-without-delay does not work. ' + 'If using Appium, you can disable instruments-without-delay ' + 'with the --native-instruments-lib server flag');
    }

    if (this.xcodeVersion.versionString === '5.0.1') {
      throw new Error('Xcode 5.0.1 ships with a broken version of ' + 'Instruments. please upgrade to 5.0.2');
    }

    if (this.xcodeVersion.major > 7) {
      throw new Error(`Instruments-based automation was removed in Xcode 8. ` + `Xcode ${this.xcodeVersion.versionString} is not supported. ` + `Please try the XCUItest driver.`);
    }

    if (!this.template) {
      this.template = await _appiumXcode.default.getAutomationTraceTemplatePath();
    }

    if (!this.instrumentsPath) {
      this.instrumentsPath = await (0, _utils.getInstrumentsPath)();
    }
  }

  async launchOnce() {
    _logger.default.info('Launching instruments');

    await _appiumSupport.fs.rimraf(this.tmpDir);
    await (0, _appiumSupport.mkdirp)(this.tmpDir);
    await (0, _appiumSupport.mkdirp)(this.traceDir);
    this.exitListener = null;
    this.proc = await this.spawnInstruments();
    this.proc.on('exit', (code, signal) => {
      const msg = code !== null ? `code: ${code}` : `signal: ${signal}`;

      _logger.default.debug(`Instruments exited with ${msg}`);
    });
    let launchResultPromise = new _bluebird.default((resolve, reject) => {
      this.launchResultDeferred = {
        resolve,
        reject
      };
    });
    this.setExitListener(() => {
      this.proc = null;
      this.launchResultDeferred.reject(new Error(ERR_CRASHED_ON_STARTUP));
    });
    this.proc.on('error', err => {
      _logger.default.debug(`Error with instruments proc: ${err.message}`);

      if (err.message.indexOf('ENOENT') !== -1) {
        this.proc = null;

        _logger.default.error(`Unable to spawn instruments: ${err.message}`);

        this.launchResultDeferred.reject(err);
      }
    });
    this.proc.stdout.setEncoding('utf8');
    this.proc.stdout.pipe((0, _streams.outputStream)()).pipe((0, _streams.dumpStream)());
    this.proc.stderr.setEncoding('utf8');

    let actOnStderr = output => {
      if (this.launchTimeout.afterSimLaunch && output && output.match(/CLTilesManagerClient: initialize/)) {
        this.addSocketConnectTimer(this.launchTimeout.afterSimLaunch, 'afterLaunch', async () => {
          await this.killInstruments();
          this.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));
        });
      }

      let fbsErrStr = '(FBSOpenApplicationErrorDomain error 8.)';

      if (output.indexOf(fbsErrStr) !== -1) {
        this.gotFBSOpenApplicationError = true;
      }

      if (output.indexOf(ERR_AMBIGUOUS_DEVICE) !== -1) {
        let msg = `${ERR_AMBIGUOUS_DEVICE}: '${this.simulatorSdkAndDevice}'`;
        this.launchResultDeferred.reject(new Error(msg));
      }
    };

    this.proc.stderr.pipe((0, _through.through)(function onStderr(output) {
      actOnStderr(output);
      this.queue(output);
    })).pipe((0, _streams.errorStream)()).pipe((0, _streams.webSocketAlertStream)(this.webSocket)).pipe((0, _streams.dumpStream)());
    this.addSocketConnectTimer(this.launchTimeout.global, 'global', async () => {
      await this.killInstruments();
      this.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));
    });

    try {
      await launchResultPromise;
    } finally {
      this.clearSocketConnectTimers();
    }

    this.setExitListener((code, signal) => {
      this.proc = null;
      const msg = code !== null ? `code: ${code}` : `signal: ${signal}`;
      this.onShutdownDeferred.reject(new Error(`Abnormal exit with ${msg}`));
    });
  }

  async launch() {
    await this.configure();
    let launchTries = 0;

    do {
      launchTries++;

      _logger.default.debug(`Attempting to launch instruments, this is try #${launchTries}`);

      try {
        await this.launchOnce();
        break;
      } catch (err) {
        _logger.default.error(`Error launching instruments: ${err.message}`);

        let errIsCatchable = err.message === ERR_NEVER_CHECKED_IN || err.message === ERR_CRASHED_ON_STARTUP;

        if (!errIsCatchable) {
          throw err;
        }

        if (launchTries <= this.flakeyRetries) {
          if (this.gotFBSOpenApplicationError) {
            _logger.default.debug('Got the FBSOpenApplicationError, not killing the ' + 'sim but leaving it open so the app will launch');

            this.gotFBSOpenApplicationError = false;
            await _bluebird.default.delay(1000);
          } else {
            if (!this.realDevice) {
              await (0, _appiumIosSimulator.killAllSimulators)();
            }

            await _bluebird.default.delay(5000);
          }
        } else {
          _logger.default.errorAndThrow('We exceeded the number of retries allowed for ' + 'instruments to successfully start; failing launch');
        }
      }
    } while (true);
  }

  registerLaunch() {
    this.launchResultDeferred.resolve();
  }

  async spawnInstruments() {
    let traceDir;

    for (let i = 0;; i++) {
      traceDir = _path.default.resolve(this.traceDir, `instrumentscli${i}.trace`);
      if (!(await _appiumSupport.fs.exists(traceDir))) break;
    }

    let args = ['-t', this.template, '-D', traceDir];

    if (this.udid) {
      args = args.concat(['-w', this.udid]);

      _logger.default.debug(`Attempting to run app on real device with UDID '${this.udid}'`);
    }

    if (!this.udid && this.simulatorSdkAndDevice) {
      args = args.concat(['-w', this.simulatorSdkAndDevice]);

      _logger.default.debug(`Attempting to run app on ${this.simulatorSdkAndDevice}`);
    }

    args = args.concat([this.app]);

    if (this.processArguments) {
      _logger.default.debug(`Attempting to run app with process arguments: ${JSON.stringify(this.processArguments)}`);

      if (_lodash.default.isString(this.processArguments)) {
        if (this.processArguments.indexOf('-e ') === -1) {
          _logger.default.debug('Plain string process arguments being pushed into arguments');

          args.push(this.processArguments);
        } else {
          _logger.default.debug('Environment variables being pushed into arguments');

          for (let arg of this.processArguments.split('-e ')) {
            arg = arg.trim();

            if (arg.length) {
              let space = arg.indexOf(' ');
              let flag = arg.substring(0, space);
              let value = arg.substring(space + 1);
              args.push('-e', flag, value);
            }
          }
        }
      } else {
        for (let [flag, value] of _lodash.default.toPairs(this.processArguments)) {
          args.push('-e', flag, value);
        }
      }
    }

    args = args.concat(['-e', 'UIASCRIPT', this.bootstrap]);
    args = args.concat(['-e', 'UIARESULTSPATH', this.tmpDir]);

    if (this.language) {
      args = args.concat([`-AppleLanguages (${this.language})`]);
      args = args.concat([`-NSLanguages (${this.language})`]);
    }

    if (this.locale) {
      args = args.concat([`-AppleLocale ${this.locale}`]);
    }

    let env = _lodash.default.clone(process.env);

    if (this.xcodeVersion.major >= 7 && !this.udid) {
      _logger.default.info('On xcode 7.0+, instruments-without-delay does not work, ' + 'skipping instruments-without-delay');

      this.withoutDelay = false;
    }

    let iwdPath = await (0, _utils.getIwdPath)(this.xcodeVersion.major);
    env.CA_DEBUG_TRANSACTIONS = 1;

    if (this.withoutDelay && !this.udid) {
      env.DYLD_INSERT_LIBRARIES = _path.default.resolve(iwdPath, 'InstrumentsShim.dylib');
      env.LIB_PATH = iwdPath;
    }

    let instrumentsExecArgs = [this.instrumentsPath, ...args];
    instrumentsExecArgs = _lodash.default.map(instrumentsExecArgs, function instrumentArgs(arg) {
      if (arg === null) {
        throw new Error('A null value was passed as an arg to execute ' + 'instruments on the command line. A letiable is ' + 'probably not getting set. Array of command args: ' + JSON.stringify(instrumentsExecArgs));
      }

      if (_lodash.default.isString(arg) && arg.indexOf(' ') !== -1) {
        return `"${arg}"`;
      }

      return arg;
    });

    _logger.default.debug(`Spawning instruments with command: '${instrumentsExecArgs.join(' ')}'`);

    if (this.withoutDelay) {
      _logger.default.debug('And extra without-delay env: ' + JSON.stringify({
        DYLD_INSERT_LIBRARIES: env.DYLD_INSERT_LIBRARIES,
        LIB_PATH: env.LIB_PATH
      }));
    }

    _logger.default.debug(`And launch timeouts (in ms): ${JSON.stringify(this.launchTimeout)}`);

    return await (0, _teen_process.spawn)(this.instrumentsPath, args, {
      env
    });
  }

  addSocketConnectTimer(delay, type, doAction) {
    let socketConnectDelay = (0, _appiumSupport.cancellableDelay)(delay);
    socketConnectDelay.then(() => {
      _logger.default.warn(`Instruments socket client never checked in; timing out (${type})`);

      return doAction();
    }).catch(_bluebird.default.CancellationError, () => {}).done();
    this.socketConnectDelays.push(socketConnectDelay);
  }

  clearSocketConnectTimers() {
    for (let delay of this.socketConnectDelays) {
      delay.cancel();
    }

    this.socketConnectDelays = [];
  }

  setExitListener(exitListener) {
    if (!this.proc) return;

    if (this.exitListener) {
      this.proc.removeListener('exit', this.exitListener);
    }

    this.exitListener = exitListener;
    this.proc.on('exit', exitListener);
  }

  killInstruments() {
    if (!this.proc) return;

    _logger.default.debug(`Kill Instruments process (pid: ${this.proc.pid})`);

    return new _bluebird.default(async resolve => {
      let wasTerminated = false;
      let termDelay = (0, _appiumSupport.cancellableDelay)(this.termTimeout);
      let termPromise = termDelay.catch(_bluebird.default.CancellationError, () => {});
      this.setExitListener(() => {
        this.proc = null;
        wasTerminated = true;
        termDelay.cancel();
        resolve();
      });

      _logger.default.debug('Sending SIGTERM');

      this.proc.kill('SIGTERM');
      await termPromise;

      if (!wasTerminated) {
        _logger.default.warn(`Instruments did not terminate after ${this.termTimeout / 1000} seconds!`);

        _logger.default.debug('Sending SIGKILL');

        this.proc.kill('SIGKILL');

        if (_lodash.default.isFunction(this.exitListener)) {
          this.exitListener();
        }
      }
    });
  }

  async shutdown() {
    _logger.default.debug('Starting shutdown.');

    await this.killInstruments();
    this.onShutdownDeferred.resolve();
  }

}

var _default = Instruments;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbnN0cnVtZW50cy9pbnN0cnVtZW50cy5qcyJdLCJuYW1lcyI6WyJFUlJfTkVWRVJfQ0hFQ0tFRF9JTiIsIkVSUl9DUkFTSEVEX09OX1NUQVJUVVAiLCJFUlJfQU1CSUdVT1VTX0RFVklDRSIsIkluc3RydW1lbnRzIiwicXVpY2tJbnN0cnVtZW50cyIsIm9wdHMiLCJfIiwiY2xvbmUiLCJ4Y29kZVRyYWNlVGVtcGxhdGVQYXRoIiwieGNvZGUiLCJnZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGgiLCJkZWZhdWx0cyIsImxhdW5jaFRpbWVvdXQiLCJ0ZW1wbGF0ZSIsIndpdGhvdXREZWxheSIsInhjb2RlVmVyc2lvbiIsIndlYlNvY2tldCIsImZsYWtleVJldHJpZXMiLCJjb25zdHJ1Y3RvciIsImNsb25lRGVlcCIsInRlcm1UaW1lb3V0IiwidG1wRGlyIiwicmVhbERldmljZSIsInByb3BzIiwiZiIsInRyYWNlRGlyIiwicHJvYyIsImluc3RydW1lbnRzUGF0aCIsImxhdW5jaFRyaWVzIiwic29ja2V0Q29ubmVjdERlbGF5cyIsImdvdEZCU09wZW5BcHBsaWNhdGlvbkVycm9yIiwib25TaHV0ZG93biIsIkIiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25TaHV0ZG93bkRlZmVycmVkIiwiY2F0Y2giLCJkb25lIiwiY29uZmlndXJlIiwiZ2V0VmVyc2lvbiIsIm1ham9yIiwibG9nIiwiaW5mbyIsInZlcnNpb25GbG9hdCIsInZlcnNpb25TdHJpbmciLCJFcnJvciIsImxhdW5jaE9uY2UiLCJmcyIsInJpbXJhZiIsImV4aXRMaXN0ZW5lciIsInNwYXduSW5zdHJ1bWVudHMiLCJvbiIsImNvZGUiLCJzaWduYWwiLCJtc2ciLCJkZWJ1ZyIsImxhdW5jaFJlc3VsdFByb21pc2UiLCJsYXVuY2hSZXN1bHREZWZlcnJlZCIsInNldEV4aXRMaXN0ZW5lciIsImVyciIsIm1lc3NhZ2UiLCJpbmRleE9mIiwiZXJyb3IiLCJzdGRvdXQiLCJzZXRFbmNvZGluZyIsInBpcGUiLCJzdGRlcnIiLCJhY3RPblN0ZGVyciIsIm91dHB1dCIsImFmdGVyU2ltTGF1bmNoIiwibWF0Y2giLCJhZGRTb2NrZXRDb25uZWN0VGltZXIiLCJraWxsSW5zdHJ1bWVudHMiLCJmYnNFcnJTdHIiLCJzaW11bGF0b3JTZGtBbmREZXZpY2UiLCJvblN0ZGVyciIsInF1ZXVlIiwiZ2xvYmFsIiwiY2xlYXJTb2NrZXRDb25uZWN0VGltZXJzIiwibGF1bmNoIiwiZXJySXNDYXRjaGFibGUiLCJkZWxheSIsImVycm9yQW5kVGhyb3ciLCJyZWdpc3RlckxhdW5jaCIsImkiLCJwYXRoIiwiZXhpc3RzIiwiYXJncyIsInVkaWQiLCJjb25jYXQiLCJhcHAiLCJwcm9jZXNzQXJndW1lbnRzIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzU3RyaW5nIiwicHVzaCIsImFyZyIsInNwbGl0IiwidHJpbSIsImxlbmd0aCIsInNwYWNlIiwiZmxhZyIsInN1YnN0cmluZyIsInZhbHVlIiwidG9QYWlycyIsImJvb3RzdHJhcCIsImxhbmd1YWdlIiwibG9jYWxlIiwiZW52IiwicHJvY2VzcyIsIml3ZFBhdGgiLCJDQV9ERUJVR19UUkFOU0FDVElPTlMiLCJEWUxEX0lOU0VSVF9MSUJSQVJJRVMiLCJMSUJfUEFUSCIsImluc3RydW1lbnRzRXhlY0FyZ3MiLCJtYXAiLCJpbnN0cnVtZW50QXJncyIsImpvaW4iLCJ0eXBlIiwiZG9BY3Rpb24iLCJzb2NrZXRDb25uZWN0RGVsYXkiLCJ0aGVuIiwid2FybiIsIkNhbmNlbGxhdGlvbkVycm9yIiwiY2FuY2VsIiwicmVtb3ZlTGlzdGVuZXIiLCJwaWQiLCJ3YXNUZXJtaW5hdGVkIiwidGVybURlbGF5IiwidGVybVByb21pc2UiLCJraWxsIiwiaXNGdW5jdGlvbiIsInNodXRkb3duIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLG9C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LFlBQU1ELFdBQU47O0FBQ0EsVUFBSSxDQUFDRixhQUFMLEVBQW9CO0FBQ2xCdEYsd0JBQUlpRixJQUFKLENBQVUsdUNBQXNDLEtBQUt0RyxXQUFMLEdBQW1CLElBQUssV0FBeEU7O0FBQ0FxQix3QkFBSWMsS0FBSixDQUFVLGlCQUFWOztBQUNBLGFBQUs3QixJQUFMLENBQVV3RyxJQUFWLENBQWUsU0FBZjs7QUFDQSxZQUFJNUgsZ0JBQUU2SCxVQUFGLENBQWEsS0FBS2xGLFlBQWxCLENBQUosRUFBcUM7QUFDbkMsZUFBS0EsWUFBTDtBQUNEO0FBQ0Y7QUFDRixLQXRCTSxDQUFQO0FBdUJEOztBQUdELFFBQU1tRixRQUFOLEdBQWtCO0FBQ2hCM0Ysb0JBQUljLEtBQUosQ0FBVSxvQkFBVjs7QUFDQSxVQUFNLEtBQUtpQixlQUFMLEVBQU47QUFDQSxTQUFLckMsa0JBQUwsQ0FBd0JGLE9BQXhCO0FBQ0Q7O0FBblllOztlQXNZSDlCLFciLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXcmFwcGVyIGFyb3VuZCBBcHBsZSdzIEluc3RydW1lbnRzIGFwcFxuXG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB0aHJvdWdoIH0gZnJvbSAndGhyb3VnaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IG1rZGlycCwgZnMsIGNhbmNlbGxhYmxlRGVsYXkgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGtpbGxBbGxTaW11bGF0b3JzIH0gZnJvbSAnYXBwaXVtLWlvcy1zaW11bGF0b3InO1xuaW1wb3J0IHsgZ2V0SW5zdHJ1bWVudHNQYXRoLCBwYXJzZUxhdW5jaFRpbWVvdXQsIGdldEl3ZFBhdGggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IG91dHB1dFN0cmVhbSwgZXJyb3JTdHJlYW0sIHdlYlNvY2tldEFsZXJ0U3RyZWFtLCBkdW1wU3RyZWFtIH0gZnJvbSAnLi9zdHJlYW1zJztcbmltcG9ydCAnY29sb3JzJztcblxuXG5jb25zdCBFUlJfTkVWRVJfQ0hFQ0tFRF9JTiA9ICdJbnN0cnVtZW50cyBuZXZlciBjaGVja2VkIGluJztcbmNvbnN0IEVSUl9DUkFTSEVEX09OX1NUQVJUVVAgPSAnSW5zdHJ1bWVudHMgY3Jhc2hlZCBvbiBzdGFydHVwJztcbmNvbnN0IEVSUl9BTUJJR1VPVVNfREVWSUNFID0gJ0luc3RydW1lbnRzIFVzYWdlIEVycm9yIDogQW1iaWd1b3VzIGRldmljZSBuYW1lL2lkZW50aWZpZXInO1xuXG5jbGFzcyBJbnN0cnVtZW50cyB7XG4gIC8vIHNpbXBsZSBmYWN0b3J5IHdpdGggc2FuZSBkZWZhdWx0c1xuICBzdGF0aWMgYXN5bmMgcXVpY2tJbnN0cnVtZW50cyAob3B0cykge1xuICAgIG9wdHMgPSBfLmNsb25lKG9wdHMpO1xuICAgIGxldCB4Y29kZVRyYWNlVGVtcGxhdGVQYXRoID0gYXdhaXQgeGNvZGUuZ2V0QXV0b21hdGlvblRyYWNlVGVtcGxhdGVQYXRoKCk7XG4gICAgXy5kZWZhdWx0cyhvcHRzLCB7XG4gICAgICBsYXVuY2hUaW1lb3V0OiA2MDAwMCxcbiAgICAgIHRlbXBsYXRlOiB4Y29kZVRyYWNlVGVtcGxhdGVQYXRoLFxuICAgICAgd2l0aG91dERlbGF5OiB0cnVlLFxuICAgICAgeGNvZGVWZXJzaW9uOiAnOC4xJyxcbiAgICAgIHdlYlNvY2tldDogbnVsbCxcbiAgICAgIGZsYWtleVJldHJpZXM6IDJcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IEluc3RydW1lbnRzKG9wdHMpO1xuICB9XG5cbiAgLypcbiAgICogb3B0czpcbiAgICogICAtIGFwcFxuICAgKiAgIC0gdGVybVRpbWVvdXQgLSBkZWZhdWx0cyB0byA1MDAwXG4gICAqICAgLSBmbGFrZXlSZXRyaWVzIC0gZGVmYXVsdHMgdG8gMFxuICAgKiAgIC0gdWRpZFxuICAgKiAgIC0gYm9vdHN0cmFwXG4gICAqICAgLSB0ZW1wbGF0ZVxuICAgKiAgIC0gd2l0aG91dERlbGF5XG4gICAqICAgLSBwcm9jZXNzQXJndW1lbnRzXG4gICAqICAgLSBzaW11bGF0b3JTZGtBbmREZXZpY2VcbiAgICogICAtIHRtcERpciAtIGRlZmF1bHRzIHRvIGAvdG1wL2FwcGl1bS1pbnN0cnVtZW50c2BcbiAgICogICAtIHRyYWNlRGlyXG4gICAqICAgLSBsYXVuY2hUaW1lb3V0IC0gZGVmYXVsdHMgdG8gOTAwMDBcbiAgICogICAtIHdlYlNvY2tldFxuICAgKiAgIC0gaW5zdHJ1bWVudHNQYXRoXG4gICAqICAgLSByZWFsRGV2aWNlIC0gdHJ1ZS9mYWxzZSwgZGVmYXVsdHMgdG8gZmFsc2VcbiAgICovXG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgb3B0cyA9IF8uY2xvbmVEZWVwKG9wdHMpO1xuICAgIF8uZGVmYXVsdHMob3B0cywge1xuICAgICAgdGVybVRpbWVvdXQ6IDUwMDAsXG4gICAgICB0bXBEaXI6ICcvdG1wL2FwcGl1bS1pbnN0cnVtZW50cycsXG4gICAgICBsYXVuY2hUaW1lb3V0OiA5MDAwMCxcbiAgICAgIGZsYWtleVJldHJpZXM6IDAsXG4gICAgICByZWFsRGV2aWNlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLy8gY29uZmlnXG4gICAgY29uc3QgcHJvcHMgPSBbXG4gICAgICAnYXBwJywgJ3Rlcm1UaW1lb3V0JywgJ2ZsYWtleVJldHJpZXMnLCAndWRpZCcsICdib290c3RyYXAnLFxuICAgICAgJ3RlbXBsYXRlJywgJ3dpdGhvdXREZWxheScsICdwcm9jZXNzQXJndW1lbnRzJywgJ3JlYWxEZXZpY2UnLFxuICAgICAgJ3NpbXVsYXRvclNka0FuZERldmljZScsICd0bXBEaXInLCAndHJhY2VEaXInLCAnbG9jYWxlJywgJ2xhbmd1YWdlJyxcbiAgICBdO1xuICAgIGZvciAoY29uc3QgZiBvZiBwcm9wcykge1xuICAgICAgdGhpc1tmXSA9IG9wdHNbZl07XG4gICAgfVxuICAgIHRoaXMudHJhY2VEaXIgPSB0aGlzLnRyYWNlRGlyIHx8IHRoaXMudG1wRGlyO1xuICAgIHRoaXMubGF1bmNoVGltZW91dCA9IHBhcnNlTGF1bmNoVGltZW91dChvcHRzLmxhdW5jaFRpbWVvdXQpO1xuXG4gICAgLy8gc3RhdGVcbiAgICB0aGlzLnByb2MgPSBudWxsO1xuICAgIHRoaXMud2ViU29ja2V0ID0gb3B0cy53ZWJTb2NrZXQ7XG4gICAgdGhpcy5pbnN0cnVtZW50c1BhdGggPSBvcHRzLmluc3RydW1lbnRzUGF0aDtcbiAgICB0aGlzLmxhdW5jaFRyaWVzID0gMDtcbiAgICB0aGlzLnNvY2tldENvbm5lY3REZWxheXMgPSBbXTtcbiAgICB0aGlzLmdvdEZCU09wZW5BcHBsaWNhdGlvbkVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5vblNodXRkb3duID0gbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5vblNodXRkb3duRGVmZXJyZWQgPSB7cmVzb2x2ZSwgcmVqZWN0fTtcbiAgICB9KTtcbiAgICAvLyBhdm9pZHMgVW5oYW5kbGVkRXhjZXB0aW9uXG4gICAgdGhpcy5vblNodXRkb3duLmNhdGNoKCgpID0+IHt9KS5kb25lKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9jYXRjaC1vci1yZXR1cm5cbiAgfVxuXG4gIGFzeW5jIGNvbmZpZ3VyZSAoKSB7XG4gICAgaWYgKCF0aGlzLnhjb2RlVmVyc2lvbikge1xuICAgICAgdGhpcy54Y29kZVZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKHRydWUpO1xuICAgIH1cbiAgICBpZiAodGhpcy54Y29kZVZlcnNpb24ubWFqb3IgPCA1ICYmIHRoaXMud2l0aG91dERlbGF5KSB7XG4gICAgICBsb2cuaW5mbygnaW5zdHJ1bWVudHMtd2l0aG91dC1kZWxheSBmb3IgWGNvZGUgNCBoYXMgYmVlbiByZW1vdmVkICcgK1xuICAgICAgICAgICAgICAgJ2JlY2F1c2Ugb2YgbWFjT1Mgbm90YXJpemF0aW9uLiAnICtcbiAgICAgICAgICAgICAgICdZb3UgY2FuIGRpc2FibGUgaW5zdHJ1bWVudHMtd2l0aG91dC1kZWxheSAnICtcbiAgICAgICAgICAgICAgICd3aXRoIHRoZSAtLW5hdGl2ZS1pbnN0cnVtZW50cy1saWIgc2VydmVyIGZsYWcnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMueGNvZGVWZXJzaW9uLnZlcnNpb25GbG9hdCA9PT0gNi4wICYmIHRoaXMud2l0aG91dERlbGF5KSB7XG4gICAgICBsb2cuaW5mbygnSW4geGNvZGUgNi4wLCBpbnN0cnVtZW50cy13aXRob3V0LWRlbGF5IGRvZXMgbm90IHdvcmsuICcgK1xuICAgICAgICAgICAgICAgJ0lmIHVzaW5nIEFwcGl1bSwgeW91IGNhbiBkaXNhYmxlIGluc3RydW1lbnRzLXdpdGhvdXQtZGVsYXkgJyArXG4gICAgICAgICAgICAgICAnd2l0aCB0aGUgLS1uYXRpdmUtaW5zdHJ1bWVudHMtbGliIHNlcnZlciBmbGFnJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nID09PSAnNS4wLjEnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1hjb2RlIDUuMC4xIHNoaXBzIHdpdGggYSBicm9rZW4gdmVyc2lvbiBvZiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnSW5zdHJ1bWVudHMuIHBsZWFzZSB1cGdyYWRlIHRvIDUuMC4yJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA+IDcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW5zdHJ1bWVudHMtYmFzZWQgYXV0b21hdGlvbiB3YXMgcmVtb3ZlZCBpbiBYY29kZSA4LiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgWGNvZGUgJHt0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSBpcyBub3Qgc3VwcG9ydGVkLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgUGxlYXNlIHRyeSB0aGUgWENVSXRlc3QgZHJpdmVyLmApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy50ZW1wbGF0ZSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZSA9IGF3YWl0IHhjb2RlLmdldEF1dG9tYXRpb25UcmFjZVRlbXBsYXRlUGF0aCgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pbnN0cnVtZW50c1BhdGgpIHtcbiAgICAgIHRoaXMuaW5zdHJ1bWVudHNQYXRoID0gYXdhaXQgZ2V0SW5zdHJ1bWVudHNQYXRoKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbGF1bmNoT25jZSAoKSB7XG4gICAgbG9nLmluZm8oJ0xhdW5jaGluZyBpbnN0cnVtZW50cycpO1xuICAgIC8vIHByZXBhcmUgdGVtcCBkaXJcbiAgICBhd2FpdCBmcy5yaW1yYWYodGhpcy50bXBEaXIpO1xuICAgIGF3YWl0IG1rZGlycCh0aGlzLnRtcERpcik7XG4gICAgYXdhaXQgbWtkaXJwKHRoaXMudHJhY2VEaXIpO1xuXG4gICAgdGhpcy5leGl0TGlzdGVuZXIgPSBudWxsO1xuICAgIHRoaXMucHJvYyA9IGF3YWl0IHRoaXMuc3Bhd25JbnN0cnVtZW50cygpO1xuICAgIHRoaXMucHJvYy5vbignZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIGNvbnN0IG1zZyA9IGNvZGUgIT09IG51bGwgPyBgY29kZTogJHtjb2RlfWAgOiBgc2lnbmFsOiAke3NpZ25hbH1gO1xuICAgICAgbG9nLmRlYnVnKGBJbnN0cnVtZW50cyBleGl0ZWQgd2l0aCAke21zZ31gKTtcbiAgICB9KTtcblxuICAgIC8vIHNldCB1cCB0aGUgcHJvbWlzZSB0byBoYW5kbGUgbGF1bmNoXG4gICAgbGV0IGxhdW5jaFJlc3VsdFByb21pc2UgPSBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmxhdW5jaFJlc3VsdERlZmVycmVkID0ge3Jlc29sdmUsIHJlamVjdH07XG4gICAgfSk7XG5cbiAgICAvLyBUaGVyZSB3YXMgYSBzcGVjaWFsIGNhc2UgZm9yIGlnbm9yZVN0YXJ0dXBFeGl0XG4gICAgLy8gYnV0IGl0IGlzIG5vdCBuZWVkZWQgYW55bW9yZSwgeW91IG1heSBqdXN0IGxpc3RlbiBmb3IgZXhpdC5cbiAgICB0aGlzLnNldEV4aXRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICB0aGlzLnByb2MgPSBudWxsO1xuICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKEVSUl9DUkFTSEVEX09OX1NUQVJUVVApKTtcbiAgICB9KTtcblxuICAgIHRoaXMucHJvYy5vbignZXJyb3InLCAoZXJyKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzXG4gICAgICBsb2cuZGVidWcoYEVycm9yIHdpdGggaW5zdHJ1bWVudHMgcHJvYzogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKCdFTk9FTlQnKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5wcm9jID0gbnVsbDsgLy8gb3RoZXJ3aXNlIHdlJ2xsIHRyeSB0byBzZW5kIHNpZ2tpbGxcbiAgICAgICAgbG9nLmVycm9yKGBVbmFibGUgdG8gc3Bhd24gaW5zdHJ1bWVudHM6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIHRoaXMubGF1bmNoUmVzdWx0RGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnByb2Muc3Rkb3V0LnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgdGhpcy5wcm9jLnN0ZG91dC5waXBlKG91dHB1dFN0cmVhbSgpKS5waXBlKGR1bXBTdHJlYW0oKSk7XG5cbiAgICB0aGlzLnByb2Muc3RkZXJyLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgbGV0IGFjdE9uU3RkZXJyID0gKG91dHB1dCkgPT4ge1xuICAgICAgaWYgKHRoaXMubGF1bmNoVGltZW91dC5hZnRlclNpbUxhdW5jaCAmJiBvdXRwdXQgJiYgb3V0cHV0Lm1hdGNoKC9DTFRpbGVzTWFuYWdlckNsaWVudDogaW5pdGlhbGl6ZS8pKSB7XG4gICAgICAgIHRoaXMuYWRkU29ja2V0Q29ubmVjdFRpbWVyKHRoaXMubGF1bmNoVGltZW91dC5hZnRlclNpbUxhdW5jaCwgJ2FmdGVyTGF1bmNoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IHRoaXMua2lsbEluc3RydW1lbnRzKCk7XG4gICAgICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKEVSUl9ORVZFUl9DSEVDS0VEX0lOKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBsZXQgZmJzRXJyU3RyID0gJyhGQlNPcGVuQXBwbGljYXRpb25FcnJvckRvbWFpbiBlcnJvciA4LiknO1xuICAgICAgaWYgKG91dHB1dC5pbmRleE9mKGZic0VyclN0cikgIT09IC0xKSB7XG4gICAgICAgIHRoaXMuZ290RkJTT3BlbkFwcGxpY2F0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3V0cHV0LmluZGV4T2YoRVJSX0FNQklHVU9VU19ERVZJQ0UpICE9PSAtMSkge1xuICAgICAgICBsZXQgbXNnID0gYCR7RVJSX0FNQklHVU9VU19ERVZJQ0V9OiAnJHt0aGlzLnNpbXVsYXRvclNka0FuZERldmljZX0nYDtcbiAgICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKG1zZykpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5wcm9jLnN0ZGVyci5waXBlKHRocm91Z2goZnVuY3Rpb24gb25TdGRlcnIgKG91dHB1dCkge1xuICAgICAgYWN0T25TdGRlcnIob3V0cHV0KTtcbiAgICAgIHRoaXMucXVldWUob3V0cHV0KTtcbiAgICB9KSkucGlwZShlcnJvclN0cmVhbSgpKVxuICAgIC5waXBlKHdlYlNvY2tldEFsZXJ0U3RyZWFtKHRoaXMud2ViU29ja2V0KSlcbiAgICAucGlwZShkdW1wU3RyZWFtKCkpO1xuXG4gICAgLy8gc3RhcnQgd2FpdGluZyBmb3IgaW5zdHJ1bWVudHMgdG8gbGF1bmNoIHN1Y2Nlc3NmdWxseVxuICAgIHRoaXMuYWRkU29ja2V0Q29ubmVjdFRpbWVyKHRoaXMubGF1bmNoVGltZW91dC5nbG9iYWwsICdnbG9iYWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmtpbGxJbnN0cnVtZW50cygpO1xuICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKEVSUl9ORVZFUl9DSEVDS0VEX0lOKSk7XG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgbGF1bmNoUmVzdWx0UHJvbWlzZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5jbGVhclNvY2tldENvbm5lY3RUaW1lcnMoKTtcbiAgICB9XG4gICAgdGhpcy5zZXRFeGl0TGlzdGVuZXIoKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgdGhpcy5wcm9jID0gbnVsbDtcbiAgICAgIGNvbnN0IG1zZyA9IGNvZGUgIT09IG51bGwgPyBgY29kZTogJHtjb2RlfWAgOiBgc2lnbmFsOiAke3NpZ25hbH1gO1xuICAgICAgdGhpcy5vblNodXRkb3duRGVmZXJyZWQucmVqZWN0KG5ldyBFcnJvcihgQWJub3JtYWwgZXhpdCB3aXRoICR7bXNnfWApKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGxhdW5jaCAoKSB7XG4gICAgYXdhaXQgdGhpcy5jb25maWd1cmUoKTtcbiAgICBsZXQgbGF1bmNoVHJpZXMgPSAwO1xuICAgIGRvIHtcbiAgICAgIGxhdW5jaFRyaWVzKys7XG4gICAgICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gbGF1bmNoIGluc3RydW1lbnRzLCB0aGlzIGlzIHRyeSAjJHtsYXVuY2hUcmllc31gKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5sYXVuY2hPbmNlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy5lcnJvcihgRXJyb3IgbGF1bmNoaW5nIGluc3RydW1lbnRzOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICBsZXQgZXJySXNDYXRjaGFibGUgPSBlcnIubWVzc2FnZSA9PT0gRVJSX05FVkVSX0NIRUNLRURfSU4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPT09IEVSUl9DUkFTSEVEX09OX1NUQVJUVVA7XG4gICAgICAgIGlmICghZXJySXNDYXRjaGFibGUpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhdW5jaFRyaWVzIDw9IHRoaXMuZmxha2V5UmV0cmllcykge1xuICAgICAgICAgIGlmICh0aGlzLmdvdEZCU09wZW5BcHBsaWNhdGlvbkVycm9yKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoJ0dvdCB0aGUgRkJTT3BlbkFwcGxpY2F0aW9uRXJyb3IsIG5vdCBraWxsaW5nIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnc2ltIGJ1dCBsZWF2aW5nIGl0IG9wZW4gc28gdGhlIGFwcCB3aWxsIGxhdW5jaCcpO1xuICAgICAgICAgICAgdGhpcy5nb3RGQlNPcGVuQXBwbGljYXRpb25FcnJvciA9IGZhbHNlOyAvLyBjbGVhciBvdXQgZm9yIG5leHQgbGF1bmNoXG4gICAgICAgICAgICBhd2FpdCBCLmRlbGF5KDEwMDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbERldmljZSkge1xuICAgICAgICAgICAgICBhd2FpdCBraWxsQWxsU2ltdWxhdG9ycygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgQi5kZWxheSg1MDAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coJ1dlIGV4Y2VlZGVkIHRoZSBudW1iZXIgb2YgcmV0cmllcyBhbGxvd2VkIGZvciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5zdHJ1bWVudHMgdG8gc3VjY2Vzc2Z1bGx5IHN0YXJ0OyBmYWlsaW5nIGxhdW5jaCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAodHJ1ZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gIH1cblxuICByZWdpc3RlckxhdW5jaCAoKSB7XG4gICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZXNvbHZlKCk7XG4gIH1cblxuICBhc3luYyBzcGF3bkluc3RydW1lbnRzICgpIHtcbiAgICBsZXQgdHJhY2VEaXI7XG4gICAgZm9yIChsZXQgaSA9IDA7IDsgaSsrKSB7XG4gICAgICAvLyBsb29wIHdoaWxlIHRoZXJlIGFyZSB0cmFjZWRpcnMgdG8gZGVsZXRlXG4gICAgICB0cmFjZURpciA9IHBhdGgucmVzb2x2ZSh0aGlzLnRyYWNlRGlyLCBgaW5zdHJ1bWVudHNjbGkke2l9LnRyYWNlYCk7XG4gICAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyh0cmFjZURpcikpIGJyZWFrOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgdXAgdGhlIGFyZ3VtZW50cyB0byB1c2VcbiAgICBsZXQgYXJncyA9IFsnLXQnLCB0aGlzLnRlbXBsYXRlLCAnLUQnLCB0cmFjZURpcl07XG4gICAgaWYgKHRoaXMudWRpZCkge1xuICAgICAgLy8gcmVhbCBkZXZpY2UsIHNvIHNwZWNpZnkgdWRpZFxuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFsnLXcnLCB0aGlzLnVkaWRdKTtcbiAgICAgIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBydW4gYXBwIG9uIHJlYWwgZGV2aWNlIHdpdGggVURJRCAnJHt0aGlzLnVkaWR9J2ApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMudWRpZCAmJiB0aGlzLnNpbXVsYXRvclNka0FuZERldmljZSkge1xuICAgICAgLy8gc2ltLCBzbyBzcGVjaWZ5IHRoZSBzZGsgYW5kIGRldmljZVxuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFsnLXcnLCB0aGlzLnNpbXVsYXRvclNka0FuZERldmljZV0pO1xuICAgICAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIHJ1biBhcHAgb24gJHt0aGlzLnNpbXVsYXRvclNka0FuZERldmljZX1gKTtcbiAgICB9XG4gICAgYXJncyA9IGFyZ3MuY29uY2F0KFt0aGlzLmFwcF0pO1xuICAgIGlmICh0aGlzLnByb2Nlc3NBcmd1bWVudHMpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBydW4gYXBwIHdpdGggcHJvY2VzcyBhcmd1bWVudHM6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5wcm9jZXNzQXJndW1lbnRzKX1gKTtcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHN0dWZmIHNwZWNpZmllZCBieSB0aGUgdXNlclxuXG4gICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLnByb2Nlc3NBcmd1bWVudHMpKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2Nlc3NBcmd1bWVudHMuaW5kZXhPZignLWUgJykgPT09IC0xKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdQbGFpbiBzdHJpbmcgcHJvY2VzcyBhcmd1bWVudHMgYmVpbmcgcHVzaGVkIGludG8gYXJndW1lbnRzJyk7XG4gICAgICAgICAgYXJncy5wdXNoKHRoaXMucHJvY2Vzc0FyZ3VtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdFbnZpcm9ubWVudCB2YXJpYWJsZXMgYmVpbmcgcHVzaGVkIGludG8gYXJndW1lbnRzJyk7XG4gICAgICAgICAgZm9yIChsZXQgYXJnIG9mIHRoaXMucHJvY2Vzc0FyZ3VtZW50cy5zcGxpdCgnLWUgJykpIHtcbiAgICAgICAgICAgIGFyZyA9IGFyZy50cmltKCk7XG4gICAgICAgICAgICBpZiAoYXJnLmxlbmd0aCkge1xuICAgICAgICAgICAgICBsZXQgc3BhY2UgPSBhcmcuaW5kZXhPZignICcpO1xuICAgICAgICAgICAgICBsZXQgZmxhZyA9IGFyZy5zdWJzdHJpbmcoMCwgc3BhY2UpO1xuICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmcuc3Vic3RyaW5nKHNwYWNlICsgMSk7XG4gICAgICAgICAgICAgIGFyZ3MucHVzaCgnLWUnLCBmbGFnLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwcm9jZXNzIGFyZ3VtZW50cyBjYW4gYWxzbyBiZSBhIGhhc2ggb2YgZmxhZ3MgYW5kIHZhbHVlc1xuICAgICAgICAvLyB7XCJwcm9jZXNzQXJndW1lbnRzXCI6IHtcImZsYWcxXCI6IFwidmFsdWUxXCIsIFwiZmxhZzJcIjogXCJ2YWx1ZTJcIn19XG4gICAgICAgIGZvciAobGV0IFtmbGFnLCB2YWx1ZV0gb2YgXy50b1BhaXJzKHRoaXMucHJvY2Vzc0FyZ3VtZW50cykpIHtcbiAgICAgICAgICBhcmdzLnB1c2goJy1lJywgZmxhZywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbJy1lJywgJ1VJQVNDUklQVCcsIHRoaXMuYm9vdHN0cmFwXSk7XG4gICAgYXJncyA9IGFyZ3MuY29uY2F0KFsnLWUnLCAnVUlBUkVTVUxUU1BBVEgnLCB0aGlzLnRtcERpcl0pO1xuICAgIGlmICh0aGlzLmxhbmd1YWdlKSB7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW2AtQXBwbGVMYW5ndWFnZXMgKCR7dGhpcy5sYW5ndWFnZX0pYF0pO1xuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFtgLU5TTGFuZ3VhZ2VzICgke3RoaXMubGFuZ3VhZ2V9KWBdKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubG9jYWxlKSB7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW2AtQXBwbGVMb2NhbGUgJHt0aGlzLmxvY2FsZX1gXSk7XG4gICAgfVxuXG4gICAgbGV0IGVudiA9IF8uY2xvbmUocHJvY2Vzcy5lbnYpO1xuICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA+PSA3ICYmICF0aGlzLnVkaWQpIHtcbiAgICAgIC8vIGl3ZCBjdXJyZW50bHkgZG9lcyBub3Qgd29yayB3aXRoIHhjb2RlNywgc2V0dGluZyB3aXRob3V0RGVsYXkgdG8gZmFsc2VcbiAgICAgIGxvZy5pbmZvKCdPbiB4Y29kZSA3LjArLCBpbnN0cnVtZW50cy13aXRob3V0LWRlbGF5IGRvZXMgbm90IHdvcmssICcgK1xuICAgICAgICAgICAgICAgJ3NraXBwaW5nIGluc3RydW1lbnRzLXdpdGhvdXQtZGVsYXknKTtcbiAgICAgIHRoaXMud2l0aG91dERlbGF5ID0gZmFsc2U7XG4gICAgfVxuICAgIGxldCBpd2RQYXRoID0gYXdhaXQgZ2V0SXdkUGF0aCh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvcik7XG4gICAgZW52LkNBX0RFQlVHX1RSQU5TQUNUSU9OUyA9IDE7XG4gICAgaWYgKHRoaXMud2l0aG91dERlbGF5ICYmICF0aGlzLnVkaWQpIHtcbiAgICAgIC8vIHNpbSwgYW5kIHVzaW5nIGktdy1kXG4gICAgICBlbnYuRFlMRF9JTlNFUlRfTElCUkFSSUVTID0gcGF0aC5yZXNvbHZlKGl3ZFBhdGgsICdJbnN0cnVtZW50c1NoaW0uZHlsaWInKTtcbiAgICAgIGVudi5MSUJfUEFUSCA9IGl3ZFBhdGg7XG4gICAgfVxuICAgIGxldCBpbnN0cnVtZW50c0V4ZWNBcmdzID0gW3RoaXMuaW5zdHJ1bWVudHNQYXRoLCAuLi5hcmdzXTtcbiAgICBpbnN0cnVtZW50c0V4ZWNBcmdzID0gXy5tYXAoaW5zdHJ1bWVudHNFeGVjQXJncywgZnVuY3Rpb24gaW5zdHJ1bWVudEFyZ3MgKGFyZykge1xuICAgICAgaWYgKGFyZyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgbnVsbCB2YWx1ZSB3YXMgcGFzc2VkIGFzIGFuIGFyZyB0byBleGVjdXRlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2luc3RydW1lbnRzIG9uIHRoZSBjb21tYW5kIGxpbmUuIEEgbGV0aWFibGUgaXMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAncHJvYmFibHkgbm90IGdldHRpbmcgc2V0LiBBcnJheSBvZiBjb21tYW5kIGFyZ3M6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoaW5zdHJ1bWVudHNFeGVjQXJncykpO1xuICAgICAgfVxuICAgICAgLy8gZXNjYXBlIGFueSBhcmd1bWVudCB0aGF0IGhhcyBhIHNwYWNlIGluIGl0XG4gICAgICBpZiAoXy5pc1N0cmluZyhhcmcpICYmIGFyZy5pbmRleE9mKCcgJykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBgXCIke2FyZ31cImA7XG4gICAgICB9XG4gICAgICAvLyBvdGhlcndpc2UganVzdCB1c2UgdGhlIGFyZ3VtZW50XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH0pO1xuICAgIGxvZy5kZWJ1ZyhgU3Bhd25pbmcgaW5zdHJ1bWVudHMgd2l0aCBjb21tYW5kOiAnJHtpbnN0cnVtZW50c0V4ZWNBcmdzLmpvaW4oJyAnKX0nYCk7XG4gICAgaWYgKHRoaXMud2l0aG91dERlbGF5KSB7XG4gICAgICBsb2cuZGVidWcoJ0FuZCBleHRyYSB3aXRob3V0LWRlbGF5IGVudjogJyArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgRFlMRF9JTlNFUlRfTElCUkFSSUVTOiBlbnYuRFlMRF9JTlNFUlRfTElCUkFSSUVTLFxuICAgICAgICBMSUJfUEFUSDogZW52LkxJQl9QQVRIXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgQW5kIGxhdW5jaCB0aW1lb3V0cyAoaW4gbXMpOiAke0pTT04uc3RyaW5naWZ5KHRoaXMubGF1bmNoVGltZW91dCl9YCk7XG4gICAgcmV0dXJuIGF3YWl0IHNwYXduKHRoaXMuaW5zdHJ1bWVudHNQYXRoLCBhcmdzLCB7ZW52fSk7XG4gIH1cblxuICBhZGRTb2NrZXRDb25uZWN0VGltZXIgKGRlbGF5LCB0eXBlLCBkb0FjdGlvbikge1xuICAgIGxldCBzb2NrZXRDb25uZWN0RGVsYXkgPSBjYW5jZWxsYWJsZURlbGF5KGRlbGF5KTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIHNvY2tldENvbm5lY3REZWxheS50aGVuKCgpID0+IHtcbiAgICAgIGxvZy53YXJuKGBJbnN0cnVtZW50cyBzb2NrZXQgY2xpZW50IG5ldmVyIGNoZWNrZWQgaW47IHRpbWluZyBvdXQgKCR7dHlwZX0pYCk7XG4gICAgICByZXR1cm4gZG9BY3Rpb24oKTtcbiAgICB9KS5jYXRjaChCLkNhbmNlbGxhdGlvbkVycm9yLCAoKSA9PiB7fSkuZG9uZSgpO1xuICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICB0aGlzLnNvY2tldENvbm5lY3REZWxheXMucHVzaChzb2NrZXRDb25uZWN0RGVsYXkpO1xuICB9XG5cbiAgY2xlYXJTb2NrZXRDb25uZWN0VGltZXJzICgpIHtcbiAgICBmb3IgKGxldCBkZWxheSBvZiB0aGlzLnNvY2tldENvbm5lY3REZWxheXMpIHtcbiAgICAgIGRlbGF5LmNhbmNlbCgpO1xuICAgIH1cbiAgICB0aGlzLnNvY2tldENvbm5lY3REZWxheXMgPSBbXTtcbiAgfVxuXG4gIHNldEV4aXRMaXN0ZW5lciAoZXhpdExpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLnByb2MpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuICAgIGlmICh0aGlzLmV4aXRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5wcm9jLnJlbW92ZUxpc3RlbmVyKCdleGl0JywgdGhpcy5leGl0TGlzdGVuZXIpO1xuICAgIH1cbiAgICB0aGlzLmV4aXRMaXN0ZW5lciA9IGV4aXRMaXN0ZW5lcjtcbiAgICB0aGlzLnByb2Mub24oJ2V4aXQnLCBleGl0TGlzdGVuZXIpO1xuICB9XG5cbiAga2lsbEluc3RydW1lbnRzICgpIHtcbiAgICBpZiAoIXRoaXMucHJvYykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG5cbiAgICBsb2cuZGVidWcoYEtpbGwgSW5zdHJ1bWVudHMgcHJvY2VzcyAocGlkOiAke3RoaXMucHJvYy5waWR9KWApO1xuICAgIHJldHVybiBuZXcgQihhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgICAgbGV0IHdhc1Rlcm1pbmF0ZWQgPSBmYWxzZTtcbiAgICAgIC8vIG1vbml0b3JpbmcgcHJvY2VzcyB0ZXJtaW5hdGlvblxuICAgICAgbGV0IHRlcm1EZWxheSA9IGNhbmNlbGxhYmxlRGVsYXkodGhpcy50ZXJtVGltZW91dCk7XG4gICAgICBsZXQgdGVybVByb21pc2UgPSB0ZXJtRGVsYXkuY2F0Y2goQi5DYW5jZWxsYXRpb25FcnJvciwgKCkgPT4ge30pO1xuICAgICAgdGhpcy5zZXRFeGl0TGlzdGVuZXIoKCkgPT4ge1xuICAgICAgICB0aGlzLnByb2MgPSBudWxsO1xuICAgICAgICB3YXNUZXJtaW5hdGVkID0gdHJ1ZTtcbiAgICAgICAgdGVybURlbGF5LmNhbmNlbCgpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICAgIGxvZy5kZWJ1ZygnU2VuZGluZyBTSUdURVJNJyk7XG4gICAgICB0aGlzLnByb2Mua2lsbCgnU0lHVEVSTScpO1xuICAgICAgYXdhaXQgdGVybVByb21pc2U7XG4gICAgICBpZiAoIXdhc1Rlcm1pbmF0ZWQpIHtcbiAgICAgICAgbG9nLndhcm4oYEluc3RydW1lbnRzIGRpZCBub3QgdGVybWluYXRlIGFmdGVyICR7dGhpcy50ZXJtVGltZW91dCAvIDEwMDB9IHNlY29uZHMhYCk7XG4gICAgICAgIGxvZy5kZWJ1ZygnU2VuZGluZyBTSUdLSUxMJyk7XG4gICAgICAgIHRoaXMucHJvYy5raWxsKCdTSUdLSUxMJyk7XG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24odGhpcy5leGl0TGlzdGVuZXIpKSB7XG4gICAgICAgICAgdGhpcy5leGl0TGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyogUFJPQ0VTUyBNQU5BR0VNRU5UICovXG4gIGFzeW5jIHNodXRkb3duICgpIHtcbiAgICBsb2cuZGVidWcoJ1N0YXJ0aW5nIHNodXRkb3duLicpO1xuICAgIGF3YWl0IHRoaXMua2lsbEluc3RydW1lbnRzKCk7XG4gICAgdGhpcy5vblNodXRkb3duRGVmZXJyZWQucmVzb2x2ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluc3RydW1lbnRzO1xuIl0sImZpbGUiOiJsaWIvaW5zdHJ1bWVudHMvaW5zdHJ1bWVudHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
