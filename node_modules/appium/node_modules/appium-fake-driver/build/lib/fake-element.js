"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeElement = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _xmldom = _interopRequireDefault(require("xmldom"));

class FakeElement {
  constructor(xmlNode, app) {
    this.app = app;
    this.node = xmlNode;
    this.nodeAttrs = {};
    this.type = this.node.tagName;
    this.attrs = {};
    this.css = {};

    for (let {
      name,
      value
    } of _lodash.default.values(this.node.attributes)) {
      this.nodeAttrs[name] = value;
    }

    this.parseCss();
  }

  parseCss() {
    if (this.nodeAttrs.style) {
      let segments = this.nodeAttrs.style.split(';');

      for (let s of segments) {
        let [prop, val] = s.split(':');
        prop = prop.trim();
        val = val.trim();
        this.css[prop] = val;
      }
    }
  }

  get tagName() {
    return this.node.tagName;
  }

  setAttr(k, v) {
    this.attrs[k] = v;
  }

  getAttr(k) {
    return this.attrs[k] || '';
  }

  isVisible() {
    return this.nodeAttrs.visible !== 'false';
  }

  isEnabled() {
    return this.nodeAttrs.enabled !== 'false';
  }

  isSelected() {
    return this.nodeAttrs.selected === 'true';
  }

  getLocation() {
    return {
      x: parseFloat(this.nodeAttrs.left || 0),
      y: parseFloat(this.nodeAttrs.top || 0)
    };
  }

  getSize() {
    return {
      width: parseFloat(this.nodeAttrs.width || 0),
      height: parseFloat(this.nodeAttrs.height || 0)
    };
  }

  click() {
    let curClicks = this.getAttr('clicks') || 0;
    this.setAttr('clicks', curClicks + 1);
    let alertId = this.nodeAttrs.showAlert;

    if (alertId) {
      this.app.showAlert(alertId);
    }
  }

  equals(other) {
    return this.node === other.node;
  }

  hasPrompt() {
    return this.nodeAttrs.hasPrompt === 'true';
  }

  getCss(prop) {
    if (_lodash.default.has(this.css, prop)) {
      return this.css[prop];
    }

    return null;
  }

  get xmlFragment() {
    let frag = new _xmldom.default.XMLSerializer().serializeToString(this.node);
    return new _xmldom.default.DOMParser().parseFromString(frag, 'application/xml');
  }

}

exports.FakeElement = FakeElement;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mYWtlLWVsZW1lbnQuanMiXSwibmFtZXMiOlsiRmFrZUVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsInhtbE5vZGUiLCJhcHAiLCJub2RlIiwibm9kZUF0dHJzIiwidHlwZSIsInRhZ05hbWUiLCJhdHRycyIsImNzcyIsIm5hbWUiLCJ2YWx1ZSIsIl8iLCJ2YWx1ZXMiLCJhdHRyaWJ1dGVzIiwicGFyc2VDc3MiLCJzdHlsZSIsInNlZ21lbnRzIiwic3BsaXQiLCJzIiwicHJvcCIsInZhbCIsInRyaW0iLCJzZXRBdHRyIiwiayIsInYiLCJnZXRBdHRyIiwiaXNWaXNpYmxlIiwidmlzaWJsZSIsImlzRW5hYmxlZCIsImVuYWJsZWQiLCJpc1NlbGVjdGVkIiwic2VsZWN0ZWQiLCJnZXRMb2NhdGlvbiIsIngiLCJwYXJzZUZsb2F0IiwibGVmdCIsInkiLCJ0b3AiLCJnZXRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjbGljayIsImN1ckNsaWNrcyIsImFsZXJ0SWQiLCJzaG93QWxlcnQiLCJlcXVhbHMiLCJvdGhlciIsImhhc1Byb21wdCIsImdldENzcyIsImhhcyIsInhtbEZyYWdtZW50IiwiZnJhZyIsIlhNTERvbSIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxXQUFOLENBQWtCO0FBQ2hCQyxFQUFBQSxXQUFXLENBQUVDLE9BQUYsRUFBV0MsR0FBWCxFQUFnQjtBQUN6QixTQUFLQSxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLQyxJQUFMLEdBQVlGLE9BQVo7QUFDQSxTQUFLRyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLEtBQUtGLElBQUwsQ0FBVUcsT0FBdEI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNBLFNBQUtDLEdBQUwsR0FBVyxFQUFYOztBQUNBLFNBQUss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TUFBcEM7QUFDRDs7QUFFREMsRUFBQUEsTUFBTSxDQUFFN0IsSUFBRixFQUFRO0FBQ1osUUFBSVIsZ0JBQUVzQyxHQUFGLENBQU0sS0FBS3pDLEdBQVgsRUFBZ0JXLElBQWhCLENBQUosRUFBMkI7QUFDekIsYUFBTyxLQUFLWCxHQUFMLENBQVNXLElBQVQsQ0FBUDtBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUkrQixXQUFKLEdBQW1CO0FBQ2pCLFFBQUlDLElBQUksR0FBRyxJQUFJQyxnQkFBT0MsYUFBWCxHQUEyQkMsaUJBQTNCLENBQTZDLEtBQUtuRCxJQUFsRCxDQUFYO0FBQ0EsV0FBTyxJQUFJaUQsZ0JBQU9HLFNBQVgsR0FBdUJDLGVBQXZCLENBQXVDTCxJQUF2QyxFQUE2QyxpQkFBN0MsQ0FBUDtBQUNEOztBQTNGZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgWE1MRG9tIGZyb20gJ3htbGRvbSc7XG5cbmNsYXNzIEZha2VFbGVtZW50IHtcbiAgY29uc3RydWN0b3IgKHhtbE5vZGUsIGFwcCkge1xuICAgIHRoaXMuYXBwID0gYXBwO1xuICAgIHRoaXMubm9kZSA9IHhtbE5vZGU7XG4gICAgdGhpcy5ub2RlQXR0cnMgPSB7fTtcbiAgICB0aGlzLnR5cGUgPSB0aGlzLm5vZGUudGFnTmFtZTtcbiAgICB0aGlzLmF0dHJzID0ge307XG4gICAgdGhpcy5jc3MgPSB7fTtcbiAgICBmb3IgKGxldCB7bmFtZSwgdmFsdWV9IG9mIF8udmFsdWVzKHRoaXMubm9kZS5hdHRyaWJ1dGVzKSkge1xuICAgICAgdGhpcy5ub2RlQXR0cnNbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5wYXJzZUNzcygpO1xuICB9XG5cbiAgcGFyc2VDc3MgKCkge1xuICAgIGlmICh0aGlzLm5vZGVBdHRycy5zdHlsZSkge1xuICAgICAgbGV0IHNlZ21lbnRzID0gdGhpcy5ub2RlQXR0cnMuc3R5bGUuc3BsaXQoJzsnKTtcbiAgICAgIGZvciAobGV0IHMgb2Ygc2VnbWVudHMpIHtcbiAgICAgICAgbGV0IFtwcm9wLCB2YWxdID0gcy5zcGxpdCgnOicpO1xuICAgICAgICBwcm9wID0gcHJvcC50cmltKCk7XG4gICAgICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgICAgIHRoaXMuY3NzW3Byb3BdID0gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCB0YWdOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlLnRhZ05hbWU7XG4gIH1cblxuICBzZXRBdHRyIChrLCB2KSB7XG4gICAgdGhpcy5hdHRyc1trXSA9IHY7XG4gIH1cblxuICBnZXRBdHRyIChrKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cnNba10gfHwgJyc7XG4gIH1cblxuICBpc1Zpc2libGUgKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVBdHRycy52aXNpYmxlICE9PSAnZmFsc2UnO1xuICB9XG5cbiAgaXNFbmFibGVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlQXR0cnMuZW5hYmxlZCAhPT0gJ2ZhbHNlJztcbiAgfVxuXG4gIGlzU2VsZWN0ZWQgKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVBdHRycy5zZWxlY3RlZCA9PT0gJ3RydWUnO1xuICB9XG5cbiAgZ2V0TG9jYXRpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBwYXJzZUZsb2F0KHRoaXMubm9kZUF0dHJzLmxlZnQgfHwgMCksXG4gICAgICB5OiBwYXJzZUZsb2F0KHRoaXMubm9kZUF0dHJzLnRvcCB8fCAwKVxuICAgIH07XG4gIH1cblxuICBnZXRTaXplICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHBhcnNlRmxvYXQodGhpcy5ub2RlQXR0cnMud2lkdGggfHwgMCksXG4gICAgICBoZWlnaHQ6IHBhcnNlRmxvYXQodGhpcy5ub2RlQXR0cnMuaGVpZ2h0IHx8IDApXG4gICAgfTtcbiAgfVxuXG4gIGNsaWNrICgpIHtcbiAgICBsZXQgY3VyQ2xpY2tzID0gdGhpcy5nZXRBdHRyKCdjbGlja3MnKSB8fCAwO1xuICAgIHRoaXMuc2V0QXR0cignY2xpY2tzJywgY3VyQ2xpY2tzICsgMSk7XG4gICAgbGV0IGFsZXJ0SWQgPSB0aGlzLm5vZGVBdHRycy5zaG93QWxlcnQ7XG4gICAgaWYgKGFsZXJ0SWQpIHtcbiAgICAgIHRoaXMuYXBwLnNob3dBbGVydChhbGVydElkKTtcbiAgICB9XG4gIH1cblxuICBlcXVhbHMgKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZSA9PT0gb3RoZXIubm9kZTtcbiAgfVxuXG4gIGhhc1Byb21wdCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUF0dHJzLmhhc1Byb21wdCA9PT0gJ3RydWUnO1xuICB9XG5cbiAgZ2V0Q3NzIChwcm9wKSB7XG4gICAgaWYgKF8uaGFzKHRoaXMuY3NzLCBwcm9wKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3NzW3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldCB4bWxGcmFnbWVudCAoKSB7XG4gICAgbGV0IGZyYWcgPSBuZXcgWE1MRG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLm5vZGUpO1xuICAgIHJldHVybiBuZXcgWE1MRG9tLkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhmcmFnLCAnYXBwbGljYXRpb24veG1sJyk7XG4gIH1cblxufVxuXG5leHBvcnQgeyBGYWtlRWxlbWVudCB9O1xuIl0sImZpbGUiOiJsaWIvZmFrZS1lbGVtZW50LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
