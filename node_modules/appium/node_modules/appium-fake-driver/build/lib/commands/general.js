"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.title = async function title() {
  this.assertWebviewContext();
  return this.appModel.title;
};

commands.keys = async function keys(value) {
  if (!this.focusedElId) {
    throw new _appiumBaseDriver.errors.InvalidElementStateError();
  }

  await this.setValue(value, this.focusedElId);
};

commands.setGeoLocation = async function setGeoLocation(location) {
  this.appModel.lat = location.latitude;
  this.appModel.long = location.longitude;
};

commands.getGeoLocation = async function getGeoLocation() {
  return this.appModel.currentGeoLocation;
};

commands.getPageSource = async function getPageSource() {
  return this.appModel.rawXml;
};

commands.getOrientation = async function getOrientation() {
  return this.appModel.orientation;
};

commands.setOrientation = async function setOrientation(o) {
  if (!_lodash.default.includes(['LANDSCAPE', 'PORTRAIT'], o)) {
    throw new _appiumBaseDriver.errors.UnknownError('Orientation must be LANDSCAPE or PORTRAIT');
  }

  this.appModel.orientation = o;
};

commands.getScreenshot = async function getScreenshot() {
  return this.appModel.getScreenshot();
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJ0aXRsZSIsImFzc2VydFdlYnZpZXdDb250ZXh0IiwiYXBwTW9kZWwiLCJrZXlzIiwidmFsdWUiLCJmb2N1c2VkRWxJZCIsImVycm9ycyIsIkludmFsaWRFbGVtZW50U3RhdGVFcnJvciIsInNldFZhbHVlIiwic2V0R2VvTG9jYXRpb24iLCJsb2NhdGlvbiIsImxhdCIsImxhdGl0dWRlIiwibG9uZyIsImxvbmdpdHVkZSIsImdldEdlb0xvY2F0aW9uIiwiY3VycmVudEdlb0xvY2F0aW9uIiwiZ2V0UGFnZVNvdXJjZSIsInJhd1htbCIsImdldE9yaWVudGF0aW9uIiwib3JpZW50YXRpb24iLCJzZXRPcmllbnRhdGlvbiIsIm8iLCJfIiwiaW5jbHVkZXMiLCJVbmtub3duRXJyb3IiLCJnZXRTY3JlZW5zaG90IiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUYsUUFBUSxDQUFDRyxLQUFULEdBQWlCLGVBQWVBLEtBQWYsR0FBd0I7QUFDdkMsT0FBS0Msb0JBQUw7QUFDQSxTQUFPLEtBQUtDLFFBQUwsQ0FBY0YsS0FBckI7QUFDRCxDQUhEOztBQUtBSCxRQUFRLENBQUNNLElBQVQsR0FBZ0IsZUFBZUEsSUFBZixDQUFxQkMsS0FBckIsRUFBNEI7QUFDMUMsTUFBSSxDQUFDLEtBQUtDLFdBQVYsRUFBdUI7QUFDckIsVUFBTSxJQUFJQyx5QkFBT0Msd0JBQVgsRUFBTjtBQUNEOztBQUNELFFBQU0sS0FBS0MsUUFBTCxDQUFjSixLQUFkLEVBQXFCLEtBQUtDLFdBQTFCLENBQU47QUFDRCxDQUxEOztBQU9BUixRQUFRLENBQUNZLGNBQVQsR0FBMEIsZUFBZUEsY0FBZixDQUErQkMsUUFBL0IsRUFBeUM7QUFFakUsT0FBS1IsUUFBTCxDQUFjUyxHQUFkLEdBQW9CRCxRQUFRLENBQUNFLFFBQTdCO0FBQ0EsT0FBS1YsUUFBTCxDQUFjVyxJQUFkLEdBQXFCSCxRQUFRLENBQUNJLFNBQTlCO0FBQ0QsQ0FKRDs7QUFNQWpCLFFBQVEsQ0FBQ2tCLGNBQVQsR0FBMEIsZUFBZUEsY0FBZixHQUFpQztBQUN6RCxTQUFPLEtBQUtiLFFBQUwsQ0FBY2Msa0JBQXJCO0FBQ0QsQ0FGRDs7QUFJQW5CLFFBQVEsQ0FBQ29CLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixHQUFnQztBQUN2RCxTQUFPLEtBQUtmLFFBQUwsQ0FBY2dCLE1BQXJCO0FBQ0QsQ0FGRDs7QUFJQXJCLFFBQVEsQ0FBQ3NCLGNBQVQsR0FBMEIsZUFBZUEsY0FBZixHQUFpQztBQUN6RCxTQUFPLEtBQUtqQixRQUFMLENBQWNrQixXQUFyQjtBQUNELENBRkQ7O0FBSUF2QixRQUFRLENBQUN3QixjQUFULEdBQTBCLGVBQWVBLGNBQWYsQ0FBK0JDLENBQS9CLEVBQWtDO0FBQzFELE1BQUksQ0FBQ0MsZ0JBQUVDLFFBQUYsQ0FBVyxDQUFDLFdBQUQsRUFBYyxVQUFkLENBQVgsRUFBc0NGLENBQXRDLENBQUwsRUFBK0M7QUFDN0MsVUFBTSxJQUFJaEIseUJBQU9tQixZQUFYLENBQXdCLDJDQUF4QixDQUFOO0FBQ0Q7O0FBQ0QsT0FBS3ZCLFFBQUwsQ0FBY2tCLFdBQWQsR0FBNEJFLENBQTVCO0FBQ0QsQ0FMRDs7QUFPQXpCLFFBQVEsQ0FBQzZCLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixHQUFnQztBQUN2RCxTQUFPLEtBQUt4QixRQUFMLENBQWN3QixhQUFkLEVBQVA7QUFDRCxDQUZEOztBQUlBQyxNQUFNLENBQUNDLE1BQVAsQ0FBYzdCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMudGl0bGUgPSBhc3luYyBmdW5jdGlvbiB0aXRsZSAoKSB7XG4gIHRoaXMuYXNzZXJ0V2Vidmlld0NvbnRleHQoKTtcbiAgcmV0dXJuIHRoaXMuYXBwTW9kZWwudGl0bGU7XG59O1xuXG5jb21tYW5kcy5rZXlzID0gYXN5bmMgZnVuY3Rpb24ga2V5cyAodmFsdWUpIHtcbiAgaWYgKCF0aGlzLmZvY3VzZWRFbElkKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkRWxlbWVudFN0YXRlRXJyb3IoKTtcbiAgfVxuICBhd2FpdCB0aGlzLnNldFZhbHVlKHZhbHVlLCB0aGlzLmZvY3VzZWRFbElkKTtcbn07XG5cbmNvbW1hbmRzLnNldEdlb0xvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gc2V0R2VvTG9jYXRpb24gKGxvY2F0aW9uKSB7XG4gIC8vIFRPRE8gdGVzdCB0aGlzIGFkZXF1YXRlbHkgb25jZSBXRCBidWcgaXMgZml4ZWRcbiAgdGhpcy5hcHBNb2RlbC5sYXQgPSBsb2NhdGlvbi5sYXRpdHVkZTtcbiAgdGhpcy5hcHBNb2RlbC5sb25nID0gbG9jYXRpb24ubG9uZ2l0dWRlO1xufTtcblxuY29tbWFuZHMuZ2V0R2VvTG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBnZXRHZW9Mb2NhdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmFwcE1vZGVsLmN1cnJlbnRHZW9Mb2NhdGlvbjtcbn07XG5cbmNvbW1hbmRzLmdldFBhZ2VTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiBnZXRQYWdlU291cmNlICgpIHtcbiAgcmV0dXJuIHRoaXMuYXBwTW9kZWwucmF3WG1sO1xufTtcblxuY29tbWFuZHMuZ2V0T3JpZW50YXRpb24gPSBhc3luYyBmdW5jdGlvbiBnZXRPcmllbnRhdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmFwcE1vZGVsLm9yaWVudGF0aW9uO1xufTtcblxuY29tbWFuZHMuc2V0T3JpZW50YXRpb24gPSBhc3luYyBmdW5jdGlvbiBzZXRPcmllbnRhdGlvbiAobykge1xuICBpZiAoIV8uaW5jbHVkZXMoWydMQU5EU0NBUEUnLCAnUE9SVFJBSVQnXSwgbykpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FcnJvcignT3JpZW50YXRpb24gbXVzdCBiZSBMQU5EU0NBUEUgb3IgUE9SVFJBSVQnKTtcbiAgfVxuICB0aGlzLmFwcE1vZGVsLm9yaWVudGF0aW9uID0gbztcbn07XG5cbmNvbW1hbmRzLmdldFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiBnZXRTY3JlZW5zaG90ICgpIHtcbiAgcmV0dXJuIHRoaXMuYXBwTW9kZWwuZ2V0U2NyZWVuc2hvdCgpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2dlbmVyYWwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
