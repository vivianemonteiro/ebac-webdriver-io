"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _fakeElement = require("../fake-element");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

helpers.getExistingElementForNode = function getExistingElementForNode(node) {
  for (let [id, el] of _lodash.default.toPairs(this.elMap)) {
    if (el.node === node) {
      return id;
    }
  }

  return null;
};

helpers.wrapNewEl = function wrapNewEl(obj) {
  let existingElId = this.getExistingElementForNode(obj);

  if (existingElId) {
    return {
      ELEMENT: existingElId
    };
  }

  this.maxElId++;
  this.elMap[this.maxElId.toString()] = new _fakeElement.FakeElement(obj, this.appModel);
  return {
    ELEMENT: this.maxElId.toString()
  };
};

helpers.findElOrEls = async function findElOrEls(strategy, selector, mult, ctx) {
  let qMap = {
    'xpath': 'xpathQuery',
    'id': 'idQuery',
    'accessibility id': 'idQuery',
    'class name': 'classQuery',
    'tag name': 'classQuery'
  };

  if (!_lodash.default.includes(_lodash.default.keys(qMap), strategy)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError();
  }

  if (selector === 'badsel') {
    throw new _appiumBaseDriver.errors.InvalidSelectorError();
  }

  let els = this.appModel[qMap[strategy]](selector, ctx);

  if (els.length) {
    if (mult) {
      let allEls = [];

      for (let el of els) {
        allEls.push(this.wrapNewEl(el));
      }

      return allEls;
    } else {
      return this.wrapNewEl(els[0]);
    }
  } else if (mult) {
    return [];
  } else {
    throw new _appiumBaseDriver.errors.NoSuchElementError();
  }
};

commands.findElement = async function findElement(strategy, selector) {
  return this.findElOrEls(strategy, selector, false);
};

commands.findElements = async function findElements(strategy, selector) {
  return this.findElOrEls(strategy, selector, true);
};

commands.findElementFromElement = async function findElementFromElement(strategy, selector, elementId) {
  let el = this.getElement(elementId);
  return this.findElOrEls(strategy, selector, false, el.xmlFragment);
};

commands.findElementsFromElement = async function findElementsFromElement(strategy, selector, elementId) {
  let el = this.getElement(elementId);
  return this.findElOrEls(strategy, selector, true, el.xmlFragment);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRFeGlzdGluZ0VsZW1lbnRGb3JOb2RlIiwibm9kZSIsImlkIiwiZWwiLCJfIiwidG9QYWlycyIsImVsTWFwIiwid3JhcE5ld0VsIiwib2JqIiwiZXhpc3RpbmdFbElkIiwiRUxFTUVOVCIsIm1heEVsSWQiLCJ0b1N0cmluZyIsIkZha2VFbGVtZW50IiwiYXBwTW9kZWwiLCJmaW5kRWxPckVscyIsInN0cmF0ZWd5Iiwic2VsZWN0b3IiLCJtdWx0IiwiY3R4IiwicU1hcCIsImluY2x1ZGVzIiwia2V5cyIsImVycm9ycyIsIlVua25vd25Db21tYW5kRXJyb3IiLCJJbnZhbGlkU2VsZWN0b3JFcnJvciIsImVscyIsImxlbmd0aCIsImFsbEVscyIsInB1c2giLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJmaW5kRWxlbWVudCIsImZpbmRFbGVtZW50cyIsImZpbmRFbGVtZW50RnJvbUVsZW1lbnQiLCJlbGVtZW50SWQiLCJnZXRFbGVtZW50IiwieG1sRnJhZ21lbnQiLCJmaW5kRWxlbWVudHNGcm9tRWxlbWVudCIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFELE9BQU8sQ0FBQ0UseUJBQVIsR0FBb0MsU0FBU0EseUJBQVQsQ0FBb0NDLElBQXBDLEVBQTBDO0FBQzVFLE9BQUssSUFBSSxDQUFDQyxFQUFELEVBQUtDLEVBQUwsQ0FBVCxJQUFxQkMsZ0JBQUVDLE9BQUYsQ0FBVSxLQUFLQyxLQUFmLENBQXJCLEVBQTRDO0FBQzFDLFFBQUlILEVBQUUsQ0FBQ0YsSUFBSCxLQUFZQSxJQUFoQixFQUFzQjtBQUNwQixhQUFPQyxF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QUEzQixFQUFxQyxLQUFyQyxFQUE0Q2QsRUFBRSxDQUFDaUMsV0FBL0MsQ0FBUDtBQUNELENBSEQ7O0FBS0F2QyxRQUFRLENBQUN3Qyx1QkFBVCxHQUFtQyxlQUFlQSx1QkFBZixDQUF3Q3JCLFFBQXhDLEVBQWtEQyxRQUFsRCxFQUE0RGlCLFNBQTVELEVBQXVFO0FBQ3hHLE1BQUkvQixFQUFFLEdBQUcsS0FBS2dDLFVBQUwsQ0FBZ0JELFNBQWhCLENBQVQ7QUFDQSxTQUFPLEtBQUtuQixXQUFMLENBQWlCQyxRQUFqQixFQUEyQkMsUUFBM0IsRUFBcUMsSUFBckMsRUFBMkNkLEVBQUUsQ0FBQ2lDLFdBQTlDLENBQVA7QUFDRCxDQUhEOztBQUtBRSxNQUFNLENBQUNDLE1BQVAsQ0FBY3hDLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyBGYWtlRWxlbWVudCB9IGZyb20gJy4uL2Zha2UtZWxlbWVudCc7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuaGVscGVycy5nZXRFeGlzdGluZ0VsZW1lbnRGb3JOb2RlID0gZnVuY3Rpb24gZ2V0RXhpc3RpbmdFbGVtZW50Rm9yTm9kZSAobm9kZSkge1xuICBmb3IgKGxldCBbaWQsIGVsXSBvZiBfLnRvUGFpcnModGhpcy5lbE1hcCkpIHtcbiAgICBpZiAoZWwubm9kZSA9PT0gbm9kZSkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmhlbHBlcnMud3JhcE5ld0VsID0gZnVuY3Rpb24gd3JhcE5ld0VsIChvYmopIHtcbiAgLy8gZmlyc3QgY2hlY2sgYW5kIHNlZSBpZiB3ZSBhbHJlYWR5IGhhdmUgYSByZWYgdG8gdGhpcyBlbGVtZW50XG4gIGxldCBleGlzdGluZ0VsSWQgPSB0aGlzLmdldEV4aXN0aW5nRWxlbWVudEZvck5vZGUob2JqKTtcbiAgaWYgKGV4aXN0aW5nRWxJZCkge1xuICAgIHJldHVybiB7RUxFTUVOVDogZXhpc3RpbmdFbElkfTtcbiAgfVxuXG4gIC8vIG90aGVyd2lzZSBhZGQgdGhlIGVsZW1lbnQgdG8gdGhlIG1hcFxuICB0aGlzLm1heEVsSWQrKztcbiAgdGhpcy5lbE1hcFt0aGlzLm1heEVsSWQudG9TdHJpbmcoKV0gPSBuZXcgRmFrZUVsZW1lbnQob2JqLCB0aGlzLmFwcE1vZGVsKTtcbiAgcmV0dXJuIHtFTEVNRU5UOiB0aGlzLm1heEVsSWQudG9TdHJpbmcoKX07XG59O1xuXG5oZWxwZXJzLmZpbmRFbE9yRWxzID0gYXN5bmMgZnVuY3Rpb24gZmluZEVsT3JFbHMgKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY3R4KSB7XG4gIGxldCBxTWFwID0ge1xuICAgICd4cGF0aCc6ICd4cGF0aFF1ZXJ5JyxcbiAgICAnaWQnOiAnaWRRdWVyeScsXG4gICAgJ2FjY2Vzc2liaWxpdHkgaWQnOiAnaWRRdWVyeScsXG4gICAgJ2NsYXNzIG5hbWUnOiAnY2xhc3NRdWVyeScsXG4gICAgJ3RhZyBuYW1lJzogJ2NsYXNzUXVlcnknXG4gIH07XG4gIC8vIFRPRE8gdGhpcyBlcnJvciBjaGVja2luZyBzaG91bGQgcHJvYmFibHkgYmUgcGFydCBvZiBNSlNPTldQP1xuICBpZiAoIV8uaW5jbHVkZXMoXy5rZXlzKHFNYXApLCBzdHJhdGVneSkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoKTtcbiAgfVxuICBpZiAoc2VsZWN0b3IgPT09ICdiYWRzZWwnKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkU2VsZWN0b3JFcnJvcigpO1xuICB9XG4gIGxldCBlbHMgPSB0aGlzLmFwcE1vZGVsW3FNYXBbc3RyYXRlZ3ldXShzZWxlY3RvciwgY3R4KTtcbiAgaWYgKGVscy5sZW5ndGgpIHtcbiAgICBpZiAobXVsdCkge1xuICAgICAgbGV0IGFsbEVscyA9IFtdO1xuICAgICAgZm9yIChsZXQgZWwgb2YgZWxzKSB7XG4gICAgICAgIGFsbEVscy5wdXNoKHRoaXMud3JhcE5ld0VsKGVsKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsRWxzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy53cmFwTmV3RWwoZWxzWzBdKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobXVsdCkge1xuICAgIHJldHVybiBbXTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaEVsZW1lbnRFcnJvcigpO1xuICB9XG59O1xuXG5jb21tYW5kcy5maW5kRWxlbWVudCA9IGFzeW5jIGZ1bmN0aW9uIGZpbmRFbGVtZW50IChzdHJhdGVneSwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMuZmluZEVsT3JFbHMoc3RyYXRlZ3ksIHNlbGVjdG9yLCBmYWxzZSk7XG59O1xuXG5jb21tYW5kcy5maW5kRWxlbWVudHMgPSBhc3luYyBmdW5jdGlvbiBmaW5kRWxlbWVudHMgKHN0cmF0ZWd5LCBzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5maW5kRWxPckVscyhzdHJhdGVneSwgc2VsZWN0b3IsIHRydWUpO1xufTtcblxuY29tbWFuZHMuZmluZEVsZW1lbnRGcm9tRWxlbWVudCA9IGFzeW5jIGZ1bmN0aW9uIGZpbmRFbGVtZW50RnJvbUVsZW1lbnQgKHN0cmF0ZWd5LCBzZWxlY3RvciwgZWxlbWVudElkKSB7XG4gIGxldCBlbCA9IHRoaXMuZ2V0RWxlbWVudChlbGVtZW50SWQpO1xuICByZXR1cm4gdGhpcy5maW5kRWxPckVscyhzdHJhdGVneSwgc2VsZWN0b3IsIGZhbHNlLCBlbC54bWxGcmFnbWVudCk7XG59O1xuXG5jb21tYW5kcy5maW5kRWxlbWVudHNGcm9tRWxlbWVudCA9IGFzeW5jIGZ1bmN0aW9uIGZpbmRFbGVtZW50c0Zyb21FbGVtZW50IChzdHJhdGVneSwgc2VsZWN0b3IsIGVsZW1lbnRJZCkge1xuICBsZXQgZWwgPSB0aGlzLmdldEVsZW1lbnQoZWxlbWVudElkKTtcbiAgcmV0dXJuIHRoaXMuZmluZEVsT3JFbHMoc3RyYXRlZ3ksIHNlbGVjdG9yLCB0cnVlLCBlbC54bWxGcmFnbWVudCk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9maW5kLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
