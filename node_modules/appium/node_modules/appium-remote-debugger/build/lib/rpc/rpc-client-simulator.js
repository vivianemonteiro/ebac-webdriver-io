"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _net = _interopRequireDefault(require("net"));

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

var _appiumIosDevice = require("appium-ios-device");

class RpcClientSimulator extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      socketPath,
      host = '::1',
      port,
      messageProxy
    } = opts;
    this.host = host;
    this.port = port;
    this.messageProxy = messageProxy;
    this.socket = null;
    this.socketPath = socketPath;
  }

  async connect() {
    if (this.socketPath) {
      if (this.messageProxy) {
        _logger.default.debug(`Connecting to remote debugger via proxy through unix domain socket: '${this.messageProxy}'`);

        this.socket = _net.default.connect(this.messageProxy);
        this.socket.once('connect', () => {
          _logger.default.debug(`Forwarding the actual web inspector socket to the proxy: '${this.socketPath}'`);

          this.socket.write(JSON.stringify({
            socketPath: this.socketPath
          }));
        });
      } else {
        _logger.default.debug(`Connecting to remote debugger through unix domain socket: '${this.socketPath}'`);

        this.socket = _net.default.connect(this.socketPath);
      }
    } else {
      if (this.messageProxy) {
        this.port = this.messageProxy;
      }

      _logger.default.debug(`Connecting to remote debugger ${this.messageProxy ? 'via proxy ' : ''}through TCP: ${this.host}:${this.port}`);

      this.socket = new _net.default.Socket({
        type: 'tcp6'
      });
      this.socket.connect(this.port, this.host);
    }

    this.socket.setNoDelay(true);
    this.socket.setKeepAlive(true);
    this.socket.on('close', () => {
      if (this.isConnected) {
        _logger.default.debug('Debugger socket disconnected');
      }

      this.isConnected = false;
      this.socket = null;
    });
    this.socket.on('end', () => {
      this.isConnected = false;
    });
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      socket: this.socket,
      isSimulator: true,
      osVersion: this.platformVersion,
      verbose: this.logAllCommunication,
      verboseHexDump: this.logAllCommunicationHexDump,
      maxFrameLength: this.webInspectorMaxFrameLength
    });
    this.service.listenMessage(this.receive.bind(this));
    return await new _bluebird.default((resolve, reject) => {
      this.socket.on('connect', () => {
        _logger.default.debug(`Debugger socket connected`);

        this.isConnected = true;
        resolve();
      });
      this.socket.on('error', err => {
        if (this.isConnected) {
          _logger.default.error(`Socket error: ${err.message}`);

          this.isConnected = false;
        }

        reject(err);
      });
    });
  }

  async disconnect() {
    if (!this.isConnected) {
      return;
    }

    _logger.default.debug('Disconnecting from remote debugger');

    await super.disconnect();
    this.service.close();
    this.isConnected = false;
  }

  async sendMessage(cmd) {
    let onSocketError;
    return await new _bluebird.default((resolve, reject) => {
      onSocketError = err => {
        _logger.default.error(`Socket error: ${err.message}`);

        reject(err);
      };

      this.socket.on('error', onSocketError);
      this.service.sendMessage(cmd);
      resolve();
    }).finally(() => {
      try {
        this.socket.removeListener('error', onSocketError);
      } catch (ign) {}
    });
  }

  async receive(data) {
    if (!this.isConnected) {
      return;
    }

    if (!data) {
      return;
    }

    for (const key of ['WIRMessageDataKey', 'WIRDestinationKey', 'WIRSocketDataKey']) {
      if (!_lodash.default.isUndefined(data[key])) {
        data[key] = data[key].toString('utf8');
      }
    }

    await this.messageHandler.handleMessage(data);
  }

}

exports.default = RpcClientSimulator;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ycGMvcnBjLWNsaWVudC1zaW11bGF0b3IuanMiXSwibmFtZXMiOlsiUnBjQ2xpZW50U2ltdWxhdG9yIiwiUnBjQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwic2hvdWxkQ2hlY2tGb3JUYXJnZXQiLCJzb2NrZXRQYXRoIiwiaG9zdCIsInBvcnQiLCJtZXNzYWdlUHJveHkiLCJzb2NrZXQiLCJjb25uZWN0IiwibG9nIiwiZGVidWciLCJuZXQiLCJvbmNlIiwid3JpdGUiLCJKU09OIiwic3RyaW5naWZ5IiwiU29ja2V0IiwidHlwZSIsInNldE5vRGVsYXkiLCJzZXRLZWVwQWxpdmUiLCJvbiIsImlzQ29ubmVjdGVkIiwic2VydmljZSIsInNlcnZpY2VzIiwic3RhcnRXZWJJbnNwZWN0b3JTZXJ2aWNlIiwidWRpZCIsImlzU2ltdWxhdG9yIiwib3NWZXJzaW9uIiwicGxhdGZvcm1WZXJzaW9uIiwidmVyYm9zZSIsImxvZ0FsbENvbW11bmljYXRpb24iLCJ2ZXJib3NlSGV4RHVtcCIsImxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wIiwibWF4RnJhbWVMZW5ndGgiLCJ3ZWJJbnNwZWN0b3JNYXhGcmFtZUxlbmd0aCIsImxpc3Rlbk1lc3NhZ2UiLCJyZWNlaXZlIiwiYmluZCIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyIiwiZXJyb3IiLCJtZXNzYWdlIiwiZGlzY29ubmVjdCIsImNsb3NlIiwic2VuZE1lc3NhZ2UiLCJjbWQiLCJvblNvY2tldEVycm9yIiwiZmluYWxseSIsInJlbW92ZUxpc3RlbmVyIiwiaWduIiwiZGF0YSIsImtleSIsIl8iLCJpc1VuZGVmaW5lZCIsInRvU3RyaW5nIiwibWVzc2FnZUhhbmRsZXIiLCJoYW5kbGVNZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdlLE1BQU1BLGtCQUFOLFNBQWlDQyxrQkFBakMs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O0FBQ3ZCaEMsd0JBQUlpQyxLQUFKLENBQVcsaUJBQWdCRCxHQUFHLENBQUNFLE9BQVEsRUFBdkM7O0FBR0FILFFBQUFBLE1BQU0sQ0FBQ0MsR0FBRCxDQUFOO0FBQ0QsT0FMRDs7QUFPQSxXQUFLbEMsTUFBTCxDQUFZYSxFQUFaLENBQWUsT0FBZixFQUF3QjRCLGFBQXhCO0FBQ0EsV0FBSzFCLE9BQUwsQ0FBYXdCLFdBQWIsQ0FBeUJDLEdBQXpCO0FBQ0FSLE1BQUFBLE9BQU87QUFDUixLQVpZLEVBYVpVLE9BYlksQ0FhSixNQUFNO0FBRWIsVUFBSTtBQUNGLGFBQUsxQyxNQUFMLENBQVkyQyxjQUFaLENBQTJCLE9BQTNCLEVBQW9DRixhQUFwQztBQUNELE9BRkQsQ0FFRSxPQUFPRyxHQUFQLEVBQVksQ0FBRTtBQUNqQixLQWxCWSxDQUFiO0FBbUJEOztBQUVELFFBQU1mLE9BQU4sQ0FBZWdCLElBQWYsRUFBcUI7QUFDbkIsUUFBSSxDQUFDLEtBQUsvQixXQUFWLEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDK0IsSUFBTCxFQUFXO0FBQ1Q7QUFDRDs7QUFFRCxTQUFLLE1BQU1DLEdBQVgsSUFBa0IsQ0FBQyxtQkFBRCxFQUFzQixtQkFBdEIsRUFBMkMsa0JBQTNDLENBQWxCLEVBQWtGO0FBQ2hGLFVBQUksQ0FBQ0MsZ0JBQUVDLFdBQUYsQ0FBY0gsSUFBSSxDQUFDQyxHQUFELENBQWxCLENBQUwsRUFBK0I7QUFDN0JELFFBQUFBLElBQUksQ0FBQ0MsR0FBRCxDQUFKLEdBQVlELElBQUksQ0FBQ0MsR0FBRCxDQUFKLENBQVVHLFFBQVYsQ0FBbUIsTUFBbkIsQ0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsVUFBTSxLQUFLQyxjQUFMLENBQW9CQyxhQUFwQixDQUFrQ04sSUFBbEMsQ0FBTjtBQUNEOztBQXBKdUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IG5ldCBmcm9tICduZXQnO1xuaW1wb3J0IFJwY0NsaWVudCBmcm9tICcuL3JwYy1jbGllbnQnO1xuaW1wb3J0IHsgc2VydmljZXMgfSBmcm9tICdhcHBpdW0taW9zLWRldmljZSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnBjQ2xpZW50U2ltdWxhdG9yIGV4dGVuZHMgUnBjQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe1xuICAgICAgc2hvdWxkQ2hlY2tGb3JUYXJnZXQ6IGZhbHNlLFxuICAgIH0sIG9wdHMpKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIHNvY2tldFBhdGgsXG4gICAgICBob3N0ID0gJzo6MScsXG4gICAgICBwb3J0LFxuICAgICAgbWVzc2FnZVByb3h5LFxuICAgIH0gPSBvcHRzO1xuXG4gICAgLy8gaG9zdC9wb3J0IGNvbmZpZyBmb3IgVENQIGNvbW11bmljYXRpb24sIHNvY2tldFBhdGggZm9yIHVuaXggZG9tYWluIHNvY2tldHNcbiAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgdGhpcy5tZXNzYWdlUHJveHkgPSBtZXNzYWdlUHJveHk7XG5cbiAgICB0aGlzLnNvY2tldCA9IG51bGw7XG4gICAgdGhpcy5zb2NrZXRQYXRoID0gc29ja2V0UGF0aDtcbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3QgKCkge1xuICAgIC8vIGNyZWF0ZSBzb2NrZXQgYW5kIGhhbmRsZSBpdHMgbWVzc2FnZXNcbiAgICBpZiAodGhpcy5zb2NrZXRQYXRoKSB7XG4gICAgICBpZiAodGhpcy5tZXNzYWdlUHJveHkpIHtcbiAgICAgICAgLy8gdW5peCBkb21haW4gc29ja2V0IHZpYSBwcm94eVxuICAgICAgICBsb2cuZGVidWcoYENvbm5lY3RpbmcgdG8gcmVtb3RlIGRlYnVnZ2VyIHZpYSBwcm94eSB0aHJvdWdoIHVuaXggZG9tYWluIHNvY2tldDogJyR7dGhpcy5tZXNzYWdlUHJveHl9J2ApO1xuICAgICAgICB0aGlzLnNvY2tldCA9IG5ldC5jb25uZWN0KHRoaXMubWVzc2FnZVByb3h5KTtcblxuICAgICAgICAvLyBGb3J3YXJkIHRoZSBhY3R1YWwgc29ja2V0UGF0aCB0byB0aGUgcHJveHlcbiAgICAgICAgdGhpcy5zb2NrZXQub25jZSgnY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgICBsb2cuZGVidWcoYEZvcndhcmRpbmcgdGhlIGFjdHVhbCB3ZWIgaW5zcGVjdG9yIHNvY2tldCB0byB0aGUgcHJveHk6ICcke3RoaXMuc29ja2V0UGF0aH0nYCk7XG4gICAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgc29ja2V0UGF0aDogdGhpcy5zb2NrZXRQYXRoXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdW5peCBkb21haW4gc29ja2V0XG4gICAgICAgIGxvZy5kZWJ1ZyhgQ29ubmVjdGluZyB0byByZW1vdGUgZGVidWdnZXIgdGhyb3VnaCB1bml4IGRvbWFpbiBzb2NrZXQ6ICcke3RoaXMuc29ja2V0UGF0aH0nYCk7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gbmV0LmNvbm5lY3QodGhpcy5zb2NrZXRQYXRoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubWVzc2FnZVByb3h5KSB7XG4gICAgICAgIC8vIGNvbm5lY3QgdG8gdGhlIHByb3h5IGluc3RlYWQgb2YgdGhlIHJlbW90ZSBkZWJ1Z2dlciBkaXJlY3RseVxuICAgICAgICB0aGlzLnBvcnQgPSB0aGlzLm1lc3NhZ2VQcm94eTtcbiAgICAgIH1cblxuICAgICAgLy8gdGNwIHNvY2tldFxuICAgICAgbG9nLmRlYnVnKGBDb25uZWN0aW5nIHRvIHJlbW90ZSBkZWJ1Z2dlciAke3RoaXMubWVzc2FnZVByb3h5ID8gJ3ZpYSBwcm94eSAnIDogJyd9dGhyb3VnaCBUQ1A6ICR7dGhpcy5ob3N0fToke3RoaXMucG9ydH1gKTtcbiAgICAgIHRoaXMuc29ja2V0ID0gbmV3IG5ldC5Tb2NrZXQoe3R5cGU6ICd0Y3A2J30pO1xuICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCh0aGlzLnBvcnQsIHRoaXMuaG9zdCk7XG4gICAgfVxuXG4gICAgdGhpcy5zb2NrZXQuc2V0Tm9EZWxheSh0cnVlKTtcbiAgICB0aGlzLnNvY2tldC5zZXRLZWVwQWxpdmUodHJ1ZSk7XG4gICAgdGhpcy5zb2NrZXQub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdEZWJ1Z2dlciBzb2NrZXQgZGlzY29ubmVjdGVkJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnNvY2tldCA9IG51bGw7XG4gICAgfSk7XG4gICAgdGhpcy5zb2NrZXQub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIHRoaXMuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICB0aGlzLnNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydFdlYkluc3BlY3RvclNlcnZpY2UodGhpcy51ZGlkLCB7XG4gICAgICBzb2NrZXQ6IHRoaXMuc29ja2V0LFxuICAgICAgaXNTaW11bGF0b3I6IHRydWUsXG4gICAgICBvc1ZlcnNpb246IHRoaXMucGxhdGZvcm1WZXJzaW9uLFxuICAgICAgdmVyYm9zZTogdGhpcy5sb2dBbGxDb21tdW5pY2F0aW9uLFxuICAgICAgdmVyYm9zZUhleER1bXA6IHRoaXMubG9nQWxsQ29tbXVuaWNhdGlvbkhleER1bXAsXG4gICAgICBtYXhGcmFtZUxlbmd0aDogdGhpcy53ZWJJbnNwZWN0b3JNYXhGcmFtZUxlbmd0aCxcbiAgICB9KTtcbiAgICB0aGlzLnNlcnZpY2UubGlzdGVuTWVzc2FnZSh0aGlzLnJlY2VpdmUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyBjb25uZWN0IHRoZSBzb2NrZXRcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gb25seSByZXNvbHZlIHRoaXMgZnVuY3Rpb24gd2hlbiB3ZSBhcmUgYWN0dWFsbHkgY29ubmVjdGVkXG4gICAgICB0aGlzLnNvY2tldC5vbignY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgbG9nLmRlYnVnKGBEZWJ1Z2dlciBzb2NrZXQgY29ubmVjdGVkYCk7XG4gICAgICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zb2NrZXQub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgIGxvZy5lcnJvcihgU29ja2V0IGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgIHRoaXMuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSBjb25uZWN0aW9uIHdhcyByZWZ1c2VkLCBzbyByZWplY3QgdGhlIGNvbm5lY3QgcHJvbWlzZVxuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZGlzY29ubmVjdCAoKSB7XG4gICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9nLmRlYnVnKCdEaXNjb25uZWN0aW5nIGZyb20gcmVtb3RlIGRlYnVnZ2VyJyk7XG4gICAgYXdhaXQgc3VwZXIuZGlzY29ubmVjdCgpO1xuICAgIHRoaXMuc2VydmljZS5jbG9zZSgpO1xuICAgIHRoaXMuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRNZXNzYWdlIChjbWQpIHtcbiAgICBsZXQgb25Tb2NrZXRFcnJvcjtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBoYW5kbGUgc29ja2V0IHByb2JsZW1zXG4gICAgICBvblNvY2tldEVycm9yID0gKGVycikgPT4ge1xuICAgICAgICBsb2cuZXJyb3IoYFNvY2tldCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcblxuICAgICAgICAvLyB0aGUgY29ubmVjdGlvbiB3YXMgcmVmdXNlZCwgc28gcmVqZWN0IHRoZSBjb25uZWN0IHByb21pc2VcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNvY2tldC5vbignZXJyb3InLCBvblNvY2tldEVycm9yKTtcbiAgICAgIHRoaXMuc2VydmljZS5zZW5kTWVzc2FnZShjbWQpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgLy8gcmVtb3ZlIHRoaXMgbGlzdGVuZXIsIHNvIHdlIGRvbid0IGV4aGF1c3QgdGhlIHN5c3RlbVxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25Tb2NrZXRFcnJvcik7XG4gICAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyByZWNlaXZlIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgWydXSVJNZXNzYWdlRGF0YUtleScsICdXSVJEZXN0aW5hdGlvbktleScsICdXSVJTb2NrZXREYXRhS2V5J10pIHtcbiAgICAgIGlmICghXy5pc1VuZGVmaW5lZChkYXRhW2tleV0pKSB7XG4gICAgICAgIGRhdGFba2V5XSA9IGRhdGFba2V5XS50b1N0cmluZygndXRmOCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLm1lc3NhZ2VIYW5kbGVyLmhhbmRsZU1lc3NhZ2UoZGF0YSk7XG4gIH1cbn1cbiJdLCJmaWxlIjoibGliL3JwYy9ycGMtY2xpZW50LXNpbXVsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
