"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _events = _interopRequireDefault(require("./events"));

var _utils = require("../utils");

var _lodash = _interopRequireDefault(require("lodash"));

async function onPageChange(err, appIdKey, pageDict) {
  if (_lodash.default.isEmpty(pageDict)) {
    return;
  }

  const pageArray = (0, _utils.pageArrayFromDict)(pageDict);
  await this.useAppDictLock(done => {
    try {
      if (this.appDict[appIdKey]) {
        if (this.appDict[appIdKey].pageArray) {
          if (this.appDict[appIdKey].pageArray.resolve) {
            this.appDict[appIdKey].pageArray.resolve();
          } else {
            if (_lodash.default.isEqual(this.appDict[appIdKey].pageArray, pageArray)) {
              _logger.default.debug(`Received page change notice for app '${appIdKey}' ` + `but the listing has not changed. Ignoring.`);

              return done();
            }
          }
        }

        this.appDict[appIdKey].pageArray = pageArray;
      }
    } finally {
      done();
    }
  });

  if (this._navigatingToPage) {
    return;
  }

  _logger.default.debug(`Page changed: ${(0, _utils.simpleStringify)(pageDict, true)}`);

  this.emit(_events.default.EVENT_PAGE_CHANGE, {
    appIdKey: appIdKey.replace('PID:', ''),
    pageArray
  });
}

async function onAppConnect(err, dict) {
  const appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Notified that new application '${appIdKey}' has connected`);

  await this.useAppDictLock(done => {
    try {
      this.updateAppsWithDict(dict);
    } finally {
      done();
    }
  });
}

function onAppDisconnect(err, dict) {
  const appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Application '${appIdKey}' disconnected. Removing from app dictionary.`);

  _logger.default.debug(`Current app is '${this.appIdKey}'`);

  delete this.appDict[appIdKey];

  if (this.appIdKey === appIdKey) {
    _logger.default.debug(`No longer have app id. Attempting to find new one.`);

    this.appIdKey = (0, _utils.getDebuggerAppKey)(this.bundleId, this.appDict);
  }

  if (!this.appDict) {
    _logger.default.debug('Main app disconnected. Disconnecting altogether.');

    this.connected = false;
    this.emit(_events.default.EVENT_DISCONNECT, true);
  }
}

async function onAppUpdate(err, dict) {
  await this.useAppDictLock(done => {
    try {
      this.updateAppsWithDict(dict);
    } finally {
      done();
    }
  });
}

function onConnectedDriverList(err, drivers) {
  this.connectedDrivers = drivers.WIRDriverDictionaryKey;

  _logger.default.debug(`Received connected driver list: ${JSON.stringify(this.connectedDrivers)}`);
}

function onCurrentState(err, state) {
  this.currentState = state.WIRAutomationAvailabilityKey;

  _logger.default.debug(`Received connected automation availability state: ${JSON.stringify(this.currentState)}`);
}

async function onConnectedApplicationList(err, apps) {
  _logger.default.debug(`Received connected applications list: ${_lodash.default.keys(apps).join(', ')}`);

  let newDict = {};

  for (const dict of _lodash.default.values(apps)) {
    const [id, entry] = (0, _utils.appInfoFromDict)(dict);

    if (this.skippedApps.includes(entry.name)) {
      continue;
    }

    newDict[id] = entry;
  }

  await this.useAppDictLock(done => {
    try {
      _lodash.default.defaults(this.appDict, newDict);
    } finally {
      done();
    }
  });
}

const messageHandlers = {
  onPageChange,
  onAppConnect,
  onAppDisconnect,
  onAppUpdate,
  onConnectedDriverList,
  onCurrentState,
  onConnectedApplicationList
};
var _default = messageHandlers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
