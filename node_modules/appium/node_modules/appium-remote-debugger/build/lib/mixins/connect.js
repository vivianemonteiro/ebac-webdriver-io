"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _events = _interopRequireDefault(require("./events"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

const APP_CONNECT_TIMEOUT_MS = 0;
const APP_CONNECT_INTERVAL_MS = 100;
const SELECT_APP_RETRIES = 20;
const SELECT_APP_RETRY_SLEEP_MS = 500;
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const BLANK_PAGE_URL = 'about:blank';

async function setConnectionKey() {
  _logger.default.debug('Sending connection key request');

  await this.rpcClient.send('setConnectionKey', {}, false);
}

async function connect(timeout = APP_CONNECT_TIMEOUT_MS) {
  this.setup();
  this.initRpcClient();
  this.rpcClient.on('_rpc_reportSetup:', _lodash.default.noop);
  this.rpcClient.on('_rpc_forwardGetListing:', this.onPageChange.bind(this));
  this.rpcClient.on('_rpc_reportConnectedApplicationList:', this.onConnectedApplicationList.bind(this));
  this.rpcClient.on('_rpc_applicationConnected:', this.onAppConnect.bind(this));
  this.rpcClient.on('_rpc_applicationDisconnected:', this.onAppDisconnect.bind(this));
  this.rpcClient.on('_rpc_applicationUpdated:', this.onAppUpdate.bind(this));
  this.rpcClient.on('_rpc_reportConnectedDriverList:', this.onConnectedDriverList.bind(this));
  this.rpcClient.on('_rpc_reportCurrentState:', this.onCurrentState.bind(this));
  this.rpcClient.on('Page.frameDetached', this.frameDetached.bind(this));
  await this.rpcClient.connect();

  try {
    await this.setConnectionKey();

    if (timeout) {
      _logger.default.debug(`Waiting up to ${timeout}ms for applications to be reported`);

      try {
        await (0, _asyncbox.waitForCondition)(() => !_lodash.default.isEmpty(this.appDict), {
          waitMs: timeout,
          interval: APP_CONNECT_INTERVAL_MS
        });
      } catch (err) {
        _logger.default.debug(`Timed out waiting for applications to be reported`);
      }
    }

    return this.appDict || {};
  } catch (err) {
    _logger.default.error(`Error setting connection key: ${err.message}`);

    await this.disconnect();
    throw err;
  }
}

async function disconnect() {
  if (this.rpcClient) {
    await this.rpcClient.disconnect();
  }

  this.emit(_events.default.EVENT_DISCONNECT, true);
  this.teardown();
}

async function selectApp(currentUrl = null, maxTries = SELECT_APP_RETRIES, ignoreAboutBlankUrl = false) {
  const shouldCheckForTarget = this.rpcClient.shouldCheckForTarget;
  this.rpcClient.shouldCheckForTarget = false;

  try {
    const timer = new _appiumSupport.timing.Timer().start();

    _logger.default.debug('Selecting application');

    if (!this.appDict || _lodash.default.isEmpty(this.appDict)) {
      _logger.default.debug('No applications currently connected.');

      return [];
    }

    const {
      appIdKey,
      pageDict
    } = await this.searchForApp(currentUrl, maxTries, ignoreAboutBlankUrl);

    if (!appIdKey || !pageDict) {
      _logger.default.errorAndThrow(`Could not connect to a valid app after ${maxTries} tries.`);
    }

    if (this.appIdKey !== appIdKey) {
      _logger.default.debug(`Received altered app id, updating from '${this.appIdKey}' to '${appIdKey}'`);

      this.appIdKey = appIdKey;
    }

    logApplicationDictionary(this.appDict);
    const pageArray = _lodash.default.isEmpty(this.appDict[appIdKey].pageArray) ? (0, _utils.pageArrayFromDict)(pageDict) : this.appDict[appIdKey].pageArray;

    _logger.default.debug(`Finally selecting app ${this.appIdKey}: ${(0, _utils.simpleStringify)(pageArray)}`);

    let fullPageArray = [];

    for (const [app, info] of _lodash.default.toPairs(this.appDict)) {
      if (!_lodash.default.isArray(info.pageArray) || !info.isActive) {
        continue;
      }

      const id = app.replace('PID:', '');

      for (const page of info.pageArray) {
        if (!(ignoreAboutBlankUrl && page.url === BLANK_PAGE_URL)) {
          let pageDict = _lodash.default.clone(page);

          pageDict.id = `${id}.${pageDict.id}`;
          pageDict.bundleId = info.bundleId;
          fullPageArray.push(pageDict);
        }
      }
    }

    _logger.default.debug(`Selected app after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

    return fullPageArray;
  } finally {
    this.rpcClient.shouldCheckForTarget = shouldCheckForTarget;
  }
}

async function searchForApp(currentUrl, maxTries, ignoreAboutBlankUrl) {
  const bundleIds = this.includeSafari && !this.isSafari ? [this.bundleId, ...this.additionalBundleIds, SAFARI_BUNDLE_ID] : [this.bundleId, ...this.additionalBundleIds];

  try {
    return await (0, _asyncbox.retryInterval)(maxTries, SELECT_APP_RETRY_SLEEP_MS, async retryCount => {
      logApplicationDictionary(this.appDict);
      const possibleAppIds = (0, _utils.getPossibleDebuggerAppKeys)(bundleIds, this.appDict);

      _logger.default.debug(`Trying out the possible app ids: ${possibleAppIds.join(', ')} (try #${retryCount + 1} of ${maxTries})`);

      for (const attemptedAppIdKey of possibleAppIds) {
        try {
          if (!this.appDict[attemptedAppIdKey].isActive) {
            _logger.default.debug(`Skipping app '${attemptedAppIdKey}' because it is not active`);

            continue;
          }

          _logger.default.debug(`Attempting app '${attemptedAppIdKey}'`);

          const [appIdKey, pageDict] = await this.rpcClient.selectApp(attemptedAppIdKey, this.onAppConnect.bind(this));

          if (_lodash.default.isEmpty(pageDict)) {
            _logger.default.debug('Empty page dictionary received. Trying again.');

            continue;
          }

          this.appDict[appIdKey].pageArray = (0, _utils.pageArrayFromDict)(pageDict);
          const result = this.searchForPage(this.appDict, currentUrl, ignoreAboutBlankUrl);

          if (result) {
            return result;
          }

          if (currentUrl) {
            _logger.default.debug(`Received app, but expected url ('${currentUrl}') was not found. Trying again.`);
          } else {
            _logger.default.debug('Received app, but no match was found. Trying again.');
          }
        } catch (err) {
          _logger.default.debug(`Error checking application: '${err.message}'. Retrying connection`);
        }
      }

      retryCount++;
      throw new Error('Failed to find an app to select');
    }, 0);
  } catch (ign) {
    _logger.default.errorAndThrow(`Could not connect to a valid app after ${maxTries} tries.`);
  }
}

function searchForPage(appsDict, currentUrl = null, ignoreAboutBlankUrl = false) {
  for (const appDict of _lodash.default.values(appsDict)) {
    if (!appDict || !appDict.isActive || !appDict.pageArray || appDict.pageArray.promise) {
      continue;
    }

    for (const dict of appDict.pageArray) {
      if ((!ignoreAboutBlankUrl || dict.url !== BLANK_PAGE_URL) && (!currentUrl || dict.url === currentUrl || dict.url === `${currentUrl}/`)) {
        return {
          appIdKey: appDict.id,
          pageDict: dict
        };
      }
    }
  }

  return null;
}

async function selectPage(appIdKey, pageIdKey, skipReadyCheck = false) {
  this.appIdKey = `PID:${appIdKey}`;
  this.pageIdKey = pageIdKey;

  _logger.default.debug(`Selecting page '${pageIdKey}' on app '${this.appIdKey}' and forwarding socket setup`);

  const timer = new _appiumSupport.timing.Timer().start();
  await this.rpcClient.selectPage(this.appIdKey, pageIdKey);

  if (!skipReadyCheck && !(await this.checkPageIsReady())) {
    await this.pageUnload();
  }

  _logger.default.debug(`Selected page after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
}

function logApplicationDictionary(apps) {
  function getValueString(key, value) {
    if (_lodash.default.isFunction(value)) {
      return '[Function]';
    }

    if (key === 'pageArray' && !_lodash.default.isArray(value)) {
      return `"Waiting for data"`;
    }

    return JSON.stringify(value);
  }

  _logger.default.debug('Current applications available:');

  for (const [app, info] of _lodash.default.toPairs(apps)) {
    _logger.default.debug(`    Application: "${app}"`);

    for (const [key, value] of _lodash.default.toPairs(info)) {
      if (key === 'pageArray' && Array.isArray(value) && value.length) {
        _logger.default.debug(`        ${key}:`);

        for (const page of value) {
          let prefix = '- ';

          for (const [k, v] of _lodash.default.toPairs(page)) {
            _logger.default.debug(`          ${prefix}${k}: ${JSON.stringify(v)}`);

            prefix = '  ';
          }
        }
      } else {
        const valueString = getValueString(key, value);

        _logger.default.debug(`        ${key}: ${valueString}`);
      }
    }
  }
}

function updateAppsWithDict(dict) {
  this.appDict = this.appDict || {};
  let [id, entry] = (0, _utils.appInfoFromDict)(dict);

  if (this.appDict[id]) {
    entry.pageArray = this.appDict[id].pageArray;
  }

  this.appDict[id] = entry;

  if (_lodash.default.isUndefined(entry.pageArray)) {
    entry.pageArray = (0, _utils.deferredPromise)();
  }

  if (!this.appIdKey) {
    this.appIdKey = (0, _utils.getDebuggerAppKey)(this.bundleId, this.appDict);
  }
}

var _default = {
  setConnectionKey,
  connect,
  disconnect,
  selectApp,
  searchForApp,
  searchForPage,
  selectPage,
  updateAppsWithDict
};
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9taXhpbnMvY29ubmVjdC5qcyJdLCJuYW1lcyI6WyJBUFBfQ09OTkVDVF9USU1FT1VUX01TIiwiQVBQX0NPTk5FQ1RfSU5URVJWQUxfTVMiLCJTRUxFQ1RfQVBQX1JFVFJJRVMiLCJTRUxFQ1RfQVBQX1JFVFJZX1NMRUVQX01TIiwiU0FGQVJJX0JVTkRMRV9JRCIsIkJMQU5LX1BBR0VfVVJMIiwic2V0Q29ubmVjdGlvbktleSIsImxvZyIsImRlYnVnIiwicnBjQ2xpZW50Iiwic2VuZCIsImNvbm5lY3QiLCJ0aW1lb3V0Iiwic2V0dXAiLCJpbml0UnBjQ2xpZW50Iiwib24iLCJfIiwibm9vcCIsIm9uUGFnZUNoYW5nZSIsImJpbmQiLCJvbkNvbm5lY3RlZEFwcGxpY2F0aW9uTGlzdCIsIm9uQXBwQ29ubmVjdCIsIm9uQXBwRGlzY29ubmVjdCIsIm9uQXBwVXBkYXRlIiwib25Db25uZWN0ZWREcml2ZXJMaXN0Iiwib25DdXJyZW50U3RhdGUiLCJmcmFtZURldGFjaGVkIiwiaXNFbXB0eSIsImFwcERpY3QiLCJ3YWl0TXMiLCJpbnRlcnZhbCIsImVyciIsImVycm9yIiwibWVzc2FnZSIsImRpc2Nvbm5lY3QiLCJlbWl0IiwiZXZlbnRzIiwiRVZFTlRfRElTQ09OTkVDVCIsInRlYXJkb3duIiwic2VsZWN0QXBwIiwiY3VycmVudFVybCIsIm1heFRyaWVzIiwiaWdub3JlQWJvdXRCbGFua1VybCIsInNob3VsZENoZWNrRm9yVGFyZ2V0IiwidGltZXIiLCJ0aW1pbmciLCJUaW1lciIsInN0YXJ0IiwiYXBwSWRLZXkiLCJwYWdlRGljdCIsInNlYXJjaEZvckFwcCIsImVycm9yQW5kVGhyb3ciLCJsb2dBcHBsaWNhdGlvbkRpY3Rpb25hcnkiLCJwYWdlQXJyYXkiLCJmdWxsUGFnZUFycmF5IiwiYXBwIiwiaW5mbyIsInRvUGFpcnMiLCJpc0FycmF5IiwiaXNBY3RpdmUiLCJpZCIsInJlcGxhY2UiLCJwYWdlIiwidXJsIiwiY2xvbmUiLCJidW5kbGVJZCIsInB1c2giLCJnZXREdXJhdGlvbiIsImFzTWlsbGlTZWNvbmRzIiwidG9GaXhlZCIsImJ1bmRsZUlkcyIsImluY2x1ZGVTYWZhcmkiLCJpc1NhZmFyaSIsImFkZGl0aW9uYWxCdW5kbGVJZHMiLCJyZXRyeUNvdW50IiwicG9zc2libGVBcHBJZHMiLCJqb2luIiwiYXR0ZW1wdGVkQXBwSWRLZXkiLCJyZXN1bHQiLCJzZWFyY2hGb3JQYWdlIiwiRXJyb3IiLCJpZ24iLCJhcHBzRGljdCIsInZhbHVlcyIsInByb21pc2UiLCJkaWN0Iiwic2VsZWN0UGFnZSIsInBhZ2VJZEtleSIsInNraXBSZWFkeUNoZWNrIiwiY2hlY2tQYWdlSXNSZWFkeSIsInBhZ2VVbmxvYWQiLCJhcHBzIiwiZ2V0VmFsdWVTdHJpbmciLCJrZXkiLCJ2YWx1ZSIsImlzRnVuY3Rpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiQXJyYXkiLCJsZW5ndGgiLCJwcmVmaXgiLCJrIiwidiIsInZhbHVlU3RyaW5nIiwidXBkYXRlQXBwc1dpdGhEaWN0IiwiZW50cnkiLCJpc1VuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxzQkFBc0IsR0FBRyxDQUEvQjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLEdBQWhDO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsRUFBM0I7QUFDQSxNQUFNQyx5QkFBeUIsR0FBRyxHQUFsQztBQUNBLE1BQU1DLGdCQUFnQixHQUFHLHdCQUF6QjtBQUNBLE1BQU1DLGNBQWMsR0FBRyxhQUF2Qjs7QUFHQSxlQUFlQyxnQkFBZixHQUFtQztBQUNqQ0Msa0JBQUlDLEtBQUosQ0FBVSxnQ0FBVjs7QUFHQSxRQUFNLEtBQUtDLFNBQUwsQ0FBZUMsSUFBZixDQUFvQixrQkFBcEIsRUFBd0MsRUFBeEMsRUFBNEMsS0FBNUMsQ0FBTjtBQUNEOztBQUVELGVBQWVDLE9BQWYsQ0FBd0JDLE9BQU8sR0FBR1osc0JBQWxDLEVBQTBEO0FBQ3hELE9BQUth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VXFGLEdBQUksS0FBSVUsV0FBWSxFQUF6QztBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVELFNBQVNDLGtCQUFULENBQTZCbkIsSUFBN0IsRUFBbUM7QUFHakMsT0FBS3pELE9BQUwsR0FBZSxLQUFLQSxPQUFMLElBQWdCLEVBQS9CO0FBQ0EsTUFBSSxDQUFDZ0MsRUFBRCxFQUFLNkMsS0FBTCxJQUFjLDRCQUFnQnBCLElBQWhCLENBQWxCOztBQUNBLE1BQUksS0FBS3pELE9BQUwsQ0FBYWdDLEVBQWIsQ0FBSixFQUFzQjtBQUVwQjZDLElBQUFBLEtBQUssQ0FBQ3BELFNBQU4sR0FBa0IsS0FBS3pCLE9BQUwsQ0FBYWdDLEVBQWIsRUFBaUJQLFNBQW5DO0FBQ0Q7O0FBQ0QsT0FBS3pCLE9BQUwsQ0FBYWdDLEVBQWIsSUFBbUI2QyxLQUFuQjs7QUFHQSxNQUFJekYsZ0JBQUUwRixXQUFGLENBQWNELEtBQUssQ0FBQ3BELFNBQXBCLENBQUosRUFBb0M7QUFDbENvRCxJQUFBQSxLQUFLLENBQUNwRCxTQUFOLEdBQWtCLDZCQUFsQjtBQUNEOztBQUdELE1BQUksQ0FBQyxLQUFLTCxRQUFWLEVBQW9CO0FBQ2xCLFNBQUtBLFFBQUwsR0FBZ0IsOEJBQWtCLEtBQUtpQixRQUF2QixFQUFpQyxLQUFLckMsT0FBdEMsQ0FBaEI7QUFDRDtBQUNGOztlQUVjO0FBQUV0QixFQUFBQSxnQkFBRjtBQUFvQkssRUFBQUEsT0FBcEI7QUFBNkJ1QixFQUFBQSxVQUE3QjtBQUF5Q0ssRUFBQUEsU0FBekM7QUFBb0RXLEVBQUFBLFlBQXBEO0FBQWtFNkIsRUFBQUEsYUFBbEU7QUFBaUZPLEVBQUFBLFVBQWpGO0FBQTZGa0IsRUFBQUE7QUFBN0YsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGFwcEluZm9Gcm9tRGljdCwgcGFnZUFycmF5RnJvbURpY3QsIGdldERlYnVnZ2VyQXBwS2V5LFxuICAgICAgICAgZ2V0UG9zc2libGVEZWJ1Z2dlckFwcEtleXMsIHNpbXBsZVN0cmluZ2lmeSwgZGVmZXJyZWRQcm9taXNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgeyB0aW1pbmcgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsLCB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jb25zdCBBUFBfQ09OTkVDVF9USU1FT1VUX01TID0gMDtcbmNvbnN0IEFQUF9DT05ORUNUX0lOVEVSVkFMX01TID0gMTAwO1xuY29uc3QgU0VMRUNUX0FQUF9SRVRSSUVTID0gMjA7XG5jb25zdCBTRUxFQ1RfQVBQX1JFVFJZX1NMRUVQX01TID0gNTAwO1xuY29uc3QgU0FGQVJJX0JVTkRMRV9JRCA9ICdjb20uYXBwbGUubW9iaWxlc2FmYXJpJztcbmNvbnN0IEJMQU5LX1BBR0VfVVJMID0gJ2Fib3V0OmJsYW5rJztcblxuXG5hc3luYyBmdW5jdGlvbiBzZXRDb25uZWN0aW9uS2V5ICgpIHtcbiAgbG9nLmRlYnVnKCdTZW5kaW5nIGNvbm5lY3Rpb24ga2V5IHJlcXVlc3QnKTtcbiAgLy8gc2VuZCBidXQgb25seSB3YWl0IHRvIG1ha2Ugc3VyZSB0aGUgc29ja2V0IHdvcmtlZFxuICAvLyBhcyByZXNwb25zZSBmcm9tIFdlYiBJbnNwZWN0b3IgY2FuIHRha2UgYSBsb25nIHRpbWVcbiAgYXdhaXQgdGhpcy5ycGNDbGllbnQuc2VuZCgnc2V0Q29ubmVjdGlvbktleScsIHt9LCBmYWxzZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QgKHRpbWVvdXQgPSBBUFBfQ09OTkVDVF9USU1FT1VUX01TKSB7XG4gIHRoaXMuc2V0dXAoKTtcblxuICAvLyBpbml0aWFsaXplIHRoZSBycGMgY2xpZW50XG4gIHRoaXMuaW5pdFJwY0NsaWVudCgpO1xuXG4gIC8vIGxpc3RlbiBmb3IgYmFzaWMgZGVidWdnZXItbGV2ZWwgZXZlbnRzXG4gIHRoaXMucnBjQ2xpZW50Lm9uKCdfcnBjX3JlcG9ydFNldHVwOicsIF8ubm9vcCk7XG4gIHRoaXMucnBjQ2xpZW50Lm9uKCdfcnBjX2ZvcndhcmRHZXRMaXN0aW5nOicsIHRoaXMub25QYWdlQ2hhbmdlLmJpbmQodGhpcykpO1xuICB0aGlzLnJwY0NsaWVudC5vbignX3JwY19yZXBvcnRDb25uZWN0ZWRBcHBsaWNhdGlvbkxpc3Q6JywgdGhpcy5vbkNvbm5lY3RlZEFwcGxpY2F0aW9uTGlzdC5iaW5kKHRoaXMpKTtcbiAgdGhpcy5ycGNDbGllbnQub24oJ19ycGNfYXBwbGljYXRpb25Db25uZWN0ZWQ6JywgdGhpcy5vbkFwcENvbm5lY3QuYmluZCh0aGlzKSk7XG4gIHRoaXMucnBjQ2xpZW50Lm9uKCdfcnBjX2FwcGxpY2F0aW9uRGlzY29ubmVjdGVkOicsIHRoaXMub25BcHBEaXNjb25uZWN0LmJpbmQodGhpcykpO1xuICB0aGlzLnJwY0NsaWVudC5vbignX3JwY19hcHBsaWNhdGlvblVwZGF0ZWQ6JywgdGhpcy5vbkFwcFVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgdGhpcy5ycGNDbGllbnQub24oJ19ycGNfcmVwb3J0Q29ubmVjdGVkRHJpdmVyTGlzdDonLCB0aGlzLm9uQ29ubmVjdGVkRHJpdmVyTGlzdC5iaW5kKHRoaXMpKTtcbiAgdGhpcy5ycGNDbGllbnQub24oJ19ycGNfcmVwb3J0Q3VycmVudFN0YXRlOicsIHRoaXMub25DdXJyZW50U3RhdGUuYmluZCh0aGlzKSk7XG4gIHRoaXMucnBjQ2xpZW50Lm9uKCdQYWdlLmZyYW1lRGV0YWNoZWQnLCB0aGlzLmZyYW1lRGV0YWNoZWQuYmluZCh0aGlzKSk7XG5cbiAgYXdhaXQgdGhpcy5ycGNDbGllbnQuY29ubmVjdCgpO1xuXG4gIC8vIGdldCB0aGUgY29ubmVjdGlvbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgYXBwXG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5zZXRDb25uZWN0aW9uS2V5KCk7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgV2FpdGluZyB1cCB0byAke3RpbWVvdXR9bXMgZm9yIGFwcGxpY2F0aW9ucyB0byBiZSByZXBvcnRlZGApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbigoKSA9PiAhXy5pc0VtcHR5KHRoaXMuYXBwRGljdCksIHtcbiAgICAgICAgICB3YWl0TXM6IHRpbWVvdXQsXG4gICAgICAgICAgaW50ZXJ2YWw6IEFQUF9DT05ORUNUX0lOVEVSVkFMX01TLFxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2cuZGVidWcoYFRpbWVkIG91dCB3YWl0aW5nIGZvciBhcHBsaWNhdGlvbnMgdG8gYmUgcmVwb3J0ZWRgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYXBwRGljdCB8fCB7fTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yKGBFcnJvciBzZXR0aW5nIGNvbm5lY3Rpb24ga2V5OiAke2Vyci5tZXNzYWdlfWApO1xuICAgIGF3YWl0IHRoaXMuZGlzY29ubmVjdCgpO1xuICAgIHRocm93IGVycjtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBkaXNjb25uZWN0ICgpIHtcbiAgaWYgKHRoaXMucnBjQ2xpZW50KSB7XG4gICAgYXdhaXQgdGhpcy5ycGNDbGllbnQuZGlzY29ubmVjdCgpO1xuICB9XG4gIHRoaXMuZW1pdChldmVudHMuRVZFTlRfRElTQ09OTkVDVCwgdHJ1ZSk7XG4gIHRoaXMudGVhcmRvd24oKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VsZWN0QXBwIChjdXJyZW50VXJsID0gbnVsbCwgbWF4VHJpZXMgPSBTRUxFQ1RfQVBQX1JFVFJJRVMsIGlnbm9yZUFib3V0QmxhbmtVcmwgPSBmYWxzZSkge1xuICBjb25zdCBzaG91bGRDaGVja0ZvclRhcmdldCA9IHRoaXMucnBjQ2xpZW50LnNob3VsZENoZWNrRm9yVGFyZ2V0O1xuICB0aGlzLnJwY0NsaWVudC5zaG91bGRDaGVja0ZvclRhcmdldCA9IGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gICAgbG9nLmRlYnVnKCdTZWxlY3RpbmcgYXBwbGljYXRpb24nKTtcbiAgICBpZiAoIXRoaXMuYXBwRGljdCB8fCBfLmlzRW1wdHkodGhpcy5hcHBEaWN0KSkge1xuICAgICAgbG9nLmRlYnVnKCdObyBhcHBsaWNhdGlvbnMgY3VycmVudGx5IGNvbm5lY3RlZC4nKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCB7YXBwSWRLZXksIHBhZ2VEaWN0fSA9IGF3YWl0IHRoaXMuc2VhcmNoRm9yQXBwKGN1cnJlbnRVcmwsIG1heFRyaWVzLCBpZ25vcmVBYm91dEJsYW5rVXJsKTtcblxuICAgIC8vIGlmLCBhZnRlciBhbGwgdGhpcywgd2UgaGF2ZSBubyBkaWN0aW9uYXJ5LCB3ZSBoYXZlIGZhaWxlZFxuICAgIGlmICghYXBwSWRLZXkgfHwgIXBhZ2VEaWN0KSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ291bGQgbm90IGNvbm5lY3QgdG8gYSB2YWxpZCBhcHAgYWZ0ZXIgJHttYXhUcmllc30gdHJpZXMuYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBwSWRLZXkgIT09IGFwcElkS2V5KSB7XG4gICAgICBsb2cuZGVidWcoYFJlY2VpdmVkIGFsdGVyZWQgYXBwIGlkLCB1cGRhdGluZyBmcm9tICcke3RoaXMuYXBwSWRLZXl9JyB0byAnJHthcHBJZEtleX0nYCk7XG4gICAgICB0aGlzLmFwcElkS2V5ID0gYXBwSWRLZXk7XG4gICAgfVxuXG4gICAgbG9nQXBwbGljYXRpb25EaWN0aW9uYXJ5KHRoaXMuYXBwRGljdCk7XG5cbiAgICAvLyB0cmFuc2xhdGUgdGhlIGRpY3Rpb25hcnkgaW50byBhIHVzZWZ1bCBmb3JtLCBhbmQgcmV0dXJuIHRvIHNlbmRlclxuICAgIGNvbnN0IHBhZ2VBcnJheSA9IF8uaXNFbXB0eSh0aGlzLmFwcERpY3RbYXBwSWRLZXldLnBhZ2VBcnJheSlcbiAgICAgID8gcGFnZUFycmF5RnJvbURpY3QocGFnZURpY3QpXG4gICAgICA6IHRoaXMuYXBwRGljdFthcHBJZEtleV0ucGFnZUFycmF5O1xuICAgIGxvZy5kZWJ1ZyhgRmluYWxseSBzZWxlY3RpbmcgYXBwICR7dGhpcy5hcHBJZEtleX06ICR7c2ltcGxlU3RyaW5naWZ5KHBhZ2VBcnJheSl9YCk7XG5cbiAgICBsZXQgZnVsbFBhZ2VBcnJheSA9IFtdO1xuICAgIGZvciAoY29uc3QgW2FwcCwgaW5mb10gb2YgXy50b1BhaXJzKHRoaXMuYXBwRGljdCkpIHtcbiAgICAgIGlmICghXy5pc0FycmF5KGluZm8ucGFnZUFycmF5KSB8fCAhaW5mby5pc0FjdGl2ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlkID0gYXBwLnJlcGxhY2UoJ1BJRDonLCAnJyk7XG4gICAgICBmb3IgKGNvbnN0IHBhZ2Ugb2YgaW5mby5wYWdlQXJyYXkpIHtcbiAgICAgICAgaWYgKCEoaWdub3JlQWJvdXRCbGFua1VybCAmJiBwYWdlLnVybCA9PT0gQkxBTktfUEFHRV9VUkwpKSB7XG4gICAgICAgICAgbGV0IHBhZ2VEaWN0ID0gXy5jbG9uZShwYWdlKTtcbiAgICAgICAgICBwYWdlRGljdC5pZCA9IGAke2lkfS4ke3BhZ2VEaWN0LmlkfWA7XG4gICAgICAgICAgcGFnZURpY3QuYnVuZGxlSWQgPSBpbmZvLmJ1bmRsZUlkO1xuICAgICAgICAgIGZ1bGxQYWdlQXJyYXkucHVzaChwYWdlRGljdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsb2cuZGVidWcoYFNlbGVjdGVkIGFwcCBhZnRlciAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNNaWxsaVNlY29uZHMudG9GaXhlZCgwKX1tc2ApO1xuICAgIHJldHVybiBmdWxsUGFnZUFycmF5O1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMucnBjQ2xpZW50LnNob3VsZENoZWNrRm9yVGFyZ2V0ID0gc2hvdWxkQ2hlY2tGb3JUYXJnZXQ7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VhcmNoRm9yQXBwIChjdXJyZW50VXJsLCBtYXhUcmllcywgaWdub3JlQWJvdXRCbGFua1VybCkge1xuICBjb25zdCBidW5kbGVJZHMgPSB0aGlzLmluY2x1ZGVTYWZhcmkgJiYgIXRoaXMuaXNTYWZhcmlcbiAgICA/IFt0aGlzLmJ1bmRsZUlkLCAuLi50aGlzLmFkZGl0aW9uYWxCdW5kbGVJZHMsIFNBRkFSSV9CVU5ETEVfSURdXG4gICAgOiBbdGhpcy5idW5kbGVJZCwgLi4udGhpcy5hZGRpdGlvbmFsQnVuZGxlSWRzXTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgcmV0cnlJbnRlcnZhbChtYXhUcmllcywgU0VMRUNUX0FQUF9SRVRSWV9TTEVFUF9NUywgYXN5bmMgKHJldHJ5Q291bnQpID0+IHtcbiAgICAgIGxvZ0FwcGxpY2F0aW9uRGljdGlvbmFyeSh0aGlzLmFwcERpY3QpO1xuICAgICAgY29uc3QgcG9zc2libGVBcHBJZHMgPSBnZXRQb3NzaWJsZURlYnVnZ2VyQXBwS2V5cyhidW5kbGVJZHMsIHRoaXMuYXBwRGljdCk7XG4gICAgICBsb2cuZGVidWcoYFRyeWluZyBvdXQgdGhlIHBvc3NpYmxlIGFwcCBpZHM6ICR7cG9zc2libGVBcHBJZHMuam9pbignLCAnKX0gKHRyeSAjJHtyZXRyeUNvdW50ICsgMX0gb2YgJHttYXhUcmllc30pYCk7XG4gICAgICBmb3IgKGNvbnN0IGF0dGVtcHRlZEFwcElkS2V5IG9mIHBvc3NpYmxlQXBwSWRzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmFwcERpY3RbYXR0ZW1wdGVkQXBwSWRLZXldLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoYFNraXBwaW5nIGFwcCAnJHthdHRlbXB0ZWRBcHBJZEtleX0nIGJlY2F1c2UgaXQgaXMgbm90IGFjdGl2ZWApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyBhcHAgJyR7YXR0ZW1wdGVkQXBwSWRLZXl9J2ApO1xuICAgICAgICAgIGNvbnN0IFthcHBJZEtleSwgcGFnZURpY3RdID0gYXdhaXQgdGhpcy5ycGNDbGllbnQuc2VsZWN0QXBwKGF0dGVtcHRlZEFwcElkS2V5LCB0aGlzLm9uQXBwQ29ubmVjdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAvLyBpbiBpT1MgOC4yIHRoZSBjb25uZWN0IGxvZ2ljIGhhcHBlbnMsIGJ1dCB3aXRoIGFuIGVtcHR5IGRpY3Rpb25hcnlcbiAgICAgICAgICAvLyB3aGljaCBsZWFkcyB0byB0aGUgcmVtb3RlIGRlYnVnZ2VyIGdldHRpbmcgZGlzY29ubmVjdGVkLCBhbmQgaW50byBhIGxvb3BcbiAgICAgICAgICBpZiAoXy5pc0VtcHR5KHBhZ2VEaWN0KSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdFbXB0eSBwYWdlIGRpY3Rpb25hcnkgcmVjZWl2ZWQuIFRyeWluZyBhZ2Fpbi4nKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNhdmUgdGhlIHBhZ2UgYXJyYXkgZm9yIHRoaXMgYXBwXG4gICAgICAgICAgdGhpcy5hcHBEaWN0W2FwcElkS2V5XS5wYWdlQXJyYXkgPSBwYWdlQXJyYXlGcm9tRGljdChwYWdlRGljdCk7XG5cbiAgICAgICAgICAvLyBpZiB3ZSBhcmUgbG9va2luZyBmb3IgYSBwYXJ0aWN1bGFyIHVybCwgbWFrZSBzdXJlIHdlXG4gICAgICAgICAgLy8gaGF2ZSB0aGUgcmlnaHQgcGFnZS4gSWdub3JlIGVtcHR5IG9yIHVuZGVmaW5lZCB1cmxzLlxuICAgICAgICAgIC8vIElnbm9yZSBhYm91dDpibGFuayBpZiByZXF1ZXN0ZWQuXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zZWFyY2hGb3JQYWdlKHRoaXMuYXBwRGljdCwgY3VycmVudFVybCwgaWdub3JlQWJvdXRCbGFua1VybCk7XG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VycmVudFVybCkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKGBSZWNlaXZlZCBhcHAsIGJ1dCBleHBlY3RlZCB1cmwgKCcke2N1cnJlbnRVcmx9Jykgd2FzIG5vdCBmb3VuZC4gVHJ5aW5nIGFnYWluLmApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoJ1JlY2VpdmVkIGFwcCwgYnV0IG5vIG1hdGNoIHdhcyBmb3VuZC4gVHJ5aW5nIGFnYWluLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGBFcnJvciBjaGVja2luZyBhcHBsaWNhdGlvbjogJyR7ZXJyLm1lc3NhZ2V9Jy4gUmV0cnlpbmcgY29ubmVjdGlvbmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXRyeUNvdW50Kys7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmaW5kIGFuIGFwcCB0byBzZWxlY3QnKTtcbiAgICB9LCAwKTtcbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBjb25uZWN0IHRvIGEgdmFsaWQgYXBwIGFmdGVyICR7bWF4VHJpZXN9IHRyaWVzLmApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNlYXJjaEZvclBhZ2UgKGFwcHNEaWN0LCBjdXJyZW50VXJsID0gbnVsbCwgaWdub3JlQWJvdXRCbGFua1VybCA9IGZhbHNlKSB7XG4gIGZvciAoY29uc3QgYXBwRGljdCBvZiBfLnZhbHVlcyhhcHBzRGljdCkpIHtcbiAgICBpZiAoIWFwcERpY3QgfHwgIWFwcERpY3QuaXNBY3RpdmUgfHwgIWFwcERpY3QucGFnZUFycmF5IHx8IGFwcERpY3QucGFnZUFycmF5LnByb21pc2UpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZGljdCBvZiBhcHBEaWN0LnBhZ2VBcnJheSkge1xuICAgICAgaWYgKCghaWdub3JlQWJvdXRCbGFua1VybCB8fCBkaWN0LnVybCAhPT0gQkxBTktfUEFHRV9VUkwpICYmXG4gICAgICAgICAgKCFjdXJyZW50VXJsIHx8IGRpY3QudXJsID09PSBjdXJyZW50VXJsIHx8IGRpY3QudXJsID09PSBgJHtjdXJyZW50VXJsfS9gKSkge1xuICAgICAgICByZXR1cm4geyBhcHBJZEtleTogYXBwRGljdC5pZCwgcGFnZURpY3Q6IGRpY3QgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbGVjdFBhZ2UgKGFwcElkS2V5LCBwYWdlSWRLZXksIHNraXBSZWFkeUNoZWNrID0gZmFsc2UpIHtcbiAgdGhpcy5hcHBJZEtleSA9IGBQSUQ6JHthcHBJZEtleX1gO1xuICB0aGlzLnBhZ2VJZEtleSA9IHBhZ2VJZEtleTtcblxuICBsb2cuZGVidWcoYFNlbGVjdGluZyBwYWdlICcke3BhZ2VJZEtleX0nIG9uIGFwcCAnJHt0aGlzLmFwcElkS2V5fScgYW5kIGZvcndhcmRpbmcgc29ja2V0IHNldHVwYCk7XG5cbiAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcblxuICBhd2FpdCB0aGlzLnJwY0NsaWVudC5zZWxlY3RQYWdlKHRoaXMuYXBwSWRLZXksIHBhZ2VJZEtleSk7XG5cbiAgLy8gbWFrZSBzdXJlIGV2ZXJ5dGhpbmcgaXMgcmVhZHkgdG8gZ29cbiAgaWYgKCFza2lwUmVhZHlDaGVjayAmJiAhYXdhaXQgdGhpcy5jaGVja1BhZ2VJc1JlYWR5KCkpIHtcbiAgICBhd2FpdCB0aGlzLnBhZ2VVbmxvYWQoKTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgU2VsZWN0ZWQgcGFnZSBhZnRlciAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNNaWxsaVNlY29uZHMudG9GaXhlZCgwKX1tc2ApO1xufVxuXG5mdW5jdGlvbiBsb2dBcHBsaWNhdGlvbkRpY3Rpb25hcnkgKGFwcHMpIHtcbiAgZnVuY3Rpb24gZ2V0VmFsdWVTdHJpbmcgKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgcmV0dXJuICdbRnVuY3Rpb25dJztcbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ3BhZ2VBcnJheScgJiYgIV8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBgXCJXYWl0aW5nIGZvciBkYXRhXCJgO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICB9XG4gIGxvZy5kZWJ1ZygnQ3VycmVudCBhcHBsaWNhdGlvbnMgYXZhaWxhYmxlOicpO1xuICBmb3IgKGNvbnN0IFthcHAsIGluZm9dIG9mIF8udG9QYWlycyhhcHBzKSkge1xuICAgIGxvZy5kZWJ1ZyhgICAgIEFwcGxpY2F0aW9uOiBcIiR7YXBwfVwiYCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgXy50b1BhaXJzKGluZm8pKSB7XG4gICAgICBpZiAoa2V5ID09PSAncGFnZUFycmF5JyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgbG9nLmRlYnVnKGAgICAgICAgICR7a2V5fTpgKTtcbiAgICAgICAgZm9yIChjb25zdCBwYWdlIG9mIHZhbHVlKSB7XG4gICAgICAgICAgbGV0IHByZWZpeCA9ICctICc7XG4gICAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgXy50b1BhaXJzKHBhZ2UpKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoYCAgICAgICAgICAke3ByZWZpeH0ke2t9OiAke0pTT04uc3RyaW5naWZ5KHYpfWApO1xuICAgICAgICAgICAgcHJlZml4ID0gJyAgJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHZhbHVlU3RyaW5nID0gZ2V0VmFsdWVTdHJpbmcoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGxvZy5kZWJ1ZyhgICAgICAgICAke2tleX06ICR7dmFsdWVTdHJpbmd9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFwcHNXaXRoRGljdCAoZGljdCkge1xuICAvLyBnZXQgdGhlIGRpY3Rpb25hcnkgZW50cnkgaW50byBhIG5pY2UgZm9ybSwgYW5kIGFkZCBpdCB0byB0aGVcbiAgLy8gYXBwbGljYXRpb24gZGljdGlvbmFyeVxuICB0aGlzLmFwcERpY3QgPSB0aGlzLmFwcERpY3QgfHwge307XG4gIGxldCBbaWQsIGVudHJ5XSA9IGFwcEluZm9Gcm9tRGljdChkaWN0KTtcbiAgaWYgKHRoaXMuYXBwRGljdFtpZF0pIHtcbiAgICAvLyBwcmVzZXJ2ZSB0aGUgcGFnZSBkaWN0aW9uYXJ5IGZvciB0aGlzIGVudHJ5XG4gICAgZW50cnkucGFnZUFycmF5ID0gdGhpcy5hcHBEaWN0W2lkXS5wYWdlQXJyYXk7XG4gIH1cbiAgdGhpcy5hcHBEaWN0W2lkXSA9IGVudHJ5O1xuXG4gIC8vIGFkZCBhIHByb21pc2UgdG8gZ2V0IHRoZSBwYWdlIGRpY3Rpb25hcnlcbiAgaWYgKF8uaXNVbmRlZmluZWQoZW50cnkucGFnZUFycmF5KSkge1xuICAgIGVudHJ5LnBhZ2VBcnJheSA9IGRlZmVycmVkUHJvbWlzZSgpO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGdldCB0aGUgYXBwIGlkIGZyb20gb3VyIGNvbm5lY3RlZCBhcHBzXG4gIGlmICghdGhpcy5hcHBJZEtleSkge1xuICAgIHRoaXMuYXBwSWRLZXkgPSBnZXREZWJ1Z2dlckFwcEtleSh0aGlzLmJ1bmRsZUlkLCB0aGlzLmFwcERpY3QpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgc2V0Q29ubmVjdGlvbktleSwgY29ubmVjdCwgZGlzY29ubmVjdCwgc2VsZWN0QXBwLCBzZWFyY2hGb3JBcHAsIHNlYXJjaEZvclBhZ2UsIHNlbGVjdFBhZ2UsIHVwZGF0ZUFwcHNXaXRoRGljdCB9O1xuIl0sImZpbGUiOiJsaWIvbWl4aW5zL2Nvbm5lY3QuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
