"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TrustStore = exports.Certificate = void 0;

require("source-map-support/register");

var _crypto = _interopRequireDefault(require("crypto"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const tset = `<?xml version="1.0" encoding="UTF-8"?>\n
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <array/>
</plist>`;

class Certificate {
  constructor(pemFilename) {
    this.pemFilename = pemFilename;
    this.opensslBinary = null;
    this.fingerprint = null;
    this.data = null;
    this.subject = null;
  }

  async openssl(...args) {
    if (!this.opensslBinary) {
      try {
        this.opensslBinary = await _appiumSupport.fs.which('openssl');
      } catch (e) {
        throw new Error('openssl executable cannot be found in PATH. Make sure it is installed');
      }
    }

    _logger.default.debug(`Executing ${this.opensslBinary} with arguments: ${args}`);

    let result;

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.opensslBinary, args);
      result = stdout;
    } catch (e) {
      if (e.stderr) {
        throw new Error(e.stderr);
      }

      throw e;
    }

    return result;
  }

  async add(dir) {
    let data = (await this.getDerData(this.pemFilename)).toString('hex');
    let subject = await this.getSubject(this.pemFilename);
    let sha1 = (await this.getFingerPrint(this.data)).toString('hex');
    let trustStore = new TrustStore(dir);
    return await trustStore.addRecord(sha1, tset, subject, data);
  }

  async has(dir) {
    let subject = await this.getSubject(this.pemFilename);
    let trustStore = new TrustStore(dir);

    if (!(await trustStore.hasRecords(subject))) {
      return false;
    }

    let previousFingerprint = await trustStore.getFingerPrintFromRecord(subject);
    let currentFingerprint = await this.getFingerPrint();
    return previousFingerprint.toString() === currentFingerprint.toString();
  }

  async remove(dir) {
    let subject = await this.getSubject(this.pemFilename);
    let trustStore = new TrustStore(dir);
    return await trustStore.removeRecord(subject);
  }

  async getDerData() {
    if (this.data) {
      return this.data;
    }

    const output = await this.openssl('x509', '-outform', 'der', '-in', this.pemFilename);
    this.data = Buffer.from(_lodash.default.trim(output));
    return this.data;
  }

  async getFingerPrint() {
    if (this.fingerprint) {
      return this.fingerprint;
    }

    let data = await this.getDerData();

    let shasum = _crypto.default.createHash('sha1');

    shasum.update(data);
    this.fingerprint = shasum.digest();
    return this.fingerprint;
  }

  async getSubject() {
    if (this.subject) {
      return this.subject;
    }

    const subject = await this.openssl('x509', '-noout', '-subject', '-in', this.pemFilename);
    const match = /^\s*subject=.*\bCN\b\s*=\s*([^\n]+)$/m.exec(subject);

    if (!match) {
      _logger.default.debug(subject);

      throw new Error(`Cannot parse certificate subject from the openssl output`);
    }

    this.subject = match[1];
    return this.subject;
  }

}

exports.Certificate = Certificate;

class TrustStore {
  constructor(sharedResourceDir) {
    this.sharedResourceDir = sharedResourceDir;
  }

  async getDB() {
    if (this.db) {
      return this.db;
    }

    let keychainsPath = _path.default.resolve(this.sharedResourceDir, 'Library', 'Keychains');

    if (!(await _appiumSupport.fs.exists(keychainsPath))) {
      await (0, _appiumSupport.mkdirp)(keychainsPath);
    }

    this.db = _path.default.resolve(keychainsPath, 'TrustStore.sqlite3');
    await (0, _utils.execSQLiteQuery)(this.db, `CREATE TABLE IF NOT EXISTS tsettings (sha1 BLOB NOT NULL DEFAULT '', subj BLOB NOT NULL DEFAULT '', tset BLOB, data BLOB, PRIMARY KEY(sha1));`);

    try {
      await (0, _utils.execSQLiteQuery)(this.db, 'CREATE INDEX isubj ON tsettings(subj);');
    } catch (e) {}

    return this.db;
  }

  async addRecord(sha1, tset, subj, data) {
    let db = await this.getDB();

    if (await this.hasRecords(subj)) {
      return await (0, _utils.execSQLiteQuery)(db, `UPDATE tsettings SET sha1=x'?', tset='?', data=x'?' WHERE subj='?'`, sha1, tset, data, subj);
    } else {
      return await (0, _utils.execSQLiteQuery)(db, `INSERT INTO tsettings (sha1, subj, tset, data) VALUES (x'?', '?', '?', x'?')`, sha1, subj, tset, data);
    }
  }

  async removeRecord(subj) {
    return await (0, _utils.execSQLiteQuery)(await this.getDB(), `DELETE FROM tsettings WHERE subj = '?'`, subj);
  }

  async hasRecords(subj) {
    return (await this.getRecordCount(subj)) > 0;
  }

  async getRecordCount(subj) {
    let result = await (0, _utils.execSQLiteQuery)(await this.getDB(), `SELECT count(*) FROM tsettings WHERE subj = '?'`, subj);
    return parseInt(result.split('=')[1], 10);
  }

  async getFingerPrintFromRecord(subj) {
    let result = await (0, _utils.execSQLiteQuery)(await this.getDB(), `SELECT sha1 FROM tsettings WHERE subj='?'`, subj);

    if (result) {
      return Buffer.from(result.split('=')[1].trim());
    }
  }

}

exports.TrustStore = TrustStore;
var _default = Certificate;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
