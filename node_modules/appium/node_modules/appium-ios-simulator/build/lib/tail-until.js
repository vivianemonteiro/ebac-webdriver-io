"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tailUntil = tailUntil;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("./logger"));

async function tailUntil(filePath, until, timeout = 5000) {
  let proc = new _teen_process.SubProcess('tail', ['-f', '-n', '100', filePath]);

  const startDetector = stdout => stdout.indexOf(until) > -1;

  return await new _bluebird.default((resolve, reject) => {
    const started = proc.start(startDetector);

    const timedout = _bluebird.default.delay(timeout).then(function () {
      return reject(new Error(`Tailing file ${filePath} failed after ${timeout}ms`));
    });

    _bluebird.default.race([started, timedout]).then(resolve).catch(reject);
  }).finally(async () => {
    if (proc.isRunning) {
      try {
        await proc.stop();
      } catch (err) {
        _logger.default.info(`Stopping tail process failed: ${err.message}`);
      }
    }
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90YWlsLXVudGlsLmpzIl0sIm5hbWVzIjpbInRhaWxVbnRpbCIsImZpbGVQYXRoIiwidW50aWwiLCJ0aW1lb3V0IiwicHJvYyIsIlN1YlByb2Nlc3MiLCJzdGFydERldGVjdG9yIiwic3Rkb3V0IiwiaW5kZXhPZiIsIkIiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3RhcnRlZCIsInN0YXJ0IiwidGltZWRvdXQiLCJkZWxheSIsInRoZW4iLCJFcnJvciIsInJhY2UiLCJjYXRjaCIsImZpbmFsbHkiLCJpc1J1bm5pbmciLCJzdG9wIiwiZXJyIiwibG9nIiwiaW5mbyIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsZUFBZUEsU0FBZixDQUEwQkMsUUFBMUIsRUFBb0NDLEtBQXBDLEVBQTJDQyxPQUFPLEdBQUcsSUFBckQsRUFBMkQ7QUFDekQsTUFBSUMsSUFBSSxHQUFHLElBQUlDLHdCQUFKLENBQWUsTUFBZixFQUF1QixDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsS0FBYixFQUFvQkosUUFBcEIsQ0FBdkIsQ0FBWDs7QUFRQSxRQUFNSyxhQUFhLEdBQUlDLE1BQUQsSUFBWUEsTUFBTSxDQUFDQyxPQUFQLENBQWVOLEtBQWYsSUFBd0IsQ0FBQyxDQUEzRDs7QUFFQSxTQUFPLE1BQU0sSUFBSU8saUJBQUosQ0FBTSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdEMsVUFBTUMsT0FBTyxHQUFHUixJQUFJLENBQUNTLEtBQUwsQ0FBV1AsYUFBWCxDQUFoQjs7QUFHQSxVQUFNUSxRQUFRLEdBQUdMLGtCQUFFTSxLQUFGLENBQVFaLE9BQVIsRUFBaUJhLElBQWpCLENBQXNCLFlBQVk7QUFDakQsYUFBT0wsTUFBTSxDQUFDLElBQUlNLEtBQUosQ0FBVyxnQkFBZWhCLFFBQVMsaUJBQWdCRSxPQUFRLElBQTNELENBQUQsQ0FBYjtBQUNELEtBRmdCLENBQWpCOztBQUtBTSxzQkFBRVMsSUFBRixDQUFPLENBQUNOLE9BQUQsRUFBVUUsUUFBVixDQUFQLEVBQTRCRSxJQUE1QixDQUFpQ04sT0FBakMsRUFBMENTLEtBQTFDLENBQWdEUixNQUFoRDtBQUNELEdBVlksRUFVVlMsT0FWVSxDQVVGLFlBQVk7QUFFckIsUUFBSWhCLElBQUksQ0FBQ2lCLFNBQVQsRUFBb0I7QUFDbEIsVUFBSTtBQUNGLGNBQU1qQixJQUFJLENBQUNrQixJQUFMLEVBQU47QUFDRCxPQUZELENBRUUsT0FBT0MsR0FBUCxFQUFZO0FBRVpDLHdCQUFJQyxJQUFKLENBQVUsaUNBQWdDRixHQUFHLENBQUNHLE9BQVEsRUFBdEQ7QUFDRDtBQUNGO0FBQ0YsR0FwQlksQ0FBYjtBQXFCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YlByb2Nlc3MgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cbi8vIHRhaWxzIGEgZmlsZSwgcHJvbWlzZSByZXNvbHZlcyB3aGVuIGlucHV0IHN0cmluZyBpcyB3cml0dGVuIHRvIGZpbGVcbmFzeW5jIGZ1bmN0aW9uIHRhaWxVbnRpbCAoZmlsZVBhdGgsIHVudGlsLCB0aW1lb3V0ID0gNTAwMCkge1xuICBsZXQgcHJvYyA9IG5ldyBTdWJQcm9jZXNzKCd0YWlsJywgWyctZicsICctbicsICcxMDAnLCBmaWxlUGF0aF0pO1xuXG4gIC8vIC8vIGZvciBkZWJ1Z2dpbmdcbiAgLy8gZnVuY3Rpb24gY29uc29sZU91dCAoLi4uYXJncykge1xuICAvLyAgIGNvbnNvbGUubG9nKGA+Pj4gJHthcmdzfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgLy8gfVxuICAvLyBwcm9jLm9uKCdvdXRwdXQnLCBjb25zb2xlT3V0KTtcblxuICBjb25zdCBzdGFydERldGVjdG9yID0gKHN0ZG91dCkgPT4gc3Rkb3V0LmluZGV4T2YodW50aWwpID4gLTE7XG5cbiAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBzdGFydGVkID0gcHJvYy5zdGFydChzdGFydERldGVjdG9yKTtcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW4gKi9cbiAgICBjb25zdCB0aW1lZG91dCA9IEIuZGVsYXkodGltZW91dCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgVGFpbGluZyBmaWxlICR7ZmlsZVBhdGh9IGZhaWxlZCBhZnRlciAke3RpbWVvdXR9bXNgKSk7XG4gICAgfSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgQi5yYWNlKFtzdGFydGVkLCB0aW1lZG91dF0pLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgfSkuZmluYWxseShhc3luYyAoKSA9PiB7XG4gICAgLy8gbm8gbWF0dGVyIHdoYXQsIHN0b3AgdGhlIHRhaWwgcHJvY2Vzc1xuICAgIGlmIChwcm9jLmlzUnVubmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcHJvYy5zdG9wKCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gdGhlcmUgaXMgbm90IG11Y2ggd2UgY2FuIGRvIGhlcmUsIHVuZm9ydHVuYXRlbHksIGJ1dCBsb2dcbiAgICAgICAgbG9nLmluZm8oYFN0b3BwaW5nIHRhaWwgcHJvY2VzcyBmYWlsZWQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgdGFpbFVudGlsIH07XG4iXSwiZmlsZSI6ImxpYi90YWlsLXVudGlsLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
