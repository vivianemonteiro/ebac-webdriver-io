"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9.3"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

class SimulatorXcode10 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);

      if (!appContainer.endsWith('.app')) {
        return false;
      }

      return await _appiumSupport.fs.exists(appContainer);
    } catch (err) {
      try {
        const info = await this.simctl.appInfo(bundleId);
        return info.includes('ApplicationType');
      } catch (ign) {}
    }

    return false;
  }

  async openUrl(url) {
    if (!(await this.isRunning())) {
      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
    }

    const timer = new _appiumSupport.timing.Timer().start();
    await this.simctl.openUrl(url);
    let psError;

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        let procList = [];

        try {
          procList = await this.ps();
          psError = null;
        } catch (e) {
          _logger.default.debug(e.message);

          psError = e;
        }

        return procList.some(({
          name
        }) => name === _utils.MOBILE_SAFARI_BUNDLE_ID);
      }, {
        waitMs: _utils.SAFARI_STARTUP_TIMEOUT,
        intervalMs: 500
      });
    } catch (err) {
      const secondsElapsed = timer.getDuration().asSeconds;

      if (psError) {
        _logger.default.warn(`Mobile Safari process existence cannot be verified after ${secondsElapsed.toFixed(3)}s. ` + `Original error: ${psError.message}`);

        _logger.default.warn('Continuing anyway');
      } else {
        throw new Error(`Mobile Safari cannot open '${url}' after ${secondsElapsed.toFixed(3)}s. ` + `Its process ${_utils.MOBILE_SAFARI_BUNDLE_ID} does not exist in the list of Simulator processes`);
      }
    }

    _logger.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }

}

var _default = SimulatorXcode10;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtMTAuanMiXSwibmFtZXMiOlsiU2ltdWxhdG9yWGNvZGUxMCIsIlNpbXVsYXRvclhjb2RlOTMiLCJjb25zdHJ1Y3RvciIsInVkaWQiLCJ4Y29kZVZlcnNpb24iLCJpc0FwcEluc3RhbGxlZCIsImJ1bmRsZUlkIiwiYXBwQ29udGFpbmVyIiwic2ltY3RsIiwiZ2V0QXBwQ29udGFpbmVyIiwiZW5kc1dpdGgiLCJmcyIsImV4aXN0cyIsImVyciIsImluZm8iLCJhcHBJbmZvIiwiaW5jbHVkZXMiLCJpZ24iLCJvcGVuVXJsIiwidXJsIiwiaXNSdW5uaW5nIiwiRXJyb3IiLCJ0aW1lciIsInRpbWluZyIsIlRpbWVyIiwic3RhcnQiLCJwc0Vycm9yIiwicHJvY0xpc3QiLCJwcyIsImUiLCJsb2ciLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJzb21lIiwibmFtZSIsIk1PQklMRV9TQUZBUklfQlVORExFX0lEIiwid2FpdE1zIiwiU0FGQVJJX1NUQVJUVVBfVElNRU9VVCIsImludGVydmFsTXMiLCJzZWNvbmRzRWxhcHNlZCIsImdldER1cmF0aW9uIiwiYXNTZWNvbmRzIiwid2FybiIsInRvRml4ZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZ0JBQU4sU0FBK0JDLHVCQUEvQixDQUFnRDtBQUM5Q0MsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFlBQVIsRUFBc0I7QUFDL0IsVUFBTUQsSUFBTixFQUFZQyxZQUFaO0FBQ0Q7O0FBU21CLFFBQWRDLGNBQWMsQ0FBRUMsUUFBRixFQUFZO0FBQzlCLFFBQUk7QUFDRixZQUFNQyxZQUFZLEdBQUcsTUFBTSxLQUFLQyxNQUFMLENBQVlDLGVBQVosQ0FBNEJILFFBQTVCLENBQTNCOztBQUNBLFVBQUksQ0FBQ0MsWUFBWSxDQUFDRyxRQUFiLENBQXNCLE1BQXRCLENBQUwsRUFBb0M7QUFDbEMsZUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsYUFBTyxNQUFNQyxrQkFBR0MsTUFBSCxDQUFVTCxZQUFWLENBQWI7QUFDRCxLQU5ELENBTUUsT0FBT00sR0FBUCxFQUFZO0FBSVosVUFBSTtBQUNGLGNBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtOLE1BQUwsQ0FBWU8sT0FBWixDQUFvQlQsUUFBcEIsQ0FBbkI7QUFDQSxlQUFPUSxJQUFJLENBQUNFLFFBQUwsQ0FBYyxpQkFBZCxDQUFQO0FBQ0QsT0FIRCxDQUdFLE9BQU9DLEdBQVAsRUFBWSxDQUFFO0FBQ2pCOztBQUNELFdBQU8sS0FBUDtBQUNEOztBQUtZLFFBQVBDLE9BQU8sQ0FBRUMsR0FBRixFQUFPO0FBQ2xCLFFBQUksRUFBQyxNQUFNLEtBQUtDLFNBQUwsRUFBUCxDQUFKLEVBQTZCO0FBQzNCLFlBQU0sSUFBSUMsS0FBSixDQUFXLGtCQUFpQkYsR0FBSSx5Q0FBaEMsQ0FBTjtBQUNEOztBQUNELFVBQU1HLEtBQUssR0FBRyxJQUFJQyxzQkFBT0MsS0FBWCxHQUFtQkMsS0FBbkIsRUFBZDtBQUNBLFVBQU0sS0FBS2pCLE1BQUwsQ0FBWVUsT0FBWixDQUFvQkMsR0FBcEIsQ0FBTjtBQUNBLFFBQUlPLE9BQUo7O0FBQ0EsUUFBSTtBQUNGLFlBQU0sZ0NBQWlCLFlBQVk7QUFDakMsWUFBSUMsUUFBUSxHQUFHLEVBQWY7O0FBQ0EsWUFBSTtBQUNGQSxVQUFBQSxRQUFRLEdBQUcsTUFBTSxLQUFLQyxFQUFMLEVBQWpCO0FBQ0FGLFVBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0QsU0FIRCxDQUdFLE9BQU9HLENBQVAsRUFBVTtBQUNWQywwQkFBSUMsS0FBSixDQUFVRixDQUFDLENBQUNHLE9BQVo7O0FBQ0FOLFVBQUFBLE9BQU8sR0FBR0csQ0FBVjtBQUNEOztBQUNELGVBQU9GLFFBQVEsQ0FBQ00sSUFBVCxDQUFjLENBQUM7QUFBQ0MsVUFBQUE7QUFBRCxTQUFELEtBQVlBLElBQUksS0FBS0MsOEJBQW5DLENBQVA7QUFDRCxPQVZLLEVBVUg7QUFDREMsUUFBQUEsTUFBTSxFQUFFQyw2QkFEUDtBQUVEQyxRQUFBQSxVQUFVLEVBQUU7QUFGWCxPQVZHLENBQU47QUFjRCxLQWZELENBZUUsT0FBT3pCLEdBQVAsRUFBWTtBQUNaLFlBQU0wQixjQUFjLEdBQUdqQixLQUFLLENBQUNrQixXQUFOLEdBQW9CQyxTQUEzQzs7QUFDQSxVQUFJZixPQUFKLEVBQWE7QUFDWEksd0JBQUlZLElBQUosQ0FBVSw0REFBMkRILGNBQWMsQ0FBQ0ksT0FBZixDQUF1QixDQUF2QixDQUEwQixLQUF0RixHQUNOLG1CQUFrQmpCLE9BQU8sQ0FBQ00sT0FBUSxFQURyQzs7QUFFQUYsd0JBQUlZLElBQUosQ0FBUyxtQkFBVDtBQUNELE9BSkQsTUFJTztBQUNMLGNBQU0sSUFBSXJCLEtBQUosQ0FBVyw4QkFBNkJGLEdBQUksV0FBVW9CLGNBQWMsQ0FBQ0ksT0FBZixDQUF1QixDQUF2QixDQUEwQixLQUF0RSxHQUNiLGVBQWNSLDhCQUF3QixvREFEbkMsQ0FBTjtBQUVEO0FBQ0Y7O0FBQ0RMLG9CQUFJQyxLQUFKLENBQVcsK0JBQThCWixHQUFJLFFBQU9HLEtBQUssQ0FBQ2tCLFdBQU4sR0FBb0JDLFNBQXBCLENBQThCRSxPQUE5QixDQUFzQyxDQUF0QyxDQUF5QyxHQUE3RjtBQUNEOztBQXBFNkM7O2VBdUVqQzNDLGdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlOTMgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOS4zJztcbmltcG9ydCB7IGZzLCB0aW1pbmcgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgTU9CSUxFX1NBRkFSSV9CVU5ETEVfSUQsIFNBRkFSSV9TVEFSVFVQX1RJTUVPVVQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlMTAgZXh0ZW5kcyBTaW11bGF0b3JYY29kZTkzIHtcbiAgY29uc3RydWN0b3IgKHVkaWQsIHhjb2RlVmVyc2lvbikge1xuICAgIHN1cGVyKHVkaWQsIHhjb2RlVmVyc2lvbik7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IHdoZXRoZXIgdGhlIHBhcnRpY3VsYXIgYXBwbGljYXRpb24gaXMgaW5zdGFsbGVkIG9uIFNpbXVsYXRvci5cbiAgICogQG92ZXJyaWRlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCAtIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIGNoZWNrZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZC5cbiAgICovXG4gIGFzeW5jIGlzQXBwSW5zdGFsbGVkIChidW5kbGVJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhcHBDb250YWluZXIgPSBhd2FpdCB0aGlzLnNpbWN0bC5nZXRBcHBDb250YWluZXIoYnVuZGxlSWQpO1xuICAgICAgaWYgKCFhcHBDb250YWluZXIuZW5kc1dpdGgoJy5hcHAnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKGFwcENvbnRhaW5lcik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBnZXRfYXBwX2NvbnRhaW5lciBzdWJjb21tYW5kIGZhaWxzIGZvciBzeXN0ZW0gYXBwbGljYXRpb25zLFxuICAgICAgLy8gc28gd2UgdHJ5IHRoZSBoaWRkZW4gYXBwaW5mbyBzdWJjb21tYW5kLCB3aGljaCBwcmludHMgY29ycmVjdCBpbmZvIGZvclxuICAgICAgLy8gc3lzdGVtL2hpZGRlbiBhcHBzXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgdGhpcy5zaW1jdGwuYXBwSW5mbyhidW5kbGVJZCk7XG4gICAgICAgIHJldHVybiBpbmZvLmluY2x1ZGVzKCdBcHBsaWNhdGlvblR5cGUnKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgb3BlblVybCAodXJsKSB7XG4gICAgaWYgKCFhd2FpdCB0aGlzLmlzUnVubmluZygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIG9wZW4gJyR7dXJsfScsIGJ1dCBTaW11bGF0b3IgaXMgbm90IGluIEJvb3RlZCBzdGF0ZWApO1xuICAgIH1cbiAgICBjb25zdCB0aW1lciA9IG5ldyB0aW1pbmcuVGltZXIoKS5zdGFydCgpO1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLm9wZW5VcmwodXJsKTtcbiAgICBsZXQgcHNFcnJvcjtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBwcm9jTGlzdCA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHByb2NMaXN0ID0gYXdhaXQgdGhpcy5wcygpO1xuICAgICAgICAgIHBzRXJyb3IgPSBudWxsO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGUubWVzc2FnZSk7XG4gICAgICAgICAgcHNFcnJvciA9IGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb2NMaXN0LnNvbWUoKHtuYW1lfSkgPT4gbmFtZSA9PT0gTU9CSUxFX1NBRkFSSV9CVU5ETEVfSUQpO1xuICAgICAgfSwge1xuICAgICAgICB3YWl0TXM6IFNBRkFSSV9TVEFSVFVQX1RJTUVPVVQsXG4gICAgICAgIGludGVydmFsTXM6IDUwMCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3Qgc2Vjb25kc0VsYXBzZWQgPSB0aW1lci5nZXREdXJhdGlvbigpLmFzU2Vjb25kcztcbiAgICAgIGlmIChwc0Vycm9yKSB7XG4gICAgICAgIGxvZy53YXJuKGBNb2JpbGUgU2FmYXJpIHByb2Nlc3MgZXhpc3RlbmNlIGNhbm5vdCBiZSB2ZXJpZmllZCBhZnRlciAke3NlY29uZHNFbGFwc2VkLnRvRml4ZWQoMyl9cy4gYCArXG4gICAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke3BzRXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgbG9nLndhcm4oJ0NvbnRpbnVpbmcgYW55d2F5Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1vYmlsZSBTYWZhcmkgY2Fubm90IG9wZW4gJyR7dXJsfScgYWZ0ZXIgJHtzZWNvbmRzRWxhcHNlZC50b0ZpeGVkKDMpfXMuIGAgK1xuICAgICAgICAgIGBJdHMgcHJvY2VzcyAke01PQklMRV9TQUZBUklfQlVORExFX0lEfSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbGlzdCBvZiBTaW11bGF0b3IgcHJvY2Vzc2VzYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgU2FmYXJpIHN1Y2Nlc3NmdWxseSBvcGVuZWQgJyR7dXJsfScgaW4gJHt0aW1lci5nZXREdXJhdGlvbigpLmFzU2Vjb25kcy50b0ZpeGVkKDMpfXNgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW11bGF0b3JYY29kZTEwO1xuIl0sImZpbGUiOiJsaWIvc2ltdWxhdG9yLXhjb2RlLTEwLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
