"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-11"));

class SimulatorXcode11_4 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this._locationMenu = 'Features';
  }

  async setAppearance(value) {
    await this.simctl.setAppearance(_lodash.default.toLower(value));
  }

  async getAppearance() {
    return await this.simctl.getAppearance();
  }

  async addCertificate(payload, opts = {}) {
    const {
      isRoot = true
    } = opts;
    const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';
    await this.simctl[methodName](payload, {
      raw: true
    });
    return true;
  }

  async pushNotification(payload) {
    await this.simctl.pushNotification(payload);
  }

  async setPermissions(bundleId, permissionsMapping) {
    return await super.setPermissions(bundleId, permissionsMapping);
  }

  async clearKeychains() {
    await this.simctl.resetKeychain();
  }

  async launchWindow(isUiClientRunning, opts) {
    if (!isUiClientRunning) {
      await this.startUIClient(opts);
    }

    await this.boot();
  }

  async enableCalendarAccess(bundleID) {
    await this.simctl.grantPermission(bundleID, 'calendar');
  }

  async disableCalendarAccess(bundleID) {
    await this.simctl.revokePermission(bundleID, 'calendar');
  }

}

var _default = SimulatorXcode11_4;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtMTEuNC5qcyJdLCJuYW1lcyI6WyJTaW11bGF0b3JYY29kZTExXzQiLCJTaW11bGF0b3JYY29kZTExIiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwieGNvZGVWZXJzaW9uIiwiX2xvY2F0aW9uTWVudSIsInNldEFwcGVhcmFuY2UiLCJ2YWx1ZSIsInNpbWN0bCIsIl8iLCJ0b0xvd2VyIiwiZ2V0QXBwZWFyYW5jZSIsImFkZENlcnRpZmljYXRlIiwicGF5bG9hZCIsIm9wdHMiLCJpc1Jvb3QiLCJtZXRob2ROYW1lIiwicmF3IiwicHVzaE5vdGlmaWNhdGlvbiIsInNldFBlcm1pc3Npb25zIiwiYnVuZGxlSWQiLCJwZXJtaXNzaW9uc01hcHBpbmciLCJjbGVhcktleWNoYWlucyIsInJlc2V0S2V5Y2hhaW4iLCJsYXVuY2hXaW5kb3ciLCJpc1VpQ2xpZW50UnVubmluZyIsInN0YXJ0VUlDbGllbnQiLCJib290IiwiZW5hYmxlQ2FsZW5kYXJBY2Nlc3MiLCJidW5kbGVJRCIsImdyYW50UGVybWlzc2lvbiIsImRpc2FibGVDYWxlbmRhckFjY2VzcyIsInJldm9rZVBlcm1pc3Npb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsa0JBQU4sU0FBaUNDLHVCQUFqQyxDQUFrRDtBQUNoREMsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFlBQVIsRUFBc0I7QUFDL0IsVUFBTUQsSUFBTixFQUFZQyxZQUFaO0FBSUEsU0FBS0MsYUFBTCxHQUFxQixVQUFyQjtBQUNEOztBQVlrQixRQUFiQyxhQUFhLENBQUVDLEtBQUYsRUFBUztBQUMxQixVQUFNLEtBQUtDLE1BQUwsQ0FBWUYsYUFBWixDQUEwQkcsZ0JBQUVDLE9BQUYsQ0FBVUgsS0FBVixDQUExQixDQUFOO0FBQ0Q7O0FBYWtCLFFBQWJJLGFBQWEsR0FBSTtBQUNyQixXQUFPLE1BQU0sS0FBS0gsTUFBTCxDQUFZRyxhQUFaLEVBQWI7QUFDRDs7QUFrQm1CLFFBQWRDLGNBQWMsQ0FBRUMsT0FBRixFQUFXQyxJQUFJLEdBQUcsRUFBbEIsRUFBc0I7QUFDeEMsVUFBTTtBQUNKQyxNQUFBQSxNQUFNLEdBQUc7QUFETCxRQUVGRCxJQUZKO0FBR0EsVUFBTUUsVUFBVSxHQUFHRCxNQUFNLEdBQUcsb0JBQUgsR0FBMEIsZ0JBQW5EO0FBQ0EsVUFBTSxLQUFLUCxNQUFMLENBQVlRLFVBQVosRUFBd0JILE9BQXhCLEVBQWlDO0FBQUNJLE1BQUFBLEdBQUcsRUFBRTtBQUFOLEtBQWpDLENBQU47QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFvQnFCLFFBQWhCQyxnQkFBZ0IsQ0FBRUwsT0FBRixFQUFXO0FBQy9CLFVBQU0sS0FBS0wsTUFBTCxDQUFZVSxnQkFBWixDQUE2QkwsT0FBN0IsQ0FBTjtBQUNEOztBQUttQixRQUFkTSxjQUFjLENBQUVDLFFBQUYsRUFBWUMsa0JBQVosRUFBZ0M7QUFDbEQsV0FBTyxNQUFNLE1BQU1GLGNBQU4sQ0FBcUJDLFFBQXJCLEVBQStCQyxrQkFBL0IsQ0FBYjtBQUtEOztBQUttQixRQUFkQyxjQUFjLEdBQUk7QUFDdEIsVUFBTSxLQUFLZCxNQUFMLENBQVllLGFBQVosRUFBTjtBQUNEOztBQU1pQixRQUFaQyxZQUFZLENBQUVDLGlCQUFGLEVBQXFCWCxJQUFyQixFQUEyQjtBQUczQyxRQUFJLENBQUNXLGlCQUFMLEVBQXdCO0FBQ3RCLFlBQU0sS0FBS0MsYUFBTCxDQUFtQlosSUFBbkIsQ0FBTjtBQUNEOztBQUNELFVBQU0sS0FBS2EsSUFBTCxFQUFOO0FBQ0Q7O0FBTXlCLFFBQXBCQyxvQkFBb0IsQ0FBRUMsUUFBRixFQUFZO0FBQ3BDLFVBQU0sS0FBS3JCLE1BQUwsQ0FBWXNCLGVBQVosQ0FBNEJELFFBQTVCLEVBQXNDLFVBQXRDLENBQU47QUFDRDs7QUFNMEIsUUFBckJFLHFCQUFxQixDQUFFRixRQUFGLEVBQVk7QUFDckMsVUFBTSxLQUFLckIsTUFBTCxDQUFZd0IsZ0JBQVosQ0FBNkJILFFBQTdCLEVBQXVDLFVBQXZDLENBQU47QUFDRDs7QUFsSStDOztlQXVJbkM3QixrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGUxMSBmcm9tICcuL3NpbXVsYXRvci14Y29kZS0xMSc7XG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlMTFfNCBleHRlbmRzIFNpbXVsYXRvclhjb2RlMTEge1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcblxuICAgIC8vIGZvciBzZXR0aW5nIHRoZSBsb2NhdGlvbiB1c2luZyBBcHBsZVNjcmlwdCwgdGhlIHRvcC1sZXZlbCBtZW51IHRocm91Z2ggd2hpY2hcbiAgICAvLyB0aGUgJ0xvY2F0aW9uJyBvcHRpb24gaXMgZm91bmRcbiAgICB0aGlzLl9sb2NhdGlvbk1lbnUgPSAnRmVhdHVyZXMnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBTZXRzIFVJIGFwcGVhcmFuY2Ugc3R5bGUuXG4gICAqIFRoaXMgZnVuY3Rpb24gY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgYm9vdGVkIHNpbXVsYXRvci5cbiAgICpcbiAgICogQHNpbmNlIFhjb2RlIFNESyAxMS40XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBvbmUgb2YgcG9zc2libGUgYXBwZWFyYW5jZSB2YWx1ZXM6XG4gICAqIC0gZGFyazogdG8gc3dpdGNoIHRvIHRoZSBEYXJrIG1vZGVcbiAgICogLSBsaWdodDogdG8gc3dpdGNoIHRvIHRoZSBMaWdodCBtb2RlXG4gICAqL1xuICBhc3luYyBzZXRBcHBlYXJhbmNlICh2YWx1ZSkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLnNldEFwcGVhcmFuY2UoXy50b0xvd2VyKHZhbHVlKSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgVUkgYXBwZWFyYW5jZSBzdHlsZVxuICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIGJvb3RlZCBzaW11bGF0b3IuXG4gICAqXG4gICAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgY3VycmVudCBVSSBhcHBlYXJhbmNlIHN0eWxlLlxuICAgKiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgKiAtIGRhcms6IHRvIHN3aXRjaCB0byB0aGUgRGFyayBtb2RlXG4gICAqIC0gbGlnaHQ6IHRvIHN3aXRjaCB0byB0aGUgTGlnaHQgbW9kZVxuICAgKi9cbiAgYXN5bmMgZ2V0QXBwZWFyYW5jZSAoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2ltY3RsLmdldEFwcGVhcmFuY2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBDZXJ0aWZpY2F0ZU9wdGlvbnNcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBpc1Jvb3QgW3RydWVdIC0gV2hldGhlciB0byBpbnN0YWxsIHRoZSBnaXZlblxuICAgKiBjZXJ0aWZpY2F0ZSBpbnRvIHRoZSBUcnVzdGVkIFJvb3Qgc3RvcmUgKGB0cnVlYCkgb3IgdG8gdGhlIGtleWNoYWluXG4gICAqIChgZmFsc2VgKVxuICAgKi9cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEFkZHMgdGhlIGdpdmVuIGNlcnRpZmljYXRlIHRvIHRoZSBib290ZWQgc2ltdWxhdG9yLlxuICAgKiBUaGUgc2ltdWxhdG9yIGNvdWxkIGJlIGluIGJvdGggcnVubmluZyBhbmQgc2h1dGRvd24gc3RhdGVzXG4gICAqIGluIG9yZGVyIGZvciB0aGlzIG1ldGhvZCB0byBydW4gYXMgZXhwZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXlsb2FkIHRoZSBjb250ZW50IG9mIHRoZSBQRU0gY2VydGlmaWNhdGVcbiAgICogQHBhcmFtIHtDZXJ0aWZpY2F0ZU9wdGlvbnN9IG9wdHNcbiAgICovXG4gIGFzeW5jIGFkZENlcnRpZmljYXRlIChwYXlsb2FkLCBvcHRzID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBpc1Jvb3QgPSB0cnVlLFxuICAgIH0gPSBvcHRzO1xuICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBpc1Jvb3QgPyAnYWRkUm9vdENlcnRpZmljYXRlJyA6ICdhZGRDZXJ0aWZpY2F0ZSc7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGxbbWV0aG9kTmFtZV0ocGF5bG9hZCwge3JhdzogdHJ1ZX0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBTaW11bGF0ZXMgcHVzaCBub3RpZmljYXRpb24gZGVsaXZlcnkgdG8gdGhlIGJvb3RlZCBzaW11bGF0b3JcbiAgICpcbiAgICogQHNpbmNlIFhjb2RlIFNESyAxMS40XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkIC0gVGhlIG9iamVjdCB0aGF0IGRlc2NyaWJlcyBBcHBsZSBwdXNoIG5vdGlmaWNhdGlvbiBjb250ZW50LlxuICAgKiBJdCBtdXN0IGNvbnRhaW4gYSB0b3AtbGV2ZWwgXCJTaW11bGF0b3IgVGFyZ2V0IEJ1bmRsZVwiIGtleSB3aXRoIGEgc3RyaW5nIHZhbHVlIG1hdGNoaW5nXG4gICAqIHRoZSB0YXJnZXQgYXBwbGljYXRpb27igJhzIGJ1bmRsZSBpZGVudGlmaWVyIGFuZCBcImFwc1wiIGtleSB3aXRoIHZhbGlkIEFwcGxlIFB1c2ggTm90aWZpY2F0aW9uIHZhbHVlcy5cbiAgICogRm9yIGV4YW1wbGU6XG4gICAqIHtcbiAgICogICBcIlNpbXVsYXRvciBUYXJnZXQgQnVuZGxlXCI6IFwiY29tLmFwcGxlLlByZWZlcmVuY2VzXCIsXG4gICAqICAgXCJhcHNcIjoge1xuICAgKiAgICAgXCJhbGVydFwiOiBcIlRoaXMgaXMgYSBzaW11bGF0ZWQgbm90aWZpY2F0aW9uIVwiLFxuICAgKiAgICAgXCJiYWRnZVwiOiAzLFxuICAgKiAgICAgXCJzb3VuZFwiOiBcImRlZmF1bHRcIlxuICAgKiAgIH1cbiAgICogfVxuICAgKi9cbiAgYXN5bmMgcHVzaE5vdGlmaWNhdGlvbiAocGF5bG9hZCkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLnB1c2hOb3RpZmljYXRpb24ocGF5bG9hZCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBzZXRQZXJtaXNzaW9ucyAoYnVuZGxlSWQsIHBlcm1pc3Npb25zTWFwcGluZykge1xuICAgIHJldHVybiBhd2FpdCBzdXBlci5zZXRQZXJtaXNzaW9ucyhidW5kbGVJZCwgcGVybWlzc2lvbnNNYXBwaW5nKTtcblxuICAgIC8vIFRPRE86IFN3aXRjaCB0byBgc2ltY3RsIHByaXZhY3lgIGNhbGwgYWZ0ZXIgQXBwbGVcbiAgICAvLyBmaXhlcyB0aGUgY29tbWFuZCAoaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzE0MzU1KVxuICAgIC8vIFNvdXJjZSBQUjogaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0taW9zLXNpbXVsYXRvci9wdWxsLzI3OVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgY2xlYXJLZXljaGFpbnMgKCkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLnJlc2V0S2V5Y2hhaW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKiBAb3ZlcnJpZGVcbiAgICogKi9cbiAgYXN5bmMgbGF1bmNoV2luZG93IChpc1VpQ2xpZW50UnVubmluZywgb3B0cykge1xuICAgIC8vIEluIHhjb2RlIDExLjQsIFVJIENsaWVudCBtdXN0IGJlIGZpcnN0IGxhdW5jaGVkLCBvdGhlcndpc2VcbiAgICAvLyBzaW0gd2luZG93IHN0YXlzIG1pbmltaXplZFxuICAgIGlmICghaXNVaUNsaWVudFJ1bm5pbmcpIHtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRVSUNsaWVudChvcHRzKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5ib290KCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXRkb2NcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBlbmFibGVDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5ncmFudFBlcm1pc3Npb24oYnVuZGxlSUQsICdjYWxlbmRhcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0ZG9jXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgZGlzYWJsZUNhbGVuZGFyQWNjZXNzIChidW5kbGVJRCkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLnJldm9rZVBlcm1pc3Npb24oYnVuZGxlSUQsICdjYWxlbmRhcicpO1xuICB9XG5cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW11bGF0b3JYY29kZTExXzQ7XG4iXSwiZmlsZSI6ImxpYi9zaW11bGF0b3IteGNvZGUtMTEuNC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
