"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

let tpkUtilsMethods = {};

tpkUtilsMethods.isAppInstalled = async function (pkg) {
  try {
    let installed = false;

    _logger.default.debug(`Getting install status for ${pkg}`);

    let stdout = await this.shell(`app_launcher --list | grep ${pkg}`);

    if (stdout.indexOf(`${pkg}`) > -1) {
      installed = true;
    }

    _logger.default.debug(`App is${!installed ? ' not' : ''} installed`);

    return installed;
  } catch (e) {
    _logger.default.errorAndThrow(`Error finding if app is installed. Original error: ${e.message}`);
  }
};

tpkUtilsMethods.startApp = async function (pkg, opts = {}) {
  try {
    _logger.default.debug(`Getting start app for ${pkg}`);

    let stdout = await this.shell([`app_launcher -s ${pkg}`], opts);
    return stdout.indexOf('successfully') > -1 ? true : false;
  } catch (e) {
    _logger.default.errorAndThrow(`Error occured while starting App. Original error: ${e.message}`);
  }
};

tpkUtilsMethods.isStartedApp = async function (pkg, opts = {}) {
  try {
    _logger.default.debug(`Getting app startup status for ${pkg}`);

    let stdout = await this.shell([`app_launcher -S | grep ${pkg}`], opts);
    return stdout.indexOf(`${pkg}`) > -1 ? true : false;
  } catch (e) {
    _logger.default.errorAndThrow(`Error occured while getting app startup status for App. Original error: ${e.message}`);
  }
};

tpkUtilsMethods.uninstall = async function (pkg) {
  _logger.default.debug(`Uninstalling ${pkg}`);

  try {
    await this.forceStop(pkg);
    let stdout = await this.sdbExec(['uninstall', pkg], {
      timeout: 20000
    });

    if (stdout.indexOf('key[end] val[ok]') > -1) {
      return true;
    } else {
      _logger.default.errorAndThrow(`uninstall pkg failed: ${stdout}`);

      return false;
    }
  } catch (e) {
    _logger.default.errorAndThrow(`Unable to uninstall pkg. Original error: ${e.message}`);
  }
};

tpkUtilsMethods.installFromDevicePath = async function (tpkPathOnDevice) {
  let stdout = await this.shell([`pkgcmd -t tpk -i -p ${tpkPathOnDevice}`]);

  if (stdout.indexOf('key[end] val[ok]') > -1) {
    return true;
  } else {
    _logger.default.errorAndThrow(`Remote install failed: ${stdout}`);

    return false;
  }
};

tpkUtilsMethods.install = async function (tpk, pkg = null, replace = true, timeout = 60000) {
  if (replace) {
    let stdout = await this.sdbExec(['install', tpk], {
      timeout
    });
    return stdout.indexOf('key[end] val[ok]') > -1 ? true : false;
  } else {
    try {
      if (pkg != null) {
        let result = this.isAppInstalled(pkg);

        if (!result) {
          await this.sdbExec(['install', tpk], {
            timeout
          });
          result = this.isAppInstalled(pkg);
          return result;
        } else {
          _logger.default.debug(`Application '${pkg}' already installed. Continuing.`);

          return false;
        }
      } else {
        _logger.default.debug(`Can't find app in device, because pkg name is null.`);

        return false;
      }
    } catch (e) {
      _logger.default.errorAndThrow(`Unable to install TPK. Original error: ${e.message}`);
    }
  }
};

var _default = tpkUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy90cGstdXRpbHMuanMiXSwibmFtZXMiOlsidHBrVXRpbHNNZXRob2RzIiwiaXNBcHBJbnN0YWxsZWQiLCJwa2ciLCJpbnN0YWxsZWQiLCJsb2ciLCJkZWJ1ZyIsInN0ZG91dCIsInNoZWxsIiwiaW5kZXhPZiIsImUiLCJlcnJvckFuZFRocm93IiwibWVzc2FnZSIsInN0YXJ0QXBwIiwib3B0cyIsImlzU3RhcnRlZEFwcCIsInVuaW5zdGFsbCIsImZvcmNlU3RvcCIsInNkYkV4ZWMiLCJ0aW1lb3V0IiwiaW5zdGFsbEZyb21EZXZpY2VQYXRoIiwidHBrUGF0aE9uRGV2aWNlIiwiaW5zdGFsbCIsInRwayIsInJlcGxhY2UiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBSUEsZUFBZSxHQUFHLEVBQXRCOztBQUVBQSxlQUFlLENBQUNDLGNBQWhCLEdBQWlDLGdCQUFnQkMsR0FBaEIsRUFBcUI7QUFDcEQsTUFBSTtBQUNGLFFBQUlDLFNBQVMsR0FBRyxLQUFoQjs7QUFDQUMsb0JBQUlDLEtBQUosQ0FBVyw4QkFBNkJILEdBQUksRUFBNUM7O0FBQ0EsUUFBSUksTUFBTSxHQUFHLE1BQU0sS0FBS0MsS0FBTCxDQUFZLDhCQUE2QkwsR0FBSSxFQUE3QyxDQUFuQjs7QUFDQSxRQUFJSSxNQUFNLENBQUNFLE9BQVAsQ0FBZ0IsR0FBRU4sR0FBSSxFQUF0QixJQUEyQixDQUFDLENBQWhDLEVBQW1DO0FBQ2pDQyxNQUFBQSxTQUFTLEdBQUcsSUFBWjtBQUNEOztBQUNEQyxvQkFBSUMsS0FBSixDQUFXLFNBQVEsQ0FBQ0YsU0FBRCxHQUFhLE1BQWIsR0FBc0IsRUFBRyxZQUE1Qzs7QUFDQSxXQUFPQSxTQUFQO0FBQ0QsR0FURCxDQVNFLE9BQU9NLENBQVAsRUFBVTtBQUNWTCxvQkFBSU0sYUFBSixDQUFtQixzREFBcURELENBQUMsQ0FBQ0UsT0FBUSxFQUFsRjtBQUNEO0FBQ0YsQ0FiRDs7QUFlQVgsZUFBZSxDQUFD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R0FBWixDQUFiLEVBQStCO0FBQUVKLE1BQUFBO0FBQUYsS0FBL0IsQ0FBbkI7QUFDQSxXQUFRWixNQUFNLENBQUNFLE9BQVAsQ0FBZSxrQkFBZixJQUFxQyxDQUFDLENBQXZDLEdBQTRDLElBQTVDLEdBQW1ELEtBQTFEO0FBQ0QsR0FIRCxNQUdPO0FBQ0wsUUFBSTtBQUNGLFVBQUlOLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2YsWUFBSXNCLE1BQU0sR0FBRyxLQUFLdkIsY0FBTCxDQUFvQkMsR0FBcEIsQ0FBYjs7QUFDQSxZQUFJLENBQUNzQixNQUFMLEVBQWE7QUFDWCxnQkFBTSxLQUFLUCxPQUFMLENBQWEsQ0FBQyxTQUFELEVBQVlLLEdBQVosQ0FBYixFQUErQjtBQUFFSixZQUFBQTtBQUFGLFdBQS9CLENBQU47QUFDQU0sVUFBQUEsTUFBTSxHQUFHLEtBQUt2QixjQUFMLENBQW9CQyxHQUFwQixDQUFUO0FBQ0EsaUJBQU9zQixNQUFQO0FBQ0QsU0FKRCxNQUlPO0FBQ0xwQiwwQkFBSUMsS0FBSixDQUFXLGdCQUFlSCxHQUFJLGtDQUE5Qjs7QUFDQSxpQkFBTyxLQUFQO0FBQ0Q7QUFDRixPQVZELE1BVU87QUFDTEUsd0JBQUlDLEtBQUosQ0FBVyxxREFBWDs7QUFDQSxlQUFPLEtBQVA7QUFDRDtBQUNGLEtBZkQsQ0FlRSxPQUFPSSxDQUFQLEVBQVU7QUFDVkwsc0JBQUlNLGFBQUosQ0FBbUIsMENBQXlDRCxDQUFDLENBQUNFLE9BQVEsRUFBdEU7QUFDRDtBQUNGO0FBQ0YsQ0F4QkQ7O2VBMEJlWCxlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xyXG5cclxubGV0IHRwa1V0aWxzTWV0aG9kcyA9IHt9O1xyXG5cclxudHBrVXRpbHNNZXRob2RzLmlzQXBwSW5zdGFsbGVkID0gYXN5bmMgZnVuY3Rpb24gKHBrZykge1xyXG4gIHRyeSB7XHJcbiAgICBsZXQgaW5zdGFsbGVkID0gZmFsc2U7XHJcbiAgICBsb2cuZGVidWcoYEdldHRpbmcgaW5zdGFsbCBzdGF0dXMgZm9yICR7cGtnfWApO1xyXG4gICAgbGV0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoYGFwcF9sYXVuY2hlciAtLWxpc3QgfCBncmVwICR7cGtnfWApO1xyXG4gICAgaWYgKHN0ZG91dC5pbmRleE9mKGAke3BrZ31gKSA+IC0xKSB7XHJcbiAgICAgIGluc3RhbGxlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBsb2cuZGVidWcoYEFwcCBpcyR7IWluc3RhbGxlZCA/ICcgbm90JyA6ICcnfSBpbnN0YWxsZWRgKTtcclxuICAgIHJldHVybiBpbnN0YWxsZWQ7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIGZpbmRpbmcgaWYgYXBwIGlzIGluc3RhbGxlZC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xyXG4gIH1cclxufTtcclxuXHJcbnRwa1V0aWxzTWV0aG9kcy5zdGFydEFwcCA9IGFzeW5jIGZ1bmN0aW9uIChwa2csIG9wdHMgPSB7fSkge1xyXG4gIHRyeSB7XHJcbiAgICBsb2cuZGVidWcoYEdldHRpbmcgc3RhcnQgYXBwIGZvciAke3BrZ31gKTtcclxuICAgIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKFtgYXBwX2xhdW5jaGVyIC1zICR7cGtnfWBdLCBvcHRzKTtcclxuICAgIHJldHVybiAoc3Rkb3V0LmluZGV4T2YoJ3N1Y2Nlc3NmdWxseScpID4gLTEpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGxvZy5lcnJvckFuZFRocm93KGBFcnJvciBvY2N1cmVkIHdoaWxlIHN0YXJ0aW5nIEFwcC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xyXG4gIH1cclxufTtcclxuXHJcbnRwa1V0aWxzTWV0aG9kcy5pc1N0YXJ0ZWRBcHAgPSBhc3luYyBmdW5jdGlvbiAocGtnLCBvcHRzID0ge30pIHtcclxuICB0cnkge1xyXG4gICAgbG9nLmRlYnVnKGBHZXR0aW5nIGFwcCBzdGFydHVwIHN0YXR1cyBmb3IgJHtwa2d9YCk7XHJcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChbYGFwcF9sYXVuY2hlciAtUyB8IGdyZXAgJHtwa2d9YF0sIG9wdHMpO1xyXG4gICAgcmV0dXJuIChzdGRvdXQuaW5kZXhPZihgJHtwa2d9YCkgPiAtMSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIG9jY3VyZWQgd2hpbGUgZ2V0dGluZyBhcHAgc3RhcnR1cCBzdGF0dXMgZm9yIEFwcC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xyXG4gIH1cclxufTtcclxuXHJcbnRwa1V0aWxzTWV0aG9kcy51bmluc3RhbGwgPSBhc3luYyBmdW5jdGlvbiAocGtnKSB7XHJcbiAgbG9nLmRlYnVnKGBVbmluc3RhbGxpbmcgJHtwa2d9YCk7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IHRoaXMuZm9yY2VTdG9wKHBrZyk7XHJcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zZGJFeGVjKFsndW5pbnN0YWxsJywgcGtnXSwgeyB0aW1lb3V0OiAyMDAwMCB9KTtcclxuICAgIGlmIChzdGRvdXQuaW5kZXhPZigna2V5W2VuZF0gdmFsW29rXScpID4gLTEpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgdW5pbnN0YWxsIHBrZyBmYWlsZWQ6ICR7c3Rkb3V0fWApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFVuYWJsZSB0byB1bmluc3RhbGwgcGtnLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG59O1xyXG5cclxudHBrVXRpbHNNZXRob2RzLmluc3RhbGxGcm9tRGV2aWNlUGF0aCA9IGFzeW5jIGZ1bmN0aW9uICh0cGtQYXRoT25EZXZpY2UpIHtcclxuICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChbYHBrZ2NtZCAtdCB0cGsgLWkgLXAgJHt0cGtQYXRoT25EZXZpY2V9YF0pO1xyXG4gIGlmIChzdGRvdXQuaW5kZXhPZigna2V5W2VuZF0gdmFsW29rXScpID4gLTEpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgUmVtb3RlIGluc3RhbGwgZmFpbGVkOiAke3N0ZG91dH1gKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn07XHJcblxyXG50cGtVdGlsc01ldGhvZHMuaW5zdGFsbCA9IGFzeW5jIGZ1bmN0aW9uICh0cGssIHBrZyA9IG51bGwsIHJlcGxhY2UgPSB0cnVlLCB0aW1lb3V0ID0gNjAwMDApIHtcclxuICBpZiAocmVwbGFjZSkge1xyXG4gICAgbGV0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2RiRXhlYyhbJ2luc3RhbGwnLCB0cGtdLCB7IHRpbWVvdXQgfSk7XHJcbiAgICByZXR1cm4gKHN0ZG91dC5pbmRleE9mKCdrZXlbZW5kXSB2YWxbb2tdJykgPiAtMSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChwa2cgIT0gbnVsbCkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmlzQXBwSW5zdGFsbGVkKHBrZyk7XHJcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuc2RiRXhlYyhbJ2luc3RhbGwnLCB0cGtdLCB7IHRpbWVvdXQgfSk7XHJcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLmlzQXBwSW5zdGFsbGVkKHBrZyk7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsb2cuZGVidWcoYEFwcGxpY2F0aW9uICcke3BrZ30nIGFscmVhZHkgaW5zdGFsbGVkLiBDb250aW51aW5nLmApO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsb2cuZGVidWcoYENhbid0IGZpbmQgYXBwIGluIGRldmljZSwgYmVjYXVzZSBwa2cgbmFtZSBpcyBudWxsLmApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVW5hYmxlIHRvIGluc3RhbGwgVFBLLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdHBrVXRpbHNNZXRob2RzO1xyXG4iXSwiZmlsZSI6ImxpYi90b29scy90cGstdXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi5cXC4uXFwuLiJ9
