"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LOCKDOWN_PORT = exports.Lockdown = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseService = require("../base-service");

const LOCKDOWN_PORT = 62078;
exports.LOCKDOWN_PORT = LOCKDOWN_PORT;
const LABEL = 'usbmuxd';
const PROTOCOL_VERSION = 2;

class Lockdown extends _baseService.BaseServicePlist {
  async queryType(timeout = 5000) {
    const data = await this._plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'QueryType'
    }, timeout);

    if (data.Request === 'QueryType' && data.Type === 'com.apple.mobile.lockdown') {
      return data;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async startSession(hostID, systemBUID, timeout = 5000) {
    const data = await this._plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'StartSession',
      HostID: hostID,
      SystemBUID: systemBUID
    }, timeout);

    if (data.Request === 'StartSession' && data.SessionID) {
      return {
        sessionID: data.SessionID,
        enableSessionSSL: data.EnableSessionSSL
      };
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this._plistService.enableSessionSSL(hostPrivateKey, hostCertificate);
  }

  async getValue(query = {}, timeout = 5000) {
    const plist = Object.assign({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'GetValue'
    }, query);
    const data = await this._plistService.sendPlistAndReceive(plist, timeout);

    if ((data === null || data === void 0 ? void 0 : data.Request) === 'GetValue' && !_lodash.default.isNil(data === null || data === void 0 ? void 0 : data.Value)) {
      return data.Value;
    }

    throw new Error(`Unexpected data received for ${JSON.stringify(query)} request: ` + JSON.stringify(data));
  }

  async startService(serviceName, timeout = 5000) {
    const data = await this._plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'StartService',
      Service: serviceName
    }, timeout);

    if (data.Error) {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    } else {
      return data;
    }
  }

}

exports.Lockdown = Lockdown;
var _default = Lockdown;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9sb2NrZG93bi9pbmRleC5qcyJdLCJuYW1lcyI6WyJMT0NLRE9XTl9QT1JUIiwiTEFCRUwiLCJQUk9UT0NPTF9WRVJTSU9OIiwiTG9ja2Rvd24iLCJCYXNlU2VydmljZVBsaXN0IiwicXVlcnlUeXBlIiwidGltZW91dCIsImRhdGEiLCJfcGxpc3RTZXJ2aWNlIiwic2VuZFBsaXN0QW5kUmVjZWl2ZSIsIkxhYmVsIiwiUHJvdG9jb2xWZXJzaW9uIiwiUmVxdWVzdCIsIlR5cGUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGFydFNlc3Npb24iLCJob3N0SUQiLCJzeXN0ZW1CVUlEIiwiSG9zdElEIiwiU3lzdGVtQlVJRCIsIlNlc3Npb25JRCIsInNlc3Npb25JRCIsImVuYWJsZVNlc3Npb25TU0wiLCJFbmFibGVTZXNzaW9uU1NMIiwiaG9zdFByaXZhdGVLZXkiLCJob3N0Q2VydGlmaWNhdGUiLCJnZXRWYWx1ZSIsInF1ZXJ5IiwicGxpc3QiLCJPYmplY3QiLCJhc3NpZ24iLCJfIiwiaXNOaWwiLCJWYWx1ZSIsInN0YXJ0U2VydmljZSIsInNlcnZpY2VOYW1lIiwiU2VydmljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxhQUFhLEdBQUcsS0FBdEI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHLFNBQWQ7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxDQUF6Qjs7QUFFQSxNQUFNQyxRQUFOLFNBQXVCQyw2QkFBdkIsQ0FBd0M7QUFNdEMsUUFBTUMsU0FBTixDQUFpQkMsT0FBTyxHQUFHLElBQTNCLEVBQWlDO0FBQy9CLFVBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtDLGFBQUwsQ0FBbUJDLG1CQUFuQixDQUF1QztBQUN4REMsTUFBQUEsS0FBSyxFQUFFVCxLQURpRDtBQUV4RFUsTUFBQUEsZUFBZSxFQUFFVCxnQkFGdUM7QUFHeERVLE1BQUFBLE9BQU8sRUFBRTtBQUgrQyxLQUF2QyxFQUloQk4sT0FKZ0IsQ0FB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QU9BLFFBQUlDLElBQUksQ0FBQ08sS0FBVCxFQUFnQjtBQUNkLFlBQU0sSUFBSUEsS0FBSixDQUFXLG9CQUFtQkMsSUFBSSxDQUFDQyxTQUFMLENBQWVULElBQWYsQ0FBcUIsRUFBbkQsQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU9BLElBQVA7QUFDRDtBQUNGOztBQW5HcUM7OztlQXVHekJKLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQmFzZVNlcnZpY2VQbGlzdCB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5cblxuY29uc3QgTE9DS0RPV05fUE9SVCA9IDYyMDc4O1xuY29uc3QgTEFCRUwgPSAndXNibXV4ZCc7XG5jb25zdCBQUk9UT0NPTF9WRVJTSU9OID0gMjtcblxuY2xhc3MgTG9ja2Rvd24gZXh0ZW5kcyBCYXNlU2VydmljZVBsaXN0IHtcbiAgLyoqXG4gICAqIE1ha2VzIGEgcXVlcnkgdHlwZSByZXF1ZXN0IHRvIGxvY2tkb3duXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZW91dD01MDAwXSB0aGUgdGltZW91dCBvZiByZWNlaXZpbmcgYSByZXNwb25zZSBmcm9tIGxvY2tkb3duZFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgYXN5bmMgcXVlcnlUeXBlICh0aW1lb3V0ID0gNTAwMCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7XG4gICAgICBMYWJlbDogTEFCRUwsXG4gICAgICBQcm90b2NvbFZlcnNpb246IFBST1RPQ09MX1ZFUlNJT04sXG4gICAgICBSZXF1ZXN0OiAnUXVlcnlUeXBlJ1xuICAgIH0sIHRpbWVvdXQpO1xuICAgIGlmIChkYXRhLlJlcXVlc3QgPT09ICdRdWVyeVR5cGUnICYmIGRhdGEuVHlwZSA9PT0gJ2NvbS5hcHBsZS5tb2JpbGUubG9ja2Rvd24nKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBhIGxvY2tkb3duIHNlc3Npb24gd2hpY2ggYWxsb3dzIHRvIHVzZSBjZXJ0YWluIGFwaXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhvc3RJRCB0aGUgaG9zdCBpZCB3aGljaCBjYW4gYmUgcmV0cmlldmVkIGZyb20gdGhlIHBhaXIgcmVjb3JkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzeXN0ZW1CVUlEIHRoZSBob3N0IEJVSUQgd2hpY2ggY2FuIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBwYWlyIHJlY29yZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXQ9NTAwMF0gdGhlIHRpbWVvdXQgb2YgcmVjZWl2aW5nIGEgcmVzcG9uc2UgZnJvbSBsb2NrZG93bmRcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGFzeW5jIHN0YXJ0U2Vzc2lvbiAoaG9zdElELCBzeXN0ZW1CVUlELCB0aW1lb3V0ID0gNTAwMCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7XG4gICAgICBMYWJlbDogTEFCRUwsXG4gICAgICBQcm90b2NvbFZlcnNpb246IFBST1RPQ09MX1ZFUlNJT04sXG4gICAgICBSZXF1ZXN0OiAnU3RhcnRTZXNzaW9uJyxcbiAgICAgIEhvc3RJRDogaG9zdElELFxuICAgICAgU3lzdGVtQlVJRDogc3lzdGVtQlVJRFxuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgaWYgKGRhdGEuUmVxdWVzdCA9PT0gJ1N0YXJ0U2Vzc2lvbicgJiYgZGF0YS5TZXNzaW9uSUQpIHtcbiAgICAgIHJldHVybiB7IHNlc3Npb25JRDogZGF0YS5TZXNzaW9uSUQsIGVuYWJsZVNlc3Npb25TU0w6IGRhdGEuRW5hYmxlU2Vzc2lvblNTTCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZGF0YTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlcyBzc2wgaW4gdGhlIHVuZGVybHlpbmcgc29ja2V0IHNvY2tldCBjb25uZWN0aW9uXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBob3N0UHJpdmF0ZUtleSB0aGUgcHJpdmF0ZSBrZXkgd2hpY2ggY2FuIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBwYWlyIHJlY29yZFxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gaG9zdENlcnRpZmljYXRlIHRoZSBjZXJ0aWZpY2F0ZSB3aGljaCBjYW4gYmUgcmV0cmlldmVkIGZyb20gdGhlIHBhaXIgcmVjb3JkXG4gICAqL1xuICBlbmFibGVTZXNzaW9uU1NMIChob3N0UHJpdmF0ZUtleSwgaG9zdENlcnRpZmljYXRlKSB7XG4gICAgdGhpcy5fcGxpc3RTZXJ2aWNlLmVuYWJsZVNlc3Npb25TU0woaG9zdFByaXZhdGVLZXksIGhvc3RDZXJ0aWZpY2F0ZSk7XG4gIH1cblxuICAvKipcbiAgKiBAdHlwZWRlZiB7T2JqZWN0fSBRdWVyeVxuICAqXG4gICogQHByb3BlcnR5IHs/c3RyaW5nfSBrZXkgVGhlIGtleSB3ZSB3YW50IHRvIGFjY2Vzc1xuICAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gd2hlcmUgd2Ugd2FudCB0byBhY2Nlc3NcbiAgKi9cblxuICAvKipcbiAgICogR2V0cyB2YWx1ZXMgZnJvbSB0aGUgZGV2aWNlIGFjY29yZGluZyB0byB0aGUgcXVlcnkgcGFzc2VkXG4gICAqXG4gICAqIEBwYXJhbSB7UXVlcnl9IHF1ZXJ5IHRoZSBxdWVyeSB3ZSB3YW50IHRvIHNlbmQgdG8gbG9ja2Rvd25kXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZW91dD01MDAwXSB0aGUgdGltZW91dCBvZiByZWNlaXZpbmcgYSByZXNwb25zZSBmcm9tIGxvY2tkb3duZFxuICAgKiBAcmV0dXJucyB7Kn0gVGhlIGFjdHVhbCByZXNwb25zZSB2YWx1ZS4gSXQgc2hvdWxkIG5ldmVyIGJlIGBudWxsYCBvciBgdW5kZWZpbmVkYFxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgYW4gdW5leHBlY3RlZCByZXNwb25zZSBpcyByZWNlaXZlZCBmcm9tIGxvY2tkb3duZFxuICAgKi9cbiAgYXN5bmMgZ2V0VmFsdWUgKHF1ZXJ5ID0ge30sIHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgY29uc3QgcGxpc3QgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIExhYmVsOiBMQUJFTCxcbiAgICAgIFByb3RvY29sVmVyc2lvbjogUFJPVE9DT0xfVkVSU0lPTixcbiAgICAgIFJlcXVlc3Q6ICdHZXRWYWx1ZSdcbiAgICB9LCBxdWVyeSk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuX3BsaXN0U2VydmljZS5zZW5kUGxpc3RBbmRSZWNlaXZlKHBsaXN0LCB0aW1lb3V0KTtcbiAgICBpZiAoZGF0YT8uUmVxdWVzdCA9PT0gJ0dldFZhbHVlJyAmJiAhXy5pc05pbChkYXRhPy5WYWx1ZSkpIHtcbiAgICAgIHJldHVybiBkYXRhLlZhbHVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZGF0YSByZWNlaXZlZCBmb3IgJHtKU09OLnN0cmluZ2lmeShxdWVyeSl9IHJlcXVlc3Q6IGAgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBhIHNlcnZpY2Ugb24gdGhlIHBob25lIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHdoaWNoIHdlIHdhbnQgdG8gc3RhcnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lb3V0PTUwMDBdIHRoZSB0aW1lb3V0IG9mIHJlY2VpdmluZyBhIHJlc3BvbnNlIGZyb20gbG9ja2Rvd25kXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBhc3luYyBzdGFydFNlcnZpY2UgKHNlcnZpY2VOYW1lLCB0aW1lb3V0ID0gNTAwMCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7XG4gICAgICBMYWJlbDogTEFCRUwsXG4gICAgICBQcm90b2NvbFZlcnNpb246IFBST1RPQ09MX1ZFUlNJT04sXG4gICAgICBSZXF1ZXN0OiAnU3RhcnRTZXJ2aWNlJyxcbiAgICAgIFNlcnZpY2U6IHNlcnZpY2VOYW1lLFxuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgaWYgKGRhdGEuRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBkYXRhOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgTG9ja2Rvd24sIExPQ0tET1dOX1BPUlQgfTtcbmV4cG9ydCBkZWZhdWx0IExvY2tkb3duO1xuIl0sImZpbGUiOiJsaWIvbG9ja2Rvd24vaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
