"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StreamLogger = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../../logger"));

const MIN_PRINTABLE_CHAR = 32;
const MAX_PRINTABLE_CHAR = 126;
const CHARACTERS_PER_LINE = 19;

class StreamLogger extends _stream.default.Transform {
  constructor(direction, verbose = false) {
    super({
      objectMode: true
    });
    this._direction = direction;
    this._verbose = verbose;
  }

  _transform(data, encoding, onData) {
    if (this._verbose) {
      try {
        this._log(data);
      } catch (err) {
        _logger.default.debug(`Error logging data: ${err.message}`);
      }
    }

    this.push(data);
    onData();
  }

  _log(data) {
    _logger.default.debug(`Data ${this._direction === StreamLogger.SEND ? 'sent' : 'received'}, length: ${data.length}`);

    let i = 0;

    while (i < data.length) {
      let hex = [],
          char = [];

      for (let j = 0; j < CHARACTERS_PER_LINE; j++) {
        if (i >= data.length) {
          hex[j] = '  ';
          continue;
        }

        const charCode = data[i++];
        hex[j] = _lodash.default.padStart(charCode.toString(16).toUpperCase(), 2, '0');
        char[j] = charCode < MIN_PRINTABLE_CHAR || charCode > MAX_PRINTABLE_CHAR ? '.' : String.fromCharCode(charCode);
      }

      _logger.default.debug(`${hex.join(' ')} ${char.join('')}`);
    }
  }

}

exports.StreamLogger = StreamLogger;
StreamLogger.SEND = 0;
StreamLogger.RECEIVE = 1;
var _default = StreamLogger;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlsL3RyYW5zZm9ybWVyL3N0cmVhbS1sb2dnZXIuanMiXSwibmFtZXMiOlsiTUlOX1BSSU5UQUJMRV9DSEFSIiwiTUFYX1BSSU5UQUJMRV9DSEFSIiwiQ0hBUkFDVEVSU19QRVJfTElORSIsIlN0cmVhbUxvZ2dlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwiZGlyZWN0aW9uIiwidmVyYm9zZSIsIm9iamVjdE1vZGUiLCJfZGlyZWN0aW9uIiwiX3ZlcmJvc2UiLCJfdHJhbnNmb3JtIiwiZGF0YSIsImVuY29kaW5nIiwib25EYXRhIiwiX2xvZyIsImVyciIsImxvZyIsImRlYnVnIiwibWVzc2FnZSIsInB1c2giLCJTRU5EIiwibGVuZ3RoIiwiaSIsImhleCIsImNoYXIiLCJqIiwiY2hhckNvZGUiLCJfIiwicGFkU3RhcnQiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsIlJFQ0VJVkUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsa0JBQWtCLEdBQUcsRUFBM0I7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxHQUEzQjtBQUVBLE1BQU1DLG1CQUFtQixHQUFHLEVBQTVCOztBQUVBLE1BQU1DLFlBQU4sU0FBMkJDLGdCQUFPQyxTQUFsQyxDQUE0QztBQUMxQ0MsRUFBQUEsV0FBVyxDQUFFQyxTQUFGLEVBQWFDLE9BQU8sR0FBRyxLQUF2QixFQUE4QjtBQUN2QyxVQUFNO0FBQUVDLE1BQUFBLFVBQVUsRUFBRTtBQUFkLEtBQU47QUFFQSxTQUFLQyxVQUFMLEdBQWtCSCxTQUFsQjtBQUNBLFNBQUtJLFFBQUwsR0FBZ0JILE9BQWhCO0FBQ0Q7O0FBRURJLEVBQUFBLFVBQVUsQ0FBRUMsSUFBRixFQUFRQyxRQUFSLEVBQWtCQyxNQUFsQixFQUEwQjtBQUNsQyxRQUFJLEtBQUtKLFFBQVQsRUFBbUI7QUFDakIsVUFBSTtBQUNGLGFBQUtLLElBQUwsQ0FBVUgsSUFBVjtBQUNELE9BRkQsQ0FFRSxPQUFPSSxHQUFQLEVBQVk7QUFHWkMsd0JBQUlDLEtBQUosQ0FBVyx1QkFBc0JGLEdBQUcsQ0FBQ0csT0FBUSxFQUE3QztBQUNEO0FBQ0Y7O0FBRUQsU0FBS0MsSUFBTCxDQUFVUixJQUFWO0FBQ0FFLElBQUFBLE1BQU07QUFDUDs7QUFFREMsRUFBQUEsSUFBSSxDQUFFSCxJQUFGLEVBQVE7QUFDVkssb0JBQUlDLEtBQUosQ0FBVyxRQUFPLEtBQUtULFVBQUwsS0FBb0JQLFlBQVksQ0FBQ21CLElBQWpDLEdBQXdDLE1BQXhDLEdBQWlELFVBQVcsYUFBWVQsSUFBSSxDQUFDVSxNQUFPLEVBQXRHOztBQUtBLFFBQUlDLENBQUMsR0FBRyxDQUFSOztBQUNBLFdBQU9BLENBQUMsR0FBR1gsSUFBSSxDQUFDVSxNQUFoQixFQUF3QjtBQUN0QixVQUFJRSxHQUFHLEdBQUcsRUFBVjtBQUFBLFVBQWNDLElBQUksR0FBRyxFQUFyQjs7QUFFQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd6QixtQkFBcEIsRUFBeUN5QixDQUFDLEVBQTFDLEVBQThDO0FBQzVDLFlBQUlILENBQUMsSUFBSVgsSUFBSSxDQUFDVSxNQUFkLEVBQXNCO0FBR3BCRSxVQUFBQSxHQUFHLENBQUNFLENBQUQsQ0FBSCxHQUFTLElBQVQ7QUFDQTtBQUNEOztBQUNELGNBQU1DLFFBQVEsR0FBR2YsSUFBSSxDQUFDVyxDQUFDLEVBQUYsQ0FBckI7QUFFQUMsUUFBQUEsR0FBRyxDQUFDRSxDQUFELENBQUgsR0FBU0UsZ0JBQUVDLFFBQUYsQ0FBV0YsUUFBUSxDQUFDRyxRQUFULENBQWtCLEVBQWxCLEVBQXNCQyxXQUF0QixFQUFYLEVBQWdELENBQWhELEVBQW1ELEdBQW5ELENBQVQ7QUFFQU4sUUFBQUEsSUFBSSxDQUFDQyxDQUFELENBQUosR0FBVUMsUUFBUSxHQUFHNUIsa0JBQVgsSUFBaUM0QixRQUFRLEdBQUczQixrQkFBNUMsR0FDTixHQURNLEdBRU5nQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JOLFFBQXBCLENBRko7QUFHRDs7QUFDRFYsc0JBQUlDLEtBQUosQ0FBVyxHQUFFTSxHQUFHLENBQUNVLElBQUosQ0FBUyxHQUFULENBQWMsSUFBR1QsSUFBSSxDQUFDUyxJQUFMLENBQVUsRUFBVixDQUFjLEVBQTVDO0FBQ0Q7QUFDRjs7QUFsRHlDOzs7QUFxRDVDaEMsWUFBWSxDQUFDbUIsSUFBYixHQUFvQixDQUFwQjtBQUNBbkIsWUFBWSxDQUFDaUMsT0FBYixHQUF1QixDQUF2QjtlQUdlakMsWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uLy4uL2xvZ2dlcic7XG5cblxuY29uc3QgTUlOX1BSSU5UQUJMRV9DSEFSID0gMzI7XG5jb25zdCBNQVhfUFJJTlRBQkxFX0NIQVIgPSAxMjY7XG5cbmNvbnN0IENIQVJBQ1RFUlNfUEVSX0xJTkUgPSAxOTtcblxuY2xhc3MgU3RyZWFtTG9nZ2VyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG4gIGNvbnN0cnVjdG9yIChkaXJlY3Rpb24sIHZlcmJvc2UgPSBmYWxzZSkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcblxuICAgIHRoaXMuX2RpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICB0aGlzLl92ZXJib3NlID0gdmVyYm9zZTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICBpZiAodGhpcy5fdmVyYm9zZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fbG9nKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIGluIGNhc2Ugc29tZXRoaW5nIGdvZXMgd3JvbmcsIGxvZyBpdCBzbyB3ZSBjYW4gZml4IHRoZSBwYXJzaW5nXG4gICAgICAgIC8vIGFuZCBhbHNvIGFsbG93IGV2ZXJ5dGhpbmcgdG8gY29udGludWUgd2l0aG91dCBpbnRlcnJ1cHRpb25cbiAgICAgICAgbG9nLmRlYnVnKGBFcnJvciBsb2dnaW5nIGRhdGE6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuICAgIG9uRGF0YSgpO1xuICB9XG5cbiAgX2xvZyAoZGF0YSkge1xuICAgIGxvZy5kZWJ1ZyhgRGF0YSAke3RoaXMuX2RpcmVjdGlvbiA9PT0gU3RyZWFtTG9nZ2VyLlNFTkQgPyAnc2VudCcgOiAncmVjZWl2ZWQnfSwgbGVuZ3RoOiAke2RhdGEubGVuZ3RofWApO1xuXG4gICAgLy8gZm9ybWF0IGFzIHVzZWQgYnkgaW9zLXdlYmtpdC1kZWJ1Zy1wcm94eSBhcyB3ZWxsIGFzIHRvb2xzIGxpa2Ugc29jYXRcbiAgICAvLyBwcmludCBvdXQgdGhlIGRhdGEgaW4gdHdvIHNlY3Rpb25zLCBvbmUgdGhlIGhleGFkZWNpbWFsIHJlbmRlcmluZ3Mgb2YgdGhlIGNoYXJhY3RlcnMsXG4gICAgLy8gdGhlIG90aGVyIHRoZSBwcmludGFibGUgY2hhcmFjdGVycyAod2l0aCAnLicgZm9yIHVucHJpbnRhYmxlIGNoYXJhY3RlcnMpLlxuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZXQgaGV4ID0gW10sIGNoYXIgPSBbXTtcbiAgICAgIC8vIGNyZWF0ZSBlYWNoIGxpbmUgb2YgdGV4dCB0byBvdXRwdXRcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgQ0hBUkFDVEVSU19QRVJfTElORTsgaisrKSB7XG4gICAgICAgIGlmIChpID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gZmlsbCBpbiB0aGUgY2hhcmNvZGUgc2VjdGlvbiB3aXRoIGJsYW5rcywgZm9yIGZvcm1hdHRpbmcsXG4gICAgICAgICAgLy8gd2hlbiB0aGVyZSBpcyBubyBtb3JlIGRhdGFcbiAgICAgICAgICBoZXhbal0gPSAnICAnO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXJDb2RlID0gZGF0YVtpKytdO1xuICAgICAgICAvLyBoZXhhZGVjaW1hbCByZXByZXNlbnRhdGlvbiwgZm9yY2VkIGludG8gMiBwbGFjZXNcbiAgICAgICAgaGV4W2pdID0gXy5wYWRTdGFydChjaGFyQ29kZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSwgMiwgJzAnKTtcbiAgICAgICAgLy8gY2hhcmFjdGVyIHJlcHJlc2VudGF0aW9uLCB3aXRoICcuJyB3aGVuIHVucHJpbnRhYmxlXG4gICAgICAgIGNoYXJbal0gPSBjaGFyQ29kZSA8IE1JTl9QUklOVEFCTEVfQ0hBUiB8fCBjaGFyQ29kZSA+IE1BWF9QUklOVEFCTEVfQ0hBUlxuICAgICAgICAgID8gJy4nXG4gICAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICAgIH1cbiAgICAgIGxvZy5kZWJ1ZyhgJHtoZXguam9pbignICcpfSAke2NoYXIuam9pbignJyl9YCk7XG4gICAgfVxuICB9XG59XG5cblN0cmVhbUxvZ2dlci5TRU5EID0gMDtcblN0cmVhbUxvZ2dlci5SRUNFSVZFID0gMTtcblxuZXhwb3J0IHsgU3RyZWFtTG9nZ2VyIH07XG5leHBvcnQgZGVmYXVsdCBTdHJlYW1Mb2dnZXI7XG4iXSwiZmlsZSI6ImxpYi91dGlsL3RyYW5zZm9ybWVyL3N0cmVhbS1sb2dnZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
