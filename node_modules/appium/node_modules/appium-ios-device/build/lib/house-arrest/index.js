"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HOUSE_ARREST_SERVICE_NAME = exports.HouseArrestService = void 0;

require("source-map-support/register");

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _constants = require("../constants");

var _afc = _interopRequireDefault(require("../afc"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _baseService = require("../base-service");

const HOUSE_ARREST_SERVICE_NAME = 'com.apple.mobile.house_arrest';
exports.HOUSE_ARREST_SERVICE_NAME = HOUSE_ARREST_SERVICE_NAME;
const MAX_FRAME_SIZE = 1 * _constants.KB;

class HouseArrestService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);

    this._assignClientFailureHandlers(this._encoder);
  }

  async vendContainer(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendContainer',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application container. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  async vendDocuments(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendDocuments',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application documents. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  _receivePlistPromise(timeout = 10000) {
    return new _bluebird.default((resolve, reject) => {
      this._decoder.once('data', resolve);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
  }

}

exports.HouseArrestService = HouseArrestService;
var _default = HouseArrestService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ob3VzZS1hcnJlc3QvaW5kZXguanMiXSwibmFtZXMiOlsiSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSIsIk1BWF9GUkFNRV9TSVpFIiwiS0IiLCJIb3VzZUFycmVzdFNlcnZpY2UiLCJCYXNlU2VydmljZVNvY2tldCIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiX2RlY29kZXIiLCJQbGlzdFNlcnZpY2VEZWNvZGVyIiwiX3NwbGl0dGVyIiwiTGVuZ3RoQmFzZWRTcGxpdHRlciIsInJlYWRhYmxlU3RyZWFtIiwibGl0dGxlRW5kaWFuIiwibWF4RnJhbWVMZW5ndGgiLCJsZW5ndGhGaWVsZE9mZnNldCIsImxlbmd0aEZpZWxkTGVuZ3RoIiwibGVuZ3RoQWRqdXN0bWVudCIsIl9zb2NrZXRDbGllbnQiLCJwaXBlIiwiX2VuY29kZXIiLCJQbGlzdFNlcnZpY2VFbmNvZGVyIiwiX2Fzc2lnbkNsaWVudEZhaWx1cmVIYW5kbGVycyIsInZlbmRDb250YWluZXIiLCJidW5kbGVJZCIsInJlc3BvbnNlUHJvbWlzZSIsIl9yZWNlaXZlUGxpc3RQcm9taXNlIiwid3JpdGUiLCJDb21tYW5kIiwiSWRlbnRpZmllciIsInJlc3BvbnNlIiwiU3RhdHVzIiwiRXJyb3IiLCJ1bnBpcGUiLCJBZmNTZXJ2aWNlIiwidmVuZERvY3VtZW50cyIsInRpbWVvdXQiLCJCIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uY2UiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLHlCQUF5QixHQUFHLCtCQUFsQzs7QUFDQSxNQUFNQyxjQUFjLEdBQUcsSUFBSUMsYUFBM0I7O0FBRUEsTUFBTUMsa0JBQU4sU0FBaUNDLDhCQUFqQyxDQUFtRDtBQUNqREMsRUFBQUEsV0FBVyxDQUFFQyxZQUFGLEVBQWdCO0FBQ3pCLFVBQU1BLFlBQU47QUFFQSxTQUFLQyxRQUFMLEdBQWdCLElBQUlDLDRCQUFKLEVBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFJQyw0QkFBSixDQUF3QjtBQUN2Q0MsTUFBQUEsY0FBYyxFQUFFTCxZQUR1QjtBQUV2Q00sTUFBQUEsWUFBWSxFQUFFLEtBRnlCO0FBR3ZDQyxNQUFBQSxjQUFjLEVBQUVaLGNBSHVCO0FBSXZDYSxNQUFBQSxpQkFBaUIsRUFBRSxDQUpvQjtBQUt2Q0MsTUFBQUEsaUJBQWlCLEVBQUUsQ0FMb0I7QUFNdkNDLE1BQUFBLGdCQUFnQixFQUFFO0FBTnFCLEtBQXhCLENBQWpCOztBQVFBLFNBQUtDLGFBQUwsQ0FBbUJDLElBQW5CLENBQXdCLEtBQUtULFNBQTdCLEVBQXdDUyxJQUF4QyxDQUE2QyxLQUFLWCxRQUFsRDs7QUFFQSxTQUFLWSxRQUFMLEdBQWdCLElBQUlDLDRCQUFKLEVBQWhCOztBQUNBLFNBQUtELFFBQUwsQ0FBY0QsSUFBZCxDQUFtQixLQUFLRCxhQUF4Qjs7QUFDQSxTQUFLSSw0QkFBTCxDQUFrQyxLQUFLRixRQUF2QztBQUNEOztBQVFELFFBQU1HLGFBQU4sQ0FBcUJDLFFBQXJCLEVBQStCO0FBQzdCLFVBQU1DLGVBQWUsR0FBRyxLQUFLQyxvQkFBTCxFQUF4Qjs7QUFDQSxTQUFLTixRQUFMLENBQWNPLEtBQWQsQ0FBb0I7QUFDbEJDLE1BQUFBLE9BQU8sRUFBRSxlQURTO0FBRWxCQyxNQUFBQSxVQUFVLEVBQUVMO0FBRk0sS0FBcEI7O0FBSUEsVUFBTU0sUUFBUSxHQUFHLE1BQU1MLGVBQXZCOztBQUNBLFFBQUlLLFFBQVEsQ0FBQ0MsTUFBVCxLQUFvQixVQUF4QixFQUFvQztBQUNsQyxZQUFNLElBQUlDLEtBQUosQ0FBVyx5REFBd0RGLFFBQVEsQ0FBQ0UsS0FBTSxFQUFsRixDQUFOO0FBQ0Q7O0FBQ0QsU0FBS2QsYUFBTCxDQUFtQmUsTUFBbkIsQ0FBMEIsS0FBS3ZCLFNBQS9COztBQUNBLFNBQUtBLFNBQUwsQ0FBZXVCLE1BQWYsQ0FBc0IsS0FBS3pCLFFBQTNCOztBQUNBLFdBQU8sSUFBSTBCLFlBQUosQ0FBZSxLQUFLaEIsYUFBcEIsQ0FBUDtBQUNEOztBQVFELFFBQU1pQixhQUFOLENBQXFCWCxRQUFyQixFQUErQjtBQUM3QixVQUFNQyxlQUFlLEdBQUcsS0FBS0Msb0JBQUwsRUFBeEI7O0FBQ0EsU0FBS04sUUFBTCxDQUFjTyxLQUFkLENBQW9CO0FBQ2xCQyxNQUFBQSxPQUFPLEVBQUUsZUFEUztBQUVsQkMsTUFBQUEsVUFBVSxFQUFFTDtBQUZNLEtBQXBCOztBQUlBLFVBQU1NLFFBQVEsR0FBRyxNQUFNTCxlQUF2Qjs7QUFDQSxRQUFJSyxRQUFRLENBQUNDLE1BQVQsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsWUFBTSxJQUFJQyxLQUFKLENBQVcseURBQXdERixRQUFRLENBQUNFLEtBQU0sRUFBbEYsQ0FBTjtBQUNEOztBQUNELFNBQUtkLGFBQUwsQ0FBbUJlLE1BQW5CLENBQTBCLEtBQUt2QixTQUEvQjs7QUFDQSxTQUFLQSxTQUFMLENBQWV1QixNQUFmLENBQXNCLEtBQUt6QixRQUEzQjs7QUFDQSxXQUFPLElBQUkwQixZQUFKLENBQWUsS0FBS2hCLGFBQXBCLENBQVA7QUFDRDs7QUFFRFEsRUFBQUEsb0JBQW9CLENBQUVVLE9BQU8sR0FBRyxLQUFaLEVBQW1CO0FBQ3JDLFdBQU8sSUFBSUMsaUJBQUosQ0FBTSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDaEMsV0FBSy9CLFFBQUwsQ0FBY2dDLElBQWQsQ0FBbUIsTUFBbkIsRUFBMkJGLE9BQTNCOztBQUNBRyxNQUFBQSxVQUFVLENBQUMsTUFBTUYsTUFBTSxDQUFDLElBQUlQLEtBQUosQ0FBVyxrREFBaURJLE9BQVEsRUFBcEUsQ0FBRCxDQUFiLEVBQXVGQSxPQUF2RixDQUFWO0FBQ0QsS0FITSxDQUFQO0FBSUQ7O0FBbkVnRDs7O2VBdUVwQ2hDLGtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBsaXN0U2VydmljZURlY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWRlY29kZXInO1xuaW1wb3J0IFBsaXN0U2VydmljZUVuY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWVuY29kZXInO1xuaW1wb3J0IExlbmd0aEJhc2VkU3BsaXR0ZXIgZnJvbSAnLi4vdXRpbC90cmFuc2Zvcm1lci9sZW5ndGgtYmFzZWQtc3BsaXR0ZXInO1xuaW1wb3J0IHsgS0IgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IEFmY1NlcnZpY2UgZnJvbSAnLi4vYWZjJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IEJhc2VTZXJ2aWNlU29ja2V0IH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcblxuXG5jb25zdCBIT1VTRV9BUlJFU1RfU0VSVklDRV9OQU1FID0gJ2NvbS5hcHBsZS5tb2JpbGUuaG91c2VfYXJyZXN0JztcbmNvbnN0IE1BWF9GUkFNRV9TSVpFID0gMSAqIEtCO1xuXG5jbGFzcyBIb3VzZUFycmVzdFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICBzdXBlcihzb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgdGhpcy5fc3BsaXR0ZXIgPSBuZXcgTGVuZ3RoQmFzZWRTcGxpdHRlcih7XG4gICAgICByZWFkYWJsZVN0cmVhbTogc29ja2V0Q2xpZW50LFxuICAgICAgbGl0dGxlRW5kaWFuOiBmYWxzZSxcbiAgICAgIG1heEZyYW1lTGVuZ3RoOiBNQVhfRlJBTUVfU0laRSxcbiAgICAgIGxlbmd0aEZpZWxkT2Zmc2V0OiAwLFxuICAgICAgbGVuZ3RoRmllbGRMZW5ndGg6IDQsXG4gICAgICBsZW5ndGhBZGp1c3RtZW50OiA0LFxuICAgIH0pO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuXG4gICAgdGhpcy5fZW5jb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VFbmNvZGVyKCk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fYXNzaWduQ2xpZW50RmFpbHVyZUhhbmRsZXJzKHRoaXMuX2VuY29kZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlbmRzIGludG8gdGhlIGFwcGxpY2F0aW9uIGNvbnRhaW5lciBhbmQgcmV0dXJucyBhbiBBZmNTZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgY29udGFpbmVyIHRoYXQgd2Ugd2lsbCBlbnRlciB0b1xuICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgaG91c2UgYXJyZXN0IGZhaWxzIHRvIGFjY2VzcyB0aGUgYXBwbGljYXRpb24ncyBjb250YWluZXJcbiAgICogQHJldHVybnMge0FmY1NlcnZpY2V9XG4gICAqL1xuICBhc3luYyB2ZW5kQ29udGFpbmVyIChidW5kbGVJZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHRoaXMuX3JlY2VpdmVQbGlzdFByb21pc2UoKTtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdWZW5kQ29udGFpbmVyJyxcbiAgICAgIElkZW50aWZpZXI6IGJ1bmRsZUlkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmIChyZXNwb25zZS5TdGF0dXMgIT09ICdDb21wbGV0ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHZlbmQgaW50byB0aGUgYXBwbGljYXRpb24gY29udGFpbmVyLiBFcnJvcjogJHtyZXNwb25zZS5FcnJvcn1gKTtcbiAgICB9XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHJldHVybiBuZXcgQWZjU2VydmljZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlbmRzIGludG8gdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50cyBhbmQgcmV0dXJucyBhbiBBZmNTZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgZG9jdW1lbnRzIHRoYXQgd2Ugd2lsbCBlbnRlciB0b1xuICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgaG91c2UgYXJyZXN0IGZhaWxzIHRvIGFjY2VzcyB0aGUgYXBwbGljYXRpb24ncyBkb2N1bWVudHNcbiAgICogQHJldHVybnMge0FmY1NlcnZpY2V9XG4gICAqL1xuICBhc3luYyB2ZW5kRG9jdW1lbnRzIChidW5kbGVJZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHRoaXMuX3JlY2VpdmVQbGlzdFByb21pc2UoKTtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdWZW5kRG9jdW1lbnRzJyxcbiAgICAgIElkZW50aWZpZXI6IGJ1bmRsZUlkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmIChyZXNwb25zZS5TdGF0dXMgIT09ICdDb21wbGV0ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHZlbmQgaW50byB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnRzLiBFcnJvcjogJHtyZXNwb25zZS5FcnJvcn1gKTtcbiAgICB9XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHJldHVybiBuZXcgQWZjU2VydmljZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgX3JlY2VpdmVQbGlzdFByb21pc2UgKHRpbWVvdXQgPSAxMDAwMCkge1xuICAgIHJldHVybiBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9kZWNvZGVyLm9uY2UoJ2RhdGEnLCByZXNvbHZlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIHJlY2VpdmUgYW55IGRhdGEgd2l0aGluIHRoZSB0aW1lb3V0OiAke3RpbWVvdXR9YCkpLCB0aW1lb3V0KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBIb3VzZUFycmVzdFNlcnZpY2UsIEhPVVNFX0FSUkVTVF9TRVJWSUNFX05BTUUgfTtcbmV4cG9ydCBkZWZhdWx0IEhvdXNlQXJyZXN0U2VydmljZTtcbiJdLCJmaWxlIjoibGliL2hvdXNlLWFycmVzdC9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
