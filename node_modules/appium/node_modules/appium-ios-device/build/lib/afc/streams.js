"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AfcWritableFileStream = exports.AfcReadableFileStream = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

class AfcReadableFileStream extends _stream.default.Readable {
  constructor(fileHandle, afcService, options) {
    super(options);
    this._fileHandle = fileHandle;
    this._afcService = afcService;
    this._autoDestroy = !!options.autoDestroy;
    this._destroyed = false;
  }

  _read(size) {
    this._afcService.readFile(this._fileHandle, size).then(data => {
      if (!this._destroyed) {
        this.push(_lodash.default.isEmpty(data) ? null : data);
      }
    }).catch(e => {
      if (this._autoDestroy) {
        this.destroy(e);
      } else {
        this.emit('error', e);
      }
    });
  }

  _destroy(err, done) {
    if (this._destroyed) {
      return;
    }

    this._destroyed = true;
    this.push(null);

    this._afcService.closeFileHandle(this._fileHandle).then(() => done(err)).catch(e => {
      if (err) {
        _logger.default.debug(e);
      } else {
        err = e;
      }

      done(err);
    });
  }

}

exports.AfcReadableFileStream = AfcReadableFileStream;

class AfcWritableFileStream extends _stream.default.Writable {
  constructor(fileHandle, afcService, options) {
    super(options);
    this._fileHandle = fileHandle;
    this._afcService = afcService;
    this._autoDestroy = !!options.autoDestroy;
    this._destroyed = false;
  }

  _write(chunk, encoding, next) {
    this._afcService.writeFile(this._fileHandle, chunk).then(() => next()).catch(e => {
      if (this._autoDestroy) {
        this.destroy(e);
      }

      next(e);
    });
  }

  _destroy(err, done) {
    if (this._destroyed) {
      return;
    }

    this._destroyed = true;

    this._afcService.closeFileHandle(this._fileHandle).then(() => done(err)).catch(e => {
      if (err) {
        _logger.default.debug(e);
      } else {
        err = e;
      }

      done(err);
    });
  }

}

exports.AfcWritableFileStream = AfcWritableFileStream;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZmMvc3RyZWFtcy5qcyJdLCJuYW1lcyI6WyJBZmNSZWFkYWJsZUZpbGVTdHJlYW0iLCJzdHJlYW0iLCJSZWFkYWJsZSIsImNvbnN0cnVjdG9yIiwiZmlsZUhhbmRsZSIsImFmY1NlcnZpY2UiLCJvcHRpb25zIiwiX2ZpbGVIYW5kbGUiLCJfYWZjU2VydmljZSIsIl9hdXRvRGVzdHJveSIsImF1dG9EZXN0cm95IiwiX2Rlc3Ryb3llZCIsIl9yZWFkIiwic2l6ZSIsInJlYWRGaWxlIiwidGhlbiIsImRhdGEiLCJwdXNoIiwiXyIsImlzRW1wdHkiLCJjYXRjaCIsImUiLCJkZXN0cm95IiwiZW1pdCIsIl9kZXN0cm95IiwiZXJyIiwiZG9uZSIsImNsb3NlRmlsZUhhbmRsZSIsImxvZyIsImRlYnVnIiwiQWZjV3JpdGFibGVGaWxlU3RyZWFtIiwiV3JpdGFibGUiLCJfd3JpdGUiLCJjaHVuayIsImVuY29kaW5nIiwibmV4dCIsIndyaXRlRmlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxxQkFBTixTQUFvQ0MsZ0JBQU9DLFFBQTNDLENBQW9EO0FBRWxEQyxFQUFBQSxXQUFXLENBQUVDLFVBQUYsRUFBY0MsVUFBZCxFQUEwQkMsT0FBMUIsRUFBbUM7QUFDNUMsVUFBTUEsT0FBTjtBQUNBLFNBQUtDLFdBQUwsR0FBbUJILFVBQW5CO0FBQ0EsU0FBS0ksV0FBTCxHQUFtQkgsVUFBbkI7QUFDQSxTQUFLSSxZQUFMLEdBQW9CLENBQUMsQ0FBQ0gsT0FBTyxDQUFDSSxXQUE5QjtBQUNBLFNBQUtDLFVBQUwsR0FBa0IsS0FBbEI7QUFDRDs7QUFFREMsRUFBQUEsS0FBSyxDQUFFQyxJQUFGLEVBQVE7QUFDWCxTQUFLTCxXQUFMLENBQWlCTSxRQUFqQixDQUEwQixLQUFLUCxXQUEvQixFQUE0Q00sSUFBNUMsRUFDR0UsSUFESCxDQUNTQyxJQUFELElBQVU7QUFDZCxVQUFJLENBQUMsS0FBS0wsVUFBVixFQUFzQjtBQUNwQixhQUFLTSxJQUFMLENBQVVDLGdCQUFFQyxPQUFGLENBQVVILElBQVYsSUFBa0IsSUFBbEIsR0FBeUJBLElBQW5DO0FBQ0Q7QUFDRixLQUxILEVBTUdJLEtBTkgsQ0FNVUMsQ0FBRCxJQUFPO0FBQ1osVUFBSSxLQUFLWixZQUFULEVBQXVCO0FBQ3JCLGFBQUthLE9BQUwsQ0FBYUQsQ0FBYjtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtFLElBQUwsQ0FBVSxPQUFWLEVBQW1CRixDQUFuQjtBQUNEO0FBQ0YsS0FaSDtBQWFEOztBQUVERyxFQUFBQSxRQUFRLENBQUVDLEdBQUYsRUFBT0MsSUFBUCxFQUFhO0FBQ25CLFFBQUksS0FBS2YsVUFBVCxFQUFxQjtBQUNuQjtBQUNEOztBQUNELFNBQUtBLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxTQUFLTSxJQUFMLENBQVUsSUFBVjs7QUFDQSxTQUFLVCxXQUFMLENBQWlCbUIsZUFBakIsQ0FBaUMsS0FBS3BCLFdBQXRDLEVBQ0dRLElBREgsQ0FDUSxNQUFNVyxJQUFJLENBQUNELEdBQUQsQ0FEbEIsRUFFR0wsS0FGSCxDQUVVQyxDQUFELElBQU87QUFDWixVQUFJSSxHQUFKLEVBQVM7QUFDUEcsd0JBQUlDLEtBQUosQ0FBVVIsQ0FBVjtBQUNELE9BRkQsTUFFTztBQUNMSSxRQUFBQSxHQUFHLEdBQUdKLENBQU47QUFDRDs7QUFDREssTUFBQUEsSUFBSSxDQUFDRCxHQUFELENBQUo7QUFDRCxLQVRIO0FBVUQ7O0FBMUNpRDs7OztBQTZDcEQsTUFBTUsscUJBQU4sU0FBb0M3QixnQkFBTzhCLFFBQTNDLENBQW9EO0FBRWxENUIsRUFBQUEsV0FBVyxDQUFFQyxVQUFGLEVBQWNDLFVBQWQsRUFBMEJDLE9BQTFCLEVBQW1DO0FBQzVDLFVBQU1BLE9BQU47QUFDQSxTQUFLQyxXQUFMLEdBQW1CSCxVQUFuQjtBQUNBLFNBQUtJLFdBQUwsR0FBbUJILFVBQW5CO0FBQ0EsU0FBS0ksWUFBTCxHQUFvQixDQUFDLENBQUNILE9BQU8sQ0FBQ0ksV0FBOUI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0Q7O0FBRURxQixFQUFBQSxNQUFNLENBQUVDLEtBQUYsRUFBU0MsUUFBVCxFQUFtQkMsSUFBbkIsRUFBeUI7QUFDN0IsU0FBSzNCLFdBQUwsQ0FBaUI0QixTQUFqQixDQUEyQixLQUFLN0IsV0FBaEMsRUFBNkMwQixLQUE3QyxFQUNHbEIsSUFESCxDQUNRLE1BQU1vQixJQUFJLEVBRGxCLEVBRUdmLEtBRkgsQ0FFVUMsQ0FBRCxJQUFPO0FBQ1osVUFBSSxLQUFLWixZQUFULEVBQXVCO0FBQ3JCLGFBQUthLE9BQUwsQ0FBYUQsQ0FBYjtBQUNEOztBQUNEYyxNQUFBQSxJQUFJLENBQUNkLENBQUQsQ0FBSjtBQUNELEtBUEg7QUFRRDs7QUFFREcsRUFBQUEsUUFBUSxDQUFFQyxHQUFGLEVBQU9DLElBQVAsRUFBYTtBQUNuQixRQUFJLEtBQUtmLFVBQVQsRUFBcUI7QUFDbkI7QUFDRDs7QUFDRCxTQUFLQSxVQUFMLEdBQWtCLElBQWxCOztBQUNBLFNBQUtILFdBQUwsQ0FBaUJtQixlQUFqQixDQUFpQyxLQUFLcEIsV0FBdEMsRUFDR1EsSUFESCxDQUNRLE1BQU1XLElBQUksQ0FBQ0QsR0FBRCxDQURsQixFQUVHTCxLQUZILENBRVVDLENBQUQsSUFBTztBQUNaLFVBQUlJLEdBQUosRUFBUztBQUNQRyx3QkFBSUMsS0FBSixDQUFVUixDQUFWO0FBQ0QsT0FGRCxNQUVPO0FBQ0xJLFFBQUFBLEdBQUcsR0FBR0osQ0FBTjtBQUNEOztBQUNESyxNQUFBQSxJQUFJLENBQUNELEdBQUQsQ0FBSjtBQUNELEtBVEg7QUFVRDs7QUFwQ2lEIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlbiAqL1xuaW1wb3J0IHN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuY2xhc3MgQWZjUmVhZGFibGVGaWxlU3RyZWFtIGV4dGVuZHMgc3RyZWFtLlJlYWRhYmxlIHtcblxuICBjb25zdHJ1Y3RvciAoZmlsZUhhbmRsZSwgYWZjU2VydmljZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuX2ZpbGVIYW5kbGUgPSBmaWxlSGFuZGxlO1xuICAgIHRoaXMuX2FmY1NlcnZpY2UgPSBhZmNTZXJ2aWNlO1xuICAgIHRoaXMuX2F1dG9EZXN0cm95ID0gISFvcHRpb25zLmF1dG9EZXN0cm95O1xuICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuICB9XG5cbiAgX3JlYWQgKHNpemUpIHtcbiAgICB0aGlzLl9hZmNTZXJ2aWNlLnJlYWRGaWxlKHRoaXMuX2ZpbGVIYW5kbGUsIHNpemUpXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgICAgIHRoaXMucHVzaChfLmlzRW1wdHkoZGF0YSkgPyBudWxsIDogZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2F1dG9EZXN0cm95KSB7XG4gICAgICAgICAgdGhpcy5kZXN0cm95KGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBfZGVzdHJveSAoZXJyLCBkb25lKSB7XG4gICAgaWYgKHRoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMucHVzaChudWxsKTtcbiAgICB0aGlzLl9hZmNTZXJ2aWNlLmNsb3NlRmlsZUhhbmRsZSh0aGlzLl9maWxlSGFuZGxlKVxuICAgICAgLnRoZW4oKCkgPT4gZG9uZShlcnIpKVxuICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBsb2cuZGVidWcoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXJyID0gZTtcbiAgICAgICAgfVxuICAgICAgICBkb25lKGVycik7XG4gICAgICB9KTtcbiAgfVxufVxuXG5jbGFzcyBBZmNXcml0YWJsZUZpbGVTdHJlYW0gZXh0ZW5kcyBzdHJlYW0uV3JpdGFibGUge1xuXG4gIGNvbnN0cnVjdG9yIChmaWxlSGFuZGxlLCBhZmNTZXJ2aWNlLCBvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy5fZmlsZUhhbmRsZSA9IGZpbGVIYW5kbGU7XG4gICAgdGhpcy5fYWZjU2VydmljZSA9IGFmY1NlcnZpY2U7XG4gICAgdGhpcy5fYXV0b0Rlc3Ryb3kgPSAhIW9wdGlvbnMuYXV0b0Rlc3Ryb3k7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gIH1cblxuICBfd3JpdGUgKGNodW5rLCBlbmNvZGluZywgbmV4dCkge1xuICAgIHRoaXMuX2FmY1NlcnZpY2Uud3JpdGVGaWxlKHRoaXMuX2ZpbGVIYW5kbGUsIGNodW5rKVxuICAgICAgLnRoZW4oKCkgPT4gbmV4dCgpKVxuICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvRGVzdHJveSkge1xuICAgICAgICAgIHRoaXMuZGVzdHJveShlKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0KGUpO1xuICAgICAgfSk7XG4gIH1cblxuICBfZGVzdHJveSAoZXJyLCBkb25lKSB7XG4gICAgaWYgKHRoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2FmY1NlcnZpY2UuY2xvc2VGaWxlSGFuZGxlKHRoaXMuX2ZpbGVIYW5kbGUpXG4gICAgICAudGhlbigoKSA9PiBkb25lKGVycikpXG4gICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnIgPSBlO1xuICAgICAgICB9XG4gICAgICAgIGRvbmUoZXJyKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IEFmY1JlYWRhYmxlRmlsZVN0cmVhbSwgQWZjV3JpdGFibGVGaWxlU3RyZWFtIH07XG4iXSwiZmlsZSI6ImxpYi9hZmMvc3RyZWFtcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
