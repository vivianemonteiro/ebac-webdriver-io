"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AfcEncoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _protocol = require("../protocol");

class AfcEncoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }

  _transform(data, encoding, onData) {
    onData(null, this._encode(data));
  }

  _encode(data) {
    data.content = data.content ? data.content : Buffer.alloc(0);
    const thisLength = _protocol.AFC_PACKET_HEADER_SIZE + data.headerPayload.length;
    const messageLength = thisLength + data.content.length;
    const buffer = Buffer.alloc(messageLength);

    _protocol.MAGIC_NUMBER.copy(buffer);

    this.writeUInt64LE(buffer, 8, messageLength);
    this.writeUInt64LE(buffer, 16, thisLength);
    this.writeUInt64LE(buffer, 24, data.packetNumber);
    this.writeUInt64LE(buffer, 32, data.opCode);
    data.headerPayload.copy(buffer, _protocol.AFC_PACKET_HEADER_SIZE);
    data.content.copy(buffer, thisLength);
    return buffer;
  }

  writeUInt64LE(buffer, index, content) {
    buffer.writeUInt32LE(content, index);
    buffer.writeUInt32LE(0, index + 4);
  }

}

exports.AfcEncoder = AfcEncoder;
var _default = AfcEncoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZmMvdHJhbnNmb3JtZXIvYWZjZW5jb2Rlci5qcyJdLCJuYW1lcyI6WyJBZmNFbmNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9lbmNvZGUiLCJjb250ZW50IiwiQnVmZmVyIiwiYWxsb2MiLCJ0aGlzTGVuZ3RoIiwiQUZDX1BBQ0tFVF9IRUFERVJfU0laRSIsImhlYWRlclBheWxvYWQiLCJsZW5ndGgiLCJtZXNzYWdlTGVuZ3RoIiwiYnVmZmVyIiwiTUFHSUNfTlVNQkVSIiwiY29weSIsIndyaXRlVUludDY0TEUiLCJwYWNrZXROdW1iZXIiLCJvcENvZGUiLCJpbmRleCIsIndyaXRlVUludDMyTEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsVUFBTixTQUF5QkMsZ0JBQU9DLFNBQWhDLENBQTBDO0FBRXhDQyxFQUFBQSxXQUFXLEdBQUk7QUFDYixVQUFNO0FBQUVDLE1BQUFBLFVBQVUsRUFBRTtBQUFkLEtBQU47QUFDRDs7QUFFREMsRUFBQUEsVUFBVSxDQUFFQyxJQUFGLEVBQVFDLFFBQVIsRUFBa0JDLE1BQWxCLEVBQTBCO0FBQ2xDQSxJQUFBQSxNQUFNLENBQUMsSUFBRCxFQUFPLEtBQUtDLE9BQUwsQ0FBYUgsSUFBYixDQUFQLENBQU47QUFDRDs7QUFFREcsRUFBQUEsT0FBTyxDQUFFSCxJQUFGLEVBQVE7QUFDYkEsSUFBQUEsSUFBSSxDQUFDSSxPQUFMLEdBQWVKLElBQUksQ0FBQ0ksT0FBTCxHQUFlSixJQUFJLENBQUNJLE9BQXBCLEdBQThCQyxNQUFNLENBQUNDLEtBQVAsQ0FBYSxDQUFiLENBQTdDO0FBRUEsVUFBTUMsVUFBVSxHQUFHQyxtQ0FBeUJSLElBQUksQ0FBQ1MsYUFBTCxDQUFtQkMsTUFBL0Q7QUFDQSxVQUFNQyxhQUFhLEdBQUdKLFVBQVUsR0FBR1AsSUFBSSxDQUFDSSxPQUFMLENBQWFNLE1BQWhEO0FBRUEsVUFBTUUsTUFBTSxHQUFHUCxNQUFNLENBQUNDLEtBQVAsQ0FBYUssYUFBYixDQUFmOztBQUNBRSwyQkFBYUMsSUFBYixDQUFrQkYsTUFBbEI7O0FBQ0EsU0FBS0csYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsQ0FBM0IsRUFBOEJELGFBQTlCO0FBQ0EsU0FBS0ksYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsRUFBM0IsRUFBK0JMLFVBQS9CO0FBQ0EsU0FBS1EsYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsRUFBM0IsRUFBK0JaLElBQUksQ0FBQ2dCLFlBQXBDO0FBQ0EsU0FBS0QsYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsRUFBM0IsRUFBK0JaLElBQUksQ0FBQ2lCLE1BQXBDO0FBQ0FqQixJQUFBQSxJQUFJLENBQUNTLGFBQUwsQ0FBbUJLLElBQW5CLENBQXdCRixNQUF4QixFQUFnQ0osZ0NBQWhDO0FBQ0FSLElBQUFBLElBQUksQ0FBQ0ksT0FBTCxDQUFhVSxJQUFiLENBQWtCRixNQUFsQixFQUEwQkwsVUFBMUI7QUFDQSxXQUFPSyxNQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLGFBQWEsQ0FBRUgsTUFBRixFQUFVTSxLQUFWLEVBQWlCZCxPQUFqQixFQUEwQjtBQUVyQ1EsSUFBQUEsTUFBTSxDQUFDTyxhQUFQLENBQXFCZixPQUFyQixFQUE4QmMsS0FBOUI7QUFDQU4sSUFBQUEsTUFBTSxDQUFDTyxhQUFQLENBQXFCLENBQXJCLEVBQXdCRCxLQUFLLEdBQUcsQ0FBaEM7QUFDRDs7QUEvQnVDOzs7ZUFvQzNCeEIsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IE1BR0lDX05VTUJFUiwgQUZDX1BBQ0tFVF9IRUFERVJfU0laRSB9IGZyb20gJy4uL3Byb3RvY29sJztcblxuXG5jbGFzcyBBZmNFbmNvZGVyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICBvbkRhdGEobnVsbCwgdGhpcy5fZW5jb2RlKGRhdGEpKTtcbiAgfVxuXG4gIF9lbmNvZGUgKGRhdGEpIHtcbiAgICBkYXRhLmNvbnRlbnQgPSBkYXRhLmNvbnRlbnQgPyBkYXRhLmNvbnRlbnQgOiBCdWZmZXIuYWxsb2MoMCk7XG5cbiAgICBjb25zdCB0aGlzTGVuZ3RoID0gQUZDX1BBQ0tFVF9IRUFERVJfU0laRSArIGRhdGEuaGVhZGVyUGF5bG9hZC5sZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IHRoaXNMZW5ndGggKyBkYXRhLmNvbnRlbnQubGVuZ3RoO1xuXG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKG1lc3NhZ2VMZW5ndGgpO1xuICAgIE1BR0lDX05VTUJFUi5jb3B5KGJ1ZmZlcik7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgOCwgbWVzc2FnZUxlbmd0aCk7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgMTYsIHRoaXNMZW5ndGgpO1xuICAgIHRoaXMud3JpdGVVSW50NjRMRShidWZmZXIsIDI0LCBkYXRhLnBhY2tldE51bWJlcik7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgMzIsIGRhdGEub3BDb2RlKTtcbiAgICBkYXRhLmhlYWRlclBheWxvYWQuY29weShidWZmZXIsIEFGQ19QQUNLRVRfSEVBREVSX1NJWkUpO1xuICAgIGRhdGEuY29udGVudC5jb3B5KGJ1ZmZlciwgdGhpc0xlbmd0aCk7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIHdyaXRlVUludDY0TEUgKGJ1ZmZlciwgaW5kZXgsIGNvbnRlbnQpIHtcbiAgICAvLyBJZ25vcmUgdGhlIGZpcnN0IDQgYnl0ZXMgc2luY2Ugd2UgZG9uJ3QgZG8gYW55dGhpbmcgd2l0aCBsb25nc1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkxFKGNvbnRlbnQsIGluZGV4KTtcbiAgICBidWZmZXIud3JpdGVVSW50MzJMRSgwLCBpbmRleCArIDQpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgQWZjRW5jb2RlciB9O1xuZXhwb3J0IGRlZmF1bHQgQWZjRW5jb2RlcjtcbiJdLCJmaWxlIjoibGliL2FmYy90cmFuc2Zvcm1lci9hZmNlbmNvZGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
