"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlistService = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _sslHelper = require("../ssl-helper");

var _plistServiceEncoder = _interopRequireDefault(require("./transformer/plist-service-encoder"));

var _plistServiceDecoder = _interopRequireDefault(require("./transformer/plist-service-decoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _baseService = require("../base-service");

var _constants = require("../constants");

const MAX_FRAME_SIZE = 1 * _constants.MB;
const CHECK_FREQ_MS = 50;

class PlistService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);

    this._assignClientFailureHandlers(this._encoder);

    this.replyQueue = [];

    this._decoder.on('data', data => this.replyQueue.push(data));
  }

  async sendPlistAndReceive(json, timeout = 5000) {
    this.sendPlist(json);
    return await this.receivePlist(timeout);
  }

  sendPlist(json) {
    if (!json) {
      throw new Error('Cant send a null a object');
    }

    this._encoder.write(json);
  }

  async receivePlist(timeout = 5000) {
    return await new _bluebird.default((resolve, reject) => {
      const queue = this.replyQueue;
      const data = queue.shift();

      if (data) {
        resolve(data);
        return;
      }

      const checkExist = setInterval(() => {
        const data = queue.shift();

        if (!data) {
          return;
        }

        clearInterval(checkExist);
        resolve(data);
      }, CHECK_FREQ_MS);
      setTimeout(() => {
        clearInterval(checkExist);
        reject(new Error(`Failed to receive any data within the timeout: ${timeout}`));
      }, timeout);
    });
  }

  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this._socketClient.unpipe(this._splitter);

    this._encoder.unpipe(this._socketClient);

    this._socketClient = (0, _sslHelper.upgradeToSSL)(this._socketClient, hostPrivateKey, hostCertificate);

    this._encoder.pipe(this._socketClient);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);
  }

}

exports.PlistService = PlistService;
var _default = PlistService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wbGlzdC1zZXJ2aWNlL2luZGV4LmpzIl0sIm5hbWVzIjpbIk1BWF9GUkFNRV9TSVpFIiwiTUIiLCJDSEVDS19GUkVRX01TIiwiUGxpc3RTZXJ2aWNlIiwiQmFzZVNlcnZpY2VTb2NrZXQiLCJjb25zdHJ1Y3RvciIsInNvY2tldENsaWVudCIsIl9kZWNvZGVyIiwiUGxpc3RTZXJ2aWNlRGVjb2RlciIsIl9zcGxpdHRlciIsIkxlbmd0aEJhc2VkU3BsaXR0ZXIiLCJyZWFkYWJsZVN0cmVhbSIsImxpdHRsZUVuZGlhbiIsIm1heEZyYW1lTGVuZ3RoIiwibGVuZ3RoRmllbGRPZmZzZXQiLCJsZW5ndGhGaWVsZExlbmd0aCIsImxlbmd0aEFkanVzdG1lbnQiLCJfc29ja2V0Q2xpZW50IiwicGlwZSIsIl9lbmNvZGVyIiwiUGxpc3RTZXJ2aWNlRW5jb2RlciIsIl9hc3NpZ25DbGllbnRGYWlsdXJlSGFuZGxlcnMiLCJyZXBseVF1ZXVlIiwib24iLCJkYXRhIiwicHVzaCIsInNlbmRQbGlzdEFuZFJlY2VpdmUiLCJqc29uIiwidGltZW91dCIsInNlbmRQbGlzdCIsInJlY2VpdmVQbGlzdCIsIkVycm9yIiwid3JpdGUiLCJCIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXVlIiwic2hpZnQiLCJjaGVja0V4aXN0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2V0VGltZW91dCIsImVuYWJsZVNlc3Npb25TU0wiLCJob3N0UHJpdmF0ZUtleSIsImhvc3RDZXJ0aWZpY2F0ZSIsInVucGlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxjQUFjLEdBQUcsSUFBSUMsYUFBM0I7QUFFQSxNQUFNQyxhQUFhLEdBQUcsRUFBdEI7O0FBRUEsTUFBTUMsWUFBTixTQUEyQkMsOEJBQTNCLENBQTZDO0FBQzNDQyxFQUFBQSxXQUFXLENBQUVDLFlBQUYsRUFBZ0I7QUFD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SUFBZCxDQUFtQixLQUFLRCxhQUF4Qjs7QUFDQSxTQUFLQSxhQUFMLENBQW1CQyxJQUFuQixDQUF3QixLQUFLVCxTQUE3QixFQUF3Q1MsSUFBeEMsQ0FBNkMsS0FBS1gsUUFBbEQ7QUFDRDs7QUFoRTBDOzs7ZUFvRTlCSixZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdXBncmFkZVRvU1NMIH0gZnJvbSAnLi4vc3NsLWhlbHBlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRW5jb2RlciBmcm9tICcuL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZW5jb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRGVjb2RlciBmcm9tICcuL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZGVjb2Rlcic7XG5pbXBvcnQgTGVuZ3RoQmFzZWRTcGxpdHRlciBmcm9tICcuLi91dGlsL3RyYW5zZm9ybWVyL2xlbmd0aC1iYXNlZC1zcGxpdHRlcic7XG5pbXBvcnQgeyBCYXNlU2VydmljZVNvY2tldCB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBNQiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cblxuY29uc3QgTUFYX0ZSQU1FX1NJWkUgPSAxICogTUI7XG5cbmNvbnN0IENIRUNLX0ZSRVFfTVMgPSA1MDtcblxuY2xhc3MgUGxpc3RTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2VTb2NrZXQge1xuICBjb25zdHJ1Y3RvciAoc29ja2V0Q2xpZW50KSB7XG4gICAgc3VwZXIoc29ja2V0Q2xpZW50KTtcblxuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRGVjb2RlcigpO1xuICAgIHRoaXMuX3NwbGl0dGVyID0gbmV3IExlbmd0aEJhc2VkU3BsaXR0ZXIoe1xuICAgICAgcmVhZGFibGVTdHJlYW06IHNvY2tldENsaWVudCxcbiAgICAgIGxpdHRsZUVuZGlhbjogZmFsc2UsXG4gICAgICBtYXhGcmFtZUxlbmd0aDogTUFYX0ZSQU1FX1NJWkUsXG4gICAgICBsZW5ndGhGaWVsZE9mZnNldDogMCxcbiAgICAgIGxlbmd0aEZpZWxkTGVuZ3RoOiA0LFxuICAgICAgbGVuZ3RoQWRqdXN0bWVudDogNCxcbiAgICB9KTtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQucGlwZSh0aGlzLl9zcGxpdHRlcikucGlwZSh0aGlzLl9kZWNvZGVyKTtcblxuICAgIHRoaXMuX2VuY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRW5jb2RlcigpO1xuICAgIHRoaXMuX2VuY29kZXIucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICAgIHRoaXMuX2Fzc2lnbkNsaWVudEZhaWx1cmVIYW5kbGVycyh0aGlzLl9lbmNvZGVyKTtcblxuICAgIHRoaXMucmVwbHlRdWV1ZSA9IFtdO1xuICAgIHRoaXMuX2RlY29kZXIub24oJ2RhdGEnLCAoZGF0YSkgPT4gdGhpcy5yZXBseVF1ZXVlLnB1c2goZGF0YSkpO1xuICB9XG5cbiAgYXN5bmMgc2VuZFBsaXN0QW5kUmVjZWl2ZSAoanNvbiwgdGltZW91dCA9IDUwMDApIHtcbiAgICB0aGlzLnNlbmRQbGlzdChqc29uKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWNlaXZlUGxpc3QodGltZW91dCk7XG4gIH1cblxuICBzZW5kUGxpc3QgKGpzb24pIHtcbiAgICBpZiAoIWpzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudCBzZW5kIGEgbnVsbCBhIG9iamVjdCcpO1xuICAgIH1cbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKGpzb24pO1xuICB9XG5cbiAgYXN5bmMgcmVjZWl2ZVBsaXN0ICh0aW1lb3V0ID0gNTAwMCkge1xuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBxdWV1ZSA9IHRoaXMucmVwbHlRdWV1ZTtcbiAgICAgIGNvbnN0IGRhdGEgPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hlY2tFeGlzdCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckludGVydmFsKGNoZWNrRXhpc3QpO1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfSwgQ0hFQ0tfRlJFUV9NUyk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0V4aXN0KTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIHJlY2VpdmUgYW55IGRhdGEgd2l0aGluIHRoZSB0aW1lb3V0OiAke3RpbWVvdXR9YCkpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgfSk7XG4gIH1cblxuICBlbmFibGVTZXNzaW9uU1NMIChob3N0UHJpdmF0ZUtleSwgaG9zdENlcnRpZmljYXRlKSB7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fZW5jb2Rlci51bnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQgPSB1cGdyYWRlVG9TU0wodGhpcy5fc29ja2V0Q2xpZW50LCBob3N0UHJpdmF0ZUtleSwgaG9zdENlcnRpZmljYXRlKTtcbiAgICB0aGlzLl9lbmNvZGVyLnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQucGlwZSh0aGlzLl9zcGxpdHRlcikucGlwZSh0aGlzLl9kZWNvZGVyKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQbGlzdFNlcnZpY2UgfTtcbmV4cG9ydCBkZWZhdWx0IFBsaXN0U2VydmljZTtcbiJdLCJmaWxlIjoibGliL3BsaXN0LXNlcnZpY2UvaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
