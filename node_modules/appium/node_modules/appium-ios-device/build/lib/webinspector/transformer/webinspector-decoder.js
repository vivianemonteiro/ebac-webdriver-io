"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebInspectorDecoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _appiumSupport = require("appium-support");

class WebInspectorDecoder extends _stream.default.Transform {
  constructor(maxLength) {
    super({
      objectMode: true
    });
    this._frameBufferIndex = 0;
    this._frameBuffer = Buffer.allocUnsafeSlow(maxLength);
  }

  _transform(data, encoding, onData) {
    this._decode(data);

    onData();
  }

  _decode(data) {
    if (data.WIRFinalMessageKey) {
      const buffer = data.WIRFinalMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);

      const pref = _appiumSupport.plist.parsePlist(this._frameBuffer.slice(0, this._frameBufferIndex));

      this.push(pref);

      this._resetBuffers();
    } else {
      const buffer = data.WIRPartialMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);
    }
  }

  _readBytes(src, srcIndex, target, targetIndex, nBytesToBeRead) {
    let availableBytes = Math.min(nBytesToBeRead, src.length - srcIndex);
    src.copy(target, targetIndex, srcIndex, srcIndex + availableBytes);
    return availableBytes;
  }

  _resetBuffers() {
    this._frameBufferIndex = 0;
  }

}

exports.WebInspectorDecoder = WebInspectorDecoder;
var _default = WebInspectorDecoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJpbnNwZWN0b3IvdHJhbnNmb3JtZXIvd2ViaW5zcGVjdG9yLWRlY29kZXIuanMiXSwibmFtZXMiOlsiV2ViSW5zcGVjdG9yRGVjb2RlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwibWF4TGVuZ3RoIiwib2JqZWN0TW9kZSIsIl9mcmFtZUJ1ZmZlckluZGV4IiwiX2ZyYW1lQnVmZmVyIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmVTbG93IiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9kZWNvZGUiLCJXSVJGaW5hbE1lc3NhZ2VLZXkiLCJidWZmZXIiLCJfcmVhZEJ5dGVzIiwibGVuZ3RoIiwicHJlZiIsInBsaXN0IiwicGFyc2VQbGlzdCIsInNsaWNlIiwicHVzaCIsIl9yZXNldEJ1ZmZlcnMiLCJXSVJQYXJ0aWFsTWVzc2FnZUtleSIsInNyYyIsInNyY0luZGV4IiwidGFyZ2V0IiwidGFyZ2V0SW5kZXgiLCJuQnl0ZXNUb0JlUmVhZCIsImF2YWlsYWJsZUJ5dGVzIiwiTWF0aCIsIm1pbiIsImNvcHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsbUJBQU4sU0FBa0NDLGdCQUFPQyxTQUF6QyxDQUFtRDtBQUNqREMsRUFBQUEsV0FBVyxDQUFFQyxTQUFGLEVBQWE7QUFDdEIsVUFBTTtBQUFFQyxNQUFBQSxVQUFVLEVBQUU7QUFBZCxLQUFOO0FBQ0EsU0FBS0MsaUJBQUwsR0FBeUIsQ0FBekI7QUFDQSxTQUFLQyxZQUFMLEdBQW9CQyxNQUFNLENBQUNDLGVBQVAsQ0FBdUJMLFNBQXZCLENBQXBCO0FBQ0Q7O0FBRURNLEVBQUFBLFVBQVUsQ0FBRUMsSUFBRixFQUFRQyxRQUFSLEVBQWtCQyxNQUFsQixFQUEwQjtBQUNsQyxTQUFLQyxPQUFMLENBQWFILElBQWI7O0FBQ0FFLElBQUFBLE1BQU07QUFDUDs7QUFFREMsRUFBQUEsT0FBTyxDQUFFSCxJQUFGLEVBQVE7QUFDYixRQUFJQSxJQUFJLENBQUNJLGtCQUFULEVBQTZCO0FBQzNCLFlBQU1DLE1BQU0sR0FBR0wsSUFBSSxDQUFDSSxrQkFBcEI7QUFDQSxXQUFLVCxpQkFBTCxJQUEwQixLQUFLVyxVQUFMLENBQWdCRCxNQUFoQixFQUF3QixDQUF4QixFQUEyQixLQUFLVCxZQUFoQyxFQUE4QyxLQUFLRCxpQkFBbkQsRUFBc0VVLE1BQU0sQ0FBQ0UsTUFBN0UsQ0FBMUI7O0FBQ0EsWUFBTUMsSUFBSSxHQUFHQyxxQkFBTUMsVUFBTixDQUFpQixLQUFLZCxZQUFMLENBQWtCZSxLQUFsQixDQUF3QixDQUF4QixFQUEyQixLQUFLaEIsaUJBQWhDLENBQWpCLENBQWI7O0FBQ0EsV0FBS2lCLElBQUwsQ0FBVUosSUFBVjs7QUFDQSxXQUFLSyxhQUFMO0FBQ0QsS0FORCxNQU1PO0FBQ0wsWUFBTVIsTUFBTSxHQUFHTCxJQUFJLENBQUNjLG9CQUFwQjtBQUNBLFdBQUtuQixpQkFBTCxJQUEwQixLQUFLVyxVQUFMLENBQWdCRCxNQUFoQixFQUF3QixDQUF4QixFQUEyQixLQUFLVCxZQUFoQyxFQUE4QyxLQUFLRCxpQkFBbkQsRUFBc0VVLE1BQU0sQ0FBQ0UsTUFBN0UsQ0FBMUI7QUFDRDtBQUNGOztBQUVERCxFQUFBQSxVQUFVLENBQUVTLEdBQUYsRUFBT0MsUUFBUCxFQUFpQkMsTUFBakIsRUFBeUJDLFdBQXpCLEVBQXNDQyxjQUF0QyxFQUFzRDtBQUM5RCxRQUFJQyxjQUFjLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxjQUFULEVBQXlCSixHQUFHLENBQUNSLE1BQUosR0FBYVMsUUFBdEMsQ0FBckI7QUFDQUQsSUFBQUEsR0FBRyxDQUFDUSxJQUFKLENBQVNOLE1BQVQsRUFBaUJDLFdBQWpCLEVBQThCRixRQUE5QixFQUF3Q0EsUUFBUSxHQUFHSSxjQUFuRDtBQUNBLFdBQU9BLGNBQVA7QUFDRDs7QUFFRFAsRUFBQUEsYUFBYSxHQUFJO0FBQ2YsU0FBS2xCLGlCQUFMLEdBQXlCLENBQXpCO0FBQ0Q7O0FBakNnRDs7O2VBcUNwQ04sbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBwbGlzdCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuXG5jbGFzcyBXZWJJbnNwZWN0b3JEZWNvZGVyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG4gIGNvbnN0cnVjdG9yIChtYXhMZW5ndGgpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG4gICAgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCA9IDA7XG4gICAgdGhpcy5fZnJhbWVCdWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KG1heExlbmd0aCk7XG4gIH1cblxuICBfdHJhbnNmb3JtIChkYXRhLCBlbmNvZGluZywgb25EYXRhKSB7XG4gICAgdGhpcy5fZGVjb2RlKGRhdGEpO1xuICAgIG9uRGF0YSgpO1xuICB9XG5cbiAgX2RlY29kZSAoZGF0YSkge1xuICAgIGlmIChkYXRhLldJUkZpbmFsTWVzc2FnZUtleSkge1xuICAgICAgY29uc3QgYnVmZmVyID0gZGF0YS5XSVJGaW5hbE1lc3NhZ2VLZXk7XG4gICAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ICs9IHRoaXMuX3JlYWRCeXRlcyhidWZmZXIsIDAsIHRoaXMuX2ZyYW1lQnVmZmVyLCB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4LCBidWZmZXIubGVuZ3RoKTtcbiAgICAgIGNvbnN0IHByZWYgPSBwbGlzdC5wYXJzZVBsaXN0KHRoaXMuX2ZyYW1lQnVmZmVyLnNsaWNlKDAsIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXgpKTtcbiAgICAgIHRoaXMucHVzaChwcmVmKTtcbiAgICAgIHRoaXMuX3Jlc2V0QnVmZmVycygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBkYXRhLldJUlBhcnRpYWxNZXNzYWdlS2V5O1xuICAgICAgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCArPSB0aGlzLl9yZWFkQnl0ZXMoYnVmZmVyLCAwLCB0aGlzLl9mcmFtZUJ1ZmZlciwgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCwgYnVmZmVyLmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgX3JlYWRCeXRlcyAoc3JjLCBzcmNJbmRleCwgdGFyZ2V0LCB0YXJnZXRJbmRleCwgbkJ5dGVzVG9CZVJlYWQpIHtcbiAgICBsZXQgYXZhaWxhYmxlQnl0ZXMgPSBNYXRoLm1pbihuQnl0ZXNUb0JlUmVhZCwgc3JjLmxlbmd0aCAtIHNyY0luZGV4KTtcbiAgICBzcmMuY29weSh0YXJnZXQsIHRhcmdldEluZGV4LCBzcmNJbmRleCwgc3JjSW5kZXggKyBhdmFpbGFibGVCeXRlcyk7XG4gICAgcmV0dXJuIGF2YWlsYWJsZUJ5dGVzO1xuICB9XG5cbiAgX3Jlc2V0QnVmZmVycyAoKSB7XG4gICAgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCA9IDA7XG4gIH1cbn1cblxuZXhwb3J0IHsgV2ViSW5zcGVjdG9yRGVjb2RlciB9O1xuZXhwb3J0IGRlZmF1bHQgV2ViSW5zcGVjdG9yRGVjb2RlcjtcbiJdLCJmaWxlIjoibGliL3dlYmluc3BlY3Rvci90cmFuc2Zvcm1lci93ZWJpbnNwZWN0b3ItZGVjb2Rlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
