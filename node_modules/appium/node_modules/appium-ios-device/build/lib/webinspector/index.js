"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WEB_INSPECTOR_SERVICE_NAME = exports.WebInspectorService = void 0;

require("source-map-support/register");

var _webinspectorDecoder = _interopRequireDefault(require("./transformer/webinspector-decoder"));

var _webinspectorEncoder = _interopRequireDefault(require("./transformer/webinspector-encoder"));

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _streamLogger = _interopRequireDefault(require("../util/transformer/stream-logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _constants = require("../constants");

var _logger = _interopRequireDefault(require("../logger"));

var _baseService = require("../base-service");

const WEB_INSPECTOR_SERVICE_NAME = 'com.apple.webinspector';
exports.WEB_INSPECTOR_SERVICE_NAME = WEB_INSPECTOR_SERVICE_NAME;
const MAX_FRAME_SIZE = 20 * _constants.MB;
const PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION = 11;

class WebInspectorService extends _baseService.BaseServiceSocket {
  constructor(opts = {}) {
    const {
      majorOsVersion,
      isSimulator = false,
      socketChunkSize,
      verbose = false,
      verboseHexDump = false,
      socketClient,
      maxFrameLength = MAX_FRAME_SIZE
    } = opts;
    super(socketClient);

    if (_lodash.default.isFunction(socketClient.setMaxSendFragment) && !_lodash.default.isNil(socketChunkSize) && socketChunkSize > 0) {
      if (socketClient.setMaxSendFragment(socketChunkSize)) {
        _logger.default.debug(`Maximum TLS fragment size set to '${socketChunkSize}'`);
      } else {
        _logger.default.warn(`Unable to set TLS fragment size to '${socketChunkSize}'`);
      }
    }

    this._verbose = verbose;
    this._isSimulator = isSimulator;
    this._majorOsVersion = majorOsVersion;

    if (!isSimulator && majorOsVersion < PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {
      this._initializePartialMessageSupport(verboseHexDump, maxFrameLength);
    } else {
      this._initializeFullMessageSupport(verboseHexDump, maxFrameLength);
    }
  }

  _initializeFullMessageSupport(verbose, maxFrameLength) {
    this._decoder = new _plistServiceDecoder.default();

    this._socketClient.pipe(new _streamLogger.default(_streamLogger.default.RECEIVE, verbose)).pipe(this._splitter = new _lengthBasedSplitter.default({
      readableStream: this._socketClient,
      littleEndian: false,
      maxFrameLength,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    })).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(new _streamLogger.default(_streamLogger.default.SEND, verbose)).pipe(this._socketClient);
  }

  _initializePartialMessageSupport(verbose, maxFrameLength) {
    this._decoder = new _webinspectorDecoder.default(_constants.MB);

    this._socketClient.pipe(new _streamLogger.default(_streamLogger.default.RECEIVE, verbose)).pipe(this._splitter = new _lengthBasedSplitter.default({
      readableStream: this._socketClient,
      littleEndian: false,
      maxFrameLength,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    })).pipe(new _plistServiceDecoder.default()).pipe(this._decoder);

    this._encoder = new _webinspectorEncoder.default();

    this._encoder.pipe(new _plistServiceEncoder.default()).pipe(new _streamLogger.default(_streamLogger.default.SEND, verbose)).pipe(this._socketClient);
  }

  sendMessage(rpcObject) {
    if (_lodash.default.isNil(rpcObject)) {
      throw new Error('Cannot send a null object');
    }

    if (this._verbose) {
      _logger.default.debug('Sending message to Web Inspector:');

      _logger.default.debug(_appiumSupport.util.jsonStringify(rpcObject));
    }

    this._encoder.write(rpcObject);

    if (!this._isSimulator && this._majorOsVersion >= PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {
      this._encoder.write(' ');
    }
  }

  listenMessage(onData) {
    this._decoder.on('data', data => {
      if (this._verbose) {
        _logger.default.debug('Received message from Web Inspector:');

        _logger.default.debug(_appiumSupport.util.jsonStringify(data));
      }

      onData(data);
    });
  }

}

exports.WebInspectorService = WebInspectorService;
var _default = WebInspectorService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJpbnNwZWN0b3IvaW5kZXguanMiXSwibmFtZXMiOlsiV0VCX0lOU1BFQ1RPUl9TRVJWSUNFX05BTUUiLCJNQVhfRlJBTUVfU0laRSIsIk1CIiwiUEFSVElBTF9NRVNTQUdFX1NVUFBPUlRfREVQUkVDQVRJT05fVkVSU0lPTiIsIldlYkluc3BlY3RvclNlcnZpY2UiLCJCYXNlU2VydmljZVNvY2tldCIsImNvbnN0cnVjdG9yIiwib3B0cyIsIm1ham9yT3NWZXJzaW9uIiwiaXNTaW11bGF0b3IiLCJzb2NrZXRDaHVua1NpemUiLCJ2ZXJib3NlIiwidmVyYm9zZUhleER1bXAiLCJzb2NrZXRDbGllbnQiLCJtYXhGcmFtZUxlbmd0aCIsIl8iLCJpc0Z1bmN0aW9uIiwic2V0TWF4U2VuZEZyYWdtZW50IiwiaXNOaWwiLCJsb2ciLCJkZWJ1ZyIsIndhcm4iLCJfdmVyYm9zZSIsIl9pc1NpbXVsYXRvciIsIl9tYWpvck9zVmVyc2lvbiIsIl9pbml0aWFsaXplUGFydGlhbE1lc3NhZ2VTdXBwb3J0IiwiX2luaXRpYWxpemVGdWxsTWVzc2FnZVN1cHBvcnQiLCJfZGVjb2RlciIsIlBsaXN0U2VydmljZURlY29kZXIiLCJfc29ja2V0Q2xpZW50IiwicGlwZSIsIlN0cmVhbUxvZ2dlciIsIlJFQ0VJVkUiLCJfc3BsaXR0ZXIiLCJMZW5ndGhCYXNlZFNwbGl0dGVyIiwicmVhZGFibGVTdHJlYW0iLCJsaXR0bGVFbmRpYW4iLCJsZW5ndGhGaWVsZE9mZnNldCIsImxlbmd0aEZpZWxkTGVuZ3RoIiwibGVuZ3RoQWRqdXN0bWVudCIsIl9lbmNvZGVyIiwiUGxpc3RTZXJ2aWNlRW5jb2RlciIsIlNFTkQiLCJXZWJJbnNwZWN0b3JEZWNvZGVyIiwiV2ViSW5zcGVjdG9yRW5jb2RlciIsInNlbmRNZXNzYWdlIiwicnBjT2JqZWN0IiwiRXJyb3IiLCJ1dGlsIiwianNvblN0cmluZ2lmeSIsIndyaXRlIiwibGlzdGVuTWVzc2FnZSIsIm9uRGF0YSIsIm9uIiwiZGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSwwQkFBMEIsR0FBRyx3QkFBbkM7O0FBQ0EsTUFBTUMsY0FBYyxHQUFHLEtBQUtDLGFBQTVCO0FBRUEsTUFBTUMsMkNBQTJDLEdBQUcsRUFBcEQ7O0FBb0JBLE1BQU1DLG1CQUFOLFNBQWtDQyw4QkFBbEMsQ0FBb0Q7QUFNbERDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBSSxHQUFHLEVBQVQsRUFBYTtBQUN0QixVQUFNO0FBQ0pDLE1BQUFBLGNBREk7QUFFSkMsTUFBQUEsV0FBVyxHQUFHLEtBRlY7QUFHSkMsTUFBQUEsZUFISTtBQUlKQyxNQUFBQSxPQUFPLEdBQUcsS0FKTjtBQUtKQyxNQUFBQSxjQUFjLEdBQUcsS0FMYjtBQU1KQyxNQUFBQSxZQU5JO0FBT0pDLE1BQUFBLGNBQWMsR0FBR2I7QUFQYixRQVFGTSxJQVJKO0FBVUEsVUFBTU0sWUFBTjs7QUFHQSxRQUFJRSxnQkFBRUMsVUFBRixDQUFhSCxZQUFZLENBQUNJLGtCQUExQixLQUFpRCxDQUFDRixnQkFBRUcsS0FBRixDQUFRUixlQUFSLENBQWxELElBQThFQSxlQUFlLEdBQUcsQ0FBcEcsRUFBdUc7QUFDckcsVUFBSUcsWUFBWSxDQUFDSSxrQkFBYixDQUFnQ1AsZUFBaEMsQ0FBSixFQUFzRDtBQUNwRFMsd0JBQUlDLEtBQUosQ0FBVyxxQ0FBb0NWLGVBQWdCLEdBQS9EO0FBQ0QsT0FGRCxNQUVPO0FBRUxTLHdCQUFJRSxJQUFKLENBQVUsdUNBQXNDWCxlQUFnQixHQUFoRTtBQUNEO0FBQ0Y7O0FBRUQsU0FBS1ksUUFBTCxHQUFnQlgsT0FBaEI7QUFDQSxTQUFLWSxZQUFMLEdBQW9CZCxXQUFwQjtBQUNBLFNBQUtlLGVBQUwsR0FBdUJoQixjQUF2Qjs7QUFFQSxRQUFJLENBQUNDLFdBQUQsSUFBZ0JELGNBQWMsR0FBR0wsMkNBQXJDLEVBQWtGO0FBQ2hGLFdBQUtzQixnQ0FBTCxDQUFzQ2IsY0FBdEMsRUFBc0RFLGNBQXREO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS1ksNkJBQUwsQ0FBbUNkLGNBQW5DLEVBQW1ERSxjQUFuRDtBQUNEO0FBQ0Y7O0FBU0RZLEVBQUFBLDZCQUE2QixDQUFFZixPQUFGLEVBQVdHLGNBQVgsRUFBMkI7QUFDdEQsU0FBS2EsUUFBTCxHQUFnQixJQUFJQyw0QkFBSixFQUFoQjs7QUFDQSxTQUFLQyxhQUFMLENBRUdDLElBRkgsQ0FFUSxJQUFJQyxxQkFBSixDQUFpQkEsc0JBQWFDLE9BQTlCLEVBQXVDckIsT0FBdkMsQ0FGUixFQUdHbUIsSUFISCxDQUdRLEtBQUtHLFNBQUwsR0FBaUIsSUFBSUMsNEJBQUosQ0FBd0I7QUFDN0NDLE1BQUFBLGNBQWMsRUFBRSxLQUFLTixhQUR3QjtBQUU3Q08sTUFBQUEsWUFBWSxFQUFFLEtBRitCO0FBRzdDdEIsTUFBQUEsY0FINkM7QUFJN0N1QixNQUFBQSxpQkFBaUIsRUFBRSxDQUowQjtBQUs3Q0MsTUFBQUEsaUJBQWlCLEVBQUUsQ0FMMEI7QUFNN0NDLE1BQUFBLGdCQUFnQixFQUFFO0FBTjJCLEtBQXhCLENBSHpCLEVBV0dULElBWEgsQ0FXUSxLQUFLSCxRQVhiOztBQWFBLFNBQUthLFFBQUwsR0FBZ0IsSUFBSUMsNEJBQUosRUFBaEI7O0FBQ0EsU0FBS0QsUUFBTCxDQUNHVixJQURILENBQ1EsSUFBSUMscUJBQUosQ0FBaUJBLHNCQUFhVyxJQUE5QixFQUFvQy9CLE9BQXBDLENBRFIsRUFFR21CLElBRkgsQ0FFUSxLQUFLRCxhQUZiO0FBR0Q7O0FBVURKLEVBQUFBLGdDQUFnQyxDQUFFZCxPQUFGLEVBQVdHLGNBQVgsRUFBMkI7QUFFekQsU0FBS2EsUUFBTCxHQUFnQixJQUFJZ0IsNEJBQUosQ0FBd0J6QyxhQUF4QixDQUFoQjs7QUFDQSxTQUFLMkIsYUFBTCxDQUVHQyxJQUZILENBRVEsSUFBSUMscUJBQUosQ0FBaUJBLHNCQUFhQyxPQUE5QixFQUF1Q3JCLE9BQXZDLENBRlIsRUFHR21CLElBSEgsQ0FHUSxLQUFLRyxTQUFMLEdBQWlCLElBQUlDLDRCQUFKLENBQXdCO0FBQzdDQyxNQUFBQSxjQUFjLEVBQUUsS0FBS04sYUFEd0I7QUFFN0NPLE1BQUFBLFlBQVksRUFBRSxLQUYrQjtBQUc3Q3RCLE1BQUFBLGNBSDZDO0FBSTdDdUIsTUFBQUEsaUJBQWlCLEVBQUUsQ0FKMEI7QUFLN0NDLE1BQUFBLGlCQUFpQixFQUFFLENBTDBCO0FBTTdDQyxNQUFBQSxnQkFBZ0IsRUFBRTtBQU4yQixLQUF4QixDQUh6QixFQVdHVCxJQVhILENBV1EsSUFBSUYsNEJBQUosRUFYUixFQVlHRSxJQVpILENBWVEsS0FBS0gsUUFaYjs7QUFjQSxTQUFLYSxRQUFMLEdBQWdCLElBQUlJLDRCQUFKLEVBQWhCOztBQUNBLFNBQUtKLFFBQUwsQ0FDR1YsSUFESCxDQUNRLElBQUlXLDRCQUFKLEVBRFIsRUFFR1gsSUFGSCxDQUVRLElBQUlDLHFCQUFKLENBQWlCQSxzQkFBYVcsSUFBOUIsRUFBb0MvQixPQUFwQyxDQUZSLEVBR0dtQixJQUhILENBR1EsS0FBS0QsYUFIYjtBQUlEOztBQU9EZ0IsRUFBQUEsV0FBVyxDQUFFQyxTQUFGLEVBQWE7QUFDdEIsUUFBSS9CLGdCQUFFRyxLQUFGLENBQVE0QixTQUFSLENBQUosRUFBd0I7QUFDdEIsWUFBTSxJQUFJQyxLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQUNEOztBQUVELFFBQUksS0FBS3pCLFFBQVQsRUFBbUI7QUFDakJILHNCQUFJQyxLQUFKLENBQVUsbUNBQVY7O0FBQ0FELHNCQUFJQyxLQUFKLENBQVU0QixvQkFBS0MsYUFBTCxDQUFtQkgsU0FBbkIsQ0FBVjtBQUNEOztBQUVELFNBQUtOLFFBQUwsQ0FBY1UsS0FBZCxDQUFvQkosU0FBcEI7O0FBTUEsUUFBSSxDQUFDLEtBQUt2QixZQUFOLElBQXNCLEtBQUtDLGVBQUwsSUFBd0JyQiwyQ0FBbEQsRUFBK0Y7QUFDN0YsV0FBS3FDLFFBQUwsQ0FBY1UsS0FBZCxDQUFvQixHQUFwQjtBQUNEO0FBQ0Y7O0FBWURDLEVBQUFBLGFBQWEsQ0FBRUMsTUFBRixFQUFVO0FBQ3JCLFNBQUt6QixRQUFMLENBQWMwQixFQUFkLENBQWlCLE1BQWpCLEVBQTBCQyxJQUFELElBQVU7QUFDakMsVUFBSSxLQUFLaEMsUUFBVCxFQUFtQjtBQUNqQkgsd0JBQUlDLEtBQUosQ0FBVSxzQ0FBVjs7QUFDQUQsd0JBQUlDLEtBQUosQ0FBVTRCLG9CQUFLQyxhQUFMLENBQW1CSyxJQUFuQixDQUFWO0FBQ0Q7O0FBQ0RGLE1BQUFBLE1BQU0sQ0FBQ0UsSUFBRCxDQUFOO0FBQ0QsS0FORDtBQU9EOztBQWhKaUQ7OztlQW9KckNsRCxtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWJJbnNwZWN0b3JEZWNvZGVyIGZyb20gJy4vdHJhbnNmb3JtZXIvd2ViaW5zcGVjdG9yLWRlY29kZXInO1xuaW1wb3J0IFdlYkluc3BlY3RvckVuY29kZXIgZnJvbSAnLi90cmFuc2Zvcm1lci93ZWJpbnNwZWN0b3ItZW5jb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRGVjb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZGVjb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRW5jb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZW5jb2Rlcic7XG5pbXBvcnQgTGVuZ3RoQmFzZWRTcGxpdHRlciBmcm9tICcuLi91dGlsL3RyYW5zZm9ybWVyL2xlbmd0aC1iYXNlZC1zcGxpdHRlcic7XG5pbXBvcnQgU3RyZWFtTG9nZ2VyIGZyb20gJy4uL3V0aWwvdHJhbnNmb3JtZXIvc3RyZWFtLWxvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IE1CIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IEJhc2VTZXJ2aWNlU29ja2V0IH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcblxuXG5jb25zdCBXRUJfSU5TUEVDVE9SX1NFUlZJQ0VfTkFNRSA9ICdjb20uYXBwbGUud2ViaW5zcGVjdG9yJztcbmNvbnN0IE1BWF9GUkFNRV9TSVpFID0gMjAgKiBNQjtcblxuY29uc3QgUEFSVElBTF9NRVNTQUdFX1NVUFBPUlRfREVQUkVDQVRJT05fVkVSU0lPTiA9IDExO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFdlYkluc3BlY3RvclNlcnZpY2VPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1ham9yT3NWZXJzaW9uIFRoZSBtYWpvciB2ZXJzaW9uIG9mIHRoZSBvcyB2ZXJzaW9uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzU2ltdWxhdG9yIFdoZXRoZXIgdGhlIGRldmljZSBpcyBhIHNpbXVsYXRvclxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBzb2NrZXRDaHVua1NpemUgU2l6ZSwgaW4gYnl0ZXMgb2YgdGhlIGNodW5rcyB0byBzZW5kIHRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsIGRldmljZSAob25seSBpT1MgMTErKS4gRGVmYXVsdHMgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE2Mzg0IGJ5dGVzICh0aGUgVExTU29ja2V0IG1heCkuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHZlcmJvc2UgVHVybiBvbiBsb2dnaW5nIG9mIGVhY2ggbWVzc2FnZSBzZW50IG9yIHJlY2VpdmVkLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIGZhbHNlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHZlcmJvc2VIZXhEdW1wIFR1cm4gb24gbG9nZ2luZyBvZiBfYWxsXyBjb21tdW5pY2F0aW9uIGFzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhleCBkdW1wLiBEZWZhdWx0cyB0byBmYWxzZVxuICogQHByb3BlcnR5IHsqfSBzb2NrZXRDbGllbnQgVGhlIHNvY2tldCBjbGllbnQgd2hlcmUgdGhlIGNvbW11bmljYXRpb24gd2lsbCBoYXBwZW5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXhGcmFtZUxlbmd0aCBbMjAgKiAxMDI0ICogMTAyNF0gLSBUaGUgbWF4aW11bSBzaXplXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gYnl0ZXMgb2YgYSBzaW5nbGUgZGF0YSBmcmFtZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBkZXZpY2UgY29tbXVuaWNhdGlvbiBwcm90b2NvbFxuICovXG5cbmNsYXNzIFdlYkluc3BlY3RvclNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIC8qKlxuICAgKiBUaGUgbWFpbiBzZXJ2aWNlIGZvciBjb21tdW5pY2F0aW9uIHdpdGggdGhlIHdlYmluc3BlY3RvcmRcbiAgICpcbiAgICogQHBhcmFtIHtXZWJJbnNwZWN0b3JTZXJ2aWNlT3B0aW9uc31cbiAgICovXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBtYWpvck9zVmVyc2lvbixcbiAgICAgIGlzU2ltdWxhdG9yID0gZmFsc2UsXG4gICAgICBzb2NrZXRDaHVua1NpemUsXG4gICAgICB2ZXJib3NlID0gZmFsc2UsXG4gICAgICB2ZXJib3NlSGV4RHVtcCA9IGZhbHNlLFxuICAgICAgc29ja2V0Q2xpZW50LFxuICAgICAgbWF4RnJhbWVMZW5ndGggPSBNQVhfRlJBTUVfU0laRSxcbiAgICB9ID0gb3B0cztcblxuICAgIHN1cGVyKHNvY2tldENsaWVudCk7XG5cbiAgICAvLyBzZXQgdGhlIGxhcmdlc3QgZnJhZ21lbnQgc2l6ZSBmb3IgdGhlIHNvY2tldCwgaWYgdGhlIG9wdGlvbiBpcyB0aGVyZVxuICAgIGlmIChfLmlzRnVuY3Rpb24oc29ja2V0Q2xpZW50LnNldE1heFNlbmRGcmFnbWVudCkgJiYgIV8uaXNOaWwoc29ja2V0Q2h1bmtTaXplKSAmJiBzb2NrZXRDaHVua1NpemUgPiAwKSB7XG4gICAgICBpZiAoc29ja2V0Q2xpZW50LnNldE1heFNlbmRGcmFnbWVudChzb2NrZXRDaHVua1NpemUpKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgTWF4aW11bSBUTFMgZnJhZ21lbnQgc2l6ZSBzZXQgdG8gJyR7c29ja2V0Q2h1bmtTaXplfSdgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFueXRoaW5nIG92ZXIgdGhlIF9hY3R1YWxfIG1heGltdW0gd2lsbCBmYWlsLCBhbmQgdGhpbmdzIHdpbGwgcmVtYWluIHRoZSBzYW1lXG4gICAgICAgIGxvZy53YXJuKGBVbmFibGUgdG8gc2V0IFRMUyBmcmFnbWVudCBzaXplIHRvICcke3NvY2tldENodW5rU2l6ZX0nYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fdmVyYm9zZSA9IHZlcmJvc2U7XG4gICAgdGhpcy5faXNTaW11bGF0b3IgPSBpc1NpbXVsYXRvcjtcbiAgICB0aGlzLl9tYWpvck9zVmVyc2lvbiA9IG1ham9yT3NWZXJzaW9uO1xuXG4gICAgaWYgKCFpc1NpbXVsYXRvciAmJiBtYWpvck9zVmVyc2lvbiA8IFBBUlRJQUxfTUVTU0FHRV9TVVBQT1JUX0RFUFJFQ0FUSU9OX1ZFUlNJT04pIHtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVQYXJ0aWFsTWVzc2FnZVN1cHBvcnQodmVyYm9zZUhleER1bXAsIG1heEZyYW1lTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faW5pdGlhbGl6ZUZ1bGxNZXNzYWdlU3VwcG9ydCh2ZXJib3NlSGV4RHVtcCwgbWF4RnJhbWVMZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRpYWxpemVzIHRoZSBkYXRhIGZsb3cgZm9yIGlPUyAxMSsuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmVyYm9zZSAtIHdoZXRoZXIgdG8gcHJpbnQgb3V0IHRoZSBoZXggZHVtcCBmb3IgY29tbXVuaWNhdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4RnJhbWVMZW5ndGggLSBUaGUgbWF4aW11bSBzaXplIGluIGJ5dGVzIG9mIGEgc2luZ2xlIGRhdGEgZnJhbWVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGRldmljZSBjb21tdW5pY2F0aW9uIHByb3RvY29sXG4gICAqL1xuICBfaW5pdGlhbGl6ZUZ1bGxNZXNzYWdlU3VwcG9ydCAodmVyYm9zZSwgbWF4RnJhbWVMZW5ndGgpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFBsaXN0U2VydmljZURlY29kZXIoKTtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnRcbiAgICAgIC8vIGxvZyBmaXJzdCwgaW4gY2FzZSB0aGVyZSBpcyBhIHByb2JsZW0gaW4gcHJvY2Vzc2luZ1xuICAgICAgLnBpcGUobmV3IFN0cmVhbUxvZ2dlcihTdHJlYW1Mb2dnZXIuUkVDRUlWRSwgdmVyYm9zZSkpXG4gICAgICAucGlwZSh0aGlzLl9zcGxpdHRlciA9IG5ldyBMZW5ndGhCYXNlZFNwbGl0dGVyKHtcbiAgICAgICAgcmVhZGFibGVTdHJlYW06IHRoaXMuX3NvY2tldENsaWVudCxcbiAgICAgICAgbGl0dGxlRW5kaWFuOiBmYWxzZSxcbiAgICAgICAgbWF4RnJhbWVMZW5ndGgsXG4gICAgICAgIGxlbmd0aEZpZWxkT2Zmc2V0OiAwLFxuICAgICAgICBsZW5ndGhGaWVsZExlbmd0aDogNCxcbiAgICAgICAgbGVuZ3RoQWRqdXN0bWVudDogNCxcbiAgICAgIH0pKVxuICAgICAgLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICB0aGlzLl9lbmNvZGVyID0gbmV3IFBsaXN0U2VydmljZUVuY29kZXIoKTtcbiAgICB0aGlzLl9lbmNvZGVyXG4gICAgICAucGlwZShuZXcgU3RyZWFtTG9nZ2VyKFN0cmVhbUxvZ2dlci5TRU5ELCB2ZXJib3NlKSlcbiAgICAgIC5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogSW50aWFsaXplcyB0aGUgZGF0YSBmbG93IGZvciBpT1MgPCAxMSwgd2hlcmUgZGF0YSBpcyBzZXBhcmF0ZWQgaW50byBwYXJ0aWFsXG4gICAqIG1lc3NhZ2VzIGJlZm9yZSBzZW5kaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZlcmJvc2UgLSB3aGV0aGVyIHRvIHByaW50IG91dCB0aGUgaGV4IGR1bXAgZm9yIGNvbW11bmljYXRpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heEZyYW1lTGVuZ3RoIC0gVGhlIG1heGltdW0gc2l6ZSBpbiBieXRlcyBvZiBhIHNpbmdsZSBkYXRhIGZyYW1lXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBkZXZpY2UgY29tbXVuaWNhdGlvbiBwcm90b2NvbFxuICAgKi9cbiAgX2luaXRpYWxpemVQYXJ0aWFsTWVzc2FnZVN1cHBvcnQgKHZlcmJvc2UsIG1heEZyYW1lTGVuZ3RoKSB7XG4gICAgLy8gMU1CIGFzIGJ1ZmZlciBmb3IgYnVsZGluZyB3ZWJpbnNwZWN0b3IgZnVsbCBtZXNzYWdlcy4gV2UgY2FuIGluY3JlYXNlIHRoZSB2YWx1ZSBpZiBtb3JlIGJ1ZmZlciBpcyBuZWVkZWRcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFdlYkluc3BlY3RvckRlY29kZXIoTUIpO1xuICAgIHRoaXMuX3NvY2tldENsaWVudFxuICAgICAgLy8gbG9nIGZpcnN0LCBpbiBjYXNlIHRoZXJlIGlzIGEgcHJvYmxlbSBpbiBwcm9jZXNzaW5nXG4gICAgICAucGlwZShuZXcgU3RyZWFtTG9nZ2VyKFN0cmVhbUxvZ2dlci5SRUNFSVZFLCB2ZXJib3NlKSlcbiAgICAgIC5waXBlKHRoaXMuX3NwbGl0dGVyID0gbmV3IExlbmd0aEJhc2VkU3BsaXR0ZXIoe1xuICAgICAgICByZWFkYWJsZVN0cmVhbTogdGhpcy5fc29ja2V0Q2xpZW50LFxuICAgICAgICBsaXR0bGVFbmRpYW46IGZhbHNlLFxuICAgICAgICBtYXhGcmFtZUxlbmd0aCxcbiAgICAgICAgbGVuZ3RoRmllbGRPZmZzZXQ6IDAsXG4gICAgICAgIGxlbmd0aEZpZWxkTGVuZ3RoOiA0LFxuICAgICAgICBsZW5ndGhBZGp1c3RtZW50OiA0LFxuICAgICAgfSkpXG4gICAgICAucGlwZShuZXcgUGxpc3RTZXJ2aWNlRGVjb2RlcigpKVxuICAgICAgLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICB0aGlzLl9lbmNvZGVyID0gbmV3IFdlYkluc3BlY3RvckVuY29kZXIoKTtcbiAgICB0aGlzLl9lbmNvZGVyXG4gICAgICAucGlwZShuZXcgUGxpc3RTZXJ2aWNlRW5jb2RlcigpKVxuICAgICAgLnBpcGUobmV3IFN0cmVhbUxvZ2dlcihTdHJlYW1Mb2dnZXIuU0VORCwgdmVyYm9zZSkpXG4gICAgICAucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGFuIG9iamVjdCB0byB0aGUgd2ViaW5zcGVjdG9yZCBzb2NrZXRcbiAgICogQHBhcmFtIHtPYmplY3R9IHJwY09iamVjdCBUaGUgb2JqZWN0IHRoYXQgd2lsbCBiZSBzZW50XG4gICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciB3aGVuIHRoZSBvYmplY3QgaXMgbnVsbCBvciB1bmRlZmluZWRcbiAgICovXG4gIHNlbmRNZXNzYWdlIChycGNPYmplY3QpIHtcbiAgICBpZiAoXy5pc05pbChycGNPYmplY3QpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZW5kIGEgbnVsbCBvYmplY3QnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdmVyYm9zZSkge1xuICAgICAgbG9nLmRlYnVnKCdTZW5kaW5nIG1lc3NhZ2UgdG8gV2ViIEluc3BlY3RvcjonKTtcbiAgICAgIGxvZy5kZWJ1Zyh1dGlsLmpzb25TdHJpbmdpZnkocnBjT2JqZWN0KSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW5jb2Rlci53cml0ZShycGNPYmplY3QpO1xuXG4gICAgLy8gd3JpdGUgYW4gZW1wdHkgbWVzc2FnZSwgd2hpY2ggb24gcmVhbCBkZXZpY2VzIGVuc3VyZXMgdGhlIGFjdHVhbCBtZXNzYWdlXG4gICAgLy8gZ2V0cyBzZW50IHRvIHRoZSBkZXZpY2UuIHdpdGhvdXQgdGhpcyBpdCB3aWxsIHBlcmlvZGljYWxseSBoYW5nIHdpdGhcbiAgICAvLyBub3RoaW5nIHNlbnRcbiAgICAvLyBob3dldmVyLCB0aGlzIGNhdXNlcyB3ZWJpbnNwZWN0b3JkIHRvIGNyYXNoIG9uIGRldmljZXMgcnVubmluZyBpT1MgMTBcbiAgICBpZiAoIXRoaXMuX2lzU2ltdWxhdG9yICYmIHRoaXMuX21ham9yT3NWZXJzaW9uID49IFBBUlRJQUxfTUVTU0FHRV9TVVBQT1JUX0RFUFJFQ0FUSU9OX1ZFUlNJT04pIHtcbiAgICAgIHRoaXMuX2VuY29kZXIud3JpdGUoJyAnKTtcbiAgICB9XG4gIH1cblxuICAvKiogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGR1cmluZyBtZXNzYWdlIGxpc3RlbmluZ1xuICAgKiBAbmFtZSBNZXNzYWdlQ2FsbGJhY2tcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHJwYyBvYmplY3QgdGhhdCBpcyBzZW50IGZyb20gdGhlIHdlYmluc3BlY3RvcmRcbiAgKi9cblxuICAvKipcbiAgICogTGlzdGVuIHRvIG1lc3NhZ2VzIGNvbWluZyBmcm9tIHdlYmluc3BlY3RvcmRcbiAgICogQHBhcmFtIHtNZXNzYWdlQ2FsbGJhY2t9IGNhbGxiYWNrXG4gICAqL1xuICBsaXN0ZW5NZXNzYWdlIChvbkRhdGEpIHtcbiAgICB0aGlzLl9kZWNvZGVyLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgIGlmICh0aGlzLl92ZXJib3NlKSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnUmVjZWl2ZWQgbWVzc2FnZSBmcm9tIFdlYiBJbnNwZWN0b3I6Jyk7XG4gICAgICAgIGxvZy5kZWJ1Zyh1dGlsLmpzb25TdHJpbmdpZnkoZGF0YSkpO1xuICAgICAgfVxuICAgICAgb25EYXRhKGRhdGEpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IFdlYkluc3BlY3RvclNlcnZpY2UsIFdFQl9JTlNQRUNUT1JfU0VSVklDRV9OQU1FIH07XG5leHBvcnQgZGVmYXVsdCBXZWJJbnNwZWN0b3JTZXJ2aWNlO1xuIl0sImZpbGUiOiJsaWIvd2ViaW5zcGVjdG9yL2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
