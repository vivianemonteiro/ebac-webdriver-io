"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

require("source-map-support/register");

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

var _klaw = _interopRequireDefault(require("klaw"));

var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));

var _util = require("./util");

var _logger = _interopRequireDefault(require("./logger"));

var _timing = _interopRequireDefault(require("./timing"));

const mkdirAsync = _bluebird.default.promisify(_fs2.default.mkdir);

const ncpAsync = _bluebird.default.promisify(_ncp.default);

const fs = {
  async hasAccess(path) {
    try {
      await this.access(path, _fs2.default.R_OK);
    } catch (err) {
      return false;
    }

    return true;
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),
  rimrafSync: _rimraf.default.sync.bind(_rimraf.default),

  async mkdir(...args) {
    try {
      return await mkdirAsync(...args);
    } catch (err) {
      if (err && err.code !== 'EEXIST') {
        throw err;
      }
    }
  },

  async copyFile(source, destination, ...otherArgs) {
    if (!(await this.hasAccess(source))) {
      throw new Error(`The file at '${source}' does not exist or is not accessible`);
    }

    return await ncpAsync(source, destination, ...otherArgs);
  },

  async md5(filePath) {
    return await this.hash(filePath, 'md5');
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),
  sanitizeName: _sanitizeFilename.default,

  async hash(filePath, algorithm = 'sha1') {
    return await new _bluebird.default((resolve, reject) => {
      const fileHash = _crypto.default.createHash(algorithm);

      const readStream = _fs2.default.createReadStream(filePath);

      readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
      readStream.on('data', chunk => fileHash.update(chunk));
      readStream.on('end', () => resolve(fileHash.digest('hex')));
    });
  },

  async walkDir(dir, recursive, callback) {
    let isValidRoot = false;
    let errMsg = null;

    try {
      isValidRoot = (await fs.stat(dir)).isDirectory();
    } catch (e) {
      errMsg = e.message;
    }

    if (!isValidRoot) {
      throw Error(`'${dir}' is not a valid root directory` + (errMsg ? `. Original error: ${errMsg}` : ''));
    }

    let walker;
    let fileCount = 0;
    let directoryCount = 0;
    const timer = new _timing.default().start();
    return await new _bluebird.default(function (resolve, reject) {
      let lastFileProcessed = _bluebird.default.resolve();

      walker = (0, _klaw.default)(dir, {
        depthLimit: recursive ? -1 : 0
      });
      walker.on('data', function (item) {
        walker.pause();

        if (!item.stats.isDirectory()) {
          fileCount++;
        } else {
          directoryCount++;
        }

        lastFileProcessed = _bluebird.default.try(async () => await callback(item.path, item.stats.isDirectory())).then(function (done = false) {
          if (done) {
            resolve(item.path);
          } else {
            walker.resume();
          }
        }).catch(reject);
      }).on('error', function (err, item) {
        _logger.default.warn(`Got an error while walking '${item.path}': ${err.message}`);

        if (err.code === 'ENOENT') {
          _logger.default.warn('All files may not have been accessed');

          reject(err);
        }
      }).on('end', function () {
        lastFileProcessed.then(resolve).catch(function (err) {
          _logger.default.warn(`Unexpected error: ${err.message}`);

          reject(err);
        });
      });
    }).finally(function () {
      _logger.default.debug(`Traversed ${(0, _util.pluralize)('directory', directoryCount, true)} ` + `and ${(0, _util.pluralize)('file', fileCount, true)} ` + `in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

      if (walker) {
        walker.destroy();
      }
    });
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat', 'appendFile', 'realpath', 'symlink'];

for (const s of simples) {
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

const syncFunctions = ['createReadStream', 'createWriteStream'];

for (const s of syncFunctions) {
  fs[s] = _fs2.default[s];
}

const constants = ['F_OK', 'R_OK', 'W_OK', 'X_OK', 'constants'];

for (const c of constants) {
  fs[c] = _fs2.default[c];
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
