"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _portscanner = require("portscanner");

var _child_process = require("child_process");

var _constants = require("./constants");

const log = _appiumSupport.logger.getLogger('GeckoDriverServer');

const GD_BINARY = `geckodriver${_appiumSupport.system.isWindows() ? '.exe' : ''}`;
const STARTUP_TIMEOUT_MS = 10000;
const GECKO_PORT_RANGE = [5200, 5300];

const GECKO_SERVER_GUARD = _appiumSupport.util.getLockFileGuard(_path.default.resolve(_os.default.tmpdir(), 'gecko_server_guard.lock'), {
  timeout: 5,
  tryRecovery: true
});

class GeckoProxy extends _appiumBaseDriver.JWProxy {
  async proxyCommand(url, method, body = null) {
    if (this.didProcessExit) {
      throw new _appiumBaseDriver.errors.InvalidContextError(`'${method} ${url}' cannot be proxied to Gecko Driver server because ` + 'its process is not running (probably crashed). Check the Appium log for more details');
    }

    return await super.proxyCommand(url, method, body);
  }

}

class GeckoDriverProcess {
  constructor(opts = {}) {
    for (const optName of ['noReset', 'verbosity', 'androidStorage']) {
      this[optName] = opts[optName];
    }

    this.port = opts.systemPort;
    this.proc = null;
  }

  get isRunning() {
    var _this$proc;

    return !!((_this$proc = this.proc) === null || _this$proc === void 0 ? void 0 : _this$proc.isRunning);
  }

  async init() {
    if (this.isRunning) {
      return;
    }

    if (!this.port) {
      await GECKO_SERVER_GUARD(async () => {
        const [startPort, endPort] = GECKO_PORT_RANGE;

        try {
          this.port = await (0, _portscanner.findAPortNotInUse)(startPort, endPort);
        } catch (e) {
          throw new Error(`Cannot find any free port in range ${startPort}..${endPort}. ` + `Double check the processes that are locking ports within this range and terminate ` + `these which are not needed anymore or set any free port number to the 'systemPort' capability`);
        }
      });
    }

    let driverBin;

    try {
      driverBin = await _appiumSupport.fs.which(GD_BINARY);
    } catch (e) {
      throw new Error(`${GD_BINARY} binary cannot be found in PATH. ` + `Please make sure it is present on your system`);
    }

    const args = [];

    switch (_lodash.default.toLower(this.verbosity)) {
      case _constants.VERBOSITY.DEBUG:
        args.push('-v');
        break;

      case _constants.VERBOSITY.TRACE:
        args.push('-vv');
        break;
    }

    if (this.noReset) {
      args.push('--connect-existing');
    }

    args.push('-p', this.port);

    if (this.androidStorage) {
      args.push('--android-storage', this.androidStorage);
    }

    this.proc = new _teen_process.SubProcess(driverBin, args);
    this.proc.on('output', (stdout, stderr) => {
      const line = _lodash.default.trim(stdout || stderr);

      if (line) {
        log.debug(`[${GD_BINARY}] ${line}`);
      }
    });
    this.proc.on('exit', (code, signal) => {
      log.info(`${GD_BINARY} has exited with code ${code}, signal ${signal}`);
    });
    log.info(`Starting '${driverBin}' with args ${JSON.stringify(args)}`);
    await this.proc.start(0);
  }

  async stop() {
    if (this.isRunning) {
      await this.proc.stop('SIGTERM');
    }
  }

  async kill() {
    if (this.isRunning) {
      try {
        await this.proc.stop('SIGKILL');
      } catch (ign) {}
    }
  }

}

const RUNNING_PROCESS_IDS = [];
process.once('exit', () => {
  for (const pid of RUNNING_PROCESS_IDS) {
    const command = _appiumSupport.system.isWindows() ? `taskkill.exe /PID ${pid}` : `kill ${pid}`;

    try {
      (0, _child_process.execSync)(command);
    } catch (ign) {}
  }
});

class GeckoDriverServer {
  constructor(caps) {
    this.process = new GeckoDriverProcess(caps);
    this.proxy = null;
  }

  get isRunning() {
    var _this$process;

    return !!((_this$process = this.process) === null || _this$process === void 0 ? void 0 : _this$process.isRunning);
  }

  async start(geckoCaps) {
    await this.process.init();
    this.proxy = new GeckoProxy({
      server: '127.0.0.1',
      port: this.process.port,
      base: '',
      keepAlive: true
    });
    this.proxy.didProcessExit = false;
    this.process.proc.on('exit', () => {
      this.proxy.didProcessExit = true;
    });

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        try {
          await this.proxy.command('/status', 'GET');
          return true;
        } catch (err) {
          if (this.proxy.didProcessExit) {
            throw new Error(err.message);
          }

          return false;
        }
      }, {
        waitMs: STARTUP_TIMEOUT_MS,
        intervalMs: 1000
      });
    } catch (e) {
      if (this.process.isRunning) {
        await this.process.kill();
      }

      if (/Condition unmet/.test(e.message)) {
        throw new Error(`Gecko Driver server is not listening within ${STARTUP_TIMEOUT_MS}ms timeout. ` + `Make sure it could be started manually from a terminal`);
      }

      throw e;
    }

    const pid = this.process.proc.pid;
    RUNNING_PROCESS_IDS.push(pid);
    this.process.proc.on('exit', () => void _lodash.default.pull(RUNNING_PROCESS_IDS, pid));
    await this.proxy.command('/session', 'POST', {
      capabilities: {
        firstMatch: [{}],
        alwaysMatch: geckoCaps
      }
    });
  }

  async stop() {
    var _this$proxy;

    if (!this.isRunning) {
      log.info(`Gecko Driver session cannot be stopped, because the server is not running`);
      return;
    }

    if ((_this$proxy = this.proxy) === null || _this$proxy === void 0 ? void 0 : _this$proxy.sessionId) {
      try {
        await this.proxy.command(`/session/${this.proxy.sessionId}`, 'DELETE');
      } catch (e) {
        log.info(`Gecko Driver session cannot be deleted. Original error: ${e.message}`);
      }
    }

    try {
      await this.process.stop();
    } catch (e) {
      log.warn(`Gecko Driver process cannot be stopped (${e.message}). Killing it forcefully`);
      await this.process.kill();
    }
  }

}

var _default = GeckoDriverServer;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
