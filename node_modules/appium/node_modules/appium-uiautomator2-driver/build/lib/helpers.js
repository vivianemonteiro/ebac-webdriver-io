"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

let helpers = {};

helpers.ensureInternetPermissionForApp = async function (adb, app) {
  let has = await adb.hasInternetPermissionFromManifest(app);

  if (has) {
    return;
  }

  let msg = 'Your apk does not have INTERNET permissions. Uiautomator2 needs ' + 'the internet permission to proceed. Please check if you have ' + '<uses-permission android:name="android.**permission.INTERNET"/>' + 'in your AndroidManifest.xml';
  throw new Error(msg);
};

helpers.isWriteable = async function isWriteable(filePath) {
  try {
    await _appiumSupport.fs.access(filePath, _appiumSupport.fs.W_OK);

    if (_appiumSupport.system.isWindows()) {
      await _appiumSupport.fs.close(await _appiumSupport.fs.open(filePath, 'r+'));
    }

    return true;
  } catch (ign) {
    return false;
  }
};

helpers.signApp = async function (adb, appPath) {
  if (!(await this.isWriteable(appPath))) {
    throw new Error(`The application at '${appPath}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(appPath)}' ` + `for the Appium process, so it could sign the application`);
  }

  await adb.sign(appPath);
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJlbnN1cmVJbnRlcm5ldFBlcm1pc3Npb25Gb3JBcHAiLCJhZGIiLCJhcHAiLCJoYXMiLCJoYXNJbnRlcm5ldFBlcm1pc3Npb25Gcm9tTWFuaWZlc3QiLCJtc2ciLCJFcnJvciIsImlzV3JpdGVhYmxlIiwiZmlsZVBhdGgiLCJmcyIsImFjY2VzcyIsIldfT0siLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJjbG9zZSIsIm9wZW4iLCJpZ24iLCJzaWduQXBwIiwiYXBwUGF0aCIsInBhdGgiLCJkaXJuYW1lIiwic2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxJQUFJQSxPQUFPLEdBQUcsRUFBZDs7QUFFQUEsT0FBTyxDQUFDQyw4QkFBUixHQUF5QyxnQkFBZ0JDLEdBQWhCLEVBQXFCQyxHQUFyQixFQUEwQjtBQUNqRSxNQUFJQyxHQUFHLEdBQUcsTUFBTUYsR0FBRyxDQUFDRyxpQ0FBSixDQUFzQ0YsR0FBdEMsQ0FBaEI7O0FBQ0EsTUFBSUMsR0FBSixFQUFTO0FBQ1A7QUFDRDs7QUFDRCxNQUFJRSxHQUFHLEdBQUcscUVBQ0EsK0RBREEsR0FFQSxpRUFGQSxHQUdBLDZCQUhWO0FBSUEsUUFBTSxJQUFJQyxLQUFKLENBQVVELEdBQVYsQ0FBTjtBQUNELENBVkQ7O0FBWUFOLE9BQU8sQ0FBQ1EsV0FBUixHQUFzQixlQUFlQSxXQUFmLENBQTRCQyxRQUE1QixFQUFzQztBQUMxRCxNQUFJO0FBQ0YsVUFBTUMsa0JBQUdDLE1BQUgsQ0FBVUYsUUFBVixFQUFvQkMsa0JBQUdFLElBQXZCLENBQU47O0FBQ0EsUUFBSUMsc0JBQU9DLFNBQVAsRUFBSixFQUF3QjtBQUt0QixZQUFNSixrQkFBR0ssS0FBSCxDQUFTLE1BQU1MLGtCQUFHTSxJQUFILENBQVFQLFFBQVIsRUFBa0IsSUFBbEIsQ0FBZixDQUFOO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0FWRCxDQVVFLE9BQU9RLEdBQVAsRUFBWTtBQUNaLFdBQU8sS0FBUDtBQUNEO0FBQ0YsQ0FkRDs7QUFnQkFqQixPQUFPLENBQUNrQixPQUFSLEdBQWtCLGdCQUFnQmhCLEdBQWhCLEVBQXFCaUIsT0FBckIsRUFBOEI7QUFDOUMsTUFBSSxFQUFDLE1BQU0sS0FBS1gsV0FBTCxDQUFpQlcsT0FBakIsQ0FBUCxDQUFKLEVBQXNDO0FBQ3BDLFVBQU0sSUFBSVosS0FBSixDQUFXLHVCQUFzQlksT0FBUSxzQkFBL0IsR0FDYix3RUFBdUVDLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixDQUFzQixJQURoRixHQUViLDBEQUZHLENBQU47QUFHRDs7QUFDRCxRQUFNakIsR0FBRyxDQUFDb0IsSUFBSixDQUFTSCxPQUFULENBQU47QUFDRCxDQVBEOztlQVNlbkIsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMsIHN5c3RlbSB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuXG5sZXQgaGVscGVycyA9IHt9O1xuXG5oZWxwZXJzLmVuc3VyZUludGVybmV0UGVybWlzc2lvbkZvckFwcCA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIGFwcCkge1xuICBsZXQgaGFzID0gYXdhaXQgYWRiLmhhc0ludGVybmV0UGVybWlzc2lvbkZyb21NYW5pZmVzdChhcHApO1xuICBpZiAoaGFzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBtc2cgPSAnWW91ciBhcGsgZG9lcyBub3QgaGF2ZSBJTlRFUk5FVCBwZXJtaXNzaW9ucy4gVWlhdXRvbWF0b3IyIG5lZWRzICcgK1xuICAgICAgICAgICAgJ3RoZSBpbnRlcm5ldCBwZXJtaXNzaW9uIHRvIHByb2NlZWQuIFBsZWFzZSBjaGVjayBpZiB5b3UgaGF2ZSAnICtcbiAgICAgICAgICAgICc8dXNlcy1wZXJtaXNzaW9uIGFuZHJvaWQ6bmFtZT1cImFuZHJvaWQuKipwZXJtaXNzaW9uLklOVEVSTkVUXCIvPicgK1xuICAgICAgICAgICAgJ2luIHlvdXIgQW5kcm9pZE1hbmlmZXN0LnhtbCc7XG4gIHRocm93IG5ldyBFcnJvcihtc2cpO1xufTtcblxuaGVscGVycy5pc1dyaXRlYWJsZSA9IGFzeW5jIGZ1bmN0aW9uIGlzV3JpdGVhYmxlIChmaWxlUGF0aCkge1xuICB0cnkge1xuICAgIGF3YWl0IGZzLmFjY2VzcyhmaWxlUGF0aCwgZnMuV19PSyk7XG4gICAgaWYgKHN5c3RlbS5pc1dpbmRvd3MoKSkge1xuICAgICAgLy8gT24gb3BlcmF0aW5nIHN5c3RlbXMsIHdoZXJlIGFjY2Vzcy1jb250cm9sIHBvbGljaWVzIG1heVxuICAgICAgLy8gbGltaXQgYWNjZXNzIHRvIHRoZSBmaWxlIHN5c3RlbSwgYGZzLmFjY2Vzc2AgZG9lcyBub3Qgd29ya1xuICAgICAgLy8gYXMgZXhwZWN0ZWQuIFNlZSBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2ZvcnVtLyMhdG9waWMvbm9kZWpzL3FtWnRJd0RSU1lvXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzXG4gICAgICBhd2FpdCBmcy5jbG9zZShhd2FpdCBmcy5vcGVuKGZpbGVQYXRoLCAncisnKSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChpZ24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmhlbHBlcnMuc2lnbkFwcCA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIGFwcFBhdGgpIHtcbiAgaWYgKCFhd2FpdCB0aGlzLmlzV3JpdGVhYmxlKGFwcFBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgYXBwbGljYXRpb24gYXQgJyR7YXBwUGF0aH0nIGlzIG5vdCB3cml0ZWFibGUuIGAgK1xuICAgICAgYFBsZWFzZSBncmFudCB3cml0ZSBwZXJtaXNzaW9ucyB0byB0aGlzIGZpbGUgb3IgdG8gaXRzIHBhcmVudCBmb2xkZXIgJyR7cGF0aC5kaXJuYW1lKGFwcFBhdGgpfScgYCArXG4gICAgICBgZm9yIHRoZSBBcHBpdW0gcHJvY2Vzcywgc28gaXQgY291bGQgc2lnbiB0aGUgYXBwbGljYXRpb25gKTtcbiAgfVxuICBhd2FpdCBhZGIuc2lnbihhcHBQYXRoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhlbHBlcnM7XG4iXSwiZmlsZSI6ImxpYi9oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
