"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _helpers = require("../helpers");

const xctestCommands = {};

xctestCommands.runXCUITest = async function runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, opts = {}) {
  const uiTestProcess = this.createSubProcess(['xctest', 'run', opts.testType || 'ui', xctestBundleId, appUnderTestBundleId, testRunnerBundleId, ...(opts.args || [])], {
    env: (0, _helpers.convertToIDBEnv)(opts.env)
  });
  await uiTestProcess.start(0);
  return uiTestProcess;
};

xctestCommands.installXCTestBundle = async function installXCTestBundle(xctestBundlePath) {
  const output = await this.exec(['xctest', 'install', xctestBundlePath, '--json']);

  try {
    const object = JSON.parse(output);
    return object.installedTestBundleId;
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};

xctestCommands.listXCTestBundles = async function listXCTestBundles() {
  const output = await this.exec(['xctest', 'list', '--json']);
  const bundles = (0, _helpers.fixOutputToArray)(output);
  return bundles.map(bundle => bundle.bundle_id);
};

xctestCommands.listXCTestsInTestBundle = async function listXCTestBundles(xctestBundleId) {
  const output = await this.exec(['xctest', 'list-bundle', xctestBundleId, '--json']);

  try {
    return JSON.parse(output);
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};

var _default = xctestCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy94Y3Rlc3QtY29tbWFuZHMuanMiXSwibmFtZXMiOlsieGN0ZXN0Q29tbWFuZHMiLCJydW5YQ1VJVGVzdCIsInRlc3RSdW5uZXJCdW5kbGVJZCIsImFwcFVuZGVyVGVzdEJ1bmRsZUlkIiwieGN0ZXN0QnVuZGxlSWQiLCJvcHRzIiwidWlUZXN0UHJvY2VzcyIsImNyZWF0ZVN1YlByb2Nlc3MiLCJ0ZXN0VHlwZSIsImFyZ3MiLCJlbnYiLCJzdGFydCIsImluc3RhbGxYQ1Rlc3RCdW5kbGUiLCJ4Y3Rlc3RCdW5kbGVQYXRoIiwib3V0cHV0IiwiZXhlYyIsIm9iamVjdCIsIkpTT04iLCJwYXJzZSIsImluc3RhbGxlZFRlc3RCdW5kbGVJZCIsImUiLCJFcnJvciIsIm1lc3NhZ2UiLCJsaXN0WENUZXN0QnVuZGxlcyIsImJ1bmRsZXMiLCJtYXAiLCJidW5kbGUiLCJidW5kbGVfaWQiLCJsaXN0WENUZXN0c0luVGVzdEJ1bmRsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUEsTUFBTUEsY0FBYyxHQUFHLEVBQXZCOztBQWtCQUEsY0FBYyxDQUFDQyxXQUFmLEdBQTZCLGVBQWVBLFdBQWYsQ0FDM0JDLGtCQUQyQixFQUNQQyxvQkFETyxFQUNlQyxjQURmLEVBQytCQyxJQUFJLEdBQUcsRUFEdEMsRUFFM0I7QUFDQSxRQUFNQyxhQUFhLEdBQUcsS0FBS0MsZ0JBQUwsQ0FBc0IsQ0FDMUMsUUFEMEMsRUFDaEMsS0FEZ0MsRUFFMUNGLElBQUksQ0FBQ0csUUFBTCxJQUFpQixJQUZ5QixFQUVuQkosY0FGbUIsRUFHMUNELG9CQUgwQyxFQUdwQkQsa0JBSG9CLEVBSTFDLElBQUlHLElBQUksQ0FBQ0ksSUFBTCxJQUFhLEVBQWpCLENBSjBDLENBQXRCLEVBS25CO0FBQ0RDLElBQUFBLEdBQUcsRUFBRSw4QkFBZ0JMLElBQUksQ0FBQ0ssR0FBckI7QUFESixHQUxtQixDQUF0QjtBQVFBLFFBQU1KLGFBQWEsQ0FBQ0ssS0FBZCxDQUFvQixDQUFwQixDQUFOO0FBQ0EsU0FBT0wsYUFBUDtBQUNELENBYkQ7O0FBb0JBTixjQUFjLENBQUNZLG1CQUFmLEdBQXFDLGVBQWVBLG1CQUFmLENBQW9DQyxnQkFBcEMsRUFBc0Q7QUFDekYsUUFBTUMsTUFBTSxHQUFHLE1BQU0sS0FBS0MsSUFBTCxDQUFVLENBQUMsUUFBRCxFQUFXLFNBQVgsRUFBc0JGLGdCQUF0QixFQUF3QyxRQUF4QyxDQUFWLENBQXJCOztBQUNBLE1BQUk7QUFDRixVQUFNRyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixNQUFYLENBQWY7QUFDQSxXQUFPRSxNQUFNLENBQUNHLHFCQUFkO0FBQ0QsR0FIRCxDQUdFLE9BQU9DLENBQVAsRUFBVTtBQUNWLFVBQU0sSUFBSUMsS0FBSixDQUFXLG9CQUFtQlAsTUFBTyx1QkFBc0JNLENBQUMsQ0FBQ0UsT0FBUSxFQUFyRSxDQUFOO0FBQ0Q7QUFDRixDQVJEOztBQWFBdEIsY0FBYyxDQUFDdUIsaUJBQWYsR0FBbUMsZUFBZUEsaUJBQWYsR0FBb0M7QUFDckUsUUFBTVQsTUFBTSxHQUFHLE1BQU0sS0FBS0MsSUFBTCxDQUFVLENBQUMsUUFBRCxFQUFXLE1BQVgsRUFBbUIsUUFBbkIsQ0FBVixDQUFyQjtBQUNBLFFBQU1TLE9BQU8sR0FBRywrQkFBaUJWLE1BQWpCLENBQWhCO0FBQ0EsU0FBT1UsT0FBTyxDQUFDQyxHQUFSLENBQWFDLE1BQUQsSUFBWUEsTUFBTSxDQUFDQyxTQUEvQixDQUFQO0FBQ0QsQ0FKRDs7QUFVQTNCLGNBQWMsQ0FBQzRCLHVCQUFmLEdBQXlDLGVBQWVMLGlCQUFmLENBQWtDbkIsY0FBbEMsRUFBa0Q7QUFDekYsUUFBTVUsTUFBTSxHQUFHLE1BQU0sS0FBS0MsSUFBTCxDQUFVLENBQUMsUUFBRCxFQUFXLGFBQVgsRUFBMEJYLGNBQTFCLEVBQTBDLFFBQTFDLENBQVYsQ0FBckI7O0FBQ0EsTUFBSTtBQUNGLFdBQU9hLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixNQUFYLENBQVA7QUFDRCxHQUZELENBRUUsT0FBT00sQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJQyxLQUFKLENBQVcsb0JBQW1CUCxNQUFPLHVCQUFzQk0sQ0FBQyxDQUFDRSxPQUFRLEVBQXJFLENBQU47QUFDRDtBQUNGLENBUEQ7O2VBVWV0QixjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFRvSURCRW52LCBmaXhPdXRwdXRUb0FycmF5IH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmNvbnN0IHhjdGVzdENvbW1hbmRzID0ge307XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUnVuT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbnYgRW52aXJvbm1lbnQgdmFyaWFibGVzIG1hcCB0byBiZSBwYXNzZWQgdG8gdGhlIHRlc3QgcnVubmVyXG4gKiBAcHJvcGVydHkge0FycmF5fSBhcmdzIEFyZ3VtZW50cyBhcnJheSB0byBiZSBwYXNzZWQgdG8gdGhlIHRlc3QgcnVubmVyXG4gKi9cblxuLyoqXG4gKiBSdW5zIGFuIHhjdWl0ZXN0IG9uIHRoZSBkZXZpY2Ugb3Igc2ltdWxhdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gdGVzdFJ1bm5lckJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIHRlc3QgcnVubmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwVW5kZXJUZXN0QnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwIHVuZGVyIHRlc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSB4Y3Rlc3RCdW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSB4Y3Rlc3QgcGFja2FnZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgVGhlIGVudnMgYW5kIGFyZ3MgdG8gYmUgcGFzc2VkIHRvIHRoZSB4Y3VpdGVzdCBydW5uZXJcbiAqXG4gKiBAcmV0dXJucyB7U3ViUHJvY2Vzc31cbiAqL1xueGN0ZXN0Q29tbWFuZHMucnVuWENVSVRlc3QgPSBhc3luYyBmdW5jdGlvbiBydW5YQ1VJVGVzdCAoXG4gIHRlc3RSdW5uZXJCdW5kbGVJZCwgYXBwVW5kZXJUZXN0QnVuZGxlSWQsIHhjdGVzdEJ1bmRsZUlkLCBvcHRzID0ge31cbikge1xuICBjb25zdCB1aVRlc3RQcm9jZXNzID0gdGhpcy5jcmVhdGVTdWJQcm9jZXNzKFtcbiAgICAneGN0ZXN0JywgJ3J1bicsXG4gICAgb3B0cy50ZXN0VHlwZSB8fCAndWknLCB4Y3Rlc3RCdW5kbGVJZCxcbiAgICBhcHBVbmRlclRlc3RCdW5kbGVJZCwgdGVzdFJ1bm5lckJ1bmRsZUlkLFxuICAgIC4uLihvcHRzLmFyZ3MgfHwgW10pXG4gIF0sIHtcbiAgICBlbnY6IGNvbnZlcnRUb0lEQkVudihvcHRzLmVudilcbiAgfSk7XG4gIGF3YWl0IHVpVGVzdFByb2Nlc3Muc3RhcnQoMCk7XG4gIHJldHVybiB1aVRlc3RQcm9jZXNzO1xufTtcblxuLyoqXG4gKiBJbnN0YWxscyBhIHhjdGVzdCBidW5kbGUgb24gdGhlIGRldmljZSBvciBzaW11bGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSB4Y3Rlc3RCdW5kbGVQYXRoIHRoZSBwYXRoIG9mIHRoZSB4Y3Rlc3QgYnVuZGxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgYnVuZGxlIGlkIG9mIHhjdGVzdCBidW5kbGUgdGhhdCB3YXMgaW5zdGFsbGVkXG4gKi9cbnhjdGVzdENvbW1hbmRzLmluc3RhbGxYQ1Rlc3RCdW5kbGUgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsWENUZXN0QnVuZGxlICh4Y3Rlc3RCdW5kbGVQYXRoKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ3hjdGVzdCcsICdpbnN0YWxsJywgeGN0ZXN0QnVuZGxlUGF0aCwgJy0tanNvbiddKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvYmplY3QgPSBKU09OLnBhcnNlKG91dHB1dCk7XG4gICAgcmV0dXJuIG9iamVjdC5pbnN0YWxsZWRUZXN0QnVuZGxlSWQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSAnJHtvdXRwdXR9JyBpbnRvIGpzb24gb2JqZWN0OiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBMaXN0cyBhbGwgdGhlIHhjdGVzdCBidW5kbGVzIGluc3RhbGxlZCBvbiBhIGRldmljZSBvciBhIHNpbXVsYXRvclxuICovXG54Y3Rlc3RDb21tYW5kcy5saXN0WENUZXN0QnVuZGxlcyA9IGFzeW5jIGZ1bmN0aW9uIGxpc3RYQ1Rlc3RCdW5kbGVzICgpIHtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjKFsneGN0ZXN0JywgJ2xpc3QnLCAnLS1qc29uJ10pO1xuICBjb25zdCBidW5kbGVzID0gZml4T3V0cHV0VG9BcnJheShvdXRwdXQpO1xuICByZXR1cm4gYnVuZGxlcy5tYXAoKGJ1bmRsZSkgPT4gYnVuZGxlLmJ1bmRsZV9pZCk7XG59O1xuXG4vKipcbiAqIExpc3RzIGFsbCB0aGUgeGN0ZXN0IGJ1bmRsZXMgaW5zdGFsbGVkIG9uIGEgZGV2aWNlIG9yIGEgc2ltdWxhdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30geGN0ZXN0QnVuZGxlSWQgdGhlIGJ1bmRsZSBpZCBvZiB0aGUgeGN0ZXN0XG4gKi9cbnhjdGVzdENvbW1hbmRzLmxpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlID0gYXN5bmMgZnVuY3Rpb24gbGlzdFhDVGVzdEJ1bmRsZXMgKHhjdGVzdEJ1bmRsZUlkKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ3hjdGVzdCcsICdsaXN0LWJ1bmRsZScsIHhjdGVzdEJ1bmRsZUlkLCAnLS1qc29uJ10pO1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKG91dHB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSAnJHtvdXRwdXR9JyBpbnRvIGpzb24gb2JqZWN0OiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCB4Y3Rlc3RDb21tYW5kcztcbiJdLCJmaWxlIjoibGliL3Rvb2xzL3hjdGVzdC1jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
