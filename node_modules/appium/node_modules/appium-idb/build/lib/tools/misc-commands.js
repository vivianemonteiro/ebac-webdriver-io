"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../helpers");

const miscCommands = {};

miscCommands.describeDevice = async function describeDevice() {
  _logger.default.debug(`Describing the device '${this.udid}'`);

  const output = await this.exec(['describe', '--json']);
  return (0, _helpers.fixOutputToObject)(output);
};

miscCommands.focusSimulator = async function focusSimulator() {
  _logger.default.debug(`Focusing Simulator '${this.udid}'`);

  await this.exec(['focus']);
};

miscCommands.openUrl = async function openUrl(url) {
  _logger.default.debug(`Opening URL '${url}' on the device '${this.udid}'`);

  await this.exec(['open', url]);
};

miscCommands.clearKeychain = async function clearKeychain() {
  _logger.default.debug(`Clearing keychain on the device '${this.udid}'`);

  await this.exec(['clear-keychain']);
};

miscCommands.setLocation = async function setLocation(latitude, longitude) {
  _logger.default.debug(`Setting location (${latitude}, ${longitude}) on the device '${this.udid}'`);

  await this.exec(['set-location', latitude, longitude]);
};

miscCommands.approve = async function approve(bundleId, permissions) {
  _logger.default.debug(`Approving permissions (${JSON.stringify(permissions)}) for '${bundleId}' ` + `on the device '${this.udid}'`);

  const args = ['approve', bundleId];

  if (_lodash.default.isArray(permissions)) {
    args.push(...permissions);
  } else {
    args.push(permissions);
  }

  await this.exec(args);
};

miscCommands.addContacts = async function addContacts(dbPath) {
  _logger.default.debug(`Adding contacts from (${dbPath}) to the device '${this.udid}'`);

  await this.exec(['contacts', 'update', dbPath]);
};

var _default = miscCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9taXNjLWNvbW1hbmRzLmpzIl0sIm5hbWVzIjpbIm1pc2NDb21tYW5kcyIsImRlc2NyaWJlRGV2aWNlIiwibG9nIiwiZGVidWciLCJ1ZGlkIiwib3V0cHV0IiwiZXhlYyIsImZvY3VzU2ltdWxhdG9yIiwib3BlblVybCIsInVybCIsImNsZWFyS2V5Y2hhaW4iLCJzZXRMb2NhdGlvbiIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYXBwcm92ZSIsImJ1bmRsZUlkIiwicGVybWlzc2lvbnMiLCJKU09OIiwic3RyaW5naWZ5IiwiYXJncyIsIl8iLCJpc0FycmF5IiwicHVzaCIsImFkZENvbnRhY3RzIiwiZGJQYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFlBQVksR0FBRyxFQUFyQjs7QUF1QkFBLFlBQVksQ0FBQ0MsY0FBYixHQUE4QixlQUFlQSxjQUFmLEdBQWlDO0FBQzdEQyxrQkFBSUMsS0FBSixDQUFXLDBCQUF5QixLQUFLQyxJQUFLLEdBQTlDOztBQUNBLFFBQU1DLE1BQU0sR0FBRyxNQUFNLEtBQUtDLElBQUwsQ0FBVSxDQUFDLFVBQUQsRUFBYSxRQUFiLENBQVYsQ0FBckI7QUFDQSxTQUFPLGdDQUFrQkQsTUFBbEIsQ0FBUDtBQUNELENBSkQ7O0FBU0FMLFlBQVksQ0FBQ08sY0FBYixHQUE4QixlQUFlQSxjQUFmLEdBQWlDO0FBQzdETCxrQkFBSUMsS0FBSixDQUFXLHVCQUFzQixLQUFLQyxJQUFLLEdBQTNDOztBQUNBLFFBQU0sS0FBS0UsSUFBTCxDQUFVLENBQUMsT0FBRCxDQUFWLENBQU47QUFDRCxDQUhEOztBQVdBTixZQUFZLENBQUNRLE9BQWIsR0FBdUIsZUFBZUEsT0FBZixDQUF3QkMsR0FBeEIsRUFBNkI7QUFDbERQLGtCQUFJQyxLQUFKLENBQVcsZ0JBQWVNLEdBQUksb0JBQW1CLEtBQUtMLElBQUssR0FBM0Q7O0FBQ0EsUUFBTSxLQUFLRSxJQUFMLENBQVUsQ0FBQyxNQUFELEVBQVNHLEdBQVQsQ0FBVixDQUFOO0FBQ0QsQ0FIRDs7QUFRQVQsWUFBWSxDQUFDVSxhQUFiLEdBQTZCLGVBQWVBLGFBQWYsR0FBZ0M7QUFDM0RSLGtCQUFJQyxLQUFKLENBQVcsb0NBQW1DLEtBQUtDLElBQUssR0FBeEQ7O0FBQ0EsUUFBTSxLQUFLRSxJQUFMLENBQVUsQ0FBQyxnQkFBRCxDQUFWLENBQU47QUFDRCxDQUhEOztBQVdBTixZQUFZLENBQUNXLFdBQWIsR0FBMkIsZUFBZUEsV0FBZixDQUE0QkMsUUFBNUIsRUFBc0NDLFNBQXRDLEVBQWlEO0FBQzFFWCxrQkFBSUMsS0FBSixDQUFXLHFCQUFvQlMsUUFBUyxLQUFJQyxTQUFVLG9CQUFtQixLQUFLVCxJQUFLLEdBQW5GOztBQUNBLFFBQU0sS0FBS0UsSUFBTCxDQUFVLENBQUMsY0FBRCxFQUFpQk0sUUFBakIsRUFBMkJDLFNBQTNCLENBQVYsQ0FBTjtBQUNELENBSEQ7O0FBWUFiLFlBQVksQ0FBQ2MsT0FBYixHQUF1QixlQUFlQSxPQUFmLENBQXdCQyxRQUF4QixFQUFrQ0MsV0FBbEMsRUFBK0M7QUFDcEVkLGtCQUFJQyxLQUFKLENBQVcsMEJBQXlCYyxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsV0FBZixDQUE0QixVQUFTRCxRQUFTLElBQXhFLEdBQ1Asa0JBQWlCLEtBQUtYLElBQUssR0FEOUI7O0FBRUEsUUFBTWUsSUFBSSxHQUFHLENBQ1gsU0FEVyxFQUNBSixRQURBLENBQWI7O0FBR0EsTUFBSUssZ0JBQUVDLE9BQUYsQ0FBVUwsV0FBVixDQUFKLEVBQTRCO0FBQzFCRyxJQUFBQSxJQUFJLENBQUNHLElBQUwsQ0FBVSxHQUFHTixXQUFiO0FBQ0QsR0FGRCxNQUVPO0FBQ0xHLElBQUFBLElBQUksQ0FBQ0csSUFBTCxDQUFVTixXQUFWO0FBQ0Q7O0FBQ0QsUUFBTSxLQUFLVixJQUFMLENBQVVhLElBQVYsQ0FBTjtBQUNELENBWkQ7O0FBbUJBbkIsWUFBWSxDQUFDdUIsV0FBYixHQUEyQixlQUFlQSxXQUFmLENBQTRCQyxNQUE1QixFQUFvQztBQUM3RHRCLGtCQUFJQyxLQUFKLENBQVcseUJBQXdCcUIsTUFBTyxvQkFBbUIsS0FBS3BCLElBQUssR0FBdkU7O0FBQ0EsUUFBTSxLQUFLRSxJQUFMLENBQVUsQ0FBQyxVQUFELEVBQWEsUUFBYixFQUF1QmtCLE1BQXZCLENBQVYsQ0FBTjtBQUNELENBSEQ7O2VBS2V4QixZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZpeE91dHB1dFRvT2JqZWN0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5cblxuY29uc3QgbWlzY0NvbW1hbmRzID0ge307XG5cbi8qKlxuICogUmV0dXJucyBtZXRhZGF0YSBhYm91dCB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqIE91dHB1dCBleGFtcGxlOlxuICogdGFyZ2V0X2Rlc2NyaXB0aW9uIHtcbiAqICAgdWRpZDogXCIxNEVCREVERS0wQzlFLTQ2QjQtQjFGRi0wODgxRjExRDBFNzVcIlxuICogICBuYW1lOiBcImlQaG9uZSBYXFwzMTJcXDIwMFwiXG4gKiAgIHNjcmVlbl9kaW1lbnNpb25zIHtcbiAqICAgICB3aWR0aDogODI4XG4gKiAgICAgaGVpZ2h0OiAxNzkyXG4gKiAgICAgZGVuc2l0eTogMi4wXG4gKiAgICAgd2lkdGhfcG9pbnRzOiA0MTRcbiAqICAgICBoZWlnaHRfcG9pbnRzOiA4OTZcbiAqICAgfVxuICogICBzdGF0ZTogXCJib290ZWRcIlxuICogICB0YXJnZXRfdHlwZTogXCJzaW11bGF0b3JcIlxuICogICBvc192ZXJzaW9uOiBcImlPUyAxMi4yXCJcbiAqICAgYXJjaGl0ZWN0dXJlOiBcIng4Nl82NFwiXG4gKiB9XG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIGNvbW1hbmQgb3V0cHV0IHBhcnNlZCB0byBhbiBvYmplY3RcbiAqL1xubWlzY0NvbW1hbmRzLmRlc2NyaWJlRGV2aWNlID0gYXN5bmMgZnVuY3Rpb24gZGVzY3JpYmVEZXZpY2UgKCkge1xuICBsb2cuZGVidWcoYERlc2NyaWJpbmcgdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWMoWydkZXNjcmliZScsICctLWpzb24nXSk7XG4gIHJldHVybiBmaXhPdXRwdXRUb09iamVjdChvdXRwdXQpO1xufTtcblxuLyoqXG4gKiBCcmluZ3MgYSBzaW11bGF0b3JzIHdpbmRvdyB0byB0aGUgZm9yZWdyb3VuZC5cbiAqL1xubWlzY0NvbW1hbmRzLmZvY3VzU2ltdWxhdG9yID0gYXN5bmMgZnVuY3Rpb24gZm9jdXNTaW11bGF0b3IgKCkge1xuICBsb2cuZGVidWcoYEZvY3VzaW5nIFNpbXVsYXRvciAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydmb2N1cyddKTtcbn07XG5cbi8qKlxuICogT3BlbnMgdGhlIHNwZWNpZmllZCBVUkwgb24gdGhlIHRhcmdldC5cbiAqIFRoaXMgd29ya3MgYm90aCB3aXRoIHdlYiBhZGRyZXNzZXMgYW5kIFVSTCBzY2hlbWVzIHByZXNlbnQgb24gdGhlIHRhcmdldC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gb3BlblxuICovXG5taXNjQ29tbWFuZHMub3BlblVybCA9IGFzeW5jIGZ1bmN0aW9uIG9wZW5VcmwgKHVybCkge1xuICBsb2cuZGVidWcoYE9wZW5pbmcgVVJMICcke3VybH0nIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnb3BlbicsIHVybF0pO1xufTtcblxuLyoqXG4gKiBDbGVhciB0aGUgZW50aXJlIGtleWNoYWluIG9uIFNpbXVsYXRvci5cbiAqL1xubWlzY0NvbW1hbmRzLmNsZWFyS2V5Y2hhaW4gPSBhc3luYyBmdW5jdGlvbiBjbGVhcktleWNoYWluICgpIHtcbiAgbG9nLmRlYnVnKGBDbGVhcmluZyBrZXljaGFpbiBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2NsZWFyLWtleWNoYWluJ10pO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZXMgYSBzaW11bGF0b3JzIGxvY2F0aW9uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsYXRpdHVkZSBUaGUgbGF0aXR1ZGUgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGUgdmFsdWVcbiAqL1xubWlzY0NvbW1hbmRzLnNldExvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gc2V0TG9jYXRpb24gKGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcbiAgbG9nLmRlYnVnKGBTZXR0aW5nIGxvY2F0aW9uICgke2xhdGl0dWRlfSwgJHtsb25naXR1ZGV9KSBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3NldC1sb2NhdGlvbicsIGxhdGl0dWRlLCBsb25naXR1ZGVdKTtcbn07XG5cbi8qKlxuICogUHJvZ3JhbW1hdGljYWxseSBhcHByb3ZlIHBlcm1pc3Npb24gZm9yIGFuIGFwcCBvbiBTaW11bGF0b3JcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgQXBwbGljYXRpb24gaWRlbnRpZmllciB0byBzZXQgdGhlIHBlcm1pc3Npb25zIGZvclxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPn0gcGVybWlzc2lvbnMgVGhlIHBlcm1pc3Npb24ocykgdG8gYXBwbHkuIENhbiBiZVxuICogb25lIG9mIHtwaG90b3MsY2FtZXJhLGNhbWVyYX1cbiAqL1xubWlzY0NvbW1hbmRzLmFwcHJvdmUgPSBhc3luYyBmdW5jdGlvbiBhcHByb3ZlIChidW5kbGVJZCwgcGVybWlzc2lvbnMpIHtcbiAgbG9nLmRlYnVnKGBBcHByb3ZpbmcgcGVybWlzc2lvbnMgKCR7SlNPTi5zdHJpbmdpZnkocGVybWlzc2lvbnMpfSkgZm9yICcke2J1bmRsZUlkfScgYCArXG4gICAgYG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3QgYXJncyA9IFtcbiAgICAnYXBwcm92ZScsIGJ1bmRsZUlkLFxuICBdO1xuICBpZiAoXy5pc0FycmF5KHBlcm1pc3Npb25zKSkge1xuICAgIGFyZ3MucHVzaCguLi5wZXJtaXNzaW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgYXJncy5wdXNoKHBlcm1pc3Npb25zKTtcbiAgfVxuICBhd2FpdCB0aGlzLmV4ZWMoYXJncyk7XG59O1xuXG4vKipcbiAqIE92ZXJ3cml0ZSB0aGUgc2ltdWxhdG9ycyBjb250YWN0cyBkYlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYlBhdGggRnVsbCBwYXRoIHRvIHRoZSBTUUxpdGUgZGIgY29udGFpbmluZyB0aGUgY29udGFjdHNcbiAqL1xubWlzY0NvbW1hbmRzLmFkZENvbnRhY3RzID0gYXN5bmMgZnVuY3Rpb24gYWRkQ29udGFjdHMgKGRiUGF0aCkge1xuICBsb2cuZGVidWcoYEFkZGluZyBjb250YWN0cyBmcm9tICgke2RiUGF0aH0pIHRvIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnY29udGFjdHMnLCAndXBkYXRlJywgZGJQYXRoXSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaXNjQ29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi90b29scy9taXNjLWNvbW1hbmRzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
