"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.server = server;
exports.configureServer = configureServer;
exports.normalizeBasePath = normalizeBasePath;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _http = _interopRequireDefault(require("http"));

var _serveFavicon = _interopRequireDefault(require("serve-favicon"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _methodOverride = _interopRequireDefault(require("method-override"));

var _logger = _interopRequireDefault(require("./logger"));

var _expressLogging = require("./express-logging");

var _middleware = require("./middleware");

var _static = require("./static");

var _crash = require("./crash");

var _websocket = require("./websocket");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _protocol = require("../protocol");

const KEEP_ALIVE_TIMEOUT_MS = 60 * 10 * 1000;

async function server(opts = {}) {
  const {
    routeConfiguringFunction,
    port,
    hostname = null,
    allowCors = true,
    basePath = _protocol.DEFAULT_BASE_PATH
  } = opts;
  const app = (0, _express.default)();

  let httpServer = _http.default.createServer(app);

  httpServer.addWebSocketHandler = _websocket.addWebSocketHandler;
  httpServer.removeWebSocketHandler = _websocket.removeWebSocketHandler;
  httpServer.removeAllWebSocketHandlers = _websocket.removeAllWebSocketHandlers;
  httpServer.getWebSocketHandlers = _websocket.getWebSocketHandlers;
  const close = httpServer.close.bind(httpServer);

  httpServer.close = async () => {
    return await new _bluebird.default((resolve, reject) => {
      httpServer.on('close', resolve);
      close(err => {
        if (err) reject(err);
      });
    });
  };

  return await new _bluebird.default((resolve, reject) => {
    httpServer.on('error', err => {
      if (err.code === 'EADDRNOTAVAIL') {
        _logger.default.error('Could not start REST http interface listener. ' + 'Requested address is not available.');
      } else {
        _logger.default.error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
      }

      reject(err);
    });
    httpServer.on('connection', socket => {
      socket.setTimeout(KEEP_ALIVE_TIMEOUT_MS);
      socket.on('error', reject);
    });
    configureServer(app, routeConfiguringFunction, allowCors, basePath);
    let serverArgs = [port];

    if (hostname) {
      serverArgs.push(hostname);
    }

    httpServer.listen(...serverArgs, err => {
      if (err) {
        reject(err);
      }

      resolve(httpServer);
    });
    httpServer.keepAliveTimeout = KEEP_ALIVE_TIMEOUT_MS;
    httpServer.headersTimeout = KEEP_ALIVE_TIMEOUT_MS + 5 * 1000;
  });
}

function normalizeBasePath(basePath) {
  if (!_lodash.default.isString(basePath)) {
    throw new Error(`Invalid path prefix ${basePath}`);
  }

  basePath = basePath.replace(/\/$/, '');

  if (basePath !== '' && basePath[0] !== '/') {
    basePath = `/${basePath}`;
  }

  return basePath;
}

function configureServer(app, routeConfiguringFunction, allowCors = true, basePath = _protocol.DEFAULT_BASE_PATH) {
  basePath = normalizeBasePath(basePath);
  app.use(_expressLogging.endLogFormatter);
  app.use((0, _serveFavicon.default)(_path.default.resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express.default.static(_static.STATIC_DIR));
  app.use(`${basePath}/produce_error`, _crash.produceError);
  app.use(`${basePath}/crash`, _crash.produceCrash);

  if (allowCors) {
    app.use(_middleware.allowCrossDomain);
  } else {
    app.use((0, _middleware.allowCrossDomainAsyncExecute)(basePath));
  }

  app.use((0, _middleware.fixPythonContentType)(basePath));
  app.use(_middleware.defaultToJSONContentType);
  app.use(_bodyParser.default.urlencoded({
    extended: true
  }));
  app.use((0, _methodOverride.default)());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);
  app.use(_bodyParser.default.json({
    limit: '1gb'
  }));
  app.use(_expressLogging.startLogFormatter);
  routeConfiguringFunction(app, basePath);
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);
  app.all('/test/guinea-pig-scrollable', _static.guineaPigScrollable);
  app.all('/test/guinea-pig-app-banner', _static.guineaPigAppBanner);
  app.use(_middleware.catch404Handler);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJLRUVQX0FMSVZFX1RJTUVPVVRfTVMiLCJzZXJ2ZXIiLCJvcHRzIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwicG9ydCIsImhvc3RuYW1lIiwiYWxsb3dDb3JzIiwiYmFzZVBhdGgiLCJERUZBVUxUX0JBU0VfUEFUSCIsImFwcCIsImh0dHBTZXJ2ZXIiLCJodHRwIiwiY3JlYXRlU2VydmVyIiwiYWRkV2ViU29ja2V0SGFuZGxlciIsInJlbW92ZVdlYlNvY2tldEhhbmRsZXIiLCJyZW1vdmVBbGxXZWJTb2NrZXRIYW5kbGVycyIsImdldFdlYlNvY2tldEhhbmRsZXJzIiwiY2xvc2UiLCJiaW5kIiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJvbiIsImVyciIsImNvZGUiLCJsb2ciLCJlcnJvciIsInNvY2tldCIsInNldFRpbWVvdXQiLCJjb25maWd1cmVTZXJ2ZXIiLCJzZXJ2ZXJBcmdzIiwicHVzaCIsImxpc3RlbiIsImtlZXBBbGl2ZVRpbWVvdXQiLCJoZWFkZXJzVGltZW91dCIsIm5vcm1hbGl6ZUJhc2VQYXRoIiwiXyIsImlzU3RyaW5nIiwiRXJyb3IiLCJyZXBsYWNlIiwidXNlIiwiZW5kTG9nRm9ybWF0dGVyIiwicGF0aCIsIlNUQVRJQ19ESVIiLCJleHByZXNzIiwic3RhdGljIiwicHJvZHVjZUVycm9yIiwicHJvZHVjZUNyYXNoIiwiYWxsb3dDcm9zc0RvbWFpbiIsImRlZmF1bHRUb0pTT05Db250ZW50VHlwZSIsImJvZHlQYXJzZXIiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJjYXRjaDRYWEhhbmRsZXIiLCJjYXRjaEFsbEhhbmRsZXIiLCJqc29uIiwibGltaXQiLCJzdGFydExvZ0Zvcm1hdHRlciIsImFsbCIsIndlbGNvbWUiLCJndWluZWFQaWciLCJndWluZWFQaWdTY3JvbGxhYmxlIiwiZ3VpbmVhUGlnQXBwQmFubmVyIiwiY2F0Y2g0MDRIYW5kbGVyIl0sIm1hcHBpbmdz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UXVCLDJCQUFSO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IGZhdmljb24gZnJvbSAnc2VydmUtZmF2aWNvbic7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgbWV0aG9kT3ZlcnJpZGUgZnJvbSAnbWV0aG9kLW92ZXJyaWRlJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgc3RhcnRMb2dGb3JtYXR0ZXIsIGVuZExvZ0Zvcm1hdHRlciB9IGZyb20gJy4vZXhwcmVzcy1sb2dnaW5nJztcbmltcG9ydCB7IGFsbG93Q3Jvc3NEb21haW4sIGZpeFB5dGhvbkNvbnRlbnRUeXBlLCBkZWZhdWx0VG9KU09OQ29udGVudFR5cGUsXG4gICAgICAgICBjYXRjaEFsbEhhbmRsZXIsIGNhdGNoNDA0SGFuZGxlciwgY2F0Y2g0WFhIYW5kbGVyLFxuICAgICAgICAgYWxsb3dDcm9zc0RvbWFpbkFzeW5jRXhlY3V0ZX0gZnJvbSAnLi9taWRkbGV3YXJlJztcbmltcG9ydCB7IGd1aW5lYVBpZywgZ3VpbmVhUGlnU2Nyb2xsYWJsZSwgZ3VpbmVhUGlnQXBwQmFubmVyLCB3ZWxjb21lLCBTVEFUSUNfRElSIH0gZnJvbSAnLi9zdGF0aWMnO1xuaW1wb3J0IHsgcHJvZHVjZUVycm9yLCBwcm9kdWNlQ3Jhc2ggfSBmcm9tICcuL2NyYXNoJztcbmltcG9ydCB7IGFkZFdlYlNvY2tldEhhbmRsZXIsIHJlbW92ZVdlYlNvY2tldEhhbmRsZXIsIHJlbW92ZUFsbFdlYlNvY2tldEhhbmRsZXJzLFxuICAgICAgICAgZ2V0V2ViU29ja2V0SGFuZGxlcnMgfSBmcm9tICcuL3dlYnNvY2tldCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBERUZBVUxUX0JBU0VfUEFUSCB9IGZyb20gJy4uL3Byb3RvY29sJztcblxuXG5jb25zdCBLRUVQX0FMSVZFX1RJTUVPVVRfTVMgPSA2MCAqIDEwICogMTAwMDsgLy8gMTAgbWludXRlc1xuXG5cbmFzeW5jIGZ1bmN0aW9uIHNlcnZlciAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24sXG4gICAgcG9ydCxcbiAgICBob3N0bmFtZSA9IG51bGwsXG4gICAgYWxsb3dDb3JzID0gdHJ1ZSxcbiAgICBiYXNlUGF0aCA9IERFRkFVTFRfQkFTRV9QQVRILFxuICB9ID0gb3B0cztcblxuICAvLyBjcmVhdGUgdGhlIGFjdHVhbCBodHRwIHNlcnZlclxuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIGxldCBodHRwU2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcbiAgaHR0cFNlcnZlci5hZGRXZWJTb2NrZXRIYW5kbGVyID0gYWRkV2ViU29ja2V0SGFuZGxlcjtcbiAgaHR0cFNlcnZlci5yZW1vdmVXZWJTb2NrZXRIYW5kbGVyID0gcmVtb3ZlV2ViU29ja2V0SGFuZGxlcjtcbiAgaHR0cFNlcnZlci5yZW1vdmVBbGxXZWJTb2NrZXRIYW5kbGVycyA9IHJlbW92ZUFsbFdlYlNvY2tldEhhbmRsZXJzO1xuICBodHRwU2VydmVyLmdldFdlYlNvY2tldEhhbmRsZXJzID0gZ2V0V2ViU29ja2V0SGFuZGxlcnM7XG5cbiAgLy8gaHR0cC5TZXJ2ZXIuY2xvc2UoKSBvbmx5IHN0b3BzIG5ldyBjb25uZWN0aW9ucywgYnV0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbFxuICAvLyBhbGwgY29ubmVjdGlvbnMgYXJlIGNsb3NlZCBhbmQgdGhlIGBjbG9zZWAgZXZlbnQgaXMgZW1pdHRlZFxuICBjb25zdCBjbG9zZSA9IGh0dHBTZXJ2ZXIuY2xvc2UuYmluZChodHRwU2VydmVyKTtcbiAgaHR0cFNlcnZlci5jbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaHR0cFNlcnZlci5vbignY2xvc2UnLCByZXNvbHZlKTtcbiAgICAgIGNsb3NlKChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaHR0cFNlcnZlci5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFQUREUk5PVEFWQUlMJykge1xuICAgICAgICBsb2cuZXJyb3IoJ0NvdWxkIG5vdCBzdGFydCBSRVNUIGh0dHAgaW50ZXJmYWNlIGxpc3RlbmVyLiAnICtcbiAgICAgICAgICAgICAgICAgICdSZXF1ZXN0ZWQgYWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKCdDb3VsZCBub3Qgc3RhcnQgUkVTVCBodHRwIGludGVyZmFjZSBsaXN0ZW5lci4gVGhlIHJlcXVlc3RlZCAnICtcbiAgICAgICAgICAgICAgICAgICdwb3J0IG1heSBhbHJlYWR5IGJlIGluIHVzZS4gUGxlYXNlIG1ha2Ugc3VyZSB0aGVyZSBpcyBubyAnICtcbiAgICAgICAgICAgICAgICAgICdvdGhlciBpbnN0YW5jZSBvZiB0aGlzIHNlcnZlciBydW5uaW5nIGFscmVhZHkuJyk7XG4gICAgICB9XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgICBodHRwU2VydmVyLm9uKCdjb25uZWN0aW9uJywgKHNvY2tldCkgPT4ge1xuICAgICAgc29ja2V0LnNldFRpbWVvdXQoS0VFUF9BTElWRV9USU1FT1VUX01TKTtcbiAgICAgIHNvY2tldC5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICAgIGNvbmZpZ3VyZVNlcnZlcihhcHAsIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiwgYWxsb3dDb3JzLCBiYXNlUGF0aCk7XG5cbiAgICBsZXQgc2VydmVyQXJncyA9IFtwb3J0XTtcbiAgICBpZiAoaG9zdG5hbWUpIHtcbiAgICAgIC8vIElmIHRoZSBob3N0bmFtZSBpcyBvbWl0dGVkLCB0aGUgc2VydmVyIHdpbGwgYWNjZXB0XG4gICAgICAvLyBjb25uZWN0aW9ucyBvbiBhbnkgSVAgYWRkcmVzc1xuICAgICAgc2VydmVyQXJncy5wdXNoKGhvc3RuYW1lKTtcbiAgICB9XG4gICAgaHR0cFNlcnZlci5saXN0ZW4oLi4uc2VydmVyQXJncywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoaHR0cFNlcnZlcik7XG4gICAgfSk7XG4gICAgaHR0cFNlcnZlci5rZWVwQWxpdmVUaW1lb3V0ID0gS0VFUF9BTElWRV9USU1FT1VUX01TO1xuICAgIC8vIGhlYWRlcnMgdGltZW91dCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBrZWVwQWxpdmVUaW1lb3V0XG4gICAgaHR0cFNlcnZlci5oZWFkZXJzVGltZW91dCA9IEtFRVBfQUxJVkVfVElNRU9VVF9NUyArIDUgKiAxMDAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZVBhdGggKGJhc2VQYXRoKSB7XG4gIGlmICghXy5pc1N0cmluZyhiYXNlUGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGF0aCBwcmVmaXggJHtiYXNlUGF0aH1gKTtcbiAgfVxuXG4gIC8vIGVuc3VyZSB0aGUgcGF0aCBwcmVmaXggZG9lcyBub3QgZW5kIGluICcvJywgc2luY2Ugb3VyIG1ldGhvZCBtYXBcbiAgLy8gc3RhcnRzIGFsbCBwYXRocyB3aXRoICcvJ1xuICBiYXNlUGF0aCA9IGJhc2VQYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgLy8gbGlrZXdpc2UsIGVuc3VyZSB0aGUgcGF0aCBwcmVmaXggZG9lcyBhbHdheXMgU1RBUlQgd2l0aCAvLCB1bmxlc3MgdGhlIHBhdGhcbiAgLy8gaXMgZW1wdHkgbWVhbmluZyBubyBiYXNlIHBhdGggYXQgYWxsXG4gIGlmIChiYXNlUGF0aCAhPT0gJycgJiYgYmFzZVBhdGhbMF0gIT09ICcvJykge1xuICAgIGJhc2VQYXRoID0gYC8ke2Jhc2VQYXRofWA7XG4gIH1cblxuICByZXR1cm4gYmFzZVBhdGg7XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVNlcnZlciAoYXBwLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24sIGFsbG93Q29ycyA9IHRydWUsIGJhc2VQYXRoID0gREVGQVVMVF9CQVNFX1BBVEgpIHtcbiAgYmFzZVBhdGggPSBub3JtYWxpemVCYXNlUGF0aChiYXNlUGF0aCk7XG5cbiAgYXBwLnVzZShlbmRMb2dGb3JtYXR0ZXIpO1xuXG4gIC8vIHNldCB1cCBzdGF0aWMgYXNzZXRzXG4gIGFwcC51c2UoZmF2aWNvbihwYXRoLnJlc29sdmUoU1RBVElDX0RJUiwgJ2Zhdmljb24uaWNvJykpKTtcbiAgYXBwLnVzZShleHByZXNzLnN0YXRpYyhTVEFUSUNfRElSKSk7XG5cbiAgLy8gY3Jhc2ggcm91dGVzLCBmb3IgdGVzdGluZ1xuICBhcHAudXNlKGAke2Jhc2VQYXRofS9wcm9kdWNlX2Vycm9yYCwgcHJvZHVjZUVycm9yKTtcbiAgYXBwLnVzZShgJHtiYXNlUGF0aH0vY3Jhc2hgLCBwcm9kdWNlQ3Jhc2gpO1xuXG4gIC8vIGFkZCBtaWRkbGV3YXJlc1xuICBpZiAoYWxsb3dDb3JzKSB7XG4gICAgYXBwLnVzZShhbGxvd0Nyb3NzRG9tYWluKTtcbiAgfSBlbHNlIHtcbiAgICBhcHAudXNlKGFsbG93Q3Jvc3NEb21haW5Bc3luY0V4ZWN1dGUoYmFzZVBhdGgpKTtcbiAgfVxuICBhcHAudXNlKGZpeFB5dGhvbkNvbnRlbnRUeXBlKGJhc2VQYXRoKSk7XG4gIGFwcC51c2UoZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlfSkpO1xuICBhcHAudXNlKG1ldGhvZE92ZXJyaWRlKCkpO1xuICBhcHAudXNlKGNhdGNoNFhYSGFuZGxlcik7XG4gIGFwcC51c2UoY2F0Y2hBbGxIYW5kbGVyKTtcblxuICAvLyBtYWtlIHN1cmUgYXBwaXVtIG5ldmVyIGZhaWxzIGJlY2F1c2Ugb2YgYSBmaWxlIHNpemUgdXBsb2FkIGxpbWl0XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKHtsaW1pdDogJzFnYid9KSk7XG5cbiAgLy8gc2V0IHVwIHN0YXJ0IGxvZ2dpbmcgKHdoaWNoIGRlcGVuZHMgb24gYm9keVBhcnNlciBkb2luZyBpdHMgdGhpbmcpXG4gIGFwcC51c2Uoc3RhcnRMb2dGb3JtYXR0ZXIpO1xuXG4gIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbihhcHAsIGJhc2VQYXRoKTtcblxuICAvLyBkeW5hbWljIHJvdXRlcyBmb3IgdGVzdGluZywgZXRjLlxuICBhcHAuYWxsKCcvd2VsY29tZScsIHdlbGNvbWUpO1xuICBhcHAuYWxsKCcvdGVzdC9ndWluZWEtcGlnJywgZ3VpbmVhUGlnKTtcbiAgYXBwLmFsbCgnL3Rlc3QvZ3VpbmVhLXBpZy1zY3JvbGxhYmxlJywgZ3VpbmVhUGlnU2Nyb2xsYWJsZSk7XG4gIGFwcC5hbGwoJy90ZXN0L2d1aW5lYS1waWctYXBwLWJhbm5lcicsIGd1aW5lYVBpZ0FwcEJhbm5lcik7XG5cbiAgLy8gY2F0Y2ggdGhpcyBsYXN0LCBzbyBhbnl0aGluZyB0aGF0IGZhbGxzIHRocm91Z2ggaXMgNDA0ZWRcbiAgYXBwLnVzZShjYXRjaDQwNEhhbmRsZXIpO1xufVxuXG5leHBvcnQgeyBzZXJ2ZXIsIGNvbmZpZ3VyZVNlcnZlciwgbm9ybWFsaXplQmFzZVBhdGggfTtcbiJdLCJmaWxlIjoibGliL2V4cHJlc3Mvc2VydmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
