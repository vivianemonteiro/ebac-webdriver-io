"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatResponseValue = formatResponseValue;
exports.formatStatus = formatStatus;
exports.JSONWP_SUCCESS_STATUS_CODE = exports.W3C_ELEMENT_KEY = exports.MJSONWP_ELEMENT_KEY = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../basedriver/helpers");

var _2 = require(".");

const MJSONWP_ELEMENT_KEY = 'ELEMENT';
exports.MJSONWP_ELEMENT_KEY = MJSONWP_ELEMENT_KEY;
const W3C_ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf';
exports.W3C_ELEMENT_KEY = W3C_ELEMENT_KEY;
const JSONWP_SUCCESS_STATUS_CODE = 0;
exports.JSONWP_SUCCESS_STATUS_CODE = JSONWP_SUCCESS_STATUS_CODE;
const JSONWP_UNKNOWN_ERROR_STATUS_CODE = 13;

function formatResponseValue(resValue) {
  if (_lodash.default.isUndefined(resValue)) {
    return null;
  }

  return (0, _helpers.duplicateKeys)(resValue, MJSONWP_ELEMENT_KEY, W3C_ELEMENT_KEY);
}

function formatStatus(responseBody, responseCode = 200, protocol = null) {
  if (!_lodash.default.isPlainObject(responseBody)) {
    return responseBody;
  }

  const isError = _lodash.default.has(responseBody.value, 'error') || responseCode >= 400;

  if (protocol === _2.PROTOCOLS.MJSONWP && !_lodash.default.isInteger(responseBody.status) || !protocol && !_lodash.default.has(responseBody, 'status')) {
    responseBody.status = isError ? JSONWP_UNKNOWN_ERROR_STATUS_CODE : JSONWP_SUCCESS_STATUS_CODE;
  } else if (protocol === _2.PROTOCOLS.W3C && _lodash.default.has(responseBody, 'status')) {
    delete responseBody.status;
  }

  return responseBody;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbIk1KU09OV1BfRUxFTUVOVF9LRVkiLCJXM0NfRUxFTUVOVF9LRVkiLCJKU09OV1BfU1VDQ0VTU19TVEFUVVNfQ09ERSIsIkpTT05XUF9VTktOT1dOX0VSUk9SX1NUQVRVU19DT0RFIiwiZm9ybWF0UmVzcG9uc2VWYWx1ZSIsInJlc1ZhbHVlIiwiXyIsImlzVW5kZWZpbmVkIiwiZm9ybWF0U3RhdHVzIiwicmVzcG9uc2VCb2R5IiwicmVzcG9uc2VDb2RlIiwicHJvdG9jb2wiLCJpc1BsYWluT2JqZWN0IiwiaXNFcnJvciIsImhhcyIsInZhbHVlIiwiUFJPVE9DT0xTIiwiTUpTT05XUCIsImlzSW50ZWdlciIsInN0YXR1cyIsIlczQyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLG1CQUFtQixHQUFHLFNBQTVCOztBQUNBLE1BQU1DLGVBQWUsR0FBRyxxQ0FBeEI7O0FBQ0EsTUFBTUMsMEJBQTBCLEdBQUcsQ0FBbkM7O0FBQ0EsTUFBTUMsZ0NBQWdDLEdBQUcsRUFBekM7O0FBV0EsU0FBU0MsbUJBQVQsQ0FBOEJDLFFBQTlCLEVBQXdDO0FBQ3RDLE1BQUlDLGdCQUFFQyxXQUFGLENBQWNGLFFBQWQsQ0FBSixFQUE2QjtBQUUzQixXQUFPLElBQVA7QUFDRDs7QUFHRCxTQUFPLDRCQUFjQSxRQUFkLEVBQXdCTCxtQkFBeEIsRUFBNkNDLGVBQTdDLENBQVA7QUFDRDs7QUFhRCxTQUFTTyxZQUFULENBQXVCQyxZQUF2QixFQUFxQ0MsWUFBWSxHQUFHLEdBQXBELEVBQXlEQyxRQUFRLEdBQUcsSUFBcEUsRUFBMEU7QUFDeEUsTUFBSSxDQUFDTCxnQkFBRU0sYUFBRixDQUFnQkgsWUFBaEIsQ0FBTCxFQUFvQztBQUNsQyxXQUFPQSxZQUFQO0FBQ0Q7O0FBQ0QsUUFBTUksT0FBTyxHQUFHUCxnQkFBRVEsR0FBRixDQUFNTCxZQUFZLENBQUNNLEtBQW5CLEVBQTBCLE9BQTFCLEtBQXNDTCxZQUFZLElBQUksR0FBdEU7O0FBQ0EsTUFBS0MsUUFBUSxLQUFLSyxhQUFVQyxPQUF2QixJQUFrQyxDQUFDWCxnQkFBRVksU0FBRixDQUFZVCxZQUFZLENBQUNVLE1BQXpCLENBQXBDLElBQ0UsQ0FBQ1IsUUFBRCxJQUFhLENBQUNMLGdCQUFFUSxHQUFGLENBQU1MLFlBQU4sRUFBb0IsUUFBcEIsQ0FEcEIsRUFDb0Q7QUFDbERBLElBQUFBLFlBQVksQ0FBQ1UsTUFBYixHQUFzQk4sT0FBTyxHQUN6QlYsZ0NBRHlCLEdBRXpCRCwwQkFGSjtBQUdELEdBTEQsTUFLTyxJQUFJUyxRQUFRLEtBQUtLLGFBQVVJLEdBQXZCLElBQThCZCxnQkFBRVEsR0FBRixDQUFNTCxZQUFOLEVBQW9CLFFBQXBCLENBQWxDLEVBQWlFO0FBQ3RFLFdBQU9BLFlBQVksQ0FBQ1UsTUFBcEI7QUFDRDs7QUFDRCxTQUFPVixZQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZHVwbGljYXRlS2V5cyB9IGZyb20gJy4uL2Jhc2Vkcml2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBQUk9UT0NPTFMgfSBmcm9tICcuJztcblxuXG5jb25zdCBNSlNPTldQX0VMRU1FTlRfS0VZID0gJ0VMRU1FTlQnO1xuY29uc3QgVzNDX0VMRU1FTlRfS0VZID0gJ2VsZW1lbnQtNjA2Ni0xMWU0LWE1MmUtNGY3MzU0NjZjZWNmJztcbmNvbnN0IEpTT05XUF9TVUNDRVNTX1NUQVRVU19DT0RFID0gMDtcbmNvbnN0IEpTT05XUF9VTktOT1dOX0VSUk9SX1NUQVRVU19DT0RFID0gMTM7XG5cbi8qKlxuICogUHJlcHJvY2Vzc2VzIHRoZSByZXN1bHRpbmcgdmFsdWUgZm9yIEFQSSByZXNwb25zZXMsXG4gKiBzbyB0aGV5IGhhdmUga2V5cyBmb3IgYm90aCBXM0MgYW5kIEpTT05XUCBwcm90b2NvbHMuXG4gKiBUaGUgYXJndW1lbnQgdmFsdWUgaXMgTk9UIG11dGF0ZWRcbiAqXG4gKiBAcGFyYW0gez9PYmplY3R9IHJlc1ZhbHVlIFRoZSBhY3R1YWwgcmVzcG9uc2UgdmFsdWVcbiAqIEByZXR1cm5zIHs/T2JqZWN0fSBFaXRoZXIgbW9kaWZpZWQgdmFsdWUgb3IgdGhlIHNhbWUgb25lIGlmXG4gKiBub3RoaW5nIGhhcyBiZWVuIG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFJlc3BvbnNlVmFsdWUgKHJlc1ZhbHVlKSB7XG4gIGlmIChfLmlzVW5kZWZpbmVkKHJlc1ZhbHVlKSkge1xuICAgIC8vIGNvbnZlcnQgdW5kZWZpbmVkIHRvIG51bGxcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBJZiB0aGUgTUpTT05XUCBlbGVtZW50IGtleSBmb3JtYXQgKEVMRU1FTlQpIHdhcyBwcm92aWRlZCwgYWRkIGEgZHVwbGljYXRlIGtleSAoZWxlbWVudC02MDY2LTExZTQtYTUyZS00ZjczNTQ2NmNlY2YpXG4gIC8vIElmIHRoZSBXM0MgZWxlbWVudCBrZXkgZm9ybWF0IChlbGVtZW50LTYwNjYtMTFlNC1hNTJlLTRmNzM1NDY2Y2VjZikgd2FzIHByb3ZpZGVkLCBhZGQgYSBkdXBsaWNhdGUga2V5IChFTEVNRU5UKVxuICByZXR1cm4gZHVwbGljYXRlS2V5cyhyZXNWYWx1ZSwgTUpTT05XUF9FTEVNRU5UX0tFWSwgVzNDX0VMRU1FTlRfS0VZKTtcbn1cblxuLyoqXG4gKiBQcm9wZXJseSBmb3JtYXRzIHRoZSBzdGF0dXMgZm9yIEFQSSByZXNwb25zZXMsXG4gKiBzbyB0aGV5IGFyZSBjb3JyZWN0IGZvciBib3RoIFczQyBhbmQgSlNPTldQIHByb3RvY29scy5cbiAqIFRoaXMgbWV0aG9kIERPRVMgbXV0YXRlIHRoZSBgcmVzcG9uc2VCb2R5YCBhcmd1bWVudCBpZiBuZWVkZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2VCb2R5XG4gKiBAcGFyYW0ge251bWJlcn0gcmVzcG9uc2VDb2RlIHRoZSBIVFRQIHJlc3BvbnNlIGNvZGVcbiAqIEBwYXJhbSB7P3N0cmluZ30gcHJvdG9jb2wgVGhlIG5hbWUgb2YgdGhlIHByb3RvY29sLCBlaXRoZXJcbiAqIGBQUk9UT0NPTFMuVzNDYCBvciBgUFJPVE9DT0xTLk1KU09OV1BgXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZml4ZWQgcmVzcG9uc2UgYm9keVxuICovXG5mdW5jdGlvbiBmb3JtYXRTdGF0dXMgKHJlc3BvbnNlQm9keSwgcmVzcG9uc2VDb2RlID0gMjAwLCBwcm90b2NvbCA9IG51bGwpIHtcbiAgaWYgKCFfLmlzUGxhaW5PYmplY3QocmVzcG9uc2VCb2R5KSkge1xuICAgIHJldHVybiByZXNwb25zZUJvZHk7XG4gIH1cbiAgY29uc3QgaXNFcnJvciA9IF8uaGFzKHJlc3BvbnNlQm9keS52YWx1ZSwgJ2Vycm9yJykgfHwgcmVzcG9uc2VDb2RlID49IDQwMDtcbiAgaWYgKChwcm90b2NvbCA9PT0gUFJPVE9DT0xTLk1KU09OV1AgJiYgIV8uaXNJbnRlZ2VyKHJlc3BvbnNlQm9keS5zdGF0dXMpKVxuICAgIHx8ICghcHJvdG9jb2wgJiYgIV8uaGFzKHJlc3BvbnNlQm9keSwgJ3N0YXR1cycpKSkge1xuICAgIHJlc3BvbnNlQm9keS5zdGF0dXMgPSBpc0Vycm9yXG4gICAgICA/IEpTT05XUF9VTktOT1dOX0VSUk9SX1NUQVRVU19DT0RFXG4gICAgICA6IEpTT05XUF9TVUNDRVNTX1NUQVRVU19DT0RFO1xuICB9IGVsc2UgaWYgKHByb3RvY29sID09PSBQUk9UT0NPTFMuVzNDICYmIF8uaGFzKHJlc3BvbnNlQm9keSwgJ3N0YXR1cycpKSB7XG4gICAgZGVsZXRlIHJlc3BvbnNlQm9keS5zdGF0dXM7XG4gIH1cbiAgcmV0dXJuIHJlc3BvbnNlQm9keTtcbn1cblxuXG5leHBvcnQge1xuICBNSlNPTldQX0VMRU1FTlRfS0VZLCBXM0NfRUxFTUVOVF9LRVksIGZvcm1hdFJlc3BvbnNlVmFsdWUsXG4gIEpTT05XUF9TVUNDRVNTX1NUQVRVU19DT0RFLCBmb3JtYXRTdGF0dXMsXG59O1xuIl0sImZpbGUiOiJsaWIvcHJvdG9jb2wvaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
