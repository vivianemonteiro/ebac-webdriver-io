"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _protocol = require("../../protocol");

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _capabilities = require("../capabilities");

let commands = {};

commands.createSession = async function createSession(jsonwpDesiredCapabilities, jsonwpRequiredCaps, w3cCapabilities) {
  if (this.sessionId !== null) {
    throw new _protocol.errors.SessionNotCreatedError('Cannot create a new session ' + 'while one is in progress');
  }

  _logger.default.debug();

  let caps;

  if (w3cCapabilities) {
    this.setProtocolW3C();

    if (jsonwpDesiredCapabilities) {
      _logger.default.debug(`W3C capabilities and MJSONWP desired capabilities were provided`);
    }

    if (jsonwpDesiredCapabilities && !_lodash.default.isPlainObject(w3cCapabilities)) {
      if (!_lodash.default.isEmpty(w3cCapabilities)) {
        _logger.default.warn(`Expected W3C "capabilities" to be a JSON Object but was provided with: ${JSON.stringify(w3cCapabilities)}`);
      }

      _logger.default.warn(`Falling back to MJSONWP desired capabilities`);

      this.setProtocolMJSONWP();
      caps = jsonwpDesiredCapabilities;
    } else {
      _logger.default.debug(`Creating session with W3C capabilities: ${JSON.stringify(w3cCapabilities, null, 2)}`);

      caps = (0, _capabilities.processCapabilities)(w3cCapabilities, this.desiredCapConstraints, this.shouldValidateCaps);
    }
  } else {
    this.setProtocolMJSONWP();

    _logger.default.debug(`Creating session with MJSONWP desired capabilities: ${JSON.stringify(jsonwpDesiredCapabilities, null, 2)}`);

    caps = jsonwpDesiredCapabilities || {};
  }

  caps = fixCaps(caps, this.desiredCapConstraints);
  this.validateDesiredCaps(caps);
  this.sessionId = _uuidJs.default.create().hex;
  this.caps = caps;
  this.opts = _lodash.default.cloneDeep(this.initialOpts);
  Object.assign(this.opts, this.caps);

  if (this.opts.noReset && this.opts.fullReset) {
    throw new Error("The 'noReset' and 'fullReset' capabilities are mutually " + 'exclusive and should not both be set to true. You ' + "probably meant to just use 'fullReset' on its own");
  }

  if (this.opts.noReset === true) {
    this.opts.fullReset = false;
  }

  if (this.opts.fullReset === true) {
    this.opts.noReset = false;
  }

  this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
  this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

  if (typeof this.opts.app === 'string' && this.opts.app.trim() === '') {
    this.opts.app = null;
  }

  if (!_lodash.default.isUndefined(this.caps.newCommandTimeout)) {
    this.newCommandTimeoutMs = this.caps.newCommandTimeout * 1000;
  }

  this.resetOnUnexpectedShutdown();

  _logger.default.info(`Session created with session id: ${this.sessionId}`);

  return [this.sessionId, caps];
};

commands.getSessions = async function getSessions() {
  let ret = [];

  if (this.sessionId) {
    ret.push({
      id: this.sessionId,
      capabilities: this.caps
    });
  }

  return ret;
};

commands.getSession = async function getSession() {
  if (this.caps.eventTimings) {
    return Object.assign({}, this.caps, {
      events: this.eventHistory
    });
  }

  return this.caps;
};

commands.deleteSession = async function deleteSession() {
  this.clearNewCommandTimeout();

  if (this.isCommandsQueueEnabled && this.commandsQueueGuard.isBusy()) {
    for (const key of _lodash.default.keys(this.commandsQueueGuard.queues)) {
      this.commandsQueueGuard.queues[key] = [];
    }
  }

  this.sessionId = null;
};

function fixCaps(originalCaps, desiredCapConstraints = {}) {
  let caps = _lodash.default.clone(originalCaps);

  let booleanCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isBoolean === true));

  for (let cap of booleanCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.toLowerCase();

      if (value === 'true' || value === 'false') {
        _logger.default.warn(`Capability '${cap}' changed from string to boolean. This may cause unexpected behavior`);

        caps[cap] = value === 'true';
      }
    }
  }

  let intCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isNumber === true));

  for (let cap of intCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value) && !isNaN(value)) {
      value = value.trim();
      let newValue = parseInt(value, 10);

      if (value !== `${newValue}`) {
        newValue = parseFloat(value);
      }

      _logger.default.warn(`Capability '${cap}' changed from string ('${value}') to integer (${newValue}). This may cause unexpected behavior`);

      caps[cap] = newValue;
    }
  }

  return caps;
}

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
