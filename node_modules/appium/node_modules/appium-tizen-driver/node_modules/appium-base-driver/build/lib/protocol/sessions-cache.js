"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _appiumSupport = require("appium-support");

var _ = require(".");

const GENERIC_PROTOCOL = 'GENERIC';

const mjsonwpLog = _appiumSupport.logger.getLogger('MJSONWP');

const w3cLog = _appiumSupport.logger.getLogger('W3C');

const genericProtocolLog = _appiumSupport.logger.getLogger(GENERIC_PROTOCOL);

class SessionsCache {
  constructor(max) {
    this._cache = new _lruCache.default({
      max
    });
  }

  getLogger(sessionId, protocol) {
    if (sessionId) {
      if (this._cache.has(sessionId)) {
        const value = this._cache.get(sessionId);

        if (value.logger) {
          return value.logger;
        }

        protocol = protocol || value.protocol;
      }

      return _appiumSupport.logger.getLogger(`${protocol || GENERIC_PROTOCOL} ` + `(${sessionId.substring(0, Math.min(sessionId.length, 8))})`);
    }

    switch (protocol) {
      case _.PROTOCOLS.W3C:
        return w3cLog;

      case _.PROTOCOLS.MJSONWP:
        return mjsonwpLog;

      default:
        return genericProtocolLog;
    }
  }

  getProtocol(sessionId) {
    return (this._cache.get(sessionId) || {}).protocol;
  }

  putSession(sessionId, value) {
    if (sessionId && value) {
      this._cache.set(sessionId, {
        protocol: value,
        logger: this.getLogger(sessionId, value)
      });
    }

    return value;
  }

  resetLogger(sessionId) {
    if (this._cache.has(sessionId)) {
      this._cache.get(sessionId).logger = null;
    }
  }

}

const SESSIONS_CACHE = new SessionsCache(100);
var _default = SESSIONS_CACHE;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9zZXNzaW9ucy1jYWNoZS5qcyJdLCJuYW1lcyI6WyJHRU5FUklDX1BST1RPQ09MIiwibWpzb253cExvZyIsImxvZ2dlciIsImdldExvZ2dlciIsInczY0xvZyIsImdlbmVyaWNQcm90b2NvbExvZyIsIlNlc3Npb25zQ2FjaGUiLCJjb25zdHJ1Y3RvciIsIm1heCIsIl9jYWNoZSIsIkxSVSIsInNlc3Npb25JZCIsInByb3RvY29sIiwiaGFzIiwidmFsdWUiLCJnZXQiLCJzdWJzdHJpbmciLCJNYXRoIiwibWluIiwibGVuZ3RoIiwiUFJPVE9DT0xTIiwiVzNDIiwiTUpTT05XUCIsImdldFByb3RvY29sIiwicHV0U2Vzc2lvbiIsInNldCIsInJlc2V0TG9nZ2VyIiwiU0VTU0lPTlNfQ0FDSEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZ0JBQWdCLEdBQUcsU0FBekI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixTQUFqQixDQUFuQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdGLHNCQUFPQyxTQUFQLENBQWlCLEtBQWpCLENBQWY7O0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUdILHNCQUFPQyxTQUFQLENBQWlCSCxnQkFBakIsQ0FBM0I7O0FBR0EsTUFBTU0sYUFBTixDQUFvQjtBQUNsQkMsRUFBQUEsV0FBVyxDQUFFQyxHQUFGLEVBQU87QUFDaEIsU0FBS0MsTUFBTCxHQUFjLElBQUlDLGlCQUFKLENBQVE7QUFBRUYsTUFBQUE7QUFBRixLQUFSLENBQWQ7QUFDRDs7QUFFREwsRUFBQUEsU0FBUyxDQUFFUSxTQUFGLEVBQWFDLFFBQWIsRUFBdUI7QUFDOUIsUUFBSUQsU0FBSixFQUFlO0FBQ2IsVUFBSSxLQUFLRixNQUFMLENBQVlJLEdBQVosQ0FBZ0JGLFNBQWhCLENBQUosRUFBZ0M7QUFDOUIsY0FBTUcsS0FBSyxHQUFHLEtBQUtMLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsQ0FBZDs7QUFDQSxZQUFJRyxLQUFLLENBQUNaLE1BQVYsRUFBa0I7QUFDaEIsaUJBQU9ZLEtBQUssQ0FBQ1osTUFBYjtBQUNEOztBQUNEVSxRQUFBQSxRQUFRLEdBQUdBLFFBQVEsSUFBSUUsS0FBSyxDQUFDRixRQUE3QjtBQUNEOztBQUlELGFBQU9WLHNCQUFPQyxTQUFQLENBQWtCLEdBQUVTLFFBQVEsSUFBSVosZ0JBQWlCLEdBQWhDLEdBQ3JCLElBQUdXLFNBQVMsQ0FBQ0ssU0FBVixDQUFvQixDQUFwQixFQUF1QkMsSUFBSSxDQUFDQyxHQUFMLENBQVNQLFNBQVMsQ0FBQ1EsTUFBbkIsRUFBMkIsQ0FBM0IsQ0FBdkIsQ0FBc0QsR0FEckQsQ0FBUDtBQUVEOztBQUdELFlBQVFQLFFBQVI7QUFDRSxXQUFLUSxZQUFVQyxHQUFmO0FBQ0UsZUFBT2pCLE1BQVA7O0FBQ0YsV0FBS2dCLFlBQVVFLE9BQWY7QUFDRSxlQUFPckIsVUFBUDs7QUFDRjtBQUNFLGVBQU9JLGtCQUFQO0FBTko7QUFRRDs7QUFFRGtCLEVBQUFBLFdBQVcsQ0FBRVosU0FBRixFQUFhO0FBQ3RCLFdBQU8sQ0FBQyxLQUFLRixNQUFMLENBQVlNLEdBQVosQ0FBZ0JKLFNBQWhCLEtBQThCLEVBQS9CLEVBQW1DQyxRQUExQztBQUNEOztBQUVEWSxFQUFBQSxVQUFVLENBQUViLFNBQUYsRUFBYUcsS0FBYixFQUFvQjtBQUM1QixRQUFJSCxTQUFTLElBQUlHLEtBQWpCLEVBQXdCO0FBQ3RCLFdBQUtMLE1BQUwsQ0FBWWdCLEdBQVosQ0FBZ0JkLFNBQWhCLEVBQTJCO0FBQ3pCQyxRQUFBQSxRQUFRLEVBQUVFLEtBRGU7QUFLekJaLFFBQUFBLE1BQU0sRUFBRSxLQUFLQyxTQUFMLENBQWVRLFNBQWYsRUFBMEJHLEtBQTFCO0FBTGlCLE9BQTNCO0FBT0Q7O0FBQ0QsV0FBT0EsS0FBUDtBQUNEOztBQUVEWSxFQUFBQSxXQUFXLENBQUVmLFNBQUYsRUFBYTtBQUN0QixRQUFJLEtBQUtGLE1BQUwsQ0FBWUksR0FBWixDQUFnQkYsU0FBaEIsQ0FBSixFQUFnQztBQUM5QixXQUFLRixNQUFMLENBQVlNLEdBQVosQ0FBZ0JKLFNBQWhCLEVBQTJCVCxNQUEzQixHQUFvQyxJQUFwQztBQUNEO0FBQ0Y7O0FBckRpQjs7QUE0RHBCLE1BQU15QixjQUFjLEdBQUcsSUFBSXJCLGFBQUosQ0FBa0IsR0FBbEIsQ0FBdkI7ZUFFZXFCLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTFJVIGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBQUk9UT0NPTFMgfSBmcm9tICcuJztcblxuXG5jb25zdCBHRU5FUklDX1BST1RPQ09MID0gJ0dFTkVSSUMnO1xuY29uc3QgbWpzb253cExvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ01KU09OV1AnKTtcbmNvbnN0IHczY0xvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1czQycpO1xuY29uc3QgZ2VuZXJpY1Byb3RvY29sTG9nID0gbG9nZ2VyLmdldExvZ2dlcihHRU5FUklDX1BST1RPQ09MKTtcblxuXG5jbGFzcyBTZXNzaW9uc0NhY2hlIHtcbiAgY29uc3RydWN0b3IgKG1heCkge1xuICAgIHRoaXMuX2NhY2hlID0gbmV3IExSVSh7IG1heCB9KTtcbiAgfVxuXG4gIGdldExvZ2dlciAoc2Vzc2lvbklkLCBwcm90b2NvbCkge1xuICAgIGlmIChzZXNzaW9uSWQpIHtcbiAgICAgIGlmICh0aGlzLl9jYWNoZS5oYXMoc2Vzc2lvbklkKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2NhY2hlLmdldChzZXNzaW9uSWQpO1xuICAgICAgICBpZiAodmFsdWUubG9nZ2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmxvZ2dlcjtcbiAgICAgICAgfVxuICAgICAgICBwcm90b2NvbCA9IHByb3RvY29sIHx8IHZhbHVlLnByb3RvY29sO1xuICAgICAgfVxuICAgICAgLy8gQWx3YXlzIGNyZWF0ZSBhIG5ldyBsb2dnZXIgaW5zdGFuY2UgZm9yIGlkc1xuICAgICAgLy8gdGhhdCBhcmUgbm90IGluIHRoZSBjdXJyZW50IHNlc3Npb25zIGxpc3QsXG4gICAgICAvLyBzbyB3ZSBjYW4gc3RpbGwgc2VlIHN1Y2ggaWRzIGFzIHByZWZpeGVzXG4gICAgICByZXR1cm4gbG9nZ2VyLmdldExvZ2dlcihgJHtwcm90b2NvbCB8fCBHRU5FUklDX1BST1RPQ09MfSBgICtcbiAgICAgICAgYCgke3Nlc3Npb25JZC5zdWJzdHJpbmcoMCwgTWF0aC5taW4oc2Vzc2lvbklkLmxlbmd0aCwgOCkpfSlgKTtcbiAgICB9XG5cbiAgICAvLyBGYWxsIGJhY2sgdG8gcHJvdG9jb2wgbmFtZS1vbmx5IGxvZ2dlciBpZiBzZXNzaW9uIGlkIGlzIHVua25vd25cbiAgICBzd2l0Y2ggKHByb3RvY29sKSB7XG4gICAgICBjYXNlIFBST1RPQ09MUy5XM0M6XG4gICAgICAgIHJldHVybiB3M2NMb2c7XG4gICAgICBjYXNlIFBST1RPQ09MUy5NSlNPTldQOlxuICAgICAgICByZXR1cm4gbWpzb253cExvZztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBnZW5lcmljUHJvdG9jb2xMb2c7XG4gICAgfVxuICB9XG5cbiAgZ2V0UHJvdG9jb2wgKHNlc3Npb25JZCkge1xuICAgIHJldHVybiAodGhpcy5fY2FjaGUuZ2V0KHNlc3Npb25JZCkgfHwge30pLnByb3RvY29sO1xuICB9XG5cbiAgcHV0U2Vzc2lvbiAoc2Vzc2lvbklkLCB2YWx1ZSkge1xuICAgIGlmIChzZXNzaW9uSWQgJiYgdmFsdWUpIHtcbiAgICAgIHRoaXMuX2NhY2hlLnNldChzZXNzaW9uSWQsIHtcbiAgICAgICAgcHJvdG9jb2w6IHZhbHVlLFxuICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNhY2hlIHRoZSBsb2dnZXIgaW5zdGFuY2UgZm9yIGVhY2ggcmFuZG9tIHNlc3Npb24gaWQgaW4gdGhlIGNhY2hlXG4gICAgICAgIC8vIGluIG9yZGVyIHRvIHNhdmUgbWVtb3J5LiBJbnN0ZWFkIHdlIG9ubHkgY2FjaGUgbG9nZ2VycyBmb3IgdmFsaWQgaWRzIHRoYXRcbiAgICAgICAgLy8gYXJlIHJldHVybmVkIGJ5IGBjcmVhdGVTZXNzaW9uYCBjYWxsIGFuZCByZXNldCB0aGVtIGFmdGVyIGBkZWxldGVTZXNzaW9uYCBpcyBjYWxsZWRcbiAgICAgICAgbG9nZ2VyOiB0aGlzLmdldExvZ2dlcihzZXNzaW9uSWQsIHZhbHVlKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXNldExvZ2dlciAoc2Vzc2lvbklkKSB7XG4gICAgaWYgKHRoaXMuX2NhY2hlLmhhcyhzZXNzaW9uSWQpKSB7XG4gICAgICB0aGlzLl9jYWNoZS5nZXQoc2Vzc2lvbklkKS5sb2dnZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIGNhY2hlIGlzIHVzZWZ1bCB3aGVuIGEgc2Vzc2lvbiBnZXRzIHRlcm1pbmF0ZWRcbi8vIGFuZCByZW1vdmVkIGZyb20gdGhlIHNlc3Npb25zIGxpc3QgaW4gdGhlIHVtYnJlbGxhIGRyaXZlcixcbi8vIGJ1dCB0aGUgY2xpZW50IHN0aWxsIHRyaWVzIHRvIHNlbmQgYSBjb21tYW5kIHRvIHRoaXMgc2Vzc2lvbiBpZC5cbi8vIFNvIHdlIGtub3cgaG93IHRvIHByb3Blcmx5IHdyYXAgdGhlIGVycm9yIG1lc3NhZ2UgZm9yIGl0XG5jb25zdCBTRVNTSU9OU19DQUNIRSA9IG5ldyBTZXNzaW9uc0NhY2hlKDEwMCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNFU1NJT05TX0NBQ0hFO1xuIl0sImZpbGUiOiJsaWIvcHJvdG9jb2wvc2Vzc2lvbnMtY2FjaGUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
