"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _portscanner = require("portscanner");

var _child_process = require("child_process");

const log = _appiumSupport.logger.getLogger('SafariDriverServer');

const SD_BINARY = 'safaridriver';
const STARTUP_TIMEOUT = 10000;
const SAFARI_PORT_RANGE = [5100, 5200];

const SAFARI_SERVER_GUARD = _appiumSupport.util.getLockFileGuard(_path.default.resolve(_os.default.tmpdir(), 'safari_server_guard.lock'), {
  timeout: 5,
  tryRecovery: true
});

class SafariProxy extends _appiumBaseDriver.JWProxy {
  async proxyCommand(url, method, body = null) {
    if (this.didProcessExit) {
      throw new _appiumBaseDriver.errors.InvalidContextError(`'${method} ${url}' cannot be proxied to Safari Driver server because ` + 'the process is not running (probably crashed). Check the server log for more details');
    }

    return await super.proxyCommand(url, method, body);
  }

}

class SafariDriverProcess {
  constructor() {
    this.port = null;
    this.proc = null;
  }

  get isRunning() {
    var _this$proc;

    return !!((_this$proc = this.proc) === null || _this$proc === void 0 ? void 0 : _this$proc.isRunning);
  }

  async init() {
    await SAFARI_SERVER_GUARD(async () => {
      if (this.isRunning) {
        return;
      }

      const [startPort, endPort] = SAFARI_PORT_RANGE;

      try {
        this.port = await (0, _portscanner.findAPortNotInUse)(startPort, endPort);
      } catch (e) {
        throw new Error(`Cannot find any free port in range ${startPort}..${endPort}. ` + `Double check the processes that are locking ports within this range and terminate ` + `these which are not needed anymore`);
      }

      let safariBin;

      try {
        safariBin = await _appiumSupport.fs.which(SD_BINARY);
      } catch (e) {
        throw new Error(`${SD_BINARY} binary cannot be found in PATH. ` + `Please make sure it is present on your system`);
      }

      this.proc = new _teen_process.SubProcess(safariBin, ['-p', this.port, '--diagnose']);
      this.proc.on('output', (stdout, stderr) => {
        const line = stdout || stderr;
        log.debug(`[${SD_BINARY}] ${line}`);
      });
      this.proc.on('exit', (code, signal) => {
        log.info(`${SD_BINARY} has exited with code ${code}, signal ${signal}`);
      });
      log.info(`Starting '${safariBin}' on port ${this.port}`);
      await this.proc.start(0);
    });
  }

  async kill() {
    if (this.isRunning) {
      try {
        await this.proc.stop('SIGKILL');
      } catch (ign) {}
    }
  }

}

const SAFARI_DRIVER_PROCESS = new SafariDriverProcess();
process.once('exit', () => {
  if (SAFARI_DRIVER_PROCESS.isRunning) {
    try {
      (0, _child_process.execSync)(`kill ${SAFARI_DRIVER_PROCESS.proc.pid}`);
    } catch (ign) {}
  }
});

class SafariDriverServer {
  constructor() {
    this.proxy = null;
  }

  get isRunning() {
    return !!SAFARI_DRIVER_PROCESS.isRunning;
  }

  async start(caps) {
    await SAFARI_DRIVER_PROCESS.init();
    this.proxy = new SafariProxy({
      server: '127.0.0.1',
      port: SAFARI_DRIVER_PROCESS.port,
      base: '',
      keepAlive: true
    });
    this.proxy.didProcessExit = false;
    SAFARI_DRIVER_PROCESS.proc.on('exit', () => {
      this.proxy.didProcessExit = true;
    });

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        try {
          await this.proxy.command('/status', 'GET');
          return true;
        } catch (err) {
          if (this.proxy.didProcessExit) {
            throw new Error(err.message);
          }

          return false;
        }
      }, {
        waitMs: STARTUP_TIMEOUT,
        intervalMs: 1000
      });
    } catch (e) {
      if (/Condition unmet/.test(e.message)) {
        if (SAFARI_DRIVER_PROCESS.isRunning) {
          await SAFARI_DRIVER_PROCESS.kill();
        }

        throw new Error(`Safari Driver server is not listening within ${STARTUP_TIMEOUT}ms timeout. ` + `Make sure it has been executed manually at least once with '--enable' command line argument. ` + `Check the server log for more details`);
      }

      throw e;
    }

    await this.proxy.command('/session', 'POST', {
      capabilities: {
        firstMatch: [{}],
        alwaysMatch: caps
      }
    });
  }

  async stop() {
    var _this$proxy;

    if (!this.isRunning) {
      log.info(`${SD_BINARY} session cannot be stopped, because the server is not running`);
      return;
    }

    if ((_this$proxy = this.proxy) === null || _this$proxy === void 0 ? void 0 : _this$proxy.sessionId) {
      try {
        await this.proxy.command(`/session/${this.proxy.sessionId}`, 'DELETE');
      } catch (e) {
        log.info(`${SD_BINARY} session cannot be deleted. Original error: ${e.message}`);
      }
    }
  }

}

var _default = SafariDriverServer;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
