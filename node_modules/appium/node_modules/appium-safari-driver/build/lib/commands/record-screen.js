"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("../logger"));

var _nodeSimctl = _interopRequireDefault(require("node-simctl"));

const commands = {};
const STARTUP_INTERVAL_MS = 300;
const STARTUP_TIMEOUT_MS = 10 * 1000;
const DEFAULT_TIME_LIMIT_MS = 60 * 10 * 1000;
const PROCESS_SHUTDOWN_TIMEOUT_MS = 10 * 1000;
const DEFAULT_EXT = '.mp4';

async function uploadRecordedMedia(localFile, remotePath = null, uploadOptions = {}) {
  if (_lodash.default.isEmpty(remotePath)) {
    const {
      size
    } = await _appiumSupport.fs.stat(localFile);

    _logger.default.debug(`The size of the resulting screen recording is ${_appiumSupport.util.toReadableSizeString(size)}`);

    return (await _appiumSupport.util.toInMemoryBase64(localFile)).toString();
  }

  const {
    user,
    pass,
    method,
    headers,
    fileFieldName,
    formFields
  } = uploadOptions;
  const options = {
    method: method || 'PUT',
    headers,
    fileFieldName,
    formFields
  };

  if (user && pass) {
    options.auth = {
      user,
      pass
    };
  }

  await _appiumSupport.net.uploadFile(localFile, remotePath, options);
  return '';
}

const VIDEO_FILES = new Set();
process.on('exit', () => {
  for (const videoFile of VIDEO_FILES) {
    try {
      _appiumSupport.fs.rimrafSync(videoFile);
    } catch (ign) {}
  }
});

class ScreenRecorder {
  constructor(udid, videoPath, opts = {}) {
    this._process = null;
    this._udid = udid;
    this._videoPath = videoPath;
    this._codec = opts.codec;
    this._display = opts.display;
    this._mask = opts.mask;
    this._timeLimitMs = opts.timeLimit > 0 ? opts.timeLimit * 1000 : DEFAULT_TIME_LIMIT_MS;
    this._timer = null;
  }

  async getVideoPath() {
    if (await _appiumSupport.fs.exists(this._videoPath)) {
      VIDEO_FILES.add(this._videoPath);
      return this._videoPath;
    }

    return '';
  }

  get isRunning() {
    var _this$_process;

    return !!((_this$_process = this._process) === null || _this$_process === void 0 ? void 0 : _this$_process.isRunning);
  }

  async _enforceTermination() {
    if (this.isRunning) {
      _logger.default.debug('Force-stopping the currently running video recording');

      try {
        await this._process.stop('SIGKILL');
      } catch (ign) {}
    }

    this._process = null;
    const videoPath = await this.getVideoPath();

    if (videoPath) {
      await _appiumSupport.fs.rimraf(videoPath);
      VIDEO_FILES.delete(videoPath);
    }

    return '';
  }

  async start() {
    const args = [this._udid, 'recordVideo'];

    if (this._display) {
      args.push('--display', this._display);
    }

    if (this._codec) {
      args.push('--codec', this._codec);
    }

    if (this._mask) {
      args.push('--mask', this._mask);
    }

    args.push('--force', this._videoPath);
    this._process = await new _nodeSimctl.default().exec('io', {
      args,
      asynchronous: true
    });

    _logger.default.debug(`Starting video recording with arguments: ${_appiumSupport.util.quote(args)}`);

    this._process.on('output', (stdout, stderr) => {
      const line = _lodash.default.trim(stdout || stderr);

      if (line) {
        _logger.default.debug(`[recordVideo@${this._udid.substring(0, 8)}] ${line}`);
      }
    });

    this._process.once('exit', async (code, signal) => {
      this._process = null;

      if (code === 0) {
        _logger.default.debug('Screen recording exited without errors');
      } else {
        await this._enforceTermination();

        _logger.default.warn(`Screen recording exited with error code ${code}, signal ${signal}`);
      }
    });

    await this._process.start(0);

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (!this.isRunning) {
          throw new Error();
        }

        return !!(await this.getVideoPath());
      }, {
        waitMs: STARTUP_TIMEOUT_MS,
        intervalMs: STARTUP_INTERVAL_MS
      });
    } catch (e) {
      await this._enforceTermination();

      _logger.default.errorAndThrow(`The expected screen record file '${this._videoPath}' does not exist after ${STARTUP_TIMEOUT_MS}ms. ` + `Check the server log for more details`);
    }

    this._timer = setTimeout(async () => {
      if (this.isRunning) {
        try {
          await this.stop();
        } catch (e) {
          _logger.default.error(e);
        }
      }
    }, this._timeLimitMs);

    _logger.default.info(`The video recording has started. Will timeout in ${this._timeLimitMs}ms`);
  }

  async stop(force = false) {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }

    if (force) {
      return await this._enforceTermination();
    }

    if (!this.isRunning) {
      _logger.default.debug('Screen recording is not running. Returning the recently recorded video');

      return await this.getVideoPath();
    }

    try {
      await this._process.stop('SIGINT', PROCESS_SHUTDOWN_TIMEOUT_MS);
    } catch (e) {
      await this._enforceTermination();
      throw new Error(`Screen recording has failed to stop after ${PROCESS_SHUTDOWN_TIMEOUT_MS}ms`);
    }

    return await this.getVideoPath();
  }

}

async function extractSimulatorUdid(caps) {
  if (caps['safari:useSimulator'] === false) {
    return null;
  }

  const allDevices = _lodash.default.flatMap(_lodash.default.values(await new _nodeSimctl.default().getDevices(null, 'iOS')));

  for (const {
    name,
    udid,
    state,
    sdk
  } of allDevices) {
    if (state !== 'Booted') {
      continue;
    }

    if (_lodash.default.toLower(caps['safari:deviceUDID']) === _lodash.default.toLower(udid)) {
      return udid;
    }

    if (_lodash.default.toLower(caps['safari:deviceName']) === _lodash.default.toLower(name) && (caps['safari:platformVersion'] && caps['safari:platformVersion'] === sdk || !caps['safari:platformVersion'])) {
      return udid;
    }
  }

  return null;
}

commands.startRecordingScreen = async function startRecordingScreen(options = {}) {
  var _this$_screenRecorder;

  const {
    timeLimit,
    codec,
    display,
    mask,
    forceRestart = true
  } = options;

  if ((_this$_screenRecorder = this._screenRecorder) === null || _this$_screenRecorder === void 0 ? void 0 : _this$_screenRecorder.isRunning) {
    _logger.default.info('The screen recording is already running');

    if (!forceRestart) {
      _logger.default.info('Doing nothing');

      return;
    }

    _logger.default.info('Forcing the active screen recording to stop');

    await this._screenRecorder.stop(true);
  }

  this._screenRecorder = null;
  const udid = await extractSimulatorUdid(this.caps);

  if (!udid) {
    throw new Error('Cannot determine Simulator UDID to record the video from. ' + 'Double check your session capabilities');
  }

  const videoPath = await _appiumSupport.tempDir.path({
    prefix: _appiumSupport.util.uuidV4().substring(0, 8),
    suffix: DEFAULT_EXT
  });
  this._screenRecorder = new ScreenRecorder(udid, videoPath, {
    timeLimit: parseInt(timeLimit, 10),
    codec,
    display,
    mask
  });

  try {
    await this._screenRecorder.start();
  } catch (e) {
    this._screenRecorder = null;
    throw e;
  }
};

commands.stopRecordingScreen = async function stopRecordingScreen(options = {}) {
  if (!this._screenRecorder) {
    _logger.default.info('No screen recording has been started. Doing nothing');

    return '';
  }

  _logger.default.debug('Retrieving the resulting video data');

  const videoPath = await this._screenRecorder.stop();

  if (!videoPath) {
    _logger.default.info('No video data is found. Returning an empty string');

    return '';
  }

  return await uploadRecordedMedia(videoPath, options.remotePath, options);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
