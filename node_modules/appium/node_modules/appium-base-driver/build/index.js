"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DEFAULT_BASE_PATH", {
  enumerable: true,
  get: function () {
    return _constants.DEFAULT_BASE_PATH;
  }
});
Object.defineProperty(exports, "PROTOCOLS", {
  enumerable: true,
  get: function () {
    return _constants.PROTOCOLS;
  }
});
exports.DEFAULT_WS_PATHNAME_PREFIX = exports.validateCaps = exports.isStandardCap = exports.processCapabilities = exports.getSummaryByCode = exports.statusCodes = exports.JWProxy = exports.server = exports.STATIC_DIR = exports.normalizeBasePath = exports.isSessionCommand = exports.NO_SESSION_ID_COMMANDS = exports.routeToCommandName = exports.METHOD_MAP = exports.ALL_COMMANDS = exports.determineProtocol = exports.errorFromW3CJsonCode = exports.errorFromCode = exports.errorFromMJSONWPStatusCode = exports.isErrorType = exports.errors = exports.routeConfiguringFunction = exports.Protocol = exports.default = exports.BASEDRIVER_HANDLED_SETTINGS = exports.ImageElement = exports.DeviceSettings = exports.BaseDriver = void 0;

require("source-map-support/register");

var driver = _interopRequireWildcard(require("./lib/basedriver/driver"));

var image = _interopRequireWildcard(require("./lib/basedriver/image-element"));

var deviceSettings = _interopRequireWildcard(require("./lib/basedriver/device-settings"));

var protocol = _interopRequireWildcard(require("./lib/protocol"));

var _constants = require("./lib/constants");

var staticIndex = _interopRequireWildcard(require("./lib/express/static"));

var serverIndex = _interopRequireWildcard(require("./lib/express/server"));

var proxyIndex = _interopRequireWildcard(require("./lib/jsonwp-proxy/proxy"));

var statusIndex = _interopRequireWildcard(require("./lib/jsonwp-status/status"));

var caps = _interopRequireWildcard(require("./lib/basedriver/capabilities"));

var ws = _interopRequireWildcard(require("./lib/express/websocket"));

const {
  BaseDriver
} = driver;
exports.BaseDriver = BaseDriver;
const {
  ImageElement
} = image;
exports.ImageElement = ImageElement;
const {
  DeviceSettings,
  BASEDRIVER_HANDLED_SETTINGS
} = deviceSettings;
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;
exports.DeviceSettings = DeviceSettings;
var _default = BaseDriver;
exports.default = _default;
const {
  Protocol,
  routeConfiguringFunction,
  errors,
  isErrorType,
  errorFromMJSONWPStatusCode,
  errorFromW3CJsonCode,
  ALL_COMMANDS,
  METHOD_MAP,
  routeToCommandName,
  NO_SESSION_ID_COMMANDS,
  isSessionCommand,
  normalizeBasePath,
  determineProtocol
} = protocol;
exports.determineProtocol = determineProtocol;
exports.normalizeBasePath = normalizeBasePath;
exports.isSessionCommand = isSessionCommand;
exports.NO_SESSION_ID_COMMANDS = NO_SESSION_ID_COMMANDS;
exports.routeToCommandName = routeToCommandName;
exports.METHOD_MAP = METHOD_MAP;
exports.ALL_COMMANDS = ALL_COMMANDS;
exports.errorFromW3CJsonCode = errorFromW3CJsonCode;
exports.errorFromCode = exports.errorFromMJSONWPStatusCode = errorFromMJSONWPStatusCode;
exports.isErrorType = isErrorType;
exports.errors = errors;
exports.routeConfiguringFunction = routeConfiguringFunction;
exports.Protocol = Protocol;
const {
  STATIC_DIR
} = staticIndex;
exports.STATIC_DIR = STATIC_DIR;
const {
  server
} = serverIndex;
exports.server = server;
const {
  JWProxy
} = proxyIndex;
exports.JWProxy = JWProxy;
const {
  codes: statusCodes,
  getSummaryByCode
} = statusIndex;
exports.getSummaryByCode = getSummaryByCode;
exports.statusCodes = statusCodes;
const {
  processCapabilities,
  isStandardCap,
  validateCaps
} = caps;
exports.validateCaps = validateCaps;
exports.isStandardCap = isStandardCap;
exports.processCapabilities = processCapabilities;
const {
  DEFAULT_WS_PATHNAME_PREFIX
} = ws;
exports.DEFAULT_WS_PATHNAME_PREFIX = DEFAULT_WS_PATHNAME_PREFIX;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkJhc2VEcml2ZXIiLCJkcml2ZXIiLCJJbWFnZUVsZW1lbnQiLCJpbWFnZSIsIkRldmljZVNldHRpbmdzIiwiQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIiwiZGV2aWNlU2V0dGluZ3MiLCJQcm90b2NvbCIsInJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiIsImVycm9ycyIsImlzRXJyb3JUeXBlIiwiZXJyb3JGcm9tTUpTT05XUFN0YXR1c0NvZGUiLCJlcnJvckZyb21XM0NKc29uQ29kZSIsIkFMTF9DT01NQU5EUyIsIk1FVEhPRF9NQVAiLCJyb3V0ZVRvQ29tbWFuZE5hbWUiLCJOT19TRVNTSU9OX0lEX0NPTU1BTkRTIiwiaXNTZXNzaW9uQ29tbWFuZCIsIm5vcm1hbGl6ZUJhc2VQYXRoIiwiZGV0ZXJtaW5lUHJvdG9jb2wiLCJwcm90b2NvbCIsIlNUQVRJQ19ESVIiLCJzdGF0aWNJbmRleCIsInNlcnZlciIsInNlcnZlckluZGV4IiwiSldQcm94eSIsInByb3h5SW5kZXgiLCJjb2RlcyIsInN0YXR1c0NvZGVzIiwiZ2V0U3VtbWFyeUJ5Q29kZSIsInN0YXR1c0luZGV4IiwicHJvY2Vzc0NhcGFiaWxpdGllcyIsImlzU3RhbmRhcmRDYXAiLCJ2YWxpZGF0ZUNhcHMiLCJjYXBzIiwiREVGQVVMVF9XU19QQVRITkFNRV9QUkVGSVgiLCJ3cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFXQTs7QUFDQTs7QUFvQkE7O0FBSUE7O0FBS0E7O0FBS0E7O0FBS0E7O0FBS0E7O0FBdERBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFpQkMsTUFBdkI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQW1CQyxLQUF6Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLGNBQUY7QUFBa0JDLEVBQUFBO0FBQWxCLElBQWtEQyxjQUF4RDs7O2VBR2VOLFU7O0FBU2YsTUFBTTtBQUNKTyxFQUFBQSxRQURJO0FBQ01DLEVBQUFBLHdCQUROO0FBQ2dDQyxFQUFBQSxNQURoQztBQUN3Q0MsRUFBQUEsV0FEeEM7QUFFSkMsRUFBQUEsMEJBRkk7QUFFd0JDLEVBQUFBLG9CQUZ4QjtBQUU4Q0MsRUFBQUEsWUFGOUM7QUFFNERDLEVBQUFBLFVBRjVEO0FBR0pDLEVBQUFBLGtCQUhJO0FBR2dCQyxFQUFBQSxzQkFIaEI7QUFHd0NDLEVBQUFBLGdCQUh4QztBQUlKQyxFQUFBQSxpQkFKSTtBQUllQyxFQUFBQTtBQUpmLElBS0ZDLFFBTEo7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkMsV0FBdkI7O0FBSUEsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWFDLFdBQW5COztBQUtBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFjQyxVQUFwQjs7QUFLQSxNQUFNO0FBQUVDLEVBQUFBLEtBQUssRUFBRUMsV0FBVDtBQUFzQkMsRUFBQUE7QUFBdEIsSUFBMkNDLFdBQWpEOzs7QUFLQSxNQUFNO0FBQUVDLEVBQUFBLG1CQUFGO0FBQXVCQyxFQUFBQSxhQUF2QjtBQUFzQ0MsRUFBQUE7QUFBdEMsSUFBdURDLElBQTdEOzs7O0FBS0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlDQyxFQUF2QyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptYWluXG5cbi8vIEJhc2VEcml2ZXIgZXhwb3J0c1xuaW1wb3J0ICogYXMgZHJpdmVyIGZyb20gJy4vbGliL2Jhc2Vkcml2ZXIvZHJpdmVyJztcbmltcG9ydCAqIGFzIGltYWdlIGZyb20gJy4vbGliL2Jhc2Vkcml2ZXIvaW1hZ2UtZWxlbWVudCc7XG5pbXBvcnQgKiBhcyBkZXZpY2VTZXR0aW5ncyBmcm9tICcuL2xpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncyc7XG5cbmNvbnN0IHsgQmFzZURyaXZlciB9ID0gZHJpdmVyO1xuY29uc3QgeyBJbWFnZUVsZW1lbnQgfSA9IGltYWdlO1xuY29uc3QgeyBEZXZpY2VTZXR0aW5ncywgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIH0gPSBkZXZpY2VTZXR0aW5ncztcblxuZXhwb3J0IHsgQmFzZURyaXZlciwgRGV2aWNlU2V0dGluZ3MsIEltYWdlRWxlbWVudCwgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIH07XG5leHBvcnQgZGVmYXVsdCBCYXNlRHJpdmVyO1xuXG5cbi8vIE1KU09OV1AgZXhwb3J0c1xuaW1wb3J0ICogYXMgcHJvdG9jb2wgZnJvbSAnLi9saWIvcHJvdG9jb2wnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9CQVNFX1BBVEgsIFBST1RPQ09MU1xufSBmcm9tICcuL2xpYi9jb25zdGFudHMnO1xuXG5jb25zdCB7XG4gIFByb3RvY29sLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24sIGVycm9ycywgaXNFcnJvclR5cGUsXG4gIGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlLCBlcnJvckZyb21XM0NKc29uQ29kZSwgQUxMX0NPTU1BTkRTLCBNRVRIT0RfTUFQLFxuICByb3V0ZVRvQ29tbWFuZE5hbWUsIE5PX1NFU1NJT05fSURfQ09NTUFORFMsIGlzU2Vzc2lvbkNvbW1hbmQsXG4gIG5vcm1hbGl6ZUJhc2VQYXRoLCBkZXRlcm1pbmVQcm90b2NvbFxufSA9IHByb3RvY29sO1xuXG5leHBvcnQge1xuICBQcm90b2NvbCwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLCBlcnJvcnMsIGlzRXJyb3JUeXBlLCBQUk9UT0NPTFMsXG4gIGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlLCBlcnJvckZyb21XM0NKc29uQ29kZSwgZGV0ZXJtaW5lUHJvdG9jb2wsXG4gIGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlIGFzIGVycm9yRnJvbUNvZGUsIEFMTF9DT01NQU5EUywgTUVUSE9EX01BUCxcbiAgcm91dGVUb0NvbW1hbmROYW1lLCBOT19TRVNTSU9OX0lEX0NPTU1BTkRTLCBpc1Nlc3Npb25Db21tYW5kLFxuICBERUZBVUxUX0JBU0VfUEFUSCwgbm9ybWFsaXplQmFzZVBhdGhcbn07XG5cbi8vIEV4cHJlc3MgZXhwb3J0c1xuaW1wb3J0ICogYXMgc3RhdGljSW5kZXggZnJvbSAnLi9saWIvZXhwcmVzcy9zdGF0aWMnO1xuY29uc3QgeyBTVEFUSUNfRElSIH0gPSBzdGF0aWNJbmRleDtcbmV4cG9ydCB7IFNUQVRJQ19ESVIgfTtcblxuaW1wb3J0ICogYXMgc2VydmVySW5kZXggZnJvbSAnLi9saWIvZXhwcmVzcy9zZXJ2ZXInO1xuY29uc3QgeyBzZXJ2ZXIgfSA9IHNlcnZlckluZGV4O1xuZXhwb3J0IHsgc2VydmVyIH07XG5cbi8vIGpzb253cC1wcm94eSBleHBvcnRzXG5pbXBvcnQgKiBhcyBwcm94eUluZGV4IGZyb20gJy4vbGliL2pzb253cC1wcm94eS9wcm94eSc7XG5jb25zdCB7IEpXUHJveHkgfSA9IHByb3h5SW5kZXg7XG5leHBvcnQgeyBKV1Byb3h5IH07XG5cbi8vIGpzb253cC1zdGF0dXMgZXhwb3J0c1xuaW1wb3J0ICogYXMgc3RhdHVzSW5kZXggZnJvbSAnLi9saWIvanNvbndwLXN0YXR1cy9zdGF0dXMnO1xuY29uc3QgeyBjb2Rlczogc3RhdHVzQ29kZXMsIGdldFN1bW1hcnlCeUNvZGUgfSA9IHN0YXR1c0luZGV4O1xuZXhwb3J0IHsgc3RhdHVzQ29kZXMsIGdldFN1bW1hcnlCeUNvZGUgfTtcblxuLy8gVzNDIGNhcGFiaWxpdGllcyBwYXJzZXJcbmltcG9ydCAqIGFzIGNhcHMgZnJvbSAnLi9saWIvYmFzZWRyaXZlci9jYXBhYmlsaXRpZXMnO1xuY29uc3QgeyBwcm9jZXNzQ2FwYWJpbGl0aWVzLCBpc1N0YW5kYXJkQ2FwLCB2YWxpZGF0ZUNhcHMgfSA9IGNhcHM7XG5leHBvcnQgeyBwcm9jZXNzQ2FwYWJpbGl0aWVzLCBpc1N0YW5kYXJkQ2FwLCB2YWxpZGF0ZUNhcHMgfTtcblxuLy8gV2ViIHNvY2tldCBoZWxwZXJzXG5pbXBvcnQgKiBhcyB3cyBmcm9tICcuL2xpYi9leHByZXNzL3dlYnNvY2tldCc7XG5jb25zdCB7IERFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYIH0gPSB3cztcbmV4cG9ydCB7IERFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYIH07XG4iXSwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uIn0=
