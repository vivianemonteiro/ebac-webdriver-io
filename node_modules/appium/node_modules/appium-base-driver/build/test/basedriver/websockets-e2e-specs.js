"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../..");

var _fakeDriver = require("../protocol/fake-driver");

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _ws = _interopRequireDefault(require("ws"));

var _bluebird = _interopRequireDefault(require("bluebird"));

_chai.default.use(_chaiAsPromised.default);

describe('Websockets (e2e)', function () {
  let baseServer;
  let driver;
  const SESSION_ID = 'foo';
  const WS_DATA = 'Hello';
  const PORT = 8181;
  before(async function () {
    driver = new _fakeDriver.FakeDriver();
    driver.sessionId = SESSION_ID;
    baseServer = await (0, _2.server)({
      routeConfiguringFunction: (0, _2.routeConfiguringFunction)(driver),
      port: PORT
    });
  });
  after(async function () {
    await baseServer.close();
  });
  describe('web sockets support', function () {
    it('should be able to add websocket handler and remove it', async function () {
      const wss = new _ws.default.Server({
        noServer: true
      });
      wss.on('connection', ws => {
        if (ws && ws.readyState === _ws.default.OPEN) {
          ws.send(WS_DATA);
        }
      });
      const previousListenerCount = baseServer.listenerCount('upgrade');
      const endpoint = `${_2.DEFAULT_WS_PATHNAME_PREFIX}/hello`;
      const timeout = 5000;
      await baseServer.addWebSocketHandler(endpoint, wss);
      baseServer.listenerCount('upgrade').should.be.above(previousListenerCount);

      _lodash.default.keys(await baseServer.getWebSocketHandlers()).length.should.eql(1);

      await new _bluebird.default((resolve, reject) => {
        const client = new _ws.default(`ws://localhost:${PORT}${endpoint}`);
        client.on('connection', (ws, req) => {
          ws.should.not.be.empty;
          req.connection.remoteAddress.should.not.be.empty;
        });
        client.on('message', data => {
          data.toString().should.eql(WS_DATA);
          resolve();
        });
        client.on('error', reject);
        setTimeout(() => reject(new Error('No websocket messages have been received after the timeout')), timeout);
      });
      (await baseServer.removeWebSocketHandler(endpoint)).should.be.true;

      _lodash.default.keys(await baseServer.getWebSocketHandlers()).length.should.eql(0);

      await new _bluebird.default((resolve, reject) => {
        const client = new _ws.default(`ws://localhost:${PORT}${endpoint}`);
        client.on('message', data => reject(new Error(`No websocket messages are expected after the handler ` + `has been removed. '${data === null || data === void 0 ? void 0 : data.toString()}' is received instead. `)));
        client.on('error', resolve);
        setTimeout(resolve, timeout);
      });
      baseServer.listenerCount('upgrade').should.be.above(previousListenerCount);
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci93ZWJzb2NrZXRzLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwidXNlIiwiY2hhaUFzUHJvbWlzZWQiLCJkZXNjcmliZSIsImJhc2VTZXJ2ZXIiLCJkcml2ZXIiLCJTRVNTSU9OX0lEIiwiV1NfREFUQSIsIlBPUlQiLCJiZWZvcmUiLCJGYWtlRHJpdmVyIiwic2Vzc2lvbklkIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwicG9ydCIsImFmdGVyIiwiY2xvc2UiLCJpdCIsIndzcyIsIldlYlNvY2tldCIsIlNlcnZlciIsIm5vU2VydmVyIiwib24iLCJ3cyIsInJlYWR5U3RhdGUiLCJPUEVOIiwic2VuZCIsInByZXZpb3VzTGlzdGVuZXJDb3VudCIsImxpc3RlbmVyQ291bnQiLCJlbmRwb2ludCIsIkRFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYIiwidGltZW91dCIsImFkZFdlYlNvY2tldEhhbmRsZXIiLCJzaG91bGQiLCJiZSIsImFib3ZlIiwiXyIsImtleXMiLCJnZXRXZWJTb2NrZXRIYW5kbGVycyIsImxlbmd0aCIsImVxbCIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2xpZW50IiwicmVxIiwibm90IiwiZW1wdHkiLCJjb25uZWN0aW9uIiwicmVtb3RlQWRkcmVzcyIsImRhdGEiLCJ0b1N0cmluZyIsInNldFRpbWVvdXQiLCJFcnJvciIsInJlbW92ZVdlYlNvY2tldEhhbmRsZXIiLCJ0cnVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsY0FBS0MsR0FBTCxDQUFTQyx1QkFBVDs7QUFFQUMsUUFBUSxDQUFDLGtCQUFELEVBQXFCLFlBQVk7QUFDdkMsTUFBSUMsVUFBSjtBQUNBLE1BQUlDLE1BQUo7QUFDQSxRQUFNQyxVQUFVLEdBQUcsS0FBbkI7QUFDQSxRQUFNQyxPQUFPLEdBQUcsT0FBaEI7QUFDQSxRQUFNQyxJQUFJLEdBQUcs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LENBQTJEQyxFQUEzRCxDQUE4RHFCLElBQTlEOztBQUNBbkIsc0JBQUVDLElBQUYsQ0FBTyxNQUFNaEMsVUFBVSxDQUFDaUMsb0JBQVgsRUFBYixFQUFnREMsTUFBaEQsQ0FBdUROLE1BQXZELENBQThETyxHQUE5RCxDQUFrRSxDQUFsRTs7QUFDQSxZQUFNLElBQUlDLGlCQUFKLENBQU0sQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQy9CLGNBQU1DLE1BQU0sR0FBRyxJQUFJekIsV0FBSixDQUFlLGtCQUFpQlYsSUFBSyxHQUFFb0IsUUFBUyxFQUFoRCxDQUFmO0FBQ0FlLFFBQUFBLE1BQU0sQ0FBQ3RCLEVBQVAsQ0FBVSxTQUFWLEVBQXNCNEIsSUFBRCxJQUNuQlAsTUFBTSxDQUFDLElBQUlVLEtBQUosQ0FBVyx1REFBRCxHQUNkLHNCQUFxQkgsSUFBdEIsYUFBc0JBLElBQXRCLHVCQUFzQkEsSUFBSSxDQUFFQyxRQUFOLEVBQWlCLHlCQURsQyxDQUFELENBRFI7QUFJQVAsUUFBQUEsTUFBTSxDQUFDdEIsRUFBUCxDQUFVLE9BQVYsRUFBbUJvQixPQUFuQjtBQUNBVSxRQUFBQSxVQUFVLENBQUNWLE9BQUQsRUFBVVgsT0FBVixDQUFWO0FBQ0QsT0FSSyxDQUFOO0FBU0ExQixNQUFBQSxVQUFVLENBQUN1QixhQUFYLENBQXlCLFNBQXpCLEVBQW9DSyxNQUFwQyxDQUEyQ0MsRUFBM0MsQ0FBOENDLEtBQTlDLENBQW9EUixxQkFBcEQ7QUFDRCxLQTFDQyxDQUFGO0FBMkNELEdBNUNPLENBQVI7QUE2Q0QsQ0FoRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBzZXJ2ZXIsIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbixcbiAgICAgICAgIERFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHsgRmFrZURyaXZlciB9IGZyb20gJy4uL3Byb3RvY29sL2Zha2UtZHJpdmVyJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cyc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ1dlYnNvY2tldHMgKGUyZSknLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBiYXNlU2VydmVyO1xuICBsZXQgZHJpdmVyO1xuICBjb25zdCBTRVNTSU9OX0lEID0gJ2Zvbyc7XG4gIGNvbnN0IFdTX0RBVEEgPSAnSGVsbG8nO1xuICBjb25zdCBQT1JUID0gODE4MTtcblxuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGRyaXZlciA9IG5ldyBGYWtlRHJpdmVyKCk7XG4gICAgZHJpdmVyLnNlc3Npb25JZCA9IFNFU1NJT05fSUQ7XG4gICAgYmFzZVNlcnZlciA9IGF3YWl0IHNlcnZlcih7XG4gICAgICByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb246IHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbihkcml2ZXIpLFxuICAgICAgcG9ydDogUE9SVCxcbiAgICB9KTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBiYXNlU2VydmVyLmNsb3NlKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd3ZWIgc29ja2V0cyBzdXBwb3J0JywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBhZGQgd2Vic29ja2V0IGhhbmRsZXIgYW5kIHJlbW92ZSBpdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHdzcyA9IG5ldyBXZWJTb2NrZXQuU2VydmVyKHtcbiAgICAgICAgbm9TZXJ2ZXI6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHdzcy5vbignY29ubmVjdGlvbicsICh3cykgPT4ge1xuICAgICAgICBpZiAod3MgJiYgd3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgICAgICB3cy5zZW5kKFdTX0RBVEEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHByZXZpb3VzTGlzdGVuZXJDb3VudCA9IGJhc2VTZXJ2ZXIubGlzdGVuZXJDb3VudCgndXBncmFkZScpO1xuICAgICAgY29uc3QgZW5kcG9pbnQgPSBgJHtERUZBVUxUX1dTX1BBVEhOQU1FX1BSRUZJWH0vaGVsbG9gO1xuICAgICAgY29uc3QgdGltZW91dCA9IDUwMDA7XG4gICAgICBhd2FpdCBiYXNlU2VydmVyLmFkZFdlYlNvY2tldEhhbmRsZXIoZW5kcG9pbnQsIHdzcyk7XG4gICAgICBiYXNlU2VydmVyLmxpc3RlbmVyQ291bnQoJ3VwZ3JhZGUnKS5zaG91bGQuYmUuYWJvdmUocHJldmlvdXNMaXN0ZW5lckNvdW50KTtcbiAgICAgIF8ua2V5cyhhd2FpdCBiYXNlU2VydmVyLmdldFdlYlNvY2tldEhhbmRsZXJzKCkpLmxlbmd0aC5zaG91bGQuZXFsKDEpO1xuICAgICAgYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBuZXcgV2ViU29ja2V0KGB3czovL2xvY2FsaG9zdDoke1BPUlR9JHtlbmRwb2ludH1gKTtcbiAgICAgICAgY2xpZW50Lm9uKCdjb25uZWN0aW9uJywgKHdzLCByZXEpID0+IHtcbiAgICAgICAgICB3cy5zaG91bGQubm90LmJlLmVtcHR5O1xuICAgICAgICAgIHJlcS5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3Muc2hvdWxkLm5vdC5iZS5lbXB0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNsaWVudC5vbignbWVzc2FnZScsIChkYXRhKSA9PiB7XG4gICAgICAgICAgZGF0YS50b1N0cmluZygpLnNob3VsZC5lcWwoV1NfREFUQSk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY2xpZW50Lm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignTm8gd2Vic29ja2V0IG1lc3NhZ2VzIGhhdmUgYmVlbiByZWNlaXZlZCBhZnRlciB0aGUgdGltZW91dCcpKSxcbiAgICAgICAgICB0aW1lb3V0KTtcbiAgICAgIH0pO1xuXG4gICAgICAoYXdhaXQgYmFzZVNlcnZlci5yZW1vdmVXZWJTb2NrZXRIYW5kbGVyKGVuZHBvaW50KSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBfLmtleXMoYXdhaXQgYmFzZVNlcnZlci5nZXRXZWJTb2NrZXRIYW5kbGVycygpKS5sZW5ndGguc2hvdWxkLmVxbCgwKTtcbiAgICAgIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gbmV3IFdlYlNvY2tldChgd3M6Ly9sb2NhbGhvc3Q6JHtQT1JUfSR7ZW5kcG9pbnR9YCk7XG4gICAgICAgIGNsaWVudC5vbignbWVzc2FnZScsIChkYXRhKSA9PlxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYE5vIHdlYnNvY2tldCBtZXNzYWdlcyBhcmUgZXhwZWN0ZWQgYWZ0ZXIgdGhlIGhhbmRsZXIgYCArXG4gICAgICAgICAgICBgaGFzIGJlZW4gcmVtb3ZlZC4gJyR7ZGF0YT8udG9TdHJpbmcoKX0nIGlzIHJlY2VpdmVkIGluc3RlYWQuIGApKVxuICAgICAgICApO1xuICAgICAgICBjbGllbnQub24oJ2Vycm9yJywgcmVzb2x2ZSk7XG4gICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCk7XG4gICAgICB9KTtcbiAgICAgIGJhc2VTZXJ2ZXIubGlzdGVuZXJDb3VudCgndXBncmFkZScpLnNob3VsZC5iZS5hYm92ZShwcmV2aW91c0xpc3RlbmVyQ291bnQpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sImZpbGUiOiJ0ZXN0L2Jhc2Vkcml2ZXIvd2Vic29ja2V0cy1lMmUtc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
