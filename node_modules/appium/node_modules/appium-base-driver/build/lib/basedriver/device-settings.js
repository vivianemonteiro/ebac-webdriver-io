"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BASEDRIVER_HANDLED_SETTINGS = exports.DeviceSettings = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _images = require("./commands/images");

var _imageElement = require("./image-element");

const GLOBAL_DEFAULT_SETTINGS = {
  imageMatchThreshold: _images.DEFAULT_MATCH_THRESHOLD,
  imageMatchMethod: '',
  fixImageFindScreenshotDims: true,
  fixImageTemplateSize: false,
  fixImageTemplateScale: false,
  defaultImageTemplateScale: _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE,
  checkForImageElementStaleness: true,
  autoUpdateImageElementPosition: false,
  imageElementTapStrategy: _imageElement.IMAGE_EL_TAP_STRATEGY_W3C,
  getMatchedImageResult: false
};
const BASEDRIVER_HANDLED_SETTINGS = ['imageMatchThreshold', 'imageMatchMethod', 'fixImageFindScreenshotDims', 'fixImageTemplateSize', 'fixImageTemplateScale', 'defaultImageTemplateScale', 'checkForImageElementStaleness', 'autoUpdateImageElementPosition', 'imageElementTapStrategy', 'getMatchedImageResult'];
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;

class DeviceSettings {
  constructor(defaultSettings = {}, onSettingsUpdate = null) {
    this._settings = Object.assign({}, GLOBAL_DEFAULT_SETTINGS, defaultSettings);
    this.onSettingsUpdate = onSettingsUpdate;
  }

  async update(newSettings) {
    if (!_lodash.default.isPlainObject(newSettings)) {
      throw new Error(`Settings update should be called with valid JSON. Got ` + `${JSON.stringify(newSettings)} instead`);
    }

    for (const prop of _lodash.default.keys(newSettings)) {
      if (!_lodash.default.isUndefined(this._settings[prop])) {
        if (this._settings[prop] === newSettings[prop]) {
          _logger.default.debug(`The value of '${prop}' setting did not change. Skipping the update for it`);

          continue;
        }
      }

      if (_lodash.default.isFunction(this.onSettingsUpdate)) {
        await this.onSettingsUpdate(prop, newSettings[prop], this._settings[prop]);
        this._settings[prop] = newSettings[prop];
      } else {
        _logger.default.errorAndThrow(`Unable to update settings; ` + `onSettingsUpdate method not found on '${this.constructor.name}'`);
      }
    }
  }

  getSettings() {
    return this._settings;
  }

}

exports.DeviceSettings = DeviceSettings;
var _default = DeviceSettings;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJHTE9CQUxfREVGQVVMVF9TRVRUSU5HUyIsImltYWdlTWF0Y2hUaHJlc2hvbGQiLCJERUZBVUxUX01BVENIX1RIUkVTSE9MRCIsImltYWdlTWF0Y2hNZXRob2QiLCJmaXhJbWFnZUZpbmRTY3JlZW5zaG90RGltcyIsImZpeEltYWdlVGVtcGxhdGVTaXplIiwiZml4SW1hZ2VUZW1wbGF0ZVNjYWxlIiwiZGVmYXVsdEltYWdlVGVtcGxhdGVTY2FsZSIsIkRFRkFVTFRfVEVNUExBVEVfSU1BR0VfU0NBTEUiLCJjaGVja0ZvckltYWdlRWxlbWVudFN0YWxlbmVzcyIsImF1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbiIsImltYWdlRWxlbWVudFRhcFN0cmF0ZWd5IiwiSU1BR0VfRUxfVEFQX1NUUkFURUdZX1czQyIsImdldE1hdGNoZWRJbWFnZVJlc3VsdCIsIkJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyIsIkRldmljZVNldHRpbmdzIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0U2V0dGluZ3MiLCJvblNldHRpbmdzVXBkYXRlIiwiX3NldHRpbmdzIiwiT2JqZWN0IiwiYXNzaWduIiwidXBkYXRlIiwibmV3U2V0dGluZ3MiLCJfIiwiaXNQbGFpbk9iamVjdCIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInByb3AiLCJrZXlzIiwiaXNVbmRlZmluZWQiLCJsb2ciLCJkZWJ1ZyIsImlzRnVuY3Rpb24iLCJlcnJvckFuZFRocm93IiwibmFtZSIsImdldFNldHRpbmdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLHVCQUF1QixHQUFHO0FBRzlCQyxFQUFBQSxtQkFBbUIsRUFBRUMsK0JBSFM7QUFTOUJDLEVBQUFBLGdCQUFnQixFQUFFLEVBVFk7QUFhOUJDLEVBQUFBLDBCQUEwQixFQUFFLElBYkU7QUFrQjlCQyxFQUFBQSxvQkFBb0IsRUFBRSxLQWxCUTtBQTBCOUJDLEVBQUFBLHFCQUFxQixFQUFFLEtBMUJPO0FBa0M5QkMsRUFBQUEseUJBQXlCLEVBQUVDLDBDQWxDRztBQXNDOUJDLEVBQUFBLDZCQUE2QixFQUFFLElBdENEO0FBMEM5QkMsRUFBQUEsOEJBQThCLEVBQUUsS0ExQ0Y7QUE4QzlCQyxFQUFBQSx1QkFBdUIsRUFBRUMsdUNBOUNLO0FBa0Q5QkMsRUFBQUEscUJBQXFCLEVBQUU7QUFsRE8sQ0FBaEM7QUF1REEsTUFBTUMsMkJBQTJCLEdBQUcsQ0FDbEMscUJBRGtDLEVBRWxDLGtCQUZrQyxFQUdsQyw0QkFIa0MsRUFJbEMsc0JBSmtDLEVBS2xDLHVCQUxrQyxFQU1sQywyQkFOa0MsRUFPbEMsK0JBUGtDLEVBUWxDLGdDQVJrQyxFQVNsQyx5QkFUa0MsRUFVbEMsdUJBVmtDLENBQXBDOzs7QUFhQSxNQUFNQyxjQUFOLENBQXFCO0FBRW5CQyxFQUFBQSxXQUFXLENBQUVDLGVBQWUsR0FBRyxFQUFwQixFQUF3QkMsZ0JBQWdCLEdBQUcsSUFBM0MsRUFBaUQ7QUFDMUQsU0FBS0MsU0FBTCxHQUFpQkMsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQnJCLHVCQUFsQixFQUEyQ2lCLGVBQTNDLENBQWpCO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNEOztBQUdELFFBQU1JLE1BQU4sQ0FBY0MsV0FBZCxFQUEyQjtBQUN6QixRQUFJLENBQUNDLGdCQUFFQyxhQUFGLENBQWdCRixXQUFoQixDQUFMLEVBQW1DO0FBQ2pDLFlBQU0sSUFBSUcsS0FBSixDQUFXLHdEQUFELEdBQ2IsR0FBRUMsSUFBSSxDQUFDQyxTQUFMLENBQWVMLFdBQWYsQ0FBNEIsVUFEM0IsQ0FBTjtBQUVEOztBQUNELFNBQUssTUFBTU0sSUFBWCxJQUFtQkwsZ0JBQUVNLElBQUYsQ0FBT1AsV0FBUCxDQUFuQixFQUF3QztBQUN0QyxVQUFJLENBQUNDLGdCQUFFTyxXQUFGLENBQWMsS0FBS1osU0FBTCxDQUFlVSxJQUFmLENBQWQsQ0FBTCxFQUEwQztBQUN4QyxZQUFJLEtBQUtWLFNBQUwsQ0FBZVUsSUFBZixNQUF5Qk4sV0FBVyxDQUFDTSxJQUFELENBQXhDLEVBQWdEO0FBQzlDRywwQkFBSUMsS0FBSixDQUFXLGlCQUFnQkosSUFBSyxzREFBaEM7O0FBQ0E7QUFDRDtBQUNGOztBQUVELFVBQUlMLGdCQUFFVSxVQUFGLENBQWEsS0FBS2hCLGdCQUFsQixDQUFKLEVBQXlDO0FBQ3ZDLGNBQU0sS0FBS0EsZ0JBQUwsQ0FBc0JXLElBQXRCLEVBQTRCTixXQUFXLENBQUNNLElBQUQsQ0FBdkMsRUFBK0MsS0FBS1YsU0FBTCxDQUFlVSxJQUFmLENBQS9DLENBQU47QUFDQSxhQUFLVixTQUFMLENBQWVVLElBQWYsSUFBdUJOLFdBQVcsQ0FBQ00sSUFBRCxDQUFsQztBQUNELE9BSEQsTUFHTztBQUNMRyx3QkFBSUcsYUFBSixDQUFtQiw2QkFBRCxHQUNmLHlDQUF3QyxLQUFLbkIsV0FBTCxDQUFpQm9CLElBQUssR0FEakU7QUFFRDtBQUNGO0FBQ0Y7O0FBRURDLEVBQUFBLFdBQVcsR0FBSTtBQUNiLFdBQU8sS0FBS2xCLFNBQVo7QUFDRDs7QUFqQ2tCOzs7ZUFvQ05KLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBERUZBVUxUX01BVENIX1RIUkVTSE9MRCB9IGZyb20gJy4vY29tbWFuZHMvaW1hZ2VzJztcbmltcG9ydCB7IElNQUdFX0VMX1RBUF9TVFJBVEVHWV9XM0MsIERFRkFVTFRfVEVNUExBVEVfSU1BR0VfU0NBTEUgfSBmcm9tICcuL2ltYWdlLWVsZW1lbnQnO1xuXG5jb25zdCBHTE9CQUxfREVGQVVMVF9TRVRUSU5HUyA9IHtcbiAgLy8gdmFsdWUgYmV0d2VlbiAwIGFuZCAxIHJlcHJlc2VudGluZyBtYXRjaCBzdHJlbmd0aCwgYmVsb3cgd2hpY2ggYW4gaW1hZ2VcbiAgLy8gZWxlbWVudCB3aWxsIG5vdCBiZSBmb3VuZFxuICBpbWFnZU1hdGNoVGhyZXNob2xkOiBERUZBVUxUX01BVENIX1RIUkVTSE9MRCxcblxuICAvLyBPbmUgb2YgcG9zc2libGUgaW1hZ2UgbWF0Y2hpbmcgbWV0aG9kcy5cbiAgLy8gUmVhZCBodHRwczovL2RvY3Mub3BlbmN2Lm9yZy8zLjAtYmV0YS9kb2MvcHlfdHV0b3JpYWxzL3B5X2ltZ3Byb2MvcHlfdGVtcGxhdGVfbWF0Y2hpbmcvcHlfdGVtcGxhdGVfbWF0Y2hpbmcuaHRtbFxuICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAvLyBUTV9DQ09FRkZfTk9STUVEIGJ5IGRlZmF1bHRcbiAgaW1hZ2VNYXRjaE1ldGhvZDogJycsXG5cbiAgLy8gaWYgdGhlIGltYWdlIHJldHVybmVkIGJ5IGdldFNjcmVlbnNob3QgZGlmZmVycyBpbiBzaXplIG9yIGFzcGVjdCByYXRpb1xuICAvLyBmcm9tIHRoZSBzY3JlZW4sIGF0dGVtcHQgdG8gZml4IGl0IGF1dG9tYXRpY2FsbHlcbiAgZml4SW1hZ2VGaW5kU2NyZWVuc2hvdERpbXM6IHRydWUsXG5cbiAgLy8gd2hldGhlciBBcHBpdW0gc2hvdWxkIGVuc3VyZSB0aGF0IGFuIGltYWdlIHRlbXBsYXRlIHNlbnQgaW4gZHVyaW5nIGltYWdlXG4gIC8vIGVsZW1lbnQgZmluZCBzaG91bGQgaGF2ZSBpdHMgc2l6ZSBhZGp1c3RlZCBzbyB0aGUgbWF0Y2ggYWxnb3JpdGhtIHdpbGwgbm90XG4gIC8vIGNvbXBsYWluXG4gIGZpeEltYWdlVGVtcGxhdGVTaXplOiBmYWxzZSxcblxuICAvLyB3aGV0aGVyIEFwcGl1bSBzaG91bGQgZW5zdXJlIHRoYXQgYW4gaW1hZ2UgdGVtcGxhdGUgc2VudCBpbiBkdXJpbmcgaW1hZ2VcbiAgLy8gZWxlbWVudCBmaW5kIHNob3VsZCBoYXZlIGl0cyBzY2FsZSBhZGp1c3RlZCB0byBkaXNwbGF5IHNpemUgc28gdGhlIG1hdGNoXG4gIC8vIGFsZ29yaXRobSB3aWxsIG5vdCBjb21wbGFpbi5cbiAgLy8gZS5nLiBpT1MgaGFzIGB3aWR0aD0zNzUsIGhlaWdodD02NjdgIHdpbmRvdyByZWN0LCBidXQgaXRzIHNjcmVlbnNob3QgaXNcbiAgLy8gICAgICBgd2lkdGg9NzUwIMOXIGhlaWdodD0xMzM0YCBwaXhlbHMuIFRoaXMgc2V0dGluZyBoZWxwIHRvIGFkanVzdCB0aGUgc2NhbGVcbiAgLy8gICAgICBpZiBhIHVzZXIgdXNlIGB3aWR0aD03NTAgw5cgaGVpZ2h0PTEzMzRgIHBpeGVscydzIGJhc2UgdGVtcGxhdGUgaW1hZ2UuXG4gIGZpeEltYWdlVGVtcGxhdGVTY2FsZTogZmFsc2UsXG5cbiAgLy8gVXNlcnMgbWlnaHQgaGF2ZSBzY2FsZWQgdGVtcGxhdGUgaW1hZ2UgdG8gcmVkdWNlIHRoZWlyIHN0b3JhZ2Ugc2l6ZS5cbiAgLy8gVGhpcyBzZXR0aW5nIGFsbG93cyB1c2VycyB0byBzY2FsZSBhIHRlbXBsYXRlIGltYWdlIHRoZXkgc2VuZCB0byBBcHBpdW0gc2VydmVyXG4gIC8vIHNvIHRoYXQgdGhlIEFwcGl1bSBzZXJ2ZXIgY29tcGFyZXMgdGhlIGFjdHVhbCBzY2FsZSB1c2VycyBvcmlnaW5hbGx5IGhhZC5cbiAgLy8gZS5nLiBJZiBhIHVzZXIgaGFzIGFuIGltYWdlIG9mIDI3MCB4IDMyIHBpeGVscyB3aGljaCB3YXMgb3JpZ2luYWxseSAxMDgwIHggMTI2IHBpeGVscyxcbiAgLy8gICAgICB0aGUgdXNlciBjYW4gc2V0IHtkZWZhdWx0SW1hZ2VUZW1wbGF0ZVNjYWxlOiA0LjB9IHRvIHNjYWxlIHRoZSBzbWFsbCBpbWFnZVxuICAvLyAgICAgIHRvIHRoZSBvcmlnaW5hbCBvbmUgc28gdGhhdCBBcHBpdW0gY2FuIGNvbXBhcmUgaXQgYXMgdGhlIG9yaWdpbmFsIG9uZS5cbiAgZGVmYXVsdEltYWdlVGVtcGxhdGVTY2FsZTogREVGQVVMVF9URU1QTEFURV9JTUFHRV9TQ0FMRSxcblxuICAvLyB3aGV0aGVyIEFwcGl1bSBzaG91bGQgcmUtY2hlY2sgdGhhdCBhbiBpbWFnZSBlbGVtZW50IGNhbiBiZSBtYXRjaGVkXG4gIC8vIGFnYWluc3QgdGhlIGN1cnJlbnQgc2NyZWVuc2hvdCBiZWZvcmUgY2xpY2tpbmcgaXRcbiAgY2hlY2tGb3JJbWFnZUVsZW1lbnRTdGFsZW5lc3M6IHRydWUsXG5cbiAgLy8gd2hldGhlciBiZWZvcmUgY2xpY2tpbmcgb24gYW4gaW1hZ2UgZWxlbWVudCBBcHBpdW0gc2hvdWxkIHJlLWRldGVybWluZSB0aGVcbiAgLy8gcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgb24gc2NyZWVuXG4gIGF1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbjogZmFsc2UsXG5cbiAgLy8gd2hpY2ggbWV0aG9kIHRvIHVzZSBmb3IgdGFwcGluZyBieSBjb29yZGluYXRlIGZvciBpbWFnZSBlbGVtZW50cy4gdGhlXG4gIC8vIG9wdGlvbnMgYXJlICd3M2MnIG9yICdtanNvbndwJ1xuICBpbWFnZUVsZW1lbnRUYXBTdHJhdGVneTogSU1BR0VfRUxfVEFQX1NUUkFURUdZX1czQyxcblxuICAvLyB3aGljaCBtZXRob2QgdG8gdXNlIHRvIHNhdmUgdGhlIG1hdGNoZWQgaW1hZ2UgYXJlYSBpbiBJbWFnZUVsZW1lbnQgY2xhc3MuXG4gIC8vIEl0IGlzIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3NlLlxuICBnZXRNYXRjaGVkSW1hZ2VSZXN1bHQ6IGZhbHNlLFxufTtcblxuLy8gZGVjbGFyZSBzZXR0aW5ncyB0aGF0IGFyZSByZWFsbHkgaGFuZGxlZCBvbmx5IGJ5IGJhc2Vkcml2ZXIsIHNvIGRvd25zdHJlYW1cbi8vIGRyaXZlcnMgY2FuIGNob29zZSB0byBpZ25vcmUgdGhlbSBmb3IgdGhlaXIgb3duIHNldHRpbmdzIHZhbGlkYXRpb24sIGV0Yy4uLlxuY29uc3QgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTID0gW1xuICAnaW1hZ2VNYXRjaFRocmVzaG9sZCcsXG4gICdpbWFnZU1hdGNoTWV0aG9kJyxcbiAgJ2ZpeEltYWdlRmluZFNjcmVlbnNob3REaW1zJyxcbiAgJ2ZpeEltYWdlVGVtcGxhdGVTaXplJyxcbiAgJ2ZpeEltYWdlVGVtcGxhdGVTY2FsZScsXG4gICdkZWZhdWx0SW1hZ2VUZW1wbGF0ZVNjYWxlJyxcbiAgJ2NoZWNrRm9ySW1hZ2VFbGVtZW50U3RhbGVuZXNzJyxcbiAgJ2F1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbicsXG4gICdpbWFnZUVsZW1lbnRUYXBTdHJhdGVneScsXG4gICdnZXRNYXRjaGVkSW1hZ2VSZXN1bHQnLFxuXTtcblxuY2xhc3MgRGV2aWNlU2V0dGluZ3Mge1xuXG4gIGNvbnN0cnVjdG9yIChkZWZhdWx0U2V0dGluZ3MgPSB7fSwgb25TZXR0aW5nc1VwZGF0ZSA9IG51bGwpIHtcbiAgICB0aGlzLl9zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIEdMT0JBTF9ERUZBVUxUX1NFVFRJTkdTLCBkZWZhdWx0U2V0dGluZ3MpO1xuICAgIHRoaXMub25TZXR0aW5nc1VwZGF0ZSA9IG9uU2V0dGluZ3NVcGRhdGU7XG4gIH1cblxuICAvLyBjYWxscyB1cGRhdGVTZXR0aW5ncyBmcm9tIGltcGxlbWVudGluZyBkcml2ZXIgZXZlcnkgdGltZSBhIHNldHRpbmcgaXMgY2hhbmdlZC5cbiAgYXN5bmMgdXBkYXRlIChuZXdTZXR0aW5ncykge1xuICAgIGlmICghXy5pc1BsYWluT2JqZWN0KG5ld1NldHRpbmdzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXR0aW5ncyB1cGRhdGUgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHZhbGlkIEpTT04uIEdvdCBgICtcbiAgICAgICAgYCR7SlNPTi5zdHJpbmdpZnkobmV3U2V0dGluZ3MpfSBpbnN0ZWFkYCk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBfLmtleXMobmV3U2V0dGluZ3MpKSB7XG4gICAgICBpZiAoIV8uaXNVbmRlZmluZWQodGhpcy5fc2V0dGluZ3NbcHJvcF0pKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5nc1twcm9wXSA9PT0gbmV3U2V0dGluZ3NbcHJvcF0pIHtcbiAgICAgICAgICBsb2cuZGVidWcoYFRoZSB2YWx1ZSBvZiAnJHtwcm9wfScgc2V0dGluZyBkaWQgbm90IGNoYW5nZS4gU2tpcHBpbmcgdGhlIHVwZGF0ZSBmb3IgaXRgKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gdXBkYXRlIHNldHRpbmcgb25seSB3aGVuIHRoZXJlIGlzIHVwZGF0ZVNldHRpbmdzIGRlZmluZWQuXG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKHRoaXMub25TZXR0aW5nc1VwZGF0ZSkpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5vblNldHRpbmdzVXBkYXRlKHByb3AsIG5ld1NldHRpbmdzW3Byb3BdLCB0aGlzLl9zZXR0aW5nc1twcm9wXSk7XG4gICAgICAgIHRoaXMuX3NldHRpbmdzW3Byb3BdID0gbmV3U2V0dGluZ3NbcHJvcF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVW5hYmxlIHRvIHVwZGF0ZSBzZXR0aW5nczsgYCArXG4gICAgICAgICAgYG9uU2V0dGluZ3NVcGRhdGUgbWV0aG9kIG5vdCBmb3VuZCBvbiAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9J2ApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFNldHRpbmdzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGV2aWNlU2V0dGluZ3M7XG5leHBvcnQgeyBEZXZpY2VTZXR0aW5ncywgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIH07XG4iXSwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
