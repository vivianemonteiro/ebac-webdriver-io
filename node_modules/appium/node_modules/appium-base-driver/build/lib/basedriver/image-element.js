"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImgElFromArgs = getImgElFromArgs;
exports.makeImageElementCache = makeImageElementCache;
exports.DEFAULT_TEMPLATE_IMAGE_SCALE = exports.IMAGE_EL_TAP_STRATEGY_W3C = exports.IMAGE_EL_TAP_STRATEGY_MJSONWP = exports.ImageElement = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../..");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _constants = require("../constants");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

const MAX_CACHE_SIZE = 1024 * 1024 * 40;
const TAP_DURATION_MS = 125;
const IMAGE_EL_TAP_STRATEGY_W3C = 'w3cActions';
exports.IMAGE_EL_TAP_STRATEGY_W3C = IMAGE_EL_TAP_STRATEGY_W3C;
const IMAGE_EL_TAP_STRATEGY_MJSONWP = 'touchActions';
exports.IMAGE_EL_TAP_STRATEGY_MJSONWP = IMAGE_EL_TAP_STRATEGY_MJSONWP;
const IMAGE_TAP_STRATEGIES = [IMAGE_EL_TAP_STRATEGY_MJSONWP, IMAGE_EL_TAP_STRATEGY_W3C];
const DEFAULT_TEMPLATE_IMAGE_SCALE = 1.0;
exports.DEFAULT_TEMPLATE_IMAGE_SCALE = DEFAULT_TEMPLATE_IMAGE_SCALE;

class ImageElement {
  constructor(b64Template, rect, score, b64Result = null) {
    this.template = b64Template;
    this.rect = rect;
    this.id = `${_constants.IMAGE_ELEMENT_PREFIX}${_appiumSupport.util.uuidV4()}`;
    this.b64MatchedImage = b64Result;
    this.score = score;
  }

  get size() {
    return {
      width: this.rect.width,
      height: this.rect.height
    };
  }

  get location() {
    return {
      x: this.rect.x,
      y: this.rect.y
    };
  }

  get center() {
    return {
      x: this.rect.x + this.rect.width / 2,
      y: this.rect.y + this.rect.height / 2
    };
  }

  get matchedImage() {
    return this.b64MatchedImage;
  }

  asElement(protocolKey) {
    return {
      [protocolKey]: this.id
    };
  }

  equals(other) {
    return this.rect.x === other.rect.x && this.rect.y === other.rect.y && this.rect.width === other.rect.width && this.rect.height === other.rect.height;
  }

  async click(driver) {
    let newImgEl;
    const {
      autoUpdateImageElementPosition: updatePos,
      checkForImageElementStaleness,
      imageElementTapStrategy
    } = driver.settings.getSettings();

    if (!IMAGE_TAP_STRATEGIES.includes(imageElementTapStrategy)) {
      throw new Error(`Incorrect imageElementTapStrategy setting ` + `'${imageElementTapStrategy}'. Must be one of ` + JSON.stringify(IMAGE_TAP_STRATEGIES));
    }

    if (checkForImageElementStaleness || updatePos) {
      _logger.default.info('Checking image element for staleness before clicking');

      try {
        newImgEl = await driver.findByImage(this.template, {
          shouldCheckStaleness: true,
          ignoreDefaultImageTemplateScale: true
        });
      } catch (err) {
        throw new _2.errors.StaleElementReferenceError();
      }

      if (!this.equals(newImgEl)) {
        _logger.default.warn(`When trying to click on an image element, the image changed ` + `position from where it was originally found. It is now at ` + `${JSON.stringify(newImgEl.rect)} and was originally at ` + `${JSON.stringify(this.rect)}.`);

        if (updatePos) {
          _logger.default.warn('Click will proceed at new coordinates');

          this.rect = _lodash.default.clone(newImgEl.rect);
        } else {
          _logger.default.warn('Click will take place at original coordinates. If you ' + 'would like Appium to automatically click the new ' + "coordinates, set the 'autoUpdateImageElementPosition' " + 'setting to true');
        }
      }
    }

    const {
      x,
      y
    } = this.center;

    _logger.default.info(`Will tap on image element at coordinate [${x}, ${y}]`);

    if (imageElementTapStrategy === IMAGE_EL_TAP_STRATEGY_W3C) {
      _logger.default.info('Will tap using W3C actions');

      const action = {
        type: 'pointer',
        id: 'mouse',
        parameters: {
          pointerType: 'touch'
        },
        actions: [{
          type: 'pointerMove',
          x,
          y,
          duration: 0
        }, {
          type: 'pointerDown',
          button: 0
        }, {
          type: 'pause',
          duration: TAP_DURATION_MS
        }, {
          type: 'pointerUp',
          button: 0
        }]
      };

      if (driver.performActions) {
        return await driver.performActions([action]);
      }

      _logger.default.warn('Driver does not seem to implement W3C actions, falling back ' + 'to TouchActions');
    }

    _logger.default.info('Will tap using MJSONWP TouchActions');

    const action = {
      action: 'tap',
      options: {
        x,
        y
      }
    };

    if (driver.performTouch) {
      return await driver.performTouch([action]);
    }

    throw new Error("Driver did not implement the 'performTouch' command. " + 'For drivers to support finding image elements, they ' + "should support 'performTouch' and 'performActions'");
  }

  static async execute(driver, cmd, imgElId, ...args) {
    if (!driver._imgElCache.has(imgElId)) {
      throw new _2.errors.NoSuchElementError();
    }

    const imgEl = driver._imgElCache.get(imgElId);

    switch (cmd) {
      case 'click':
        return await imgEl.click(driver);

      case 'elementDisplayed':
        return true;

      case 'getSize':
        return imgEl.size;

      case 'getLocation':
      case 'getLocationInView':
        return imgEl.location;

      case 'getElementRect':
        return imgEl.rect;

      case 'getAttribute':
        switch (args[0]) {
          case 'visual':
            return imgEl.matchedImage;

          case 'score':
            return imgEl.score;

          default:
            throw new _2.errors.NotYetImplementedError();
        }

      default:
        throw new _2.errors.NotYetImplementedError();
    }
  }

}

exports.ImageElement = ImageElement;

function makeImageElementCache(max = MAX_CACHE_SIZE) {
  return new _lruCache.default({
    max,
    length: el => el.template.length
  });
}

function getImgElFromArgs(args) {
  for (let arg of args) {
    if (_lodash.default.isString(arg) && arg.startsWith(_constants.IMAGE_ELEMENT_PREFIX)) {
      return arg;
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2ltYWdlLWVsZW1lbnQuanMiXSwibmFtZXMiOlsiTUFYX0NBQ0hFX1NJWkUiLCJUQVBfRFVSQVRJT05fTVMiLCJJTUFHRV9FTF9UQVBfU1RSQVRFR1lfVzNDIiwiSU1BR0VfRUxfVEFQX1NUUkFURUdZX01KU09OV1AiLCJJTUFHRV9UQVBfU1RSQVRFR0lFUyIsIkRFRkFVTFRfVEVNUExBVEVfSU1BR0VfU0NBTEUiLCJJbWFnZUVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsImI2NFRlbXBsYXRlIiwicmVjdCIsInNjb3JlIiwiYjY0UmVzdWx0IiwidGVtcGxhdGUiLCJpZCIsIklNQUdFX0VMRU1FTlRfUFJFRklYIiwidXRpbCIsInV1aWRWNCIsImI2NE1hdGNoZWRJbWFnZSIsInNpemUiLCJ3aWR0aCIsImhlaWdodCIsImxvY2F0aW9uIiwieCIsInkiLCJjZW50ZXIiLCJtYXRjaGVkSW1hZ2UiLCJhc0VsZW1lbnQiLCJwcm90b2NvbEtleSIsImVxdWFscyIsIm90aGVyIiwiY2xpY2siLCJkcml2ZXIiLCJuZXdJbWdFbCIsImF1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbiIsInVwZGF0ZVBvcyIsImNoZWNrRm9ySW1hZ2VFbGVtZW50U3RhbGVuZXNzIiwiaW1hZ2VFbGVtZW50VGFwU3RyYXRlZ3kiLCJzZXR0aW5ncyIsImdldFNldHRpbmdzIiwiaW5jbHVkZXMiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2ciLCJpbmZvIiwiZmluZEJ5SW1hZ2UiLCJzaG91bGRDaGVja1N0YWxlbmVzcyIsImlnbm9yZURlZmF1bHRJbWFnZVRlbXBsYXRlU2NhbGUiLCJlcnIiLCJlcnJvcnMiLCJTdGFsZUVsZW1lbnRSZWZlcmVuY2VFcnJvciIsIndhcm4iLCJfIiwiY2xvbmUiLCJhY3Rpb24iLCJ0eXBlIiwicGFyYW1ldGVycyIsInBvaW50ZXJUeXBlIiwiYWN0aW9ucyIsImR1cmF0aW9uIiwiYnV0dG9uIiwicGVyZm9ybUFjdGlvbnMiLCJvcHRpb25zIiwicGVyZm9ybVRvdWNoIiwiZXhlY3V0ZSIsImNtZCIsImltZ0VsSWQiLCJhcmdzIiwiX2ltZ0VsQ2FjaGUiLCJoYXMiLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJpbWdFbCIsImdldCIsIk5vdFlldEltcGxlbWVudGVkRXJyb3IiLCJtYWtlSW1hZ2VFbGVtZW50Q2FjaGUiLCJtYXgiLCJMUlUiLCJsZW5ndGgiLCJlbCIsImdldEltZ0VsRnJvbUFyZ3MiLCJhcmciLCJpc1N0cmluZyIsInN0YXJ0c1dpdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxjQUFjLEdBQUcsT0FBTyxJQUFQLEdBQWMsRUFBckM7QUFDQSxNQUFNQyxlQUFlLEdBQUcsR0FBeEI7QUFDQSxNQUFNQyx5QkFBeUIsR0FBRyxZQUFsQzs7QUFDQSxNQUFNQyw2QkFBNkIsR0FBRyxjQUF0Qzs7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxDQUMzQkQsNkJBRDJCLEVBRTNCRCx5QkFGMkIsQ0FBN0I7QUFJQSxNQUFNRyw0QkFBNEIsR0FBRyxHQUFyQzs7O0FBMEJBLE1BQU1DLFlBQU4sQ0FBbUI7QUFhakJDLEVBQUFBLFdBQVcsQ0FBRUMsV0FBRixFQUFlQyxJQUFmLEVBQXFCQyxLQUFyQixFQUE0QkMsU0FBUyxHQUFHLElBQXhDLEVBQThDO0FBQ3ZELFNBQUtDLFFBQUwsR0FBZ0JKLFdBQWhCO0FBQ0EsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0ksRUFBTCxHQUFXLEdBQUVDLCtCQUFxQixHQUFFQyxvQkFBS0MsTUFBTCxFQUFjLEVBQWxEO0FBQ0EsU0FBS0MsZUFBTCxHQUF1Qk4sU0FBdkI7QUFDQSxTQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDRDs7QUFLRCxNQUFJUSxJQUFKLEdBQVk7QUFDVixXQUFPO0FBQUNDLE1BQUFBLEtBQUssRUFBRSxLQUFLVixJQUFMLENBQVVVLEtBQWxCO0FBQXlCQyxNQUFBQSxNQUFNLEVB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Yjs7QUFDRixlQUFLLE9BQUw7QUFDRSxtQkFBTzhDLEtBQUssQ0FBQzdELEtBQWI7O0FBQ0Y7QUFDRSxrQkFBTSxJQUFJdUMsVUFBT3dCLHNCQUFYLEVBQU47QUFOSjs7QUFRRjtBQUFTLGNBQU0sSUFBSXhCLFVBQU93QixzQkFBWCxFQUFOO0FBeEJYO0FBMEJEOztBQXhOZ0I7Ozs7QUEyTm5CLFNBQVNDLHFCQUFULENBQWdDQyxHQUFHLEdBQUczRSxjQUF0QyxFQUFzRDtBQUNwRCxTQUFPLElBQUk0RSxpQkFBSixDQUFRO0FBQ2JELElBQUFBLEdBRGE7QUFFYkUsSUFBQUEsTUFBTSxFQUFHQyxFQUFELElBQVFBLEVBQUUsQ0FBQ2xFLFFBQUgsQ0FBWWlFO0FBRmYsR0FBUixDQUFQO0FBSUQ7O0FBRUQsU0FBU0UsZ0JBQVQsQ0FBMkJaLElBQTNCLEVBQWlDO0FBQy9CLE9BQUssSUFBSWEsR0FBVCxJQUFnQmIsSUFBaEIsRUFBc0I7QUFDcEIsUUFBSWYsZ0JBQUU2QixRQUFGLENBQVdELEdBQVgsS0FBbUJBLEdBQUcsQ0FBQ0UsVUFBSixDQUFlcEUsK0JBQWYsQ0FBdkIsRUFBNkQ7QUFDM0QsYUFBT2tFLEdBQVA7QUFDRDtBQUNGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IHsgSU1BR0VfRUxFTUVOVF9QUkVGSVggfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5jb25zdCBNQVhfQ0FDSEVfU0laRSA9IDEwMjQgKiAxMDI0ICogNDA7IC8vIDQwbWJcbmNvbnN0IFRBUF9EVVJBVElPTl9NUyA9IDEyNTtcbmNvbnN0IElNQUdFX0VMX1RBUF9TVFJBVEVHWV9XM0MgPSAndzNjQWN0aW9ucyc7XG5jb25zdCBJTUFHRV9FTF9UQVBfU1RSQVRFR1lfTUpTT05XUCA9ICd0b3VjaEFjdGlvbnMnO1xuY29uc3QgSU1BR0VfVEFQX1NUUkFURUdJRVMgPSBbXG4gIElNQUdFX0VMX1RBUF9TVFJBVEVHWV9NSlNPTldQLFxuICBJTUFHRV9FTF9UQVBfU1RSQVRFR1lfVzNDXG5dO1xuY29uc3QgREVGQVVMVF9URU1QTEFURV9JTUFHRV9TQ0FMRSA9IDEuMDtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZWN0XG4gKiBAcHJvcGVydHkge2ludH0geCAtIHgtY29vcmRpbmF0ZSBvZiB0b3AtbGVmdCBjb3JuZXJcbiAqIEBwcm9wZXJ0eSB7aW50fSB5IC0geS1jb29yZGluYXRlIG9mIHRvcC1sZWZ0IGNvcm5lclxuICogQHByb3BlcnR5IHtpbnR9IHdpZHRoIC0gd2lkdGggb2YgcmVjdFxuICogQHByb3BlcnR5IHtpbnR9IGhlaWdodCAtIGhlaWdodCBvZiByZWN0XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBEaW1lbnNpb25cbiAqIEBwcm9wZXJ0eSB7aW50fSB3aWR0aCAtIHdpZHRoIG9mIHJlY3RcbiAqIEBwcm9wZXJ0eSB7aW50fSBoZWlnaHQgLSBoZWlnaHQgb2YgcmVjdFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUG9zaXRpb25cbiAqIEBwcm9wZXJ0eSB7aW50fSB4IC0geCBjb29yZGluYXRlXG4gKiBAcHJvcGVydHkge2ludH0geSAtIHkgY29vcmRpbmF0ZVxuICovXG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYW4gXCJpbWFnZSBlbGVtZW50XCIsIHdoaWNoIGlzIHNpbXBseSBhIHNldCBvZiBjb29yZGluYXRlc1xuICogYW5kIG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlZCBvbiB0aGF0IHNldCBvZiBjb29yZGluYXRlcyB2aWEgdGhlIGRyaXZlclxuICovXG5jbGFzcyBJbWFnZUVsZW1lbnQge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYjY0VGVtcGxhdGUgLSB0aGUgYmFzZTY0LWVuY29kZWQgaW1hZ2Ugd2hpY2ggd2FzIHVzZWQgdG9cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluZCB0aGlzIEltYWdlRWxlbWVudFxuICAgKiBAcGFyYW0ge1JlY3R9IHJlY3QgLSBib3VuZHMgb2YgbWF0Y2hlZCBpbWFnZSBlbGVtZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY29yZSBUaGUgc2ltaWxhcml0eSBzY29yZSBhcyBhIGZsb2F0IG51bWJlciBpbiByYW5nZSBbMC4wLCAxLjBdLlxuICAgKiAxLjAgaXMgdGhlIGhpZ2hlc3Qgc2NvcmUgKG1lYW5zIGJvdGggaW1hZ2VzIGFyZSB0b3RhbGx5IGVxdWFsKS5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBiNjRSZXN1bHQgLSB0aGUgYmFzZTY0LWVuY29kZWQgaW1hZ2Ugd2hpY2ggaGFzIG1hdGNoZWQgbWFya3MuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gbnVsbC5cbiAgICpcbiAgICogQHJldHVybnMge0ltYWdlRWxlbWVudH1cbiAgICovXG4gIGNvbnN0cnVjdG9yIChiNjRUZW1wbGF0ZSwgcmVjdCwgc2NvcmUsIGI2NFJlc3VsdCA9IG51bGwpIHtcbiAgICB0aGlzLnRlbXBsYXRlID0gYjY0VGVtcGxhdGU7XG4gICAgdGhpcy5yZWN0ID0gcmVjdDtcbiAgICB0aGlzLmlkID0gYCR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9JHt1dGlsLnV1aWRWNCgpfWA7XG4gICAgdGhpcy5iNjRNYXRjaGVkSW1hZ2UgPSBiNjRSZXN1bHQ7XG4gICAgdGhpcy5zY29yZSA9IHNjb3JlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtEaW1lbnNpb259IC0gZGltZW5zaW9uIG9mIGVsZW1lbnRcbiAgICovXG4gIGdldCBzaXplICgpIHtcbiAgICByZXR1cm4ge3dpZHRoOiB0aGlzLnJlY3Qud2lkdGgsIGhlaWdodDogdGhpcy5yZWN0LmhlaWdodH07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1Bvc2l0aW9ufSAtIGNvb3JkaW5hdGVzIG9mIHRvcC1sZWZ0IGNvcm5lciBvZiBlbGVtZW50XG4gICAqL1xuICBnZXQgbG9jYXRpb24gKCkge1xuICAgIHJldHVybiB7eDogdGhpcy5yZWN0LngsIHk6IHRoaXMucmVjdC55fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7UG9zaXRpb259IC0gY29vcmRpbmF0ZXMgb2YgY2VudGVyIG9mIGVsZW1lbnRcbiAgICovXG4gIGdldCBjZW50ZXIgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB0aGlzLnJlY3QueCArIHRoaXMucmVjdC53aWR0aCAvIDIsXG4gICAgICB5OiB0aGlzLnJlY3QueSArIHRoaXMucmVjdC5oZWlnaHQgLyAyLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgez9zdHJpbmd9IC0gdGhlIGJhc2U2NC1lbmNvZGVkIGltYWdlIHdoaWNoIGhhcyBtYXRjaGVkIG1hcmtzXG4gICAqL1xuICBnZXQgbWF0Y2hlZEltYWdlICgpIHtcbiAgICByZXR1cm4gdGhpcy5iNjRNYXRjaGVkSW1hZ2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3RvY29sS2V5IC0gdGhlIHByb3RvY29sLXNwZWNpZmljIEpTT04ga2V5IGZvclxuICAgKiBhIFdlYkVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybnMge1dlYkVsZW1lbnR9IC0gdGhpcyBpbWFnZSBlbGVtZW50IGFzIGEgV2ViRWxlbWVudFxuICAgKi9cbiAgYXNFbGVtZW50IChwcm90b2NvbEtleSkge1xuICAgIHJldHVybiB7W3Byb3RvY29sS2V5XTogdGhpcy5pZH07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtJbWFnZUVsZW1lbnR9IG90aGVyIC0gYW4gSW1hZ2VFbGVtZW50IHRvIGNvbXBhcmUgd2l0aCB0aGlzIG9uZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSB3aGV0aGVyIHRoZSBvdGhlciBlbGVtZW50IGFuZCB0aGlzIG9uZSBoYXZlIHRoZSBzYW1lXG4gICAqIHByb3BlcnRpZXNcbiAgICovXG4gIGVxdWFscyAob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZWN0LnggPT09IG90aGVyLnJlY3QueCAmJlxuICAgICAgICAgICB0aGlzLnJlY3QueSA9PT0gb3RoZXIucmVjdC55ICYmXG4gICAgICAgICAgIHRoaXMucmVjdC53aWR0aCA9PT0gb3RoZXIucmVjdC53aWR0aCAmJlxuICAgICAgICAgICB0aGlzLnJlY3QuaGVpZ2h0ID09PSBvdGhlci5yZWN0LmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgYSBkcml2ZXIgdG8gdGFwIHRoZSBzY3JlZW4gYXQgdGhlIGNlbnRlciBvZiB0aGlzIEltYWdlRWxlbWVudCdzXG4gICAqIHBvc2l0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QmFzZURyaXZlcn0gZHJpdmVyIC0gZHJpdmVyIGZvciBjYWxsaW5nIGFjdGlvbnMgd2l0aFxuICAgKi9cbiAgYXN5bmMgY2xpY2sgKGRyaXZlcikge1xuICAgIC8vIGJlZm9yZSB3ZSBjbGljayB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBhY3R1YWxseSBzdGlsbCB0aGVyZVxuICAgIC8vIHdoZXJlIHdlIGV4cGVjdCBpdCB0byBiZVxuICAgIGxldCBuZXdJbWdFbDtcbiAgICBjb25zdCB7XG4gICAgICBhdXRvVXBkYXRlSW1hZ2VFbGVtZW50UG9zaXRpb246IHVwZGF0ZVBvcyxcbiAgICAgIGNoZWNrRm9ySW1hZ2VFbGVtZW50U3RhbGVuZXNzLFxuICAgICAgaW1hZ2VFbGVtZW50VGFwU3RyYXRlZ3ksXG4gICAgfSA9IGRyaXZlci5zZXR0aW5ncy5nZXRTZXR0aW5ncygpO1xuXG4gICAgLy8gdmFsaWRhdGUgdGFwIHN0cmF0ZWd5XG4gICAgaWYgKCFJTUFHRV9UQVBfU1RSQVRFR0lFUy5pbmNsdWRlcyhpbWFnZUVsZW1lbnRUYXBTdHJhdGVneSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW5jb3JyZWN0IGltYWdlRWxlbWVudFRhcFN0cmF0ZWd5IHNldHRpbmcgYCArXG4gICAgICAgICAgICAgICAgICAgICAgYCcke2ltYWdlRWxlbWVudFRhcFN0cmF0ZWd5fScuIE11c3QgYmUgb25lIG9mIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KElNQUdFX1RBUF9TVFJBVEVHSUVTKSk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrRm9ySW1hZ2VFbGVtZW50U3RhbGVuZXNzIHx8IHVwZGF0ZVBvcykge1xuICAgICAgbG9nLmluZm8oJ0NoZWNraW5nIGltYWdlIGVsZW1lbnQgZm9yIHN0YWxlbmVzcyBiZWZvcmUgY2xpY2tpbmcnKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0ltZ0VsID0gYXdhaXQgZHJpdmVyLmZpbmRCeUltYWdlKHRoaXMudGVtcGxhdGUsIHtcbiAgICAgICAgICBzaG91bGRDaGVja1N0YWxlbmVzczogdHJ1ZSxcbiAgICAgICAgICAvLyBTZXQgaWdub3JlRGVmYXVsdEltYWdlVGVtcGxhdGVTY2FsZSBiZWNhdXNlIHRoaXMudGVtcGxhdGUgaXMgZGV2aWNlIHNjcmVlbnNob3QgYmFzZWQgaW1hZ2VcbiAgICAgICAgICAvLyBtYW5hZ2VkIGluc2lkZSBBcHBpdW0gYWZ0ZXIgZmluaWRuZyBpbWFnZSBieSB0ZW1wbGF0ZSB3aGljaCBtYW5hZ2VkIGJ5IGEgdXNlclxuICAgICAgICAgIGlnbm9yZURlZmF1bHRJbWFnZVRlbXBsYXRlU2NhbGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5TdGFsZUVsZW1lbnRSZWZlcmVuY2VFcnJvcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuZXF1YWxzKG5ld0ltZ0VsKSkge1xuICAgICAgICBsb2cud2FybihgV2hlbiB0cnlpbmcgdG8gY2xpY2sgb24gYW4gaW1hZ2UgZWxlbWVudCwgdGhlIGltYWdlIGNoYW5nZWQgYCArXG4gICAgICAgICAgICAgICAgIGBwb3NpdGlvbiBmcm9tIHdoZXJlIGl0IHdhcyBvcmlnaW5hbGx5IGZvdW5kLiBJdCBpcyBub3cgYXQgYCArXG4gICAgICAgICAgICAgICAgIGAke0pTT04uc3RyaW5naWZ5KG5ld0ltZ0VsLnJlY3QpfSBhbmQgd2FzIG9yaWdpbmFsbHkgYXQgYCArXG4gICAgICAgICAgICAgICAgIGAke0pTT04uc3RyaW5naWZ5KHRoaXMucmVjdCl9LmApO1xuICAgICAgICBpZiAodXBkYXRlUG9zKSB7XG4gICAgICAgICAgbG9nLndhcm4oJ0NsaWNrIHdpbGwgcHJvY2VlZCBhdCBuZXcgY29vcmRpbmF0ZXMnKTtcbiAgICAgICAgICB0aGlzLnJlY3QgPSBfLmNsb25lKG5ld0ltZ0VsLnJlY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZy53YXJuKCdDbGljayB3aWxsIHRha2UgcGxhY2UgYXQgb3JpZ2luYWwgY29vcmRpbmF0ZXMuIElmIHlvdSAnICtcbiAgICAgICAgICAgICAgICAgICAnd291bGQgbGlrZSBBcHBpdW0gdG8gYXV0b21hdGljYWxseSBjbGljayB0aGUgbmV3ICcgK1xuICAgICAgICAgICAgICAgICAgIFwiY29vcmRpbmF0ZXMsIHNldCB0aGUgJ2F1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbicgXCIgK1xuICAgICAgICAgICAgICAgICAgICdzZXR0aW5nIHRvIHRydWUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMuY2VudGVyO1xuICAgIGxvZy5pbmZvKGBXaWxsIHRhcCBvbiBpbWFnZSBlbGVtZW50IGF0IGNvb3JkaW5hdGUgWyR7eH0sICR7eX1dYCk7XG5cbiAgICBpZiAoaW1hZ2VFbGVtZW50VGFwU3RyYXRlZ3kgPT09IElNQUdFX0VMX1RBUF9TVFJBVEVHWV9XM0MpIHtcbiAgICAgIC8vIHNldCB1cCBhIFczQyBhY3Rpb24gdG8gY2xpY2sgb24gdGhlIGltYWdlIGJ5IHBvc2l0aW9uXG4gICAgICBsb2cuaW5mbygnV2lsbCB0YXAgdXNpbmcgVzNDIGFjdGlvbnMnKTtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHtcbiAgICAgICAgdHlwZTogJ3BvaW50ZXInLFxuICAgICAgICBpZDogJ21vdXNlJyxcbiAgICAgICAgcGFyYW1ldGVyczoge3BvaW50ZXJUeXBlOiAndG91Y2gnfSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgIHt0eXBlOiAncG9pbnRlck1vdmUnLCB4LCB5LCBkdXJhdGlvbjogMH0sXG4gICAgICAgICAge3R5cGU6ICdwb2ludGVyRG93bicsIGJ1dHRvbjogMH0sXG4gICAgICAgICAge3R5cGU6ICdwYXVzZScsIGR1cmF0aW9uOiBUQVBfRFVSQVRJT05fTVN9LFxuICAgICAgICAgIHt0eXBlOiAncG9pbnRlclVwJywgYnV0dG9uOiAwfSxcbiAgICAgICAgXVxuICAgICAgfTtcblxuICAgICAgLy8gY2hlY2sgaWYgdGhlIGRyaXZlciBoYXMgdGhlIGFwcHJvcHJpYXRlIHBlcmZvcm1BY3Rpb25zIG1ldGhvZFxuICAgICAgaWYgKGRyaXZlci5wZXJmb3JtQWN0aW9ucykge1xuICAgICAgICByZXR1cm4gYXdhaXQgZHJpdmVyLnBlcmZvcm1BY3Rpb25zKFthY3Rpb25dKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgbm90LCB3YXJuIGFuZCBmYWxsIGJhY2sgdG8gdGhlIG90aGVyIG1ldGhvZFxuICAgICAgbG9nLndhcm4oJ0RyaXZlciBkb2VzIG5vdCBzZWVtIHRvIGltcGxlbWVudCBXM0MgYWN0aW9ucywgZmFsbGluZyBiYWNrICcgK1xuICAgICAgICAgICAgICAgJ3RvIFRvdWNoQWN0aW9ucycpO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSB3M2Mgc3RyYXRlZ3kgd2FzIG5vdCByZXF1ZXN0ZWQsIGRvIHRoZSBvbmx5IG90aGVyIG9wdGlvbiAobWpzb253cFxuICAgIC8vIHRvdWNoIGFjdGlvbnMpXG4gICAgbG9nLmluZm8oJ1dpbGwgdGFwIHVzaW5nIE1KU09OV1AgVG91Y2hBY3Rpb25zJyk7XG4gICAgY29uc3QgYWN0aW9uID0ge1xuICAgICAgYWN0aW9uOiAndGFwJyxcbiAgICAgIG9wdGlvbnM6IHt4LCB5fVxuICAgIH07XG5cbiAgICBpZiAoZHJpdmVyLnBlcmZvcm1Ub3VjaCkge1xuICAgICAgcmV0dXJuIGF3YWl0IGRyaXZlci5wZXJmb3JtVG91Y2goW2FjdGlvbl0pO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcIkRyaXZlciBkaWQgbm90IGltcGxlbWVudCB0aGUgJ3BlcmZvcm1Ub3VjaCcgY29tbWFuZC4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAnRm9yIGRyaXZlcnMgdG8gc3VwcG9ydCBmaW5kaW5nIGltYWdlIGVsZW1lbnRzLCB0aGV5ICcgK1xuICAgICAgICAgICAgICAgICAgICBcInNob3VsZCBzdXBwb3J0ICdwZXJmb3JtVG91Y2gnIGFuZCAncGVyZm9ybUFjdGlvbnMnXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSB2YXJpb3VzIEFwcGl1bSBjb21tYW5kcyB0aGF0IGludm9sdmUgYW4gaW1hZ2UgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge0Jhc2VEcml2ZXJ9IGRyaXZlciAtIHRoZSBkcml2ZXIgdG8gdXNlIGZvciBjb21tYW5kc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gY21kIC0gdGhlIG5hbWUgb2YgdGhlIGRyaXZlciBjb21tYW5kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbWdFbElkIC0gdGhlIGlkIG9mIHRoZSBJbWFnZUVsZW1lbnQgdG8gd29yayB3aXRoXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBSZXN0IG9mIGFyZ3VtZW50cyBmb3IgZXhlY3V0ZVNjcmlwdHNcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gLSB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYSBjb21tYW5kXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZXhlY3V0ZSAoZHJpdmVyLCBjbWQsIGltZ0VsSWQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWRyaXZlci5faW1nRWxDYWNoZS5oYXMoaW1nRWxJZCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRWxlbWVudEVycm9yKCk7XG4gICAgfVxuXG4gICAgY29uc3QgaW1nRWwgPSBkcml2ZXIuX2ltZ0VsQ2FjaGUuZ2V0KGltZ0VsSWQpO1xuXG4gICAgc3dpdGNoIChjbWQpIHtcbiAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IGltZ0VsLmNsaWNrKGRyaXZlcik7XG4gICAgICBjYXNlICdlbGVtZW50RGlzcGxheWVkJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlICdnZXRTaXplJzpcbiAgICAgICAgcmV0dXJuIGltZ0VsLnNpemU7XG4gICAgICBjYXNlICdnZXRMb2NhdGlvbic6XG4gICAgICBjYXNlICdnZXRMb2NhdGlvbkluVmlldyc6XG4gICAgICAgIHJldHVybiBpbWdFbC5sb2NhdGlvbjtcbiAgICAgIGNhc2UgJ2dldEVsZW1lbnRSZWN0JzpcbiAgICAgICAgcmV0dXJuIGltZ0VsLnJlY3Q7XG4gICAgICBjYXNlICdnZXRBdHRyaWJ1dGUnOlxuICAgICAgICAvLyAvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvOmVsZW1lbnRJZC9hdHRyaWJ1dGUvOm5hbWVcbiAgICAgICAgLy8gL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LzplbGVtZW50SWQvYXR0cmlidXRlL3Zpc3VhbCBzaG91bGQgcmV0dW4gdGhlIHZpc3VhbCBkYXRhXG4gICAgICAgIC8vIGUuZy4gW1wiY29udGVudC1kZXNjXCIsXCJhcHBpdW0taW1hZ2UtZWxlbWVudC14eHh4eFwiLFwieHh4eHhcIl0sIFtcInZpc3VhbFwiLFwiYXBwaXVtLWltYWdlLWVsZW1lbnQteHh4eHhcIixcInh4eHh4XCJdXG4gICAgICAgIHN3aXRjaCAoYXJnc1swXSkge1xuICAgICAgICAgIGNhc2UgJ3Zpc3VhbCc6XG4gICAgICAgICAgICByZXR1cm4gaW1nRWwubWF0Y2hlZEltYWdlO1xuICAgICAgICAgIGNhc2UgJ3Njb3JlJzpcbiAgICAgICAgICAgIHJldHVybiBpbWdFbC5zY29yZTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBlcnJvcnMuTm90WWV0SW1wbGVtZW50ZWRFcnJvcigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlSW1hZ2VFbGVtZW50Q2FjaGUgKG1heCA9IE1BWF9DQUNIRV9TSVpFKSB7XG4gIHJldHVybiBuZXcgTFJVKHtcbiAgICBtYXgsXG4gICAgbGVuZ3RoOiAoZWwpID0+IGVsLnRlbXBsYXRlLmxlbmd0aCxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEltZ0VsRnJvbUFyZ3MgKGFyZ3MpIHtcbiAgZm9yIChsZXQgYXJnIG9mIGFyZ3MpIHtcbiAgICBpZiAoXy5pc1N0cmluZyhhcmcpICYmIGFyZy5zdGFydHNXaXRoKElNQUdFX0VMRU1FTlRfUFJFRklYKSkge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgSW1hZ2VFbGVtZW50LCBnZXRJbWdFbEZyb21BcmdzLCBtYWtlSW1hZ2VFbGVtZW50Q2FjaGUsXG4gIElNQUdFX0VMX1RBUF9TVFJBVEVHWV9NSlNPTldQLCBJTUFHRV9FTF9UQVBfU1RSQVRFR1lfVzNDLFxuICBERUZBVUxUX1RFTVBMQVRFX0lNQUdFX1NDQUxFXG59O1xuIl0sImZpbGUiOiJsaWIvYmFzZWRyaXZlci9pbWFnZS1lbGVtZW50LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
