"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatResponseValue = formatResponseValue;
exports.formatStatus = formatStatus;
Object.defineProperty(exports, "MJSONWP_ELEMENT_KEY", {
  enumerable: true,
  get: function () {
    return _constants.MJSONWP_ELEMENT_KEY;
  }
});
Object.defineProperty(exports, "W3C_ELEMENT_KEY", {
  enumerable: true,
  get: function () {
    return _constants.W3C_ELEMENT_KEY;
  }
});
exports.JSONWP_SUCCESS_STATUS_CODE = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../basedriver/helpers");

var _constants = require("../constants");

const JSONWP_SUCCESS_STATUS_CODE = 0;
exports.JSONWP_SUCCESS_STATUS_CODE = JSONWP_SUCCESS_STATUS_CODE;
const JSONWP_UNKNOWN_ERROR_STATUS_CODE = 13;

function formatResponseValue(resValue) {
  if (_lodash.default.isUndefined(resValue)) {
    return null;
  }

  return (0, _helpers.duplicateKeys)(resValue, _constants.MJSONWP_ELEMENT_KEY, _constants.W3C_ELEMENT_KEY);
}

function formatStatus(responseBody, responseCode = 200, protocol = null) {
  if (!_lodash.default.isPlainObject(responseBody)) {
    return responseBody;
  }

  const isError = _lodash.default.has(responseBody.value, 'error') || responseCode >= 400;

  if (protocol === _constants.PROTOCOLS.MJSONWP && !_lodash.default.isInteger(responseBody.status) || !protocol && !_lodash.default.has(responseBody, 'status')) {
    responseBody.status = isError ? JSONWP_UNKNOWN_ERROR_STATUS_CODE : JSONWP_SUCCESS_STATUS_CODE;
  } else if (protocol === _constants.PROTOCOLS.W3C && _lodash.default.has(responseBody, 'status')) {
    delete responseBody.status;
  }

  return responseBody;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbIkpTT05XUF9TVUNDRVNTX1NUQVRVU19DT0RFIiwiSlNPTldQX1VOS05PV05fRVJST1JfU1RBVFVTX0NPREUiLCJmb3JtYXRSZXNwb25zZVZhbHVlIiwicmVzVmFsdWUiLCJfIiwiaXNVbmRlZmluZWQiLCJNSlNPTldQX0VMRU1FTlRfS0VZIiwiVzNDX0VMRU1FTlRfS0VZIiwiZm9ybWF0U3RhdHVzIiwicmVzcG9uc2VCb2R5IiwicmVzcG9uc2VDb2RlIiwicHJvdG9jb2wiLCJpc1BsYWluT2JqZWN0IiwiaXNFcnJvciIsImhhcyIsInZhbHVlIiwiUFJPVE9DT0xTIiwiTUpTT05XUCIsImlzSW50ZWdlciIsInN0YXR1cyIsIlczQyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLDBCQUEwQixHQUFHLENBQW5DOztBQUNBLE1BQU1DLGdDQUFnQyxHQUFHLEVBQXpDOztBQVdBLFNBQVNDLG1CQUFULENBQThCQyxRQUE5QixFQUF3QztBQUN0QyxNQUFJQyxnQkFBRUMsV0FBRixDQUFjRixRQUFkLENBQUosRUFBNkI7QUFFM0IsV0FBTyxJQUFQO0FBQ0Q7O0FBR0QsU0FBTyw0QkFBY0EsUUFBZCxFQUF3QkcsOEJBQXhCLEVBQTZDQywwQkFBN0MsQ0FBUDtBQUNEOztBQWFELFNBQVNDLFlBQVQsQ0FBdUJDLFlBQXZCLEVBQXFDQyxZQUFZLEdBQUcsR0FBcEQsRUFBeURDLFFBQVEsR0FBRyxJQUFwRSxFQUEwRTtBQUN4RSxNQUFJLENBQUNQLGdCQUFFUSxhQUFGLENBQWdCSCxZQUFoQixDQUFMLEVBQW9DO0FBQ2xDLFdBQU9BLFlBQVA7QUFDRDs7QUFDRCxRQUFNSSxPQUFPLEdBQUdULGdCQUFFVSxHQUFGLENBQU1MLFlBQVksQ0FBQ00sS0FBbkIsRUFBMEIsT0FBMUIsS0FBc0NMLFlBQVksSUFBSSxHQUF0RTs7QUFDQSxNQUFLQyxRQUFRLEtBQUtLLHFCQUFVQyxPQUF2QixJQUFrQyxDQUFDYixnQkFBRWMsU0FBRixDQUFZVCxZQUFZLENBQUNVLE1BQXpCLENBQXBDLElBQ0UsQ0FBQ1IsUUFBRCxJQUFhLENBQUNQLGdCQUFFVSxHQUFGLENBQU1MLFlBQU4sRUFBb0IsUUFBcEIsQ0FEcEIsRUFDb0Q7QUFDbERBLElBQUFBLFlBQVksQ0FBQ1UsTUFBYixHQUFzQk4sT0FBTyxHQUN6QlosZ0NBRHlCLEdBRXpCRCwwQkFGSjtBQUdELEdBTEQsTUFLTyxJQUFJVyxRQUFRLEtBQUtLLHFCQUFVSSxHQUF2QixJQUE4QmhCLGdCQUFFVSxHQUFGLENBQU1MLFlBQU4sRUFBb0IsUUFBcEIsQ0FBbEMsRUFBaUU7QUFDdEUsV0FBT0EsWUFBWSxDQUFDVSxNQUFwQjtBQUNEOztBQUNELFNBQU9WLFlBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBkdXBsaWNhdGVLZXlzIH0gZnJvbSAnLi4vYmFzZWRyaXZlci9oZWxwZXJzJztcbmltcG9ydCB7IE1KU09OV1BfRUxFTUVOVF9LRVksIFczQ19FTEVNRU5UX0tFWSwgUFJPVE9DT0xTIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuY29uc3QgSlNPTldQX1NVQ0NFU1NfU1RBVFVTX0NPREUgPSAwO1xuY29uc3QgSlNPTldQX1VOS05PV05fRVJST1JfU1RBVFVTX0NPREUgPSAxMztcblxuLyoqXG4gKiBQcmVwcm9jZXNzZXMgdGhlIHJlc3VsdGluZyB2YWx1ZSBmb3IgQVBJIHJlc3BvbnNlcyxcbiAqIHNvIHRoZXkgaGF2ZSBrZXlzIGZvciBib3RoIFczQyBhbmQgSlNPTldQIHByb3RvY29scy5cbiAqIFRoZSBhcmd1bWVudCB2YWx1ZSBpcyBOT1QgbXV0YXRlZFxuICpcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzVmFsdWUgVGhlIGFjdHVhbCByZXNwb25zZSB2YWx1ZVxuICogQHJldHVybnMgez9PYmplY3R9IEVpdGhlciBtb2RpZmllZCB2YWx1ZSBvciB0aGUgc2FtZSBvbmUgaWZcbiAqIG5vdGhpbmcgaGFzIGJlZW4gbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UmVzcG9uc2VWYWx1ZSAocmVzVmFsdWUpIHtcbiAgaWYgKF8uaXNVbmRlZmluZWQocmVzVmFsdWUpKSB7XG4gICAgLy8gY29udmVydCB1bmRlZmluZWQgdG8gbnVsbFxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIElmIHRoZSBNSlNPTldQIGVsZW1lbnQga2V5IGZvcm1hdCAoRUxFTUVOVCkgd2FzIHByb3ZpZGVkLCBhZGQgYSBkdXBsaWNhdGUga2V5IChlbGVtZW50LTYwNjYtMTFlNC1hNTJlLTRmNzM1NDY2Y2VjZilcbiAgLy8gSWYgdGhlIFczQyBlbGVtZW50IGtleSBmb3JtYXQgKGVsZW1lbnQtNjA2Ni0xMWU0LWE1MmUtNGY3MzU0NjZjZWNmKSB3YXMgcHJvdmlkZWQsIGFkZCBhIGR1cGxpY2F0ZSBrZXkgKEVMRU1FTlQpXG4gIHJldHVybiBkdXBsaWNhdGVLZXlzKHJlc1ZhbHVlLCBNSlNPTldQX0VMRU1FTlRfS0VZLCBXM0NfRUxFTUVOVF9LRVkpO1xufVxuXG4vKipcbiAqIFByb3Blcmx5IGZvcm1hdHMgdGhlIHN0YXR1cyBmb3IgQVBJIHJlc3BvbnNlcyxcbiAqIHNvIHRoZXkgYXJlIGNvcnJlY3QgZm9yIGJvdGggVzNDIGFuZCBKU09OV1AgcHJvdG9jb2xzLlxuICogVGhpcyBtZXRob2QgRE9FUyBtdXRhdGUgdGhlIGByZXNwb25zZUJvZHlgIGFyZ3VtZW50IGlmIG5lZWRlZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZUJvZHlcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXNwb25zZUNvZGUgdGhlIEhUVFAgcmVzcG9uc2UgY29kZVxuICogQHBhcmFtIHs/c3RyaW5nfSBwcm90b2NvbCBUaGUgbmFtZSBvZiB0aGUgcHJvdG9jb2wsIGVpdGhlclxuICogYFBST1RPQ09MUy5XM0NgIG9yIGBQUk9UT0NPTFMuTUpTT05XUGBcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBmaXhlZCByZXNwb25zZSBib2R5XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFN0YXR1cyAocmVzcG9uc2VCb2R5LCByZXNwb25zZUNvZGUgPSAyMDAsIHByb3RvY29sID0gbnVsbCkge1xuICBpZiAoIV8uaXNQbGFpbk9iamVjdChyZXNwb25zZUJvZHkpKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlQm9keTtcbiAgfVxuICBjb25zdCBpc0Vycm9yID0gXy5oYXMocmVzcG9uc2VCb2R5LnZhbHVlLCAnZXJyb3InKSB8fCByZXNwb25zZUNvZGUgPj0gNDAwO1xuICBpZiAoKHByb3RvY29sID09PSBQUk9UT0NPTFMuTUpTT05XUCAmJiAhXy5pc0ludGVnZXIocmVzcG9uc2VCb2R5LnN0YXR1cykpXG4gICAgfHwgKCFwcm90b2NvbCAmJiAhXy5oYXMocmVzcG9uc2VCb2R5LCAnc3RhdHVzJykpKSB7XG4gICAgcmVzcG9uc2VCb2R5LnN0YXR1cyA9IGlzRXJyb3JcbiAgICAgID8gSlNPTldQX1VOS05PV05fRVJST1JfU1RBVFVTX0NPREVcbiAgICAgIDogSlNPTldQX1NVQ0NFU1NfU1RBVFVTX0NPREU7XG4gIH0gZWxzZSBpZiAocHJvdG9jb2wgPT09IFBST1RPQ09MUy5XM0MgJiYgXy5oYXMocmVzcG9uc2VCb2R5LCAnc3RhdHVzJykpIHtcbiAgICBkZWxldGUgcmVzcG9uc2VCb2R5LnN0YXR1cztcbiAgfVxuICByZXR1cm4gcmVzcG9uc2VCb2R5O1xufVxuXG5cbmV4cG9ydCB7XG4gIE1KU09OV1BfRUxFTUVOVF9LRVksIFczQ19FTEVNRU5UX0tFWSwgZm9ybWF0UmVzcG9uc2VWYWx1ZSxcbiAgSlNPTldQX1NVQ0NFU1NfU1RBVFVTX0NPREUsIGZvcm1hdFN0YXR1cyxcbn07XG4iXSwiZmlsZSI6ImxpYi9wcm90b2NvbC9oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
