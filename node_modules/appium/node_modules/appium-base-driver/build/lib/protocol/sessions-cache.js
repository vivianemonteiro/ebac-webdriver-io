"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _appiumSupport = require("appium-support");

var _constants = require("../constants");

const GENERIC_PROTOCOL = 'GENERIC';

const mjsonwpLog = _appiumSupport.logger.getLogger('MJSONWP');

const w3cLog = _appiumSupport.logger.getLogger('W3C');

const genericProtocolLog = _appiumSupport.logger.getLogger(GENERIC_PROTOCOL);

class SessionsCache {
  constructor(max) {
    this._cache = new _lruCache.default({
      max
    });
  }

  getLogger(sessionId, protocol) {
    if (sessionId) {
      if (this._cache.has(sessionId)) {
        const value = this._cache.get(sessionId);

        if (value.logger) {
          return value.logger;
        }

        protocol = protocol || value.protocol;
      }

      return _appiumSupport.logger.getLogger(`${protocol || GENERIC_PROTOCOL} ` + `(${sessionId.substring(0, Math.min(sessionId.length, 8))})`);
    }

    switch (protocol) {
      case _constants.PROTOCOLS.W3C:
        return w3cLog;

      case _constants.PROTOCOLS.MJSONWP:
        return mjsonwpLog;

      default:
        return genericProtocolLog;
    }
  }

  getProtocol(sessionId) {
    return (this._cache.get(sessionId) || {}).protocol;
  }

  putSession(sessionId, value) {
    if (sessionId && value) {
      this._cache.set(sessionId, {
        protocol: value,
        logger: this.getLogger(sessionId, value)
      });
    }

    return value;
  }

  resetLogger(sessionId) {
    if (this._cache.has(sessionId)) {
      this._cache.get(sessionId).logger = null;
    }
  }

}

const SESSIONS_CACHE = new SessionsCache(100);
var _default = SESSIONS_CACHE;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9zZXNzaW9ucy1jYWNoZS5qcyJdLCJuYW1lcyI6WyJHRU5FUklDX1BST1RPQ09MIiwibWpzb253cExvZyIsImxvZ2dlciIsImdldExvZ2dlciIsInczY0xvZyIsImdlbmVyaWNQcm90b2NvbExvZyIsIlNlc3Npb25zQ2FjaGUiLCJjb25zdHJ1Y3RvciIsIm1heCIsIl9jYWNoZSIsIkxSVSIsInNlc3Npb25JZCIsInByb3RvY29sIiwiaGFzIiwidmFsdWUiLCJnZXQiLCJzdWJzdHJpbmciLCJNYXRoIiwibWluIiwibGVuZ3RoIiwiUFJPVE9DT0xTIiwiVzNDIiwiTUpTT05XUCIsImdldFByb3RvY29sIiwicHV0U2Vzc2lvbiIsInNldCIsInJlc2V0TG9nZ2VyIiwiU0VTU0lPTlNfQ0FDSEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZ0JBQWdCLEdBQUcsU0FBekI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixTQUFqQixDQUFuQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdGLHNCQUFPQyxTQUFQLENBQWlCLEtBQWpCLENBQWY7O0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUdILHNCQUFPQyxTQUFQLENBQWlCSCxnQkFBakIsQ0FBM0I7O0FBR0EsTUFBTU0sYUFBTixDQUFvQjtBQUNsQkMsRUFBQUEsV0FBVyxDQUFFQyxHQUFGLEVBQU87QUFDaEIsU0FBS0MsTUFBTCxHQUFjLElBQUlDLGlCQUFKLENBQVE7QUFBRUYsTUFBQUE7QUFBRixLQUFSLENBQWQ7QUFDRDs7QUFFREwsRUFBQUEsU0FBUyxDQUFFUSxTQUFGLEVBQWFDLFFBQWIsRUFBdUI7QUFDOUIsUUFBSUQsU0FBSixFQUFlO0FBQ2IsVUFBSSxLQUFLRixNQUFMLENBQVlJLEdBQVosQ0FBZ0JGLFNBQWhCLENBQUosRUFBZ0M7QUFDOUIsY0FBTUcsS0FBSyxHQUFHLEtBQUtMLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsQ0FBZDs7QUFDQSxZQUFJRyxLQUFLLENBQUNaLE1BQVYsRUFBa0I7QUFDaEIsaUJBQU9ZLEtBQUssQ0FBQ1osTUFBYjtBQUNEOztBQUNEVSxRQUFBQSxRQUFRLEdBQUdBLFFBQVEsSUFBSUUsS0FBSyxDQUFDRixRQUE3QjtBQUNEOztBQUlELGFBQU9WLHNCQUFPQyxTQUFQLENBQWtCLEdBQUVTLFFBQVEsSUFBSVosZ0JBQWlCLEdBQWhDLEdBQ3JCLElBQUdXLFNBQVMsQ0FBQ0ssU0FBVixDQUFvQixDQUFwQixFQUF1QkMsSUFBSSxDQUFDQyxHQUFMLENBQVNQLFNBQVMsQ0FBQ1EsTUFBbkIsRUFBMkIsQ0FBM0IsQ0FBdkIsQ0FBc0QsR0FEckQsQ0FBUDtBQUVEOztBQUdELFlBQVFQLFFBQVI7QUFDRSxXQUFLUSxxQkFBVUMsR0FBZjtBQUNFLGVBQU9qQixNQUFQOztBQUNGLFdBQUtnQixxQkFBVUUsT0FBZjtBQUNFLGVBQU9yQixVQUFQOztBQUNGO0FBQ0UsZUFBT0ksa0JBQVA7QUFOSjtBQVFEOztBQUVEa0IsRUFBQUEsV0FBVyxDQUFFWixTQUFGLEVBQWE7QUFDdEIsV0FBTyxDQUFDLEtBQUtGLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsS0FBOEIsRUFBL0IsRUFBbUNDLFFBQTFDO0FBQ0Q7O0FBRURZLEVBQUFBLFVBQVUsQ0FBRWIsU0FBRixFQUFhRyxLQUFiLEVBQW9CO0FBQzVCLFFBQUlILFNBQVMsSUFBSUcsS0FBakIsRUFBd0I7QUFDdEIsV0FBS0wsTUFBTCxDQUFZZ0IsR0FBWixDQUFnQmQsU0FBaEIsRUFBMkI7QUFDekJDLFFBQUFBLFFBQVEsRUFBRUUsS0FEZTtBQUt6QlosUUFBQUEsTUFBTSxFQUFFLEtBQUtDLFNBQUwsQ0FBZVEsU0FBZixFQUEwQkcsS0FBMUI7QUFMaUIsT0FBM0I7QUFPRDs7QUFDRCxXQUFPQSxLQUFQO0FBQ0Q7O0FBRURZLEVBQUFBLFdBQVcsQ0FBRWYsU0FBRixFQUFhO0FBQ3RCLFFBQUksS0FBS0YsTUFBTCxDQUFZSSxHQUFaLENBQWdCRixTQUFoQixDQUFKLEVBQWdDO0FBQzlCLFdBQUtGLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsRUFBMkJULE1BQTNCLEdBQW9DLElBQXBDO0FBQ0Q7QUFDRjs7QUFyRGlCOztBQTREcEIsTUFBTXlCLGNBQWMsR0FBRyxJQUFJckIsYUFBSixDQUFrQixHQUFsQixDQUF2QjtlQUVlcUIsYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMUlUgZnJvbSAnbHJ1LWNhY2hlJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IFBST1RPQ09MUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cblxuY29uc3QgR0VORVJJQ19QUk9UT0NPTCA9ICdHRU5FUklDJztcbmNvbnN0IG1qc29ud3BMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdNSlNPTldQJyk7XG5jb25zdCB3M2NMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdXM0MnKTtcbmNvbnN0IGdlbmVyaWNQcm90b2NvbExvZyA9IGxvZ2dlci5nZXRMb2dnZXIoR0VORVJJQ19QUk9UT0NPTCk7XG5cblxuY2xhc3MgU2Vzc2lvbnNDYWNoZSB7XG4gIGNvbnN0cnVjdG9yIChtYXgpIHtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBMUlUoeyBtYXggfSk7XG4gIH1cblxuICBnZXRMb2dnZXIgKHNlc3Npb25JZCwgcHJvdG9jb2wpIHtcbiAgICBpZiAoc2Vzc2lvbklkKSB7XG4gICAgICBpZiAodGhpcy5fY2FjaGUuaGFzKHNlc3Npb25JZCkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9jYWNoZS5nZXQoc2Vzc2lvbklkKTtcbiAgICAgICAgaWYgKHZhbHVlLmxvZ2dlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5sb2dnZXI7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdG9jb2wgPSBwcm90b2NvbCB8fCB2YWx1ZS5wcm90b2NvbDtcbiAgICAgIH1cbiAgICAgIC8vIEFsd2F5cyBjcmVhdGUgYSBuZXcgbG9nZ2VyIGluc3RhbmNlIGZvciBpZHNcbiAgICAgIC8vIHRoYXQgYXJlIG5vdCBpbiB0aGUgY3VycmVudCBzZXNzaW9ucyBsaXN0LFxuICAgICAgLy8gc28gd2UgY2FuIHN0aWxsIHNlZSBzdWNoIGlkcyBhcyBwcmVmaXhlc1xuICAgICAgcmV0dXJuIGxvZ2dlci5nZXRMb2dnZXIoYCR7cHJvdG9jb2wgfHwgR0VORVJJQ19QUk9UT0NPTH0gYCArXG4gICAgICAgIGAoJHtzZXNzaW9uSWQuc3Vic3RyaW5nKDAsIE1hdGgubWluKHNlc3Npb25JZC5sZW5ndGgsIDgpKX0pYCk7XG4gICAgfVxuXG4gICAgLy8gRmFsbCBiYWNrIHRvIHByb3RvY29sIG5hbWUtb25seSBsb2dnZXIgaWYgc2Vzc2lvbiBpZCBpcyB1bmtub3duXG4gICAgc3dpdGNoIChwcm90b2NvbCkge1xuICAgICAgY2FzZSBQUk9UT0NPTFMuVzNDOlxuICAgICAgICByZXR1cm4gdzNjTG9nO1xuICAgICAgY2FzZSBQUk9UT0NPTFMuTUpTT05XUDpcbiAgICAgICAgcmV0dXJuIG1qc29ud3BMb2c7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZ2VuZXJpY1Byb3RvY29sTG9nO1xuICAgIH1cbiAgfVxuXG4gIGdldFByb3RvY29sIChzZXNzaW9uSWQpIHtcbiAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmdldChzZXNzaW9uSWQpIHx8IHt9KS5wcm90b2NvbDtcbiAgfVxuXG4gIHB1dFNlc3Npb24gKHNlc3Npb25JZCwgdmFsdWUpIHtcbiAgICBpZiAoc2Vzc2lvbklkICYmIHZhbHVlKSB7XG4gICAgICB0aGlzLl9jYWNoZS5zZXQoc2Vzc2lvbklkLCB7XG4gICAgICAgIHByb3RvY29sOiB2YWx1ZSxcbiAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjYWNoZSB0aGUgbG9nZ2VyIGluc3RhbmNlIGZvciBlYWNoIHJhbmRvbSBzZXNzaW9uIGlkIGluIHRoZSBjYWNoZVxuICAgICAgICAvLyBpbiBvcmRlciB0byBzYXZlIG1lbW9yeS4gSW5zdGVhZCB3ZSBvbmx5IGNhY2hlIGxvZ2dlcnMgZm9yIHZhbGlkIGlkcyB0aGF0XG4gICAgICAgIC8vIGFyZSByZXR1cm5lZCBieSBgY3JlYXRlU2Vzc2lvbmAgY2FsbCBhbmQgcmVzZXQgdGhlbSBhZnRlciBgZGVsZXRlU2Vzc2lvbmAgaXMgY2FsbGVkXG4gICAgICAgIGxvZ2dlcjogdGhpcy5nZXRMb2dnZXIoc2Vzc2lvbklkLCB2YWx1ZSksXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmVzZXRMb2dnZXIgKHNlc3Npb25JZCkge1xuICAgIGlmICh0aGlzLl9jYWNoZS5oYXMoc2Vzc2lvbklkKSkge1xuICAgICAgdGhpcy5fY2FjaGUuZ2V0KHNlc3Npb25JZCkubG9nZ2VyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBjYWNoZSBpcyB1c2VmdWwgd2hlbiBhIHNlc3Npb24gZ2V0cyB0ZXJtaW5hdGVkXG4vLyBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBzZXNzaW9ucyBsaXN0IGluIHRoZSB1bWJyZWxsYSBkcml2ZXIsXG4vLyBidXQgdGhlIGNsaWVudCBzdGlsbCB0cmllcyB0byBzZW5kIGEgY29tbWFuZCB0byB0aGlzIHNlc3Npb24gaWQuXG4vLyBTbyB3ZSBrbm93IGhvdyB0byBwcm9wZXJseSB3cmFwIHRoZSBlcnJvciBtZXNzYWdlIGZvciBpdFxuY29uc3QgU0VTU0lPTlNfQ0FDSEUgPSBuZXcgU2Vzc2lvbnNDYWNoZSgxMDApO1xuXG5leHBvcnQgZGVmYXVsdCBTRVNTSU9OU19DQUNIRTtcbiJdLCJmaWxlIjoibGliL3Byb3RvY29sL3Nlc3Npb25zLWNhY2hlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
