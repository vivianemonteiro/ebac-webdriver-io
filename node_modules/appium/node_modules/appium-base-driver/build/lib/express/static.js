"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.guineaPig = guineaPig;
exports.guineaPigScrollable = guineaPigScrollable;
exports.guineaPigAppBanner = guineaPigAppBanner;
exports.welcome = welcome;
exports.STATIC_DIR = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

let STATIC_DIR = _path.default.resolve(__dirname, '..', '..', '..', 'static');

exports.STATIC_DIR = STATIC_DIR;

if (_lodash.default.isNull(_path.default.resolve(__dirname).match(/build[/\\]lib[/\\]express$/))) {
  exports.STATIC_DIR = STATIC_DIR = _path.default.resolve(__dirname, '..', '..', 'static');
}

async function guineaPigTemplate(req, res, page) {
  const delay = parseInt(req.params.delay || req.query.delay || 0, 10);
  const throwError = req.params.throwError || req.query.throwError || '';
  let params = {
    throwError,
    serverTime: new Date(),
    userAgent: req.headers['user-agent'],
    comment: 'None'
  };

  if (req.method === 'POST') {
    params.comment = req.body.comments || params.comment;
  }

  _logger.default.debug(`Sending guinea pig response with params: ${JSON.stringify(params)}`);

  if (delay) {
    _logger.default.debug(`Waiting ${delay}ms before responding`);

    await _bluebird.default.delay(delay);
  }

  res.set('content-type', 'text/html');
  res.cookie('guineacookie1', 'i am a cookie value', {
    path: '/'
  });
  res.cookie('guineacookie2', 'cooki√©2', {
    path: '/'
  });
  res.cookie('guineacookie3', 'cant access this', {
    domain: '.blargimarg.com',
    path: '/'
  });
  res.send((await getTemplate(page))(params));
}

async function guineaPig(req, res) {
  return await guineaPigTemplate(req, res, 'guinea-pig.html');
}

async function guineaPigScrollable(req, res) {
  return await guineaPigTemplate(req, res, 'guinea-pig-scrollable.html');
}

async function guineaPigAppBanner(req, res) {
  return await guineaPigTemplate(req, res, 'guinea-pig-app-banner.html');
}

async function welcome(req, res) {
  let params = {
    message: 'Let\'s browse!'
  };

  _logger.default.debug(`Sending welcome response with params: ${JSON.stringify(params)}`);

  res.send((await getTemplate('welcome.html'))(params));
}

async function getTemplate(templateName) {
  let content = await _appiumSupport.fs.readFile(_path.default.resolve(STATIC_DIR, 'test', templateName));
  return _lodash.default.template(content.toString());
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL3N0YXRpYy5qcyJdLCJuYW1lcyI6WyJTVEFUSUNfRElSIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJfIiwiaXNOdWxsIiwibWF0Y2giLCJndWluZWFQaWdUZW1wbGF0ZSIsInJlcSIsInJlcyIsInBhZ2UiLCJkZWxheSIsInBhcnNlSW50IiwicGFyYW1zIiwicXVlcnkiLCJ0aHJvd0Vycm9yIiwic2VydmVyVGltZSIsIkRhdGUiLCJ1c2VyQWdlbnQiLCJoZWFkZXJzIiwiY29tbWVudCIsIm1ldGhvZCIsImJvZHkiLCJjb21tZW50cyIsImxvZyIsImRlYnVnIiwiSlNPTiIsInN0cmluZ2lmeSIsIkIiLCJzZXQiLCJjb29raWUiLCJkb21haW4iLCJzZW5kIiwiZ2V0VGVtcGxhdGUiLCJndWluZWFQaWciLCJndWluZWFQaWdTY3JvbGxhYmxlIiwiZ3VpbmVhUGlnQXBwQmFubmVyIiwid2VsY29tZSIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZU5hbWUiLCJjb250ZW50IiwiZnMiLCJyZWFkRmlsZSIsInRlbXBsYXRlIiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLFVBQVUsR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLElBQXBDLEVBQTBDLFFBQTFDLENBQWpCOzs7O0FBQ0EsSUFBSUMsZ0JBQUVDLE1BQUYsQ0FBU0osY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCRyxLQUF4QixDQUE4Qiw0QkFBOUIsQ0FBVCxDQUFKLEVBQTJFO0FBR3pFLHVCQUFBTixVQUFVLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxRQUFwQyxDQUFiO0FBQ0Q7O0FBRUQsZUFBZUksaUJBQWYsQ0FBa0NDLEdBQWxDLEVBQXVDQyxHQUF2QyxFQUE0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LGVBQWVvQixXQUFmLENBQTRCTSxZQUE1QixFQUEwQztBQUN4QyxNQUFJQyxPQUFPLEdBQUcsTUFBTUMsa0JBQUdDLFFBQUgsQ0FBWXpDLGNBQUtDLE9BQUwsQ0FBYUYsVUFBYixFQUF5QixNQUF6QixFQUFpQ3VDLFlBQWpDLENBQVosQ0FBcEI7QUFDQSxTQUFPbkMsZ0JBQUV1QyxRQUFGLENBQVdILE9BQU8sQ0FBQ0ksUUFBUixFQUFYLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxubGV0IFNUQVRJQ19ESVIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nLCAnc3RhdGljJyk7XG5pZiAoXy5pc051bGwocGF0aC5yZXNvbHZlKF9fZGlybmFtZSkubWF0Y2goL2J1aWxkWy9cXFxcXWxpYlsvXFxcXF1leHByZXNzJC8pKSkge1xuICAvLyBpbiBzb21lIGNvbnRleHRzIHdlIGFyZSBub3QgaW4gdGhlIGJ1aWxkIGRpcmVjdG9yeSxcbiAgLy8gc28gd2UgZG9uJ3Qgd2FudCB0byBnbyBiYWNrIHRoZSBleHRyYSBsZXZlbFxuICBTVEFUSUNfRElSID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3N0YXRpYycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBndWluZWFQaWdUZW1wbGF0ZSAocmVxLCByZXMsIHBhZ2UpIHtcbiAgY29uc3QgZGVsYXkgPSBwYXJzZUludChyZXEucGFyYW1zLmRlbGF5IHx8IHJlcS5xdWVyeS5kZWxheSB8fCAwLCAxMCk7XG4gIGNvbnN0IHRocm93RXJyb3IgPSByZXEucGFyYW1zLnRocm93RXJyb3IgfHwgcmVxLnF1ZXJ5LnRocm93RXJyb3IgfHwgJyc7XG4gIGxldCBwYXJhbXMgPSB7XG4gICAgdGhyb3dFcnJvcixcbiAgICBzZXJ2ZXJUaW1lOiBuZXcgRGF0ZSgpLFxuICAgIHVzZXJBZ2VudDogcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXSxcbiAgICBjb21tZW50OiAnTm9uZSdcbiAgfTtcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xuICAgIHBhcmFtcy5jb21tZW50ID0gcmVxLmJvZHkuY29tbWVudHMgfHwgcGFyYW1zLmNvbW1lbnQ7XG4gIH1cbiAgbG9nLmRlYnVnKGBTZW5kaW5nIGd1aW5lYSBwaWcgcmVzcG9uc2Ugd2l0aCBwYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zKX1gKTtcbiAgaWYgKGRlbGF5KSB7XG4gICAgbG9nLmRlYnVnKGBXYWl0aW5nICR7ZGVsYXl9bXMgYmVmb3JlIHJlc3BvbmRpbmdgKTtcbiAgICBhd2FpdCBCLmRlbGF5KGRlbGF5KTtcbiAgfVxuICByZXMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9odG1sJyk7XG4gIHJlcy5jb29raWUoJ2d1aW5lYWNvb2tpZTEnLCAnaSBhbSBhIGNvb2tpZSB2YWx1ZScsIHtwYXRoOiAnLyd9KTtcbiAgcmVzLmNvb2tpZSgnZ3VpbmVhY29va2llMicsICdjb29racOpMicsIHtwYXRoOiAnLyd9KTtcbiAgcmVzLmNvb2tpZSgnZ3VpbmVhY29va2llMycsICdjYW50IGFjY2VzcyB0aGlzJywge1xuICAgIGRvbWFpbjogJy5ibGFyZ2ltYXJnLmNvbScsXG4gICAgcGF0aDogJy8nXG4gIH0pO1xuICByZXMuc2VuZCgoYXdhaXQgZ2V0VGVtcGxhdGUocGFnZSkpKHBhcmFtcykpO1xufVxuXG4vKlxuICogRHluYW1pYyBwYWdlIG1hcHBlZCB0byAvdGVzdC9ndWluZWEtcGlnXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGd1aW5lYVBpZyAocmVxLCByZXMpIHtcbiAgcmV0dXJuIGF3YWl0IGd1aW5lYVBpZ1RlbXBsYXRlKHJlcSwgcmVzLCAnZ3VpbmVhLXBpZy5odG1sJyk7XG59XG5cbi8qXG4gKiBEeW5hbWljIHBhZ2UgbWFwcGVkIHRvIC90ZXN0L2d1aW5lYS1waWctc2Nyb2xsYWJsZVxuICovXG5hc3luYyBmdW5jdGlvbiBndWluZWFQaWdTY3JvbGxhYmxlIChyZXEsIHJlcykge1xuICByZXR1cm4gYXdhaXQgZ3VpbmVhUGlnVGVtcGxhdGUocmVxLCByZXMsICdndWluZWEtcGlnLXNjcm9sbGFibGUuaHRtbCcpO1xufVxuXG4vKlxuICogRHluYW1pYyBwYWdlIG1hcHBlZCB0byAvdGVzdC9ndWluZWEtcGlnLWFwcC1iYW5uZXJcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ3VpbmVhUGlnQXBwQmFubmVyIChyZXEsIHJlcykge1xuICByZXR1cm4gYXdhaXQgZ3VpbmVhUGlnVGVtcGxhdGUocmVxLCByZXMsICdndWluZWEtcGlnLWFwcC1iYW5uZXIuaHRtbCcpO1xufVxuXG4vKlxuICogRHluYW1pYyBwYWdlIG1hcHBlZCB0byAvd2VsY29tZVxuICovXG5hc3luYyBmdW5jdGlvbiB3ZWxjb21lIChyZXEsIHJlcykge1xuICBsZXQgcGFyYW1zID0ge21lc3NhZ2U6ICdMZXRcXCdzIGJyb3dzZSEnfTtcbiAgbG9nLmRlYnVnKGBTZW5kaW5nIHdlbGNvbWUgcmVzcG9uc2Ugd2l0aCBwYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zKX1gKTtcbiAgcmVzLnNlbmQoKGF3YWl0IGdldFRlbXBsYXRlKCd3ZWxjb21lLmh0bWwnKSkocGFyYW1zKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRlbXBsYXRlICh0ZW1wbGF0ZU5hbWUpIHtcbiAgbGV0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoU1RBVElDX0RJUiwgJ3Rlc3QnLCB0ZW1wbGF0ZU5hbWUpKTtcbiAgcmV0dXJuIF8udGVtcGxhdGUoY29udGVudC50b1N0cmluZygpKTtcbn1cblxuZXhwb3J0IHsgZ3VpbmVhUGlnLCBndWluZWFQaWdTY3JvbGxhYmxlLCBndWluZWFQaWdBcHBCYW5uZXIsIHdlbGNvbWUsIFNUQVRJQ19ESVIgfTtcbiJdLCJmaWxlIjoibGliL2V4cHJlc3Mvc3RhdGljLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
