"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addWebSocketHandler = addWebSocketHandler;
exports.removeWebSocketHandler = removeWebSocketHandler;
exports.removeAllWebSocketHandlers = removeAllWebSocketHandlers;
exports.getWebSocketHandlers = getWebSocketHandlers;
exports.DEFAULT_WS_PATHNAME_PREFIX = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _url = _interopRequireDefault(require("url"));

const DEFAULT_WS_PATHNAME_PREFIX = '/ws';
exports.DEFAULT_WS_PATHNAME_PREFIX = DEFAULT_WS_PATHNAME_PREFIX;

async function addWebSocketHandler(handlerPathname, handlerServer) {
  let isUpgradeListenerAssigned = true;

  if (_lodash.default.isUndefined(this.webSocketsMapping)) {
    this.webSocketsMapping = {};
    isUpgradeListenerAssigned = false;
  }

  this.webSocketsMapping[handlerPathname] = handlerServer;

  if (isUpgradeListenerAssigned) {
    return;
  }

  this.on('upgrade', (request, socket, head) => {
    const currentPathname = _url.default.parse(request.url).pathname;

    for (const [pathname, wsServer] of _lodash.default.toPairs(this.webSocketsMapping)) {
      if (currentPathname === pathname) {
        wsServer.handleUpgrade(request, socket, head, ws => {
          wsServer.emit('connection', ws, request);
        });
        return;
      }
    }

    socket.destroy();
  });
}

async function getWebSocketHandlers(keysFilter = null) {
  if (_lodash.default.isEmpty(this.webSocketsMapping)) {
    return {};
  }

  let result = {};

  for (const [pathname, wsServer] of _lodash.default.toPairs(this.webSocketsMapping)) {
    if (!_lodash.default.isString(keysFilter) || pathname.includes(keysFilter)) {
      result[pathname] = wsServer;
    }
  }

  return result;
}

async function removeWebSocketHandler(handlerPathname) {
  if (!this.webSocketsMapping || !this.webSocketsMapping[handlerPathname]) {
    return false;
  }

  const wsServer = this.webSocketsMapping[handlerPathname];

  try {
    wsServer.close();

    for (const client of wsServer.clients) {
      client.terminate();
    }

    return true;
  } catch (ign) {} finally {
    delete this.webSocketsMapping[handlerPathname];
  }

  return false;
}

async function removeAllWebSocketHandlers() {
  if (_lodash.default.isEmpty(this.webSocketsMapping)) {
    return false;
  }

  let result = false;

  for (const pathname of _lodash.default.keys(this.webSocketsMapping)) {
    result = result || (await this.removeWebSocketHandler(pathname));
  }

  return result;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
