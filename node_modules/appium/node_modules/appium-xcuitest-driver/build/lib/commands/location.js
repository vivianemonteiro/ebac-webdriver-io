"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDevice = require("appium-ios-device");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {};
exports.commands = commands;

commands.getGeoLocation = async function getGeoLocation() {
  const {
    authorizationStatus,
    latitude,
    longitude,
    altitude
  } = await this.proxyCommand('/wda/device/location', 'GET');

  if (authorizationStatus !== 3) {
    _logger.default.errorAndThrow(`Location service must be set to 'Always' in order to ` + `retrive the current geolocation data. Please set it up manually via ` + `'Settings > Privacy > Location Services -> WebDriverAgentRunner-Runner'`);
  }

  return {
    latitude,
    longitude,
    altitude
  };
};

commands.setGeoLocation = async function setGeoLocation(location) {
  let {
    latitude,
    longitude
  } = location;

  if (!_appiumSupport.util.hasValue(latitude) || !_appiumSupport.util.hasValue(longitude)) {
    _logger.default.errorAndThrow(`Both latitude and longitude should be set`);
  }

  if (this.isSimulator()) {
    await this.opts.device.setGeolocation(`${latitude}`, `${longitude}`);
    return;
  }

  const service = await _appiumIosDevice.services.startSimulateLocationService(this.opts.udid);

  try {
    service.setLocation(latitude, longitude);
  } catch (e) {
    _logger.default.errorAndThrow(`Can't set the location on device '${this.opts.udid}'. Original error: ${e.message}`);
  } finally {
    service.close();
  }
};

commands.mobileResetLocationService = async function mobileResetLocationService() {
  if (this.isSimulator()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const service = await _appiumIosDevice.services.startSimulateLocationService(this.opts.udid);

  try {
    service.resetLocation();
  } catch (err) {
    _logger.default.errorAndThrow(`Failed to reset the location on the device on device '${this.opts.udid}'. ` + `Origianl error: ${err.message}`);
  } finally {
    service.close();
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2NhdGlvbi5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImdldEdlb0xvY2F0aW9uIiwiYXV0aG9yaXphdGlvblN0YXR1cyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYWx0aXR1ZGUiLCJwcm94eUNvbW1hbmQiLCJsb2ciLCJlcnJvckFuZFRocm93Iiwic2V0R2VvTG9jYXRpb24iLCJsb2NhdGlvbiIsInV0aWwiLCJoYXNWYWx1ZSIsImlzU2ltdWxhdG9yIiwib3B0cyIsImRldmljZSIsInNldEdlb2xvY2F0aW9uIiwic2VydmljZSIsInNlcnZpY2VzIiwic3RhcnRTaW11bGF0ZUxvY2F0aW9uU2VydmljZSIsInVkaWQiLCJzZXRMb2NhdGlvbiIsImUiLCJtZXNzYWdlIiwiY2xvc2UiLCJtb2JpbGVSZXNldExvY2F0aW9uU2VydmljZSIsImVycm9ycyIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJyZXNldExvY2F0aW9uIiwiZXJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmOzs7QUF1QkFBLFFBQVEsQ0FBQ0MsY0FBVCxHQUEwQixlQUFlQSxjQUFmLEdBQWlDO0FBQ3pELFFBQU07QUFDSkMsSUFBQUEsbUJBREk7QUFFSkMsSUFBQUEsUUFGSTtBQUdKQyxJQUFBQSxTQUhJO0FBSUpDLElBQUFBO0FBSkksTUFLRixNQUFNLEtBQUtDLFlBQUwsQ0FBa0Isc0JBQWxCLEVBQTBDLEtBQTFDLENBTFY7O0FBU0EsTUFBSUosbUJBQW1CLEtBQUssQ0FBNUIsRUFBK0I7QUFDN0JLLG9CQUFJQyxhQUFKLENBQW1CLHVEQUFELEdBQ2Ysc0VBRGUsR0FFZix5RUFGSDtBQUdEOztBQUVELFNBQU87QUFBQ0wsSUFBQUEsUUFBRDtBQUFXQyxJQUFBQSxTQUFYO0FBQXNCQyxJQUFBQTtBQUF0QixHQUFQO0FBQ0QsQ0FqQkQ7O0FBbUJBTCxRQUFRLENBQUNTLGNBQVQsR0FBMEIsZUFBZUEsY0FBZixDQUErQkMsUUFBL0IsRUFBeUM7QUFDakUsTUFBSTtBQUFDUCxJQUFBQSxRQUFEO0FBQVdDLElBQUFBO0FBQVgsTUFBd0JNLFFBQTVCOztBQUVBLE1BQUksQ0FBQ0Msb0JBQUtDLFFBQUwsQ0FBY1QsUUFBZCxDQUFELElBQTRCLENBQUNRLG9CQUFLQyxRQUFMLENBQWNSLFNBQWQsQ0FBakMsRUFBMkQ7QUFDekRHLG9CQUFJQyxhQUFKLENBQW1CLDJDQUFuQjtBQUNEOztBQUVELE1BQUksS0FBS0ssV0FBTCxFQUFKLEVBQXdCO0FBQ3RCLFVBQU0sS0FBS0MsSUFBTCxDQUFVQyxNQUFWLENBQWlCQyxjQUFqQixDQUFpQyxHQUFFYixRQUFTLEVBQTVDLEVBQWdELEdBQUVDLFNBQVUsRUFBNUQsQ0FBTjtBQUNBO0FBQ0Q7O0FBRUQsUUFBTWEsT0FBTyxHQUFHLE1BQU1DLDBCQUFTQyw0QkFBVCxDQUFzQyxLQUFLTCxJQUFMLENBQVVNLElBQWhELENBQXRCOztBQUNBLE1BQUk7QUFDRkgsSUFBQUEsT0FBTyxDQUFDSSxXQUFSLENBQW9CbEIsUUFBcEIsRUFBOEJDLFNBQTlCO0FBQ0QsR0FGRCxDQUVFLE9BQU9rQixDQUFQLEVBQVU7QUFDVmYsb0JBQUlDLGFBQUosQ0FBbUIscUNBQW9DLEtBQUtNLElBQUwsQ0FBVU0sSUFBSyxzQkFBcUJFLENBQUMsQ0FBQ0MsT0FBUSxFQUFyRztBQUNELEdBSkQsU0FJVTtBQUNSTixJQUFBQSxPQUFPLENBQUNPLEtBQVI7QUFDRDtBQUNGLENBcEJEOztBQTJCQXhCLFFBQVEsQ0FBQ3lCLDBCQUFULEdBQXNDLGVBQWVBLDBCQUFmLEdBQTZDO0FBQ2pGLE1BQUksS0FBS1osV0FBTCxFQUFKLEVBQXdCO0FBQ3RCLFVBQU0sSUFBSWEseUJBQU9DLG1CQUFYLEVBQU47QUFDRDs7QUFFRCxRQUFNVixPQUFPLEdBQUcsTUFBTUMsMEJBQVNDLDRCQUFULENBQXNDLEtBQUtMLElBQUwsQ0FBVU0sSUFBaEQsQ0FBdEI7O0FBQ0EsTUFBSTtBQUNGSCxJQUFBQSxPQUFPLENBQUNXLGFBQVI7QUFDRCxHQUZELENBRUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1p0QixvQkFBSUMsYUFBSixDQUFtQix5REFBd0QsS0FBS00sSUFBTCxDQUFVTSxJQUFLLEtBQXhFLEdBQ2YsbUJBQWtCUyxHQUFHLENBQUNOLE9BQVEsRUFEakM7QUFFRCxHQUxELFNBS1U7QUFDUk4sSUFBQUEsT0FBTyxDQUFDTyxLQUFSO0FBQ0Q7QUFDRixDQWREOztlQWlCZXhCLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgc2VydmljZXMgfSBmcm9tICdhcHBpdW0taW9zLWRldmljZSc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2NhdGlvbk9iamVjdFxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsYXRpdHVkZSAtIFRoZSBsYXRpdHVkZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb25naXR1ZGUgLSBUaGUgbG9uZ2l0dWRlIG9mIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFsdGl0dWRlIC0gVGhlIGFsdGl0dWRlIG9mIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICovXG5cbi8qKlxuICogUmV0dXJucyBsb2NhdGlvbiBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKiBUaGUgZGV2aWNlIHVuZGVyIHRlc3QgbXVzdCBhbGxvdyB0aGUgbG9jYXRpb24gc2VydmljZXMgZm9yIFdEQVxuICogYXMgJ0Fsd2F5cycgdG8gZ2V0IHRoZSBsb2NhdGlvbiBkYXRhIGNvcnJlY3RseS5cbiAqXG4gKiBUaGUgJ2xhdGl0dWRlJywgJ2xvbmdpdHVkZScgYW5kICdhbHRpdHVkZScgY291bGQgYmUgemVybyBldmVuXG4gKiBpZiB0aGUgTG9jYXRpb24gU2VydmljZXMgYXJlIHNldCB0byAnQWx3YXlzJywgYmVjYXVzZSB0aGUgZGV2aWNlXG4gKiBuZWVkcyBzb21lIHRpbWUgdG8gdXBkYXRlIHRoZSBsb2NhdGlvbiBkYXRhLlxuICpcbiAqIEByZXR1cm5zIHtMb2NhdGlvbk9iamVjdH1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QgcmV0dXJucyBhbiBlcnJvciBtZXNzYWdlLlxuICogICAgICAgICAgICAgICAgIGkuZS46IHR2T1MgcmV0dXJucyB1bnN1cHBvcnRlZCBlcnJvclxuICovXG5jb21tYW5kcy5nZXRHZW9Mb2NhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIGdldEdlb0xvY2F0aW9uICgpIHtcbiAgY29uc3Qge1xuICAgIGF1dGhvcml6YXRpb25TdGF0dXMsXG4gICAgbGF0aXR1ZGUsXG4gICAgbG9uZ2l0dWRlLFxuICAgIGFsdGl0dWRlXG4gIH0gPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9kZXZpY2UvbG9jYXRpb24nLCAnR0VUJyk7XG5cbiAgLy8gJzMnIGlzICdBbHdheXMnIGluIHRoZSBwcml2YWN5XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2NvcmVsb2NhdGlvbi9jbGF1dGhvcml6YXRpb25zdGF0dXNcbiAgaWYgKGF1dGhvcml6YXRpb25TdGF0dXMgIT09IDMpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgTG9jYXRpb24gc2VydmljZSBtdXN0IGJlIHNldCB0byAnQWx3YXlzJyBpbiBvcmRlciB0byBgICtcbiAgICAgIGByZXRyaXZlIHRoZSBjdXJyZW50IGdlb2xvY2F0aW9uIGRhdGEuIFBsZWFzZSBzZXQgaXQgdXAgbWFudWFsbHkgdmlhIGAgK1xuICAgICAgYCdTZXR0aW5ncyA+IFByaXZhY3kgPiBMb2NhdGlvbiBTZXJ2aWNlcyAtPiBXZWJEcml2ZXJBZ2VudFJ1bm5lci1SdW5uZXInYCk7XG4gIH1cblxuICByZXR1cm4ge2xhdGl0dWRlLCBsb25naXR1ZGUsIGFsdGl0dWRlfTtcbn07XG5cbmNvbW1hbmRzLnNldEdlb0xvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gc2V0R2VvTG9jYXRpb24gKGxvY2F0aW9uKSB7XG4gIGxldCB7bGF0aXR1ZGUsIGxvbmdpdHVkZX0gPSBsb2NhdGlvbjtcblxuICBpZiAoIXV0aWwuaGFzVmFsdWUobGF0aXR1ZGUpIHx8ICF1dGlsLmhhc1ZhbHVlKGxvbmdpdHVkZSkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQm90aCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIHNob3VsZCBiZSBzZXRgKTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnNldEdlb2xvY2F0aW9uKGAke2xhdGl0dWRlfWAsIGAke2xvbmdpdHVkZX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzZXJ2aWNlID0gYXdhaXQgc2VydmljZXMuc3RhcnRTaW11bGF0ZUxvY2F0aW9uU2VydmljZSh0aGlzLm9wdHMudWRpZCk7XG4gIHRyeSB7XG4gICAgc2VydmljZS5zZXRMb2NhdGlvbihsYXRpdHVkZSwgbG9uZ2l0dWRlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDYW4ndCBzZXQgdGhlIGxvY2F0aW9uIG9uIGRldmljZSAnJHt0aGlzLm9wdHMudWRpZH0nLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgc2VydmljZS5jbG9zZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBsb2NhdGlvbiBzZXJ2aWNlIG9uIHJlYWwgZGV2aWNlLlxuICogUmFpc2VzIG5vdCBpbXBsZW1lbnRlZCBlcnJvciBmb3Igc2ltdWxhdG9yLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBkZXZpY2UgaXMgc2ltdWxhdG9yLCBvciAncmVzZXRMb2NhdGlvbicgcmFpc2VzIGFuIGVycm9yLlxuICovXG5jb21tYW5kcy5tb2JpbGVSZXNldExvY2F0aW9uU2VydmljZSA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVJlc2V0TG9jYXRpb25TZXJ2aWNlICgpIHtcbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgY29uc3Qgc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0U2ltdWxhdGVMb2NhdGlvblNlcnZpY2UodGhpcy5vcHRzLnVkaWQpO1xuICB0cnkge1xuICAgIHNlcnZpY2UucmVzZXRMb2NhdGlvbigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgRmFpbGVkIHRvIHJlc2V0IHRoZSBsb2NhdGlvbiBvbiB0aGUgZGV2aWNlIG9uIGRldmljZSAnJHt0aGlzLm9wdHMudWRpZH0nLiBgICtcbiAgICAgIGBPcmlnaWFubCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXJ2aWNlLmNsb3NlKCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvY2F0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
