"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {},
      extensions = {};
exports.commands = commands;

commands.elementDisplayed = async function elementDisplayed(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.getAtomsElement(el);
    return await this.executeAtom('is_displayed', [atomsElement]);
  }

  return await this.proxyCommand(`/element/${el}/displayed`, 'GET');
};

commands.elementEnabled = async function elementEnabled(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.getAtomsElement(el);
    return await this.executeAtom('is_enabled', [atomsElement]);
  }

  return await this.proxyCommand(`/element/${el}/enabled`, 'GET');
};

commands.elementSelected = async function elementSelected(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.getAtomsElement(el);
    return await this.executeAtom('is_selected', [atomsElement]);
  }

  return await this.proxyCommand(`/element/${el}/selected`, 'GET');
};

commands.getName = async function getName(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.getAtomsElement(el);
    const script = 'return arguments[0].tagName.toLowerCase()';
    return await this.executeAtom('execute_script', [script, [atomsElement]]);
  }

  return await this.proxyCommand(`/element/${el}/name`, 'GET');
};

commands.getNativeAttribute = async function getNativeAttribute(attribute, el) {
  if (attribute === 'contentSize') {
    return await this.getContentSize(el);
  }

  el = _appiumSupport.util.unwrapElement(el);
  let value = await this.proxyCommand(`/element/${el}/attribute/${attribute}`, 'GET');

  if ([0, 1].includes(value)) {
    value = !!value;
  }

  return _lodash.default.isNull(value) || _lodash.default.isString(value) ? value : JSON.stringify(value);
};

commands.getAttribute = async function getAttribute(attribute, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.getNativeAttribute(attribute, el);
  }

  const atomsElement = this.getAtomsElement(el);
  return await this.executeAtom('get_attribute_value', [atomsElement, attribute]);
};

commands.getProperty = async function getProperty(property, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.getNativeAttribute(property, el);
  }

  const atomsElement = this.getAtomsElement(el);
  return await this.executeAtom('get_attribute_value', [atomsElement, property]);
};

commands.getText = async function getText(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.proxyCommand(`/element/${el}/text`, 'GET');
  }

  let atomsElement = this.getAtomsElement(el);
  return await this.executeAtom('get_text', [atomsElement]);
};

commands.getElementRect = async function getElementRect(el) {
  if (this.isWebContext()) {
    const {
      x,
      y
    } = await this.getLocation(el);
    const {
      width,
      height
    } = await this.getSize(el);
    return {
      x,
      y,
      width,
      height
    };
  }

  el = _appiumSupport.util.unwrapElement(el);
  return await this.getNativeRect(el);
};

extensions.getNativeRect = async function getNativeRect(el) {
  return await this.proxyCommand(`/element/${el}/rect`, 'GET');
};

commands.getLocation = async function getLocation(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = await this.getAtomsElement(el);
    let loc = await this.executeAtom('get_top_left_coordinates', [atomsElement]);

    if (this.opts.absoluteWebLocations) {
      const script = 'return [' + 'Math.max(window.pageXOffset,document.documentElement.scrollLeft,document.body.scrollLeft),' + 'Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop)];';
      const [xOffset, yOffset] = await this.execute(script);
      loc.x += xOffset;
      loc.y += yOffset;
    }

    return loc;
  }

  const rect = await this.getElementRect(el);
  return {
    x: rect.x,
    y: rect.y
  };
};

commands.getLocationInView = async function getLocationInView(el) {
  return await this.getLocation(el);
};

commands.getSize = async function getSize(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    return await this.executeAtom('get_size', [this.getAtomsElement(el)]);
  }

  const rect = await this.getElementRect(el);
  return {
    width: rect.width,
    height: rect.height
  };
};

function prepareInputValue(inp) {
  if (![_lodash.default.isArray, _lodash.default.isString, _lodash.default.isFinite].some(f => f(inp))) {
    throw new Error(`Only strings, numbers and arrays are supported as input arguments. ` + `Received: ${JSON.stringify(inp)}`);
  }

  if (_lodash.default.isArray(inp)) {
    inp = inp.join('');
  } else if (_lodash.default.isFinite(inp)) {
    inp = `${inp}`;
  }

  return [...inp].map(k => {
    if (['\uE006', '\uE007'].includes(k)) {
      return '\n';
    }

    if (['\uE003', '\ue017'].includes(k)) {
      return '\b';
    }

    return k;
  });
}

commands.setValueImmediate = async function setValueImmediate(value, el) {
  _logger.default.info('There is currently no way to bypass typing using XCUITest. Setting value through keyboard');

  await this.setValue(value, el);
};

commands.setValue = async function setValue(value, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    await this.proxyCommand(`/element/${el}/value`, 'POST', {
      value: prepareInputValue(value)
    });
    return;
  }

  const atomsElement = this.getAtomsElement(el);
  await this.executeAtom('click', [atomsElement]);
  await this.executeAtom('type', [atomsElement, value]);
};

commands.keys = async function keys(value) {
  await this.proxyCommand('/wda/keys', 'POST', {
    value: prepareInputValue(value)
  });
};

commands.clear = async function clear(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.getAtomsElement(el);
    await this.executeAtom('clear', [atomsElement]);
    return;
  }

  await this.proxyCommand(`/element/${el}/clear`, 'POST');
};

commands.getContentSize = async function getContentSize(el) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for getContentSize for web context is not yet implemented. Please contact an Appium dev');
  }

  const type = await this.getAttribute('type', el);

  if (type !== 'XCUIElementTypeTable' && type !== 'XCUIElementTypeCollectionView') {
    throw new Error(`Can't get content size for type '${type}', only for ` + `tables and collection views`);
  }

  let locator = '*';

  if (type === 'XCUIElementTypeTable') {
    locator = 'XCUIElementTypeCell';
  }

  let contentHeight = 0;
  const children = await this.findElOrEls(`class chain`, locator, true, el);

  if (children.length === 1) {
    const rect = await this.getElementRect(_lodash.default.head(children));
    contentHeight = rect.height;
  } else if (children.length) {
    switch (type) {
      case 'XCUIElementTypeTable':
        {
          const firstRect = await this.getElementRect(_lodash.default.head(children));
          const lastRect = await this.getElementRect(_lodash.default.last(children));
          contentHeight = lastRect.y + lastRect.height - firstRect.y;
          break;
        }

      case 'XCUIElementTypeCollectionView':
        {
          let elsInRow = 1;
          let firstRect = await this.getElementRect(_lodash.default.head(children));
          let initialRects = [firstRect];

          for (let i = 1; i < children.length; i++) {
            const rect = await this.getElementRect(children[i]);
            initialRects.push(rect);

            if (rect.y !== firstRect.y) {
              elsInRow = i;
              break;
            }
          }

          const spaceBetweenEls = initialRects[elsInRow].y - initialRects[elsInRow - 1].y - initialRects[elsInRow - 1].height;
          const numRows = Math.ceil(children.length / elsInRow);
          contentHeight = numRows * firstRect.height + spaceBetweenEls * (numRows - 1);
          break;
        }

      default:
        throw new Error(`Programming error: type '${type}' was not ` + `valid but should have already been rejected`);
    }
  }

  const size = await this.getSize(el);
  const origin = await this.getLocationInView(el);
  return JSON.stringify({
    width: size.width,
    height: size.height,
    top: origin.y,
    left: origin.x,
    scrollableOffset: contentHeight
  });
};

commands.isKeyboardShown = async function isKeyboardShown() {
  try {
    await this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
    return true;
  } catch (ign) {
    return false;
  }
};

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9lbGVtZW50LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiZXh0ZW5zaW9ucyIsImVsZW1lbnREaXNwbGF5ZWQiLCJlbCIsInV0aWwiLCJ1bndyYXBFbGVtZW50IiwiaXNXZWJDb250ZXh0IiwiYXRvbXNFbGVtZW50IiwiZ2V0QXRvbXNFbGVtZW50IiwiZXhlY3V0ZUF0b20iLCJwcm94eUNvbW1hbmQiLCJlbGVtZW50RW5hYmxlZCIsImVsZW1lbnRTZWxlY3RlZCIsImdldE5hbWUiLCJzY3JpcHQiLCJnZXROYXRpdmVBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJnZXRDb250ZW50U2l6ZSIsInZhbHVlIiwiaW5jbHVkZXMiLCJfIiwiaXNOdWxsIiwiaXNTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QXR0cmlidXRlIiwiZ2V0UHJvcGVydHkiLCJwcm9wZXJ0eSIsImdldFRleHQiLCJnZXRFbGVtZW50UmVjdCIsIngiLCJ5IiwiZ2V0TG9jYXRpb24iLCJ3aWR0aCIsImhlaWdodCIsImdldFNpemUiLCJnZXROYXRpdmVSZWN0IiwibG9jIiwib3B0cyIsImFic29sdXRlV2ViTG9jYXRpb25zIiwieE9mZnNldCIsInlPZmZzZXQiLCJleGVjdXRlIiwicmVjdCIsImdldExvY2F0aW9uSW5WaWV3IiwicHJlcGFyZUlucHV0VmFsdWUiLCJpbnAiLCJpc0FycmF5IiwiaXNGaW5pdGUiLCJzb21lIiwiZiIsIkVycm9yIiwiam9pbiIsIm1hcCIsImsiLCJzZXRWYWx1ZUltbWVkaWF0ZSIsImxvZyIsImluZm8iLCJzZXRWYWx1ZSIsImtleXMiLCJjbGVhciIsImVycm9ycyIsIk5vdFlldEltcGxlbWVudGVkRXJyb3IiLCJ0eXBlIiwibG9jYXRvciIsImNvbnRlbnRIZWlnaHQiLCJjaGlsZHJlbiIsImZpbmRFbE9yRWxzIiwibGVuZ3RoIiwiaGVhZCIsImZpcnN0UmVjdCIsImxhc3RSZWN0IiwibGFzdCIsImVsc0luUm93IiwiaW5pdGlhbFJlY3RzIiwiaSIsInB1c2giLCJzcGFjZUJldHdlZW5FbHMiLCJudW1Sb3dzIiwiTWF0aCIsImNlaWwiLCJzaXplIiwib3JpZ2luIiwidG9wIiwibGVmdCIsInNjcm9sbGFibGVPZmZzZXQiLCJpc0tleWJvYXJkU2hvd24iLCJmaW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMiLCJpZ24iLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsUUFBUSxHQUFHLEVBQWpCO0FBQUEsTUFBcUJDLFVBQVUsR0FBRyxFQUFsQzs7O0FBRUFELFFBQVEsQ0FBQ0UsZ0JBQVQsR0FBNEIsZUFBZUEsZ0JBQWYsQ0FBaUNDLEVBQWpDLEVBQXFDO0FBQy9EQSxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMOztBQUNBLE1BQUksS0FBS0csWUFBTCxFQUFKLEVBQXlCO0FBQ3ZCLFVBQU1DLFlBQVksR0FBRyxLQUFLQyxlQUFMLENBQXFCTCxFQUFyQixDQUFyQjtBQUNBLFdBQU8sTUFBTSxLQUFLTSxXQUFMLENBQWlCLGNBQWpCLEVBQWlDLENBQUNGLFlBQUQsQ0FBakMsQ0FBYjtBQUNEOztBQUVELFNBQU8sTUFBTSxLQUFLRyxZQUFMLENBQW1CLFlBQVdQLEVBQUcsWUFBakMsRUFBOEMsS0FBOUMsQ0FBYjtBQUNELENBUkQ7O0FBVUFILFFBQVEsQ0FBQ1csY0FBVCxHQUEwQixlQUFlQSxjQUFmLENBQStCUixFQUEvQixFQUFtQztBQUMzREEsRUFBQUEsRUFBRSxHQUFHQyxvQkFBS0MsYUFBTCxDQUFtQkYsRUFBbkIsQ0FBTDs7QUFDQSxNQUFJLEtBQUtHLFlBQUwsRUFBSixFQUF5QjtBQUN2QixVQUFNQyxZQUFZLEdBQUcsS0FBS0MsZUFBTCxDQUFxQkwsRUFBckIsQ0FBckI7QUFDQSxXQUFPLE1BQU0sS0FBS00sV0FBTCxDQUFpQixZQUFqQixFQUErQixDQUFDRixZQUFELENBQS9CLENBQWI7QUFDRDs7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LENBQUNwQyxNQUFyQixHQUFnQzJDLGVBQWUsSUFBSUMsT0FBTyxHQUFHLENBQWQsQ0FBL0Q7QUFDQTtBQUNEOztBQUNEO0FBQVMsY0FBTSxJQUFJM0IsS0FBSixDQUFXLDRCQUEyQlksSUFBSyxZQUFqQyxHQUNDLDZDQURYLENBQU47QUExQlg7QUE2QkQ7O0FBQ0QsUUFBTWtCLElBQUksR0FBRyxNQUFNLEtBQUs5QyxPQUFMLENBQWFoQyxFQUFiLENBQW5CO0FBQ0EsUUFBTStFLE1BQU0sR0FBRyxNQUFNLEtBQUt0QyxpQkFBTCxDQUF1QnpDLEVBQXZCLENBQXJCO0FBRUEsU0FBT29CLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQ3BCUyxJQUFBQSxLQUFLLEVBQUVnRCxJQUFJLENBQUNoRCxLQURRO0FBRXBCQyxJQUFBQSxNQUFNLEVBQUUrQyxJQUFJLENBQUMvQyxNQUZPO0FBR3BCaUQsSUFBQUEsR0FBRyxFQUFFRCxNQUFNLENBQUNuRCxDQUhRO0FBSXBCcUQsSUFBQUEsSUFBSSxFQUFFRixNQUFNLENBQUNwRCxDQUpPO0FBS3BCdUQsSUFBQUEsZ0JBQWdCLEVBQUVwQjtBQUxFLEdBQWYsQ0FBUDtBQU9ELENBcEVEOztBQXNFQWpFLFFBQVEsQ0FBQ3NGLGVBQVQsR0FBMkIsZUFBZUEsZUFBZixHQUFrQztBQUMzRCxNQUFJO0FBQ0YsVUFBTSxLQUFLQywyQkFBTCxDQUFpQyxZQUFqQyxFQUErQyx5QkFBL0MsRUFBMEUsS0FBMUUsQ0FBTjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVk7QUFDWixXQUFPLEtBQVA7QUFDRDtBQUNGLENBUEQ7O0FBU0FDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjekYsVUFBZCxFQUEwQkQsUUFBMUI7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmVsZW1lbnREaXNwbGF5ZWQgPSBhc3luYyBmdW5jdGlvbiBlbGVtZW50RGlzcGxheWVkIChlbCkge1xuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy5nZXRBdG9tc0VsZW1lbnQoZWwpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdpc19kaXNwbGF5ZWQnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L2Rpc3BsYXllZGAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmVsZW1lbnRFbmFibGVkID0gYXN5bmMgZnVuY3Rpb24gZWxlbWVudEVuYWJsZWQgKGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBhdG9tc0VsZW1lbnQgPSB0aGlzLmdldEF0b21zRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2lzX2VuYWJsZWQnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L2VuYWJsZWRgLCAnR0VUJyk7XG59O1xuXG5jb21tYW5kcy5lbGVtZW50U2VsZWN0ZWQgPSBhc3luYyBmdW5jdGlvbiBlbGVtZW50U2VsZWN0ZWQgKGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBhdG9tc0VsZW1lbnQgPSB0aGlzLmdldEF0b21zRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2lzX3NlbGVjdGVkJywgW2F0b21zRWxlbWVudF0pO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke2VsfS9zZWxlY3RlZGAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmdldE5hbWUgPSBhc3luYyBmdW5jdGlvbiBnZXROYW1lIChlbCkge1xuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy5nZXRBdG9tc0VsZW1lbnQoZWwpO1xuICAgIGNvbnN0IHNjcmlwdCA9ICdyZXR1cm4gYXJndW1lbnRzWzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSc7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2V4ZWN1dGVfc2NyaXB0JywgW3NjcmlwdCwgW2F0b21zRWxlbWVudF1dKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vbmFtZWAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmdldE5hdGl2ZUF0dHJpYnV0ZSA9IGFzeW5jIGZ1bmN0aW9uIGdldE5hdGl2ZUF0dHJpYnV0ZSAoYXR0cmlidXRlLCBlbCkge1xuICBpZiAoYXR0cmlidXRlID09PSAnY29udGVudFNpemUnKSB7XG4gICAgLy8gZG9uJ3QgcHJveHkgcmVxdWVzdHMgZm9yIHRoZSBjb250ZW50IHNpemUgb2YgYSBzY3JvbGxhYmxlIGVsZW1lbnRcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRDb250ZW50U2l6ZShlbCk7XG4gIH1cblxuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG5cbiAgLy8gb3RoZXJ3aXNlIGxldCBXREEgaGFuZGxlIGF0dHJpYnV0ZSByZXF1ZXN0c1xuICBsZXQgdmFsdWUgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vYXR0cmlidXRlLyR7YXR0cmlidXRlfWAsICdHRVQnKTtcbiAgLy8gVHJhbnNmb3JtIHRoZSByZXN1bHQgZm9yIHRoZSBjYXNlIHdoZW4gV0RBIHJldHVybnMgYW4gaW50ZWdlciByZXByZXNlbnRhdGlvbiBmb3IgYSBib29sZWFuIHZhbHVlXG4gIGlmIChbMCwgMV0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgdmFsdWUgPSAhIXZhbHVlO1xuICB9XG4gIC8vIFRoZSByZXR1cm5lZCB2YWx1ZSBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIGFjY29yZGluZyB0byBodHRwczovL3d3dy53My5vcmcvVFIvd2ViZHJpdmVyLyNnZXQtZWxlbWVudC1hdHRyaWJ1dGVcbiAgcmV0dXJuIChfLmlzTnVsbCh2YWx1ZSkgfHwgXy5pc1N0cmluZyh2YWx1ZSkpID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG59O1xuXG5jb21tYW5kcy5nZXRBdHRyaWJ1dGUgPSBhc3luYyBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZSwgZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXROYXRpdmVBdHRyaWJ1dGUoYXR0cmlidXRlLCBlbCk7XG4gIH1cbiAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy5nZXRBdG9tc0VsZW1lbnQoZWwpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0X2F0dHJpYnV0ZV92YWx1ZScsIFthdG9tc0VsZW1lbnQsIGF0dHJpYnV0ZV0pO1xufTtcblxuY29tbWFuZHMuZ2V0UHJvcGVydHkgPSBhc3luYyBmdW5jdGlvbiBnZXRQcm9wZXJ0eSAocHJvcGVydHksIGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TmF0aXZlQXR0cmlidXRlKHByb3BlcnR5LCBlbCk7XG4gIH1cbiAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy5nZXRBdG9tc0VsZW1lbnQoZWwpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0X2F0dHJpYnV0ZV92YWx1ZScsIFthdG9tc0VsZW1lbnQsIHByb3BlcnR5XSk7XG59O1xuXG5jb21tYW5kcy5nZXRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gZ2V0VGV4dCAoZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L3RleHRgLCAnR0VUJyk7XG4gIH1cbiAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMuZ2V0QXRvbXNFbGVtZW50KGVsKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF90ZXh0JywgW2F0b21zRWxlbWVudF0pO1xufTtcblxuY29tbWFuZHMuZ2V0RWxlbWVudFJlY3QgPSBhc3luYyBmdW5jdGlvbiBnZXRFbGVtZW50UmVjdCAoZWwpIHtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAvLyBNb2JpbGUgc2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCByZWN0XG4gICAgY29uc3Qge3gsIHl9ID0gYXdhaXQgdGhpcy5nZXRMb2NhdGlvbihlbCk7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gYXdhaXQgdGhpcy5nZXRTaXplKGVsKTtcbiAgICByZXR1cm4ge3gsIHksIHdpZHRoLCBoZWlnaHR9O1xuICB9XG5cbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5nZXROYXRpdmVSZWN0KGVsKTtcbn07XG5cbmV4dGVuc2lvbnMuZ2V0TmF0aXZlUmVjdCA9IGFzeW5jIGZ1bmN0aW9uIGdldE5hdGl2ZVJlY3QgKGVsKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vcmVjdGAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmdldExvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYXRpb24gKGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBhdG9tc0VsZW1lbnQgPSBhd2FpdCB0aGlzLmdldEF0b21zRWxlbWVudChlbCk7XG4gICAgbGV0IGxvYyA9IGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF90b3BfbGVmdF9jb29yZGluYXRlcycsIFthdG9tc0VsZW1lbnRdKTtcbiAgICBpZiAodGhpcy5vcHRzLmFic29sdXRlV2ViTG9jYXRpb25zKSB7XG4gICAgICBjb25zdCBzY3JpcHQgPSAncmV0dXJuIFsnICtcbiAgICAgICAgJ01hdGgubWF4KHdpbmRvdy5wYWdlWE9mZnNldCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQpLCcgK1xuICAgICAgICAnTWF0aC5tYXgod2luZG93LnBhZ2VZT2Zmc2V0LGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AsZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApXTsnO1xuICAgICAgY29uc3QgW3hPZmZzZXQsIHlPZmZzZXRdID0gYXdhaXQgdGhpcy5leGVjdXRlKHNjcmlwdCk7XG4gICAgICBsb2MueCArPSB4T2Zmc2V0O1xuICAgICAgbG9jLnkgKz0geU9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIGxvYztcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSBhd2FpdCB0aGlzLmdldEVsZW1lbnRSZWN0KGVsKTtcbiAgcmV0dXJuIHt4OiByZWN0LngsIHk6IHJlY3QueX07XG59O1xuXG5jb21tYW5kcy5nZXRMb2NhdGlvbkluVmlldyA9IGFzeW5jIGZ1bmN0aW9uIGdldExvY2F0aW9uSW5WaWV3IChlbCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5nZXRMb2NhdGlvbihlbCk7XG59O1xuXG5jb21tYW5kcy5nZXRTaXplID0gYXN5bmMgZnVuY3Rpb24gZ2V0U2l6ZSAoZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfc2l6ZScsIFt0aGlzLmdldEF0b21zRWxlbWVudChlbCldKTtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSBhd2FpdCB0aGlzLmdldEVsZW1lbnRSZWN0KGVsKTtcbiAgcmV0dXJuIHt3aWR0aDogcmVjdC53aWR0aCwgaGVpZ2h0OiByZWN0LmhlaWdodH07XG59O1xuXG4vKipcbiAqIFByZXBhcmVzIHRoZSBpbnB1dCB2YWx1ZSB0byBiZSBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gV0RBLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz58bnVtYmVyfSBpbnAgVGhlIGFjdHVhbCB0ZXh0IHRvIHR5cGUuXG4gKiBBY2NlcHRhYmxlIHZhbHVlcyBvZiBgaW5wYDpcbiAqICAgWydzb21lIHRleHQnXVxuICogICBbJ3MnLCAnbycsICdtJywgJ2UnLCAnICcsICd0JywgJ2UnLCAneCcsICd0J11cbiAqICAgJ3NvbWUgdGV4dCdcbiAqICAgMTIzNFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSB2YWx1ZSBpcyBub3QgYWNjZXB0YWJsZSBmb3IgaW5wdXRcbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBUaGUgcHJlcHJvY2Vzc2VkIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHByZXBhcmVJbnB1dFZhbHVlIChpbnApIHtcbiAgaWYgKCFbXy5pc0FycmF5LCBfLmlzU3RyaW5nLCBfLmlzRmluaXRlXS5zb21lKChmKSA9PiBmKGlucCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBPbmx5IHN0cmluZ3MsIG51bWJlcnMgYW5kIGFycmF5cyBhcmUgc3VwcG9ydGVkIGFzIGlucHV0IGFyZ3VtZW50cy4gYCArXG4gICAgICBgUmVjZWl2ZWQ6ICR7SlNPTi5zdHJpbmdpZnkoaW5wKX1gKTtcbiAgfVxuXG4gIC8vIG1ha2UgaXQgaW50byBhIHN0cmluZywgc28gdGhlbiB3ZSBhc3N1cmVcbiAgLy8gdGhlIGFycmF5IGl0ZW1zIGFyZSBzaW5nbGUgY2hhcmFjdGVyc1xuICBpZiAoXy5pc0FycmF5KGlucCkpIHtcbiAgICBpbnAgPSBpbnAuam9pbignJyk7XG4gIH0gZWxzZSBpZiAoXy5pc0Zpbml0ZShpbnApKSB7XG4gICAgaW5wID0gYCR7aW5wfWA7XG4gIH1cbiAgLy8gVGhlIGBzcGxpdGAgbWV0aG9kIG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIHN0cmluZ1xuICAvLyB0byBwcm9wZXJseSBoYW5kbGUgYWxsIFVuaWNvZGUgY29kZSBwb2ludHNcbiAgcmV0dXJuIFsuLi5pbnBdLm1hcCgoaykgPT4ge1xuICAgIGlmIChbJ1xcdUUwMDYnLCAnXFx1RTAwNyddLmluY2x1ZGVzKGspKSB7IC8vIFJFVFVSTiBvciBFTlRFUlxuICAgICAgcmV0dXJuICdcXG4nO1xuICAgIH1cbiAgICBpZiAoWydcXHVFMDAzJywgJ1xcdWUwMTcnXS5pbmNsdWRlcyhrKSkgeyAvLyBCQUNLU1BBQ0Ugb3IgREVMRVRFXG4gICAgICByZXR1cm4gJ1xcYic7XG4gICAgfVxuICAgIHJldHVybiBrO1xuICB9KTtcbn1cblxuY29tbWFuZHMuc2V0VmFsdWVJbW1lZGlhdGUgPSBhc3luYyBmdW5jdGlvbiBzZXRWYWx1ZUltbWVkaWF0ZSAodmFsdWUsIGVsKSB7XG4gIC8vIFdEQSBkb2VzIG5vdCBwcm92aWRlIG5vIHdheSB0byBzZXQgdGhlIHZhbHVlIGRpcmVjdGx5XG4gIGxvZy5pbmZvKCdUaGVyZSBpcyBjdXJyZW50bHkgbm8gd2F5IHRvIGJ5cGFzcyB0eXBpbmcgdXNpbmcgWENVSVRlc3QuIFNldHRpbmcgdmFsdWUgdGhyb3VnaCBrZXlib2FyZCcpO1xuICBhd2FpdCB0aGlzLnNldFZhbHVlKHZhbHVlLCBlbCk7XG59O1xuXG5jb21tYW5kcy5zZXRWYWx1ZSA9IGFzeW5jIGZ1bmN0aW9uIHNldFZhbHVlICh2YWx1ZSwgZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vdmFsdWVgLCAnUE9TVCcsIHtcbiAgICAgIHZhbHVlOiBwcmVwYXJlSW5wdXRWYWx1ZSh2YWx1ZSksXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy5nZXRBdG9tc0VsZW1lbnQoZWwpO1xuICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdjbGljaycsIFthdG9tc0VsZW1lbnRdKTtcbiAgYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgndHlwZScsIFthdG9tc0VsZW1lbnQsIHZhbHVlXSk7XG59O1xuXG5jb21tYW5kcy5rZXlzID0gYXN5bmMgZnVuY3Rpb24ga2V5cyAodmFsdWUpIHtcbiAgYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEva2V5cycsICdQT1NUJywge1xuICAgIHZhbHVlOiBwcmVwYXJlSW5wdXRWYWx1ZSh2YWx1ZSksXG4gIH0pO1xufTtcblxuY29tbWFuZHMuY2xlYXIgPSBhc3luYyBmdW5jdGlvbiBjbGVhciAoZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGNvbnN0IGF0b21zRWxlbWVudCA9IHRoaXMuZ2V0QXRvbXNFbGVtZW50KGVsKTtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdjbGVhcicsIFthdG9tc0VsZW1lbnRdKTtcbiAgICByZXR1cm47XG4gIH1cbiAgYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L2NsZWFyYCwgJ1BPU1QnKTtcbn07XG5cbmNvbW1hbmRzLmdldENvbnRlbnRTaXplID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q29udGVudFNpemUgKGVsKSB7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCdTdXBwb3J0IGZvciBnZXRDb250ZW50U2l6ZSBmb3Igd2ViIGNvbnRleHQgaXMgbm90IHlldCBpbXBsZW1lbnRlZC4gUGxlYXNlIGNvbnRhY3QgYW4gQXBwaXVtIGRldicpO1xuICB9XG5cbiAgY29uc3QgdHlwZSA9IGF3YWl0IHRoaXMuZ2V0QXR0cmlidXRlKCd0eXBlJywgZWwpO1xuXG4gIGlmICh0eXBlICE9PSAnWENVSUVsZW1lbnRUeXBlVGFibGUnICYmXG4gICAgICB0eXBlICE9PSAnWENVSUVsZW1lbnRUeXBlQ29sbGVjdGlvblZpZXcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBnZXQgY29udGVudCBzaXplIGZvciB0eXBlICcke3R5cGV9Jywgb25seSBmb3IgYCArXG4gICAgICAgICAgICAgICAgICAgIGB0YWJsZXMgYW5kIGNvbGxlY3Rpb24gdmlld3NgKTtcbiAgfVxuICBsZXQgbG9jYXRvciA9ICcqJztcbiAgaWYgKHR5cGUgPT09ICdYQ1VJRWxlbWVudFR5cGVUYWJsZScpIHtcbiAgICAvLyBvbmx5IGZpbmQgdGFibGUgY2VsbHMsIG5vdCBqdXN0IGFueSBjaGlsZHJlblxuICAgIGxvY2F0b3IgPSAnWENVSUVsZW1lbnRUeXBlQ2VsbCc7XG4gIH1cblxuICBsZXQgY29udGVudEhlaWdodCA9IDA7XG4gIGNvbnN0IGNoaWxkcmVuID0gYXdhaXQgdGhpcy5maW5kRWxPckVscyhgY2xhc3MgY2hhaW5gLCBsb2NhdG9yLCB0cnVlLCBlbCk7XG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBpZiB3ZSBrbm93IHRoZXJlJ3Mgb25seSBvbmUgZWxlbWVudCwgd2UgY2FuIG9wdGltaXplIHRvIG1ha2UganVzdCBvbmVcbiAgICAvLyBjYWxsIHRvIFdEQVxuICAgIGNvbnN0IHJlY3QgPSBhd2FpdCB0aGlzLmdldEVsZW1lbnRSZWN0KF8uaGVhZChjaGlsZHJlbikpO1xuICAgIGNvbnRlbnRIZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAvLyBvdGhlcndpc2UgaWYgd2UgaGF2ZSBtdWx0aXBsZSBlbGVtZW50cywgbG9naWMgZGlmZmVycyBiYXNlZCBvbiBlbGVtZW50XG4gICAgLy8gdHlwZVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnWENVSUVsZW1lbnRUeXBlVGFibGUnOiB7XG4gICAgICAgIGNvbnN0IGZpcnN0UmVjdCA9IGF3YWl0IHRoaXMuZ2V0RWxlbWVudFJlY3QoXy5oZWFkKGNoaWxkcmVuKSk7XG4gICAgICAgIGNvbnN0IGxhc3RSZWN0ID0gYXdhaXQgdGhpcy5nZXRFbGVtZW50UmVjdChfLmxhc3QoY2hpbGRyZW4pKTtcbiAgICAgICAgY29udGVudEhlaWdodCA9IGxhc3RSZWN0LnkgKyBsYXN0UmVjdC5oZWlnaHQgLSBmaXJzdFJlY3QueTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdYQ1VJRWxlbWVudFR5cGVDb2xsZWN0aW9uVmlldyc6IHtcbiAgICAgICAgbGV0IGVsc0luUm93ID0gMTsgLy8gd2Uga25vdyB0aGVyZSBtdXN0IGJlIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSByb3dcbiAgICAgICAgbGV0IGZpcnN0UmVjdCA9IGF3YWl0IHRoaXMuZ2V0RWxlbWVudFJlY3QoXy5oZWFkKGNoaWxkcmVuKSk7XG4gICAgICAgIGxldCBpbml0aWFsUmVjdHMgPSBbZmlyc3RSZWN0XTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHJlY3QgPSBhd2FpdCB0aGlzLmdldEVsZW1lbnRSZWN0KGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICBpbml0aWFsUmVjdHMucHVzaChyZWN0KTtcbiAgICAgICAgICBpZiAocmVjdC55ICE9PSBmaXJzdFJlY3QueSkge1xuICAgICAgICAgICAgZWxzSW5Sb3cgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNwYWNlQmV0d2VlbkVscyA9IGluaXRpYWxSZWN0c1tlbHNJblJvd10ueSAtIGluaXRpYWxSZWN0c1tlbHNJblJvdyAtIDFdLnkgLSBpbml0aWFsUmVjdHNbZWxzSW5Sb3cgLSAxXS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IG51bVJvd3MgPSBNYXRoLmNlaWwoY2hpbGRyZW4ubGVuZ3RoIC8gZWxzSW5Sb3cpO1xuXG4gICAgICAgIC8vIGFzc3VtZSBhbGwgY2VsbHMgYXJlIHRoZSBzYW1lIGhlaWdodFxuICAgICAgICBjb250ZW50SGVpZ2h0ID0gKG51bVJvd3MgKiBmaXJzdFJlY3QuaGVpZ2h0KSArIChzcGFjZUJldHdlZW5FbHMgKiAobnVtUm93cyAtIDEpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFByb2dyYW1taW5nIGVycm9yOiB0eXBlICcke3R5cGV9JyB3YXMgbm90IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB2YWxpZCBidXQgc2hvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIHJlamVjdGVkYCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHNpemUgPSBhd2FpdCB0aGlzLmdldFNpemUoZWwpO1xuICBjb25zdCBvcmlnaW4gPSBhd2FpdCB0aGlzLmdldExvY2F0aW9uSW5WaWV3KGVsKTtcbiAgLy8gYXR0cmlidXRlcyBoYXZlIHRvIGJlIHN0cmluZ3MsIHNvIHN0cmluZ2lmeSB0aGlzIHVwXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICB0b3A6IG9yaWdpbi55LFxuICAgIGxlZnQ6IG9yaWdpbi54LFxuICAgIHNjcm9sbGFibGVPZmZzZXQ6IGNvbnRlbnRIZWlnaHRcbiAgfSk7XG59O1xuXG5jb21tYW5kcy5pc0tleWJvYXJkU2hvd24gPSBhc3luYyBmdW5jdGlvbiBpc0tleWJvYXJkU2hvd24gKCkge1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZUtleWJvYXJkJywgZmFsc2UpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChpZ24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMpO1xuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9lbGVtZW50LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
