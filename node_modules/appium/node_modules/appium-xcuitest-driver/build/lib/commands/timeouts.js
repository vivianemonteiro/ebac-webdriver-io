"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.pageLoadTimeoutW3C = async function pageLoadTimeoutW3C(ms) {
  await this.setPageLoadTimeout(this.parseTimeoutArgument(ms));
};

commands.pageLoadTimeoutMJSONWP = async function pageLoadTimeoutMJSONWP(ms) {
  await this.setPageLoadTimeout(this.parseTimeoutArgument(ms));
};

commands.scriptTimeoutW3C = async function scriptTimeoutW3C(ms) {
  await this.asyncScriptTimeout(ms);
};

commands.scriptTimeoutMJSONWP = async function scriptTimeoutMJSONWP(ms) {
  await this.asyncScriptTimeout(ms);
};

commands.asyncScriptTimeout = async function asyncScriptTimeout(ms) {
  this.setAsyncScriptTimeout(this.parseTimeoutArgument(ms));
};

helpers.setPageLoadTimeout = function setPageLoadTimeout(ms) {
  ms = parseInt(ms, 10);
  this.pageLoadMs = ms;

  if (this.remote) {
    this.remote.pageLoadMs = this.pageLoadMs;
  }

  _logger.default.debug(`Set page load timeout to ${ms}ms`);
};

helpers.setAsyncScriptTimeout = function setAsyncScriptTimeout(ms) {
  this.asyncWaitMs = ms;

  _logger.default.debug(`Set async script timeout to ${ms}ms`);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0cy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwicGFnZUxvYWRUaW1lb3V0VzNDIiwibXMiLCJzZXRQYWdlTG9hZFRpbWVvdXQiLCJwYXJzZVRpbWVvdXRBcmd1bWVudCIsInBhZ2VMb2FkVGltZW91dE1KU09OV1AiLCJzY3JpcHRUaW1lb3V0VzNDIiwiYXN5bmNTY3JpcHRUaW1lb3V0Iiwic2NyaXB0VGltZW91dE1KU09OV1AiLCJzZXRBc3luY1NjcmlwdFRpbWVvdXQiLCJwYXJzZUludCIsInBhZ2VMb2FkTXMiLCJyZW1vdGUiLCJsb2ciLCJkZWJ1ZyIsImFzeW5jV2FpdE1zIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjtBQUFBLE1BQXFCQyxPQUFPLEdBQUcsRUFBL0I7QUFBQSxNQUFtQ0MsVUFBVSxHQUFHLEVBQWhEOzs7O0FBR0FGLFFBQVEsQ0FBQ0csa0JBQVQsR0FBOEIsZUFBZUEsa0JBQWYsQ0FBbUNDLEVBQW5DLEVBQXVDO0FBQ25FLFFBQU0sS0FBS0Msa0JBQUwsQ0FBd0IsS0FBS0Msb0JBQUwsQ0FBMEJGLEVBQTFCLENBQXhCLENBQU47QUFDRCxDQUZEOztBQUlBSixRQUFRLENBQUNPLHNCQUFULEdBQWtDLGVBQWVBLHNCQUFmLENBQXVDSCxFQUF2QyxFQUEyQztBQUMzRSxRQUFNLEtBQUtDLGtCQUFMLENBQXdCLEtBQUtDLG9CQUFMLENBQTBCRixFQUExQixDQUF4QixDQUFOO0FBQ0QsQ0FGRDs7QUFLQUosUUFBUSxDQUFDUSxnQkFBVCxHQUE0QixlQUFlQSxnQkFBZixDQUFpQ0osRUFBakMsRUFBcUM7QUFDL0QsUUFBTSxLQUFLSyxrQkFBTCxDQUF3QkwsRUFBeEIsQ0FBTjtBQUNELENBRkQ7O0FBSUFKLFFBQVEsQ0FBQ1Usb0JBQVQsR0FBZ0MsZUFBZUEsb0JBQWYsQ0FBcUNOLEVBQXJDLEVBQXlDO0FBQ3ZFLFFBQU0sS0FBS0ssa0JBQUwsQ0FBd0JMLEVBQXhCLENBQU47QUFDRCxDQUZEOztBQUlBSixRQUFRLENBQUNTLGtCQUFULEdBQThCLGVBQWVBLGtCQUFmLENBQW1DTCxFQUFuQyxFQUF1QztBQUNuRSxPQUFLTyxxQkFBTCxDQUEyQixLQUFLTCxvQkFBTCxDQUEwQkYsRUFBMUIsQ0FBM0I7QUFDRCxDQUZEOztBQUlBSCxPQUFPLENBQUNJLGtCQUFSLEdBQTZCLFNBQVNBLGtCQUFULENBQTZCRCxFQUE3QixFQUFpQztBQUM1REEsRUFBQUEsRUFBRSxHQUFHUSxRQUFRLENBQUNSLEVBQUQsRUFBSyxFQUFMLENBQWI7QUFDQSxPQUFLUyxVQUFMLEdBQWtCVCxFQUFsQjs7QUFDQSxNQUFJLEtBQUtVLE1BQVQsRUFBaUI7QUFDZixTQUFLQSxNQUFMLENBQVlELFVBQVosR0FBeUIsS0FBS0EsVUFBOUI7QUFDRDs7QUFDREUsa0JBQUlDLEtBQUosQ0FBVyw0QkFBMkJaLEVBQUcsSUFBekM7QUFDRCxDQVBEOztBQVNBSCxPQUFPLENBQUNVLHFCQUFSLEdBQWdDLFNBQVNBLHFCQUFULENBQWdDUCxFQUFoQyxFQUFvQztBQUNsRSxPQUFLYSxXQUFMLEdBQW1CYixFQUFuQjs7QUFDQVcsa0JBQUlDLEtBQUosQ0FBVywrQkFBOEJaLEVBQUcsSUFBNUM7QUFDRCxDQUhEOztBQUtBYyxNQUFNLENBQUNDLE1BQVAsQ0FBY2pCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuLy8gcGFnZUxvYWRcbmNvbW1hbmRzLnBhZ2VMb2FkVGltZW91dFczQyA9IGFzeW5jIGZ1bmN0aW9uIHBhZ2VMb2FkVGltZW91dFczQyAobXMpIHtcbiAgYXdhaXQgdGhpcy5zZXRQYWdlTG9hZFRpbWVvdXQodGhpcy5wYXJzZVRpbWVvdXRBcmd1bWVudChtcykpO1xufTtcblxuY29tbWFuZHMucGFnZUxvYWRUaW1lb3V0TUpTT05XUCA9IGFzeW5jIGZ1bmN0aW9uIHBhZ2VMb2FkVGltZW91dE1KU09OV1AgKG1zKSB7XG4gIGF3YWl0IHRoaXMuc2V0UGFnZUxvYWRUaW1lb3V0KHRoaXMucGFyc2VUaW1lb3V0QXJndW1lbnQobXMpKTtcbn07XG5cbi8vIHNjcmlwdFxuY29tbWFuZHMuc2NyaXB0VGltZW91dFczQyA9IGFzeW5jIGZ1bmN0aW9uIHNjcmlwdFRpbWVvdXRXM0MgKG1zKSB7XG4gIGF3YWl0IHRoaXMuYXN5bmNTY3JpcHRUaW1lb3V0KG1zKTtcbn07XG5cbmNvbW1hbmRzLnNjcmlwdFRpbWVvdXRNSlNPTldQID0gYXN5bmMgZnVuY3Rpb24gc2NyaXB0VGltZW91dE1KU09OV1AgKG1zKSB7XG4gIGF3YWl0IHRoaXMuYXN5bmNTY3JpcHRUaW1lb3V0KG1zKTtcbn07XG5cbmNvbW1hbmRzLmFzeW5jU2NyaXB0VGltZW91dCA9IGFzeW5jIGZ1bmN0aW9uIGFzeW5jU2NyaXB0VGltZW91dCAobXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIHRoaXMuc2V0QXN5bmNTY3JpcHRUaW1lb3V0KHRoaXMucGFyc2VUaW1lb3V0QXJndW1lbnQobXMpKTtcbn07XG5cbmhlbHBlcnMuc2V0UGFnZUxvYWRUaW1lb3V0ID0gZnVuY3Rpb24gc2V0UGFnZUxvYWRUaW1lb3V0IChtcykge1xuICBtcyA9IHBhcnNlSW50KG1zLCAxMCk7XG4gIHRoaXMucGFnZUxvYWRNcyA9IG1zO1xuICBpZiAodGhpcy5yZW1vdGUpIHtcbiAgICB0aGlzLnJlbW90ZS5wYWdlTG9hZE1zID0gdGhpcy5wYWdlTG9hZE1zO1xuICB9XG4gIGxvZy5kZWJ1ZyhgU2V0IHBhZ2UgbG9hZCB0aW1lb3V0IHRvICR7bXN9bXNgKTtcbn07XG5cbmhlbHBlcnMuc2V0QXN5bmNTY3JpcHRUaW1lb3V0ID0gZnVuY3Rpb24gc2V0QXN5bmNTY3JpcHRUaW1lb3V0IChtcykge1xuICB0aGlzLmFzeW5jV2FpdE1zID0gbXM7XG4gIGxvZy5kZWJ1ZyhgU2V0IGFzeW5jIHNjcmlwdCB0aW1lb3V0IHRvICR7bXN9bXNgKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy90aW1lb3V0cy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
