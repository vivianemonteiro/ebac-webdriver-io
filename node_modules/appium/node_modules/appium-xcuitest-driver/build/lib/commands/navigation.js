"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const CLOSE_WINDOW_TIMEOUT = 5000;
const CLOSE_WINDOW_INTERVAL = 100;

commands.back = async function back() {
  if (!this.isWebContext()) {
    await this.nativeBack();
  } else {
    await this.mobileWebNav('back');
  }
};

helpers.nativeBack = async function nativeBack() {
  try {
    let navBar = await this.findNativeElementOrElements('class name', 'XCUIElementTypeNavigationBar', false);
    let buttons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, navBar);

    if (buttons.length === 0) {
      throw new Error('No buttons found in navigation bar');
    }

    let backButton = _lodash.default.filter(buttons, value => value.label === 'Back')[0];

    if (backButton) {
      _logger.default.debug(`Found navigation bar 'back' button. Clicking.`);
    } else {
      _logger.default.debug(`Unable to find 'Back' button. Trying first button in navigation bar`);

      backButton = buttons[0];
    }

    await this.nativeClick(backButton);
  } catch (err) {
    _logger.default.error(`Unable to find navigation bar and back button: ${err.message}`);
  }
};

commands.forward = async function forward() {
  if (!this.isWebContext()) {}

  await this.mobileWebNav('forward');
};

commands.closeWindow = async function closeWindow() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const script = `setTimeout(function () {window.open('','_self').close();}, 0); return true;`;
  const context = this.curContext;

  try {
    return await this.executeAtom('execute_script', [script, []], true);
  } finally {
    try {
      await (0, _asyncbox.waitForCondition)(() => this.curContext !== context, {
        waitMs: CLOSE_WINDOW_TIMEOUT,
        intervalMs: CLOSE_WINDOW_INTERVAL
      });
    } catch (ign) {
      _logger.default.debug('Context has not yet been changed after closing window. Continuing...');
    }
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9uYXZpZ2F0aW9uLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJDTE9TRV9XSU5ET1dfVElNRU9VVCIsIkNMT1NFX1dJTkRPV19JTlRFUlZBTCIsImJhY2siLCJpc1dlYkNvbnRleHQiLCJuYXRpdmVCYWNrIiwibW9iaWxlV2ViTmF2IiwibmF2QmFyIiwiZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzIiwiYnV0dG9ucyIsImxlbmd0aCIsIkVycm9yIiwiYmFja0J1dHRvbiIsIl8iLCJmaWx0ZXIiLCJ2YWx1ZSIsImxhYmVsIiwibG9nIiwiZGVidWciLCJuYXRpdmVDbGljayIsImVyciIsImVycm9yIiwibWVzc2FnZSIsImZvcndhcmQiLCJjbG9zZVdpbmRvdyIsImVycm9ycyIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJzY3JpcHQiLCJjb250ZXh0IiwiY3VyQ29udGV4dCIsImV4ZWN1dGVBdG9tIiwid2FpdE1zIiwiaW50ZXJ2YWxNcyIsImlnbiIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7QUFHQSxNQUFNQyxvQkFBb0IsR0FBRyxJQUE3QjtBQUNBLE1BQU1DLHFCQUFxQixHQUFHLEdBQTlCOztBQUVBSixRQUFRLENBQUNLLElBQVQsR0FBZ0IsZUFBZUEsSUFBZixHQUF1QjtBQUNyQyxNQUFJLENBQUMsS0FBS0MsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sS0FBS0MsVUFBTCxFQUFOO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsVUFBTSxLQUFLQyxZQUFMLENBQWtCLE1BQWxCLENBQU47QUFDRDtBQUNGLENBTkQ7O0FBUUFQLE9BQU8sQ0FBQ00sVUFBUixHQUFxQixlQUFlQSxVQUFmLEdBQTZCO0FBQ2hELE1BQUk7QUFDRixRQUFJRSxNQUFNLEdBQUcsTUFBTSxLQUFLQywyQkFBTCxDQUFpQyxZQUFqQyxFQUErQyw4QkFBL0MsRUFBK0UsS0FBL0UsQ0FBbkI7QUFDQSxRQUFJQyxPQUFPLEdBQUcsTUFBTSxLQUFLRCwyQkFBTCxDQUFpQyxZQUFqQyxFQUErQyx1QkFBL0MsRUFBd0UsSUFBeEUsRUFBOEVELE1BQTlFLENBQXBCOztBQUNBLFFBQUlFLE9BQU8sQ0FBQ0MsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixZQUFNLElBQUlDLEtBQUosQ0FBVSxvQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSUMsVUFBVSxHQUFHQyxnQkFBRUMsTUFBRixDQUFTTCxPQUFULEVBQW1CTSxLQUFELElBQVdBLEtBQUssQ0FBQ0MsS0FBTixLQUFnQixNQUE3QyxFQUFxRCxDQUFyRCxDQUFqQjs7QUFDQSxRQUFJSixVQUFKLEVBQWdCO0FBQ2RLLHNCQUFJQyxLQUFKLENBQVcsK0NBQVg7QUFDRCxLQUZELE1BRU87QUFDTEQsc0JBQUlDLEtBQUosQ0FBVyxxRUFBWDs7QUFDQU4sTUFBQUEsVUFBVSxHQUFHSCxPQUFPLENBQUMsQ0FBRCxDQUFwQjtBQUNEOztBQUNELFVBQU0sS0FBS1UsV0FBTCxDQUFpQlAsVUFBakIsQ0FBTjtBQUNELEdBZkQsQ0FlRSxPQUFPUSxHQUFQLEVBQVk7QUFDWkgsb0JBQUlJLEtBQUosQ0FBVyxrREFBaURELEdBQUcsQ0FBQ0UsT0FBUSxFQUF4RTtBQUNEO0FBQ0YsQ0FuQkQ7O0FBcUJBeEIsUUFBUSxDQUFDeUIsT0FBVCxHQUFtQixlQUFlQSxPQUFmLEdBQTBCO0FBQzNDLE1BQUksQ0FBQyxLQUFLbkIsWUFBTCxFQUFMLEVBQTBCLENBQ3pCOztBQUNELFFBQU0sS0FBS0UsWUFBTCxDQUFrQixTQUFsQixDQUFOO0FBQ0QsQ0FKRDs7QUFNQVIsUUFBUSxDQUFDMEIsV0FBVCxHQUF1QixlQUFlQSxXQUFmLEdBQThCO0FBQ25ELE1BQUksQ0FBQyxLQUFLcEIsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSXFCLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBSUQsUUFBTUMsTUFBTSxHQUFJLDZFQUFoQjtBQUNBLFFBQU1DLE9BQU8sR0FBRyxLQUFLQyxVQUFyQjs7QUFDQSxNQUFJO0FBQ0YsV0FBTyxNQUFNLEtBQUtDLFdBQUwsQ0FBaUIsZ0JBQWpCLEVBQW1DLENBQUNILE1BQUQsRUFBUyxFQUFULENBQW5DLEVBQWlELElBQWpELENBQWI7QUFDRCxHQUZELFNBRVU7QUFFUixRQUFJO0FBQ0YsWUFBTSxnQ0FBaUIsTUFBTSxLQUFLRSxVQUFMLEtBQW9CRCxPQUEzQyxFQUFvRDtBQUN4REcsUUFBQUEsTUFBTSxFQUFFOUIsb0JBRGdEO0FBRXhEK0IsUUFBQUEsVUFBVSxFQUFFOUI7QUFGNEMsT0FBcEQsQ0FBTjtBQUlELEtBTEQsQ0FLRSxPQUFPK0IsR0FBUCxFQUFZO0FBQ1poQixzQkFBSUMsS0FBSixDQUFVLHNFQUFWO0FBQ0Q7QUFDRjtBQUNGLENBdEJEOztBQXlCQWdCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjbkMsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuLy8gdGhlc2UgdHdvIGNvbnN0aXR1dGUgdGhlIHdhaXQgYWZ0ZXIgY2xvc2luZyBhIHdpbmRvd1xuY29uc3QgQ0xPU0VfV0lORE9XX1RJTUVPVVQgPSA1MDAwO1xuY29uc3QgQ0xPU0VfV0lORE9XX0lOVEVSVkFMID0gMTAwO1xuXG5jb21tYW5kcy5iYWNrID0gYXN5bmMgZnVuY3Rpb24gYmFjayAoKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGF3YWl0IHRoaXMubmF0aXZlQmFjaygpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHRoaXMubW9iaWxlV2ViTmF2KCdiYWNrJyk7XG4gIH1cbn07XG5cbmhlbHBlcnMubmF0aXZlQmFjayA9IGFzeW5jIGZ1bmN0aW9uIG5hdGl2ZUJhY2sgKCkge1xuICB0cnkge1xuICAgIGxldCBuYXZCYXIgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVOYXZpZ2F0aW9uQmFyJywgZmFsc2UpO1xuICAgIGxldCBidXR0b25zID0gYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoJ2NsYXNzIG5hbWUnLCAnWENVSUVsZW1lbnRUeXBlQnV0dG9uJywgdHJ1ZSwgbmF2QmFyKTtcbiAgICBpZiAoYnV0dG9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYnV0dG9ucyBmb3VuZCBpbiBuYXZpZ2F0aW9uIGJhcicpO1xuICAgIH1cblxuICAgIGxldCBiYWNrQnV0dG9uID0gXy5maWx0ZXIoYnV0dG9ucywgKHZhbHVlKSA9PiB2YWx1ZS5sYWJlbCA9PT0gJ0JhY2snKVswXTtcbiAgICBpZiAoYmFja0J1dHRvbikge1xuICAgICAgbG9nLmRlYnVnKGBGb3VuZCBuYXZpZ2F0aW9uIGJhciAnYmFjaycgYnV0dG9uLiBDbGlja2luZy5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKGBVbmFibGUgdG8gZmluZCAnQmFjaycgYnV0dG9uLiBUcnlpbmcgZmlyc3QgYnV0dG9uIGluIG5hdmlnYXRpb24gYmFyYCk7XG4gICAgICBiYWNrQnV0dG9uID0gYnV0dG9uc1swXTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5uYXRpdmVDbGljayhiYWNrQnV0dG9uKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yKGBVbmFibGUgdG8gZmluZCBuYXZpZ2F0aW9uIGJhciBhbmQgYmFjayBidXR0b246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmZvcndhcmQgPSBhc3luYyBmdW5jdGlvbiBmb3J3YXJkICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gIH1cbiAgYXdhaXQgdGhpcy5tb2JpbGVXZWJOYXYoJ2ZvcndhcmQnKTtcbn07XG5cbmNvbW1hbmRzLmNsb3NlV2luZG93ID0gYXN5bmMgZnVuY3Rpb24gY2xvc2VXaW5kb3cgKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIC8vIHNpbmNlIHRoZSB3aW5kb3cgd2lsbCBiZSBjbG9zZWQgYW5kIHRoZSBleGVjdXRpb24gY29udGV4dCBnb25lLCByZXR1cm5cbiAgLy8gZmlyc3QgYmVmb3JlIGNsb3NpbmcuIFdhaXRpbmcgZm9yIGNsb3NlIHdpbGwgaGFwcGVuIGluIHRoZSBmaW5hbGx5IGJsb2NrXG4gIGNvbnN0IHNjcmlwdCA9IGBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHt3aW5kb3cub3BlbignJywnX3NlbGYnKS5jbG9zZSgpO30sIDApOyByZXR1cm4gdHJ1ZTtgO1xuICBjb25zdCBjb250ZXh0ID0gdGhpcy5jdXJDb250ZXh0O1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdleGVjdXRlX3NjcmlwdCcsIFtzY3JpcHQsIFtdXSwgdHJ1ZSk7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gd2FpdCBmb3IgdGhlIHdpbmRvdyB0byBzdWNjZXNzZnVsbHkgY2hhbmdlLi4uXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oKCkgPT4gdGhpcy5jdXJDb250ZXh0ICE9PSBjb250ZXh0LCB7XG4gICAgICAgIHdhaXRNczogQ0xPU0VfV0lORE9XX1RJTUVPVVQsXG4gICAgICAgIGludGVydmFsTXM6IENMT1NFX1dJTkRPV19JTlRFUlZBTCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgbG9nLmRlYnVnKCdDb250ZXh0IGhhcyBub3QgeWV0IGJlZW4gY2hhbmdlZCBhZnRlciBjbG9zaW5nIHdpbmRvdy4gQ29udGludWluZy4uLicpO1xuICAgIH1cbiAgfVxufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvbmF2aWdhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
