"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.extensions = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _appiumIosDevice = require("appium-ios-device");

var _teen_process = require("teen_process");

var _appUtils = require("../app-utils");

let commands = {},
    helpers = {},
    extensions = {};
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;
const MOMENT_FORMAT_ISO8601 = 'YYYY-MM-DDTHH:mm:ssZ';

commands.active = async function active() {
  if (this.isWebContext()) {
    return this.cacheWebElements(await this.executeAtom('active_element', []));
  }

  return await this.proxyCommand(`/element/active`, 'GET');
};

commands.background = async function background(seconds) {
  const homescreen = '/wda/homescreen';
  const deactivateApp = '/wda/deactivateApp';
  let endpoint;
  let params = {};

  const selectEndpoint = timeoutSeconds => {
    if (!_appiumSupport.util.hasValue(timeoutSeconds)) {
      endpoint = homescreen;
    } else if (!isNaN(timeoutSeconds)) {
      const duration = parseFloat(timeoutSeconds);

      if (duration >= 0) {
        params = {
          duration
        };
        endpoint = deactivateApp;
      } else {
        endpoint = homescreen;
      }
    }
  };

  if (_lodash.default.has(seconds, 'timeout')) {
    const {
      timeout
    } = seconds;
    selectEndpoint(isNaN(timeout) ? timeout : parseFloat(timeout) / 1000.0);
  } else {
    selectEndpoint(seconds);
  }

  if (!endpoint) {
    _logger.default.errorAndThrow(`Argument value is expected to be a valid number. ` + `${JSON.stringify(seconds)} has been provided instead`);
  }

  return await this.proxyCommand(endpoint, 'POST', params, endpoint !== homescreen);
};

commands.touchId = async function touchId(match = true) {
  await this.mobileSendBiometricMatch({
    match
  });
};

commands.toggleEnrollTouchId = async function toggleEnrollTouchId(isEnabled = true) {
  await this.mobileEnrollBiometric({
    isEnabled
  });
};

helpers.getWindowSizeWeb = async function getWindowSizeWeb() {
  return await this.executeAtom('get_window_size', []);
};

helpers.getWindowSizeNative = async function getWindowSizeNative() {
  return await this.proxyCommand(`/window/size`, 'GET');
};

commands.getWindowSize = async function getWindowSize(windowHandle = 'current') {
  if (windowHandle !== 'current') {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');
  }

  if (!this.isWebContext()) {
    return await this.getWindowSizeNative();
  } else {
    return await this.getWindowSizeWeb();
  }
};

commands.getDeviceTime = async function getDeviceTime(format = MOMENT_FORMAT_ISO8601) {
  _logger.default.info('Attempting to capture iOS device date and time');

  if (!this.isRealDevice()) {
    _logger.default.info('On simulator. Assuming device time is the same as host time');

    const cmd = 'date';
    const args = ['+%Y-%m-%dT%H:%M:%S%z'];
    const inputFormat = 'YYYY-MM-DDTHH:mm:ssZZ';
    const stdout = (await (0, _teen_process.exec)(cmd, args)).stdout.trim();

    _logger.default.debug(`Got the following output out of '${cmd} ${args.join(' ')}': ${stdout}`);

    const parsedTimestamp = _momentTimezone.default.utc(stdout, inputFormat);

    if (!parsedTimestamp.isValid()) {
      _logger.default.warn(`Cannot parse the timestamp '${stdout}' returned by '${cmd}' command. Returning it as is`);

      return stdout;
    }

    return parsedTimestamp.utcOffset(parsedTimestamp._tzm || 0).format(format);
  }

  const {
    timestamp,
    utcOffset,
    timeZone
  } = await _appiumIosDevice.utilities.getDeviceTime(this.opts.udid);

  _logger.default.debug(`timestamp: ${timestamp}, utcOffset: ${utcOffset}, timeZone: ${timeZone}`);

  const utc = _momentTimezone.default.unix(timestamp).utc();

  if (Math.abs(utcOffset) <= 12 * 60) {
    return utc.utcOffset(utcOffset).format(format);
  }

  if (_lodash.default.includes(timeZone, '/')) {
    return utc.tz(timeZone).format(format);
  }

  if (Math.abs(timeZone) <= 12 * 60 * 60) {
    return utc.utcOffset(timeZone / 60).format(format);
  }

  _logger.default.warn('Did not know how to apply the UTC offset. Returning the timestamp without it');

  return utc.format(format);
};

commands.mobileGetDeviceTime = async function mobileGetDeviceTime(opts = {}) {
  return await this.getDeviceTime(opts.format);
};

commands.getWindowRect = async function getWindowRect() {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.hideKeyboard = async function hideKeyboard(strategy, ...possibleKeys) {
  const keyNames = _lodash.default.compact(possibleKeys.slice(0, -1)).map(x => `${x}`);

  if (!keyNames.includes('done')) {
    keyNames.push('done');
  }

  await this.proxyCommand('/wda/keyboard/dismiss', 'POST', {
    keyNames
  });
};

commands.getStrings = async function getStrings(language, stringFile = null) {
  _logger.default.debug(`Gettings strings for language '${language}' and string file '${stringFile}'`);

  return await (0, _appUtils.parseLocalizableStrings)(Object.assign({}, this.opts, {
    language,
    stringFile,
    strictMode: true
  }));
};

commands.removeApp = async function removeApp(bundleId) {
  return await this.mobileRemoveApp({
    bundleId
  });
};

commands.launchApp = async function launchApp() {
  const appName = this.opts.app || this.opts.bundleId;

  try {
    await this.start();

    _logger.default.info(`Successfully launched the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while launching the '${appName}' app.`);

    throw err;
  }
};

commands.closeApp = async function closeApp() {
  const appName = this.opts.app || this.opts.bundleId;

  try {
    await this.stop();

    _logger.default.info(`Successfully closed the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while closing the '${appName}' app.`);

    throw err;
  }
};

commands.keys = async function keys(keys) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');
  }

  let el = _appiumSupport.util.unwrapElement(await this.active());

  if (_lodash.default.isEmpty(el)) {
    throw new _appiumBaseDriver.errors.NoSuchElementError();
  }

  await this.setValue(keys, el);
};

commands.setUrl = async function setUrl(url) {
  _logger.default.debug(`Attempting to set url '${url}'`);

  if (this.isWebContext()) {
    this.setCurrentUrl(url);
    this.curWebFrames = [];
    await this.remote.navToUrl(url);
    return;
  }

  if (this.isRealDevice()) {
    await this.proxyCommand('/url', 'POST', {
      url
    });
  } else {
    await this.opts.device.simctl.openUrl(url);
  }
};

commands.getViewportRect = async function getViewportRect() {
  const scale = await this.getDevicePixelRatio();
  const statusBarHeight = Math.round((await this.getStatusBarHeight()) * scale);
  const windowSize = await this.getWindowSize();
  return {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
};

commands.getScreenInfo = async function getScreenInfo() {
  return await this.proxyCommand('/wda/screen', 'GET');
};

commands.getStatusBarHeight = async function getStatusBarHeight() {
  const {
    statusBarSize
  } = await this.getScreenInfo();
  return statusBarSize.height;
};

commands.getDevicePixelRatio = async function getDevicePixelRatio() {
  const {
    scale
  } = await this.getScreenInfo();
  return scale;
};

commands.mobilePressButton = async function mobilePressButton(opts = {}) {
  const {
    name,
    durationSeconds
  } = opts;

  if (!name) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('Button name is mandatory');
  }

  if (!_lodash.default.isNil(durationSeconds) && !_lodash.default.isNumber(durationSeconds)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('durationSeconds should be a number');
  }

  return await this.proxyCommand('/wda/pressButton', 'POST', {
    name,
    duration: durationSeconds
  });
};

commands.mobileSiriCommand = async function mobileSiriCommand(opts = {}) {
  const {
    text
  } = opts;

  if (!_appiumSupport.util.hasValue(text)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('"text" argument is mandatory');
  }

  return await this.proxyCommand('/wda/siri/activate', 'POST', {
    text
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
