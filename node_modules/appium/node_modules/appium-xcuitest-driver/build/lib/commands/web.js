"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _cookies = _interopRequireDefault(require("../cookies"));

var _events = require("events");

const IPHONE_TOP_BAR_HEIGHT = 71;
const IPHONE_SCROLLED_TOP_BAR_HEIGHT = 41;
const IPHONE_X_SCROLLED_OFFSET = 55;
const IPHONE_X_NOTCH_OFFSET_IOS = 24;
const IPHONE_X_NOTCH_OFFSET_IOS_13 = 20;
const IPHONE_LANDSCAPE_TOP_BAR_HEIGHT = 51;
const IPHONE_BOTTOM_BAR_OFFSET = 49;
const TAB_BAR_OFFSET = 33;
const IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET = 84;
const IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET = 95;
const NOTCHED_DEVICE_SIZES = [{
  w: 1125,
  h: 2436
}, {
  w: 828,
  h: 1792
}, {
  w: 1242,
  h: 2688
}];
const {
  W3C_WEB_ELEMENT_IDENTIFIER
} = _appiumSupport.util;
const ATOM_WAIT_TIMEOUT_MS = 2 * 60000;
const ATOM_INITIAL_WAIT_MS = 1000;
const ON_OBSTRUCTING_ALERT_EVENT = 'alert';
const VISIBLE = 'visible';
const INVISIBLE = 'invisible';
const DETECT = 'detect';
const VISIBILITIES = [VISIBLE, INVISIBLE, DETECT];
const TAB_BAR_POSITION_TOP = 'top';
const TAB_BAR_POSITION_BOTTOM = 'bottom';
const TAB_BAR_POSSITIONS = [TAB_BAR_POSITION_TOP, TAB_BAR_POSITION_BOTTOM];
const commands = {},
      helpers = {},
      extensions = {};

function isValidElementIdentifier(id) {
  if (!_lodash.default.isString(id) && !_lodash.default.isNumber(id)) {
    return false;
  }

  if (_lodash.default.isString(id) && _lodash.default.isEmpty(id)) {
    return false;
  }

  if (_lodash.default.isNumber(id) && isNaN(id)) {
    return false;
  }

  return true;
}

commands.setFrame = async function setFrame(frame) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  if (_lodash.default.isNull(frame)) {
    this.curWebFrames = [];

    _logger.default.debug('Leaving web frame and going back to default content');

    return;
  }

  if (helpers.hasElementId(frame)) {
    const atomsElement = this.getAtomsElement(frame);
    const value = await this.executeAtom('get_frame_window', [atomsElement]);

    _logger.default.debug(`Entering new web frame: '${value.WINDOW}'`);

    this.curWebFrames.unshift(value.WINDOW);
  } else {
    const atom = _lodash.default.isNumber(frame) ? 'frame_by_index' : 'frame_by_id_or_name';
    const value = await this.executeAtom(atom, [frame]);

    if (_lodash.default.isNull(value) || _lodash.default.isUndefined(value.WINDOW)) {
      throw new _appiumBaseDriver.errors.NoSuchFrameError();
    }

    _logger.default.debug(`Entering new web frame: '${value.WINDOW}'`);

    this.curWebFrames.unshift(value.WINDOW);
  }
};

commands.getCssProperty = async function getCssProperty(propertyName, el) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const atomsElement = this.getAtomsElement(el);
  return await this.executeAtom('get_value_of_css_property', [atomsElement, propertyName]);
};

commands.submit = async function submit(el) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const atomsElement = this.getAtomsElement(el);
  await this.executeAtom('submit', [atomsElement]);
};

commands.refresh = async function refresh() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  await this.executeAtom('refresh', []);
};

commands.getUrl = async function getUrl() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await this.remote.execute('window.location.href');
};

commands.title = async function title() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await this.executeAtom('title', [], true);
};

commands.getCookies = async function getCookies() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  _logger.default.debug('Retrieving all cookies');

  let script = 'return document.cookie';
  let jsCookies = await this.executeAtom('execute_script', [script, []]);
  let cookies = [];

  try {
    for (let [name, value] of _lodash.default.toPairs(_cookies.default.createJWPCookie(undefined, jsCookies))) {
      cookies.push({
        name,
        value
      });
    }

    return cookies;
  } catch (err) {
    _logger.default.error(err);

    throw new _appiumBaseDriver.errors.UnknownError(`Error parsing cookies from result: '${jsCookies}'`);
  }
};

commands.setCookie = async function setCookie(cookie) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  cookie = _lodash.default.clone(cookie);

  if (!cookie.path) {
    cookie.path = '/';
  }

  const jsCookie = _cookies.default.createJSCookie(cookie.name, cookie.value, {
    expires: _lodash.default.isNumber(cookie.expiry) ? new Date(cookie.expiry * 1000).toUTCString() : cookie.expiry,
    path: cookie.path,
    domain: cookie.domain,
    httpOnly: cookie.httpOnly,
    secure: cookie.secure
  });

  let script = `document.cookie = ${JSON.stringify(jsCookie)}`;
  await this.executeAtom('execute_script', [script, []]);
};

commands.deleteCookie = async function deleteCookie(cookieName) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let cookies = await this.getCookies();

  if (_lodash.default.indexOf(_lodash.default.map(cookies, 'name'), cookieName) === -1) {
    _logger.default.debug(`Cookie '${cookieName}' not found. Ignoring.`);

    return true;
  }

  return await this._deleteCookie(cookieName);
};

commands.deleteCookies = async function deleteCookies() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let cookies = await this.getCookies();

  if (cookies.length) {
    for (let cookie of cookies) {
      await this._deleteCookie(cookie.name);
    }
  }

  return true;
};

helpers._deleteCookie = async function _deleteCookie(cookieName) {
  _logger.default.debug(`Deleting cookie '${cookieName}'`);

  let webCookie = _cookies.default.expireCookie(cookieName, {
    path: '/'
  });

  let script = `document.cookie = ${JSON.stringify(webCookie)}`;
  await this.executeAtom('execute_script', [script, []]);
};

helpers.cacheWebElement = function cacheWebElement(el) {
  if (!_lodash.default.isPlainObject(el)) {
    return el;
  }

  const elId = _appiumSupport.util.unwrapElement(el);

  if (!isValidElementIdentifier(elId)) {
    return el;
  }

  const cacheId = _lodash.default.includes(elId, ':') ? elId : _appiumSupport.util.uuidV4();
  this.webElementsCache.set(cacheId, elId);
  return _appiumSupport.util.wrapElement(cacheId);
};

helpers.cacheWebElements = function cacheWebElements(response) {
  const toCached = v => _lodash.default.isArray(v) || _lodash.default.isPlainObject(v) ? this.cacheWebElements(v) : v;

  if (_lodash.default.isArray(response)) {
    return response.map(toCached);
  } else if (_lodash.default.isPlainObject(response)) {
    const result = { ...response,
      ...this.cacheWebElement(response)
    };
    return _lodash.default.toPairs(result).reduce((acc, [key, value]) => {
      acc[key] = toCached(value);
      return acc;
    }, {});
  }

  return response;
};

extensions.findWebElementOrElements = async function findWebElementOrElements(strategy, selector, many, ctx) {
  const contextElement = _lodash.default.isNil(ctx) ? null : this.getAtomsElement(ctx);
  let element;

  let doFind = async () => {
    element = await this.executeAtom(`find_element${many ? 's' : ''}`, [strategy, selector, contextElement]);
    return !_lodash.default.isNull(element);
  };

  try {
    await this.implicitWaitForCondition(doFind);
  } catch (err) {
    if (err.message && _lodash.default.isFunction(err.message.match) && err.message.match(/Condition unmet/)) {
      element = [];
    } else {
      throw err;
    }
  }

  if (many) {
    return this.cacheWebElements(element);
  }

  if (_lodash.default.isEmpty(element)) {
    throw new _appiumBaseDriver.errors.NoSuchElementError();
  }

  return this.cacheWebElements(element);
};

extensions.clickWebCoords = async function clickWebCoords() {
  let coords = await this.translateWebCoords(this.curWebCoords);
  await this.clickCoords(coords);
};

helpers.executeAtom = async function executeAtom(atom, args, alwaysDefaultFrame = false) {
  let frames = alwaysDefaultFrame === true ? [] : this.curWebFrames;
  let promise = this.remote.executeAtom(atom, args, frames);
  return await this.waitForAtom(promise);
};

helpers.executeAtomAsync = async function executeAtomAsync(atom, args, responseUrl) {
  let promise = new _bluebird.default((resolve, reject) => {
    this.asyncPromise = {
      resolve,
      reject
    };
  });
  await this.remote.executeAtomAsync(atom, args, this.curWebFrames, responseUrl);
  return await this.waitForAtom(promise);
};

helpers.getAtomsElement = function getAtomsElement(elOrId) {
  const elId = _appiumSupport.util.unwrapElement(elOrId);

  if (!this.webElementsCache.has(elId)) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError();
  }

  return {
    ELEMENT: this.webElementsCache.get(elId)
  };
};

helpers.convertElementsForAtoms = function convertElementsForAtoms(args = []) {
  return args.map(arg => {
    if (helpers.hasElementId(arg)) {
      try {
        return this.getAtomsElement(arg);
      } catch (err) {
        if (!(0, _appiumBaseDriver.isErrorType)(err, _appiumBaseDriver.errors.StaleElementReferenceError)) {
          throw err;
        }
      }

      return arg;
    }

    return _lodash.default.isArray(arg) ? this.convertElementsForAtoms(arg) : arg;
  });
};

helpers.getElementId = function getElementId(element) {
  return element.ELEMENT || element[W3C_WEB_ELEMENT_IDENTIFIER];
};

helpers.hasElementId = function hasElementId(element) {
  return _appiumSupport.util.hasValue(element) && (_appiumSupport.util.hasValue(element.ELEMENT) || _appiumSupport.util.hasValue(element[W3C_WEB_ELEMENT_IDENTIFIER]));
};

extensions.getSafariIsIphone = _lodash.default.memoize(async function getSafariIsIphone() {
  try {
    const userAgent = await this.execute('return navigator.userAgent');
    return userAgent.toLowerCase().includes('iphone');
  } catch (err) {
    _logger.default.warn(`Unable to find device type from useragent. Assuming iPhone`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return true;
});
extensions.getSafariDeviceSize = _lodash.default.memoize(async function getSafariDeviceSize() {
  const script = 'return {height: window.screen.availHeight * window.devicePixelRatio, width: window.screen.availWidth * window.devicePixelRatio};';
  const {
    width,
    height
  } = await this.execute(script);
  const [normHeight, normWidth] = height > width ? [height, width] : [width, height];
  return {
    width: normWidth,
    height: normHeight
  };
});
extensions.getSafariIsNotched = _lodash.default.memoize(async function getSafariIsNotched() {
  try {
    const {
      width,
      height
    } = await this.getSafariDeviceSize();

    for (const device of NOTCHED_DEVICE_SIZES) {
      if (device.w === width && device.h === height) {
        return true;
      }
    }
  } catch (err) {
    _logger.default.warn(`Unable to find device type from dimensions. Assuming the device is not notched`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return false;
});

extensions.getExtraTranslateWebCoordsOffset = async function getExtraTranslateWebCoordsOffset(wvPos, realDims) {
  let topOffset = 0;
  let bottomOffset = 0;
  const isIphone = await this.getSafariIsIphone();
  const {
    nativeWebTapTabBarVisibility,
    nativeWebTapSmartAppBannerVisibility,
    safariTabBarPosition = _appiumSupport.util.compareVersions(this.opts.platformVersion, '>=', '15.0') && isIphone ? TAB_BAR_POSITION_BOTTOM : TAB_BAR_POSITION_TOP
  } = await this.settings.getSettings();

  let tabBarVisibility = _lodash.default.lowerCase(nativeWebTapTabBarVisibility);

  let bannerVisibility = _lodash.default.lowerCase(nativeWebTapSmartAppBannerVisibility);

  const tabBarPosition = _lodash.default.lowerCase(safariTabBarPosition);

  if (!VISIBILITIES.includes(tabBarVisibility)) {
    tabBarVisibility = DETECT;
  }

  if (!VISIBILITIES.includes(bannerVisibility)) {
    bannerVisibility = DETECT;
  }

  if (!TAB_BAR_POSSITIONS.includes(tabBarPosition)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`${safariTabBarPosition} is invalid as Safari tab bar position. Available positions are ${TAB_BAR_POSSITIONS}.`);
  }

  const isNotched = isIphone && (await this.getSafariIsNotched());
  const orientation = realDims.h > realDims.w ? 'PORTRAIT' : 'LANDSCAPE';
  const notchOffset = isNotched ? _appiumSupport.util.compareVersions(this.opts.platformVersion, '=', '13.0') ? IPHONE_X_NOTCH_OFFSET_IOS_13 : IPHONE_X_NOTCH_OFFSET_IOS : 0;
  const isScrolled = await this.execute('return document.documentElement.scrollTop > 0');

  if (isScrolled) {
    topOffset = IPHONE_SCROLLED_TOP_BAR_HEIGHT + notchOffset;

    if (isNotched) {
      topOffset -= IPHONE_X_SCROLLED_OFFSET;
    }

    if (orientation === 'LANDSCAPE' && isIphone) {
      topOffset = 0;
    }
  } else {
    topOffset = tabBarPosition === TAB_BAR_POSITION_BOTTOM ? 0 : IPHONE_TOP_BAR_HEIGHT;
    topOffset += notchOffset;

    _logger.default.debug(`tabBarPosition and topOffset: ${tabBarPosition}, ${topOffset}`);

    if (isIphone) {
      if (orientation === 'PORTRAIT') {
        bottomOffset = IPHONE_BOTTOM_BAR_OFFSET;
      } else {
        topOffset = IPHONE_LANDSCAPE_TOP_BAR_HEIGHT;
      }
    }

    if (orientation === 'LANDSCAPE' || !isIphone) {
      if (tabBarVisibility === VISIBLE) {
        topOffset += TAB_BAR_OFFSET;
      } else if (tabBarVisibility === DETECT) {
        const contextsAndViews = await this.getContextsAndViews();
        const tabs = contextsAndViews.filter(ctx => ctx.id.startsWith('WEBVIEW_'));

        if (tabs.length > 1) {
          _logger.default.debug(`Found ${tabs.length} tabs. Assuming the tab bar is visible`);

          topOffset += TAB_BAR_OFFSET;
        }
      }
    }
  }

  topOffset += await this.getExtraNativeWebTapOffset(isIphone, bannerVisibility);
  wvPos.y += topOffset;
  realDims.h -= topOffset + bottomOffset;
};

extensions.getExtraNativeWebTapOffset = async function getExtraNativeWebTapOffset(isIphone, bannerVisibility) {
  let offset = 0;

  if (bannerVisibility === VISIBLE) {
    offset += isIphone ? IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET : IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET;
  } else if (bannerVisibility === DETECT) {
    const banners = await this.findNativeElementOrElements('accessibility id', 'Close app download offer', true);

    if (banners.length > 0) {
      offset += isIphone ? IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET : IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET;
    }
  }

  _logger.default.debug(`Additional native web tap offset computed: ${offset}`);

  return offset;
};

async function tapWebElementNatively(driver, atomsElement) {
  try {
    let text = await driver.executeAtom('get_text', [atomsElement]);

    if (!text) {
      text = await driver.executeAtom('get_attribute_value', [atomsElement, 'value']);
    }

    if (text) {
      const els = await driver.findNativeElementOrElements('accessibility id', text, true);

      if (els.length === 1 || els.length === 2) {
        const el = els[0];
        const rect = await driver.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(el)}/rect`, 'GET');

        if (els.length === 2) {
          const el2 = els[1];
          const rect2 = await driver.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(el2)}/rect`, 'GET');

          if (rect.x !== rect2.x || rect.y !== rect2.y || rect.width !== rect2.width || rect.height !== rect2.height) {
            return false;
          }
        }

        const coords = {
          x: Math.round(rect.x + rect.width / 2),
          y: Math.round(rect.y + rect.height / 2)
        };
        await driver.clickCoords(coords);
        return true;
      }
    }
  } catch (err) {
    _logger.default.warn(`Error attempting to click: ${err.message}`);
  }

  return false;
}

extensions.nativeWebTap = async function nativeWebTap(el) {
  const atomsElement = this.getAtomsElement(el);

  if (!(await this.settings.getSettings()).nativeWebTapStrict && (await tapWebElementNatively(this, atomsElement))) {
    return;
  }

  _logger.default.warn('Unable to do simple native web tap. Attempting to convert coordinates');

  await _bluebird.default.Promise.all([this.executeAtom('get_size', [atomsElement]), this.executeAtom('get_top_left_coordinates', [atomsElement])]);
  const [size, coordinates] = await _bluebird.default.Promise.all([this.executeAtom('get_size', [atomsElement]), this.executeAtom('get_top_left_coordinates', [atomsElement])]);
  const {
    width,
    height
  } = size;
  let {
    x,
    y
  } = coordinates;
  x += width / 2;
  y += height / 2;
  this.curWebCoords = {
    x,
    y
  };
  await this.clickWebCoords();
};

extensions.clickCoords = async function clickCoords(coords) {
  await this.performTouch([{
    action: 'tap',
    options: coords
  }]);
};

extensions.translateWebCoords = async function translateWebCoords(coords) {
  _logger.default.debug(`Translating coordinates (${JSON.stringify(coords)}) to web coordinates`);

  let webview;

  try {
    webview = await (0, _asyncbox.retryInterval)(5, 100, async () => await this.findNativeElementOrElements('class name', 'XCUIElementTypeWebView', false));
  } catch (ign) {}

  if (!webview) {
    throw new Error(`No WebView found. Unable to translate web coordinates for native web tap.`);
  }

  webview = _appiumSupport.util.unwrapElement(webview);
  const rect = await this.proxyCommand(`/element/${webview}/rect`, 'GET');
  const wvPos = {
    x: rect.x,
    y: rect.y
  };
  const realDims = {
    w: rect.width,
    h: rect.height
  };
  const cmd = '(function () { return {w: window.innerWidth, h: window.innerHeight}; })()';
  const wvDims = await this.remote.execute(cmd);
  const implicitWaitMs = this.implicitWaitMs;
  await this.setImplicitWait(0);

  try {
    await this.getExtraTranslateWebCoordsOffset(wvPos, realDims);
  } finally {
    await this.setImplicitWait(implicitWaitMs);
  }

  if (wvDims && realDims && wvPos) {
    let xRatio = realDims.w / wvDims.w;
    let yRatio = realDims.h / wvDims.h;
    let newCoords = {
      x: wvPos.x + Math.round(xRatio * coords.x),
      y: wvPos.y + Math.round(yRatio * coords.y)
    };

    _logger.default.debug(`Converted coordinates: ${JSON.stringify(newCoords)}`);

    _logger.default.debug(`    rect: ${JSON.stringify(rect)}`);

    _logger.default.debug(`    wvPos: ${JSON.stringify(wvPos)}`);

    _logger.default.debug(`    realDims: ${JSON.stringify(realDims)}`);

    _logger.default.debug(`    wvDims: ${JSON.stringify(wvDims)}`);

    _logger.default.debug(`    xRatio: ${JSON.stringify(xRatio)}`);

    _logger.default.debug(`    yRatio: ${JSON.stringify(yRatio)}`);

    _logger.default.debug(`Converted web coords ${JSON.stringify(coords)} ` + `into real coords ${JSON.stringify(newCoords)}`);

    return newCoords;
  }
};

extensions.checkForAlert = async function checkForAlert() {
  return _lodash.default.isString(await this.getAlertText());
};

extensions.waitForAtom = async function waitForAtom(promise) {
  const timer = new _appiumSupport.timing.Timer().start();

  const timedAtomPromise = _bluebird.default.resolve(promise).timeout(ATOM_WAIT_TIMEOUT_MS);

  const handlePromiseError = async p => {
    try {
      return await p;
    } catch (err) {
      const originalError = err instanceof _bluebird.default.AggregateError ? err[0] : err;

      _logger.default.debug(`Error received while executing atom: ${originalError.message}`);

      if (originalError instanceof _bluebird.default.TimeoutError) {
        throw new Error(`Did not get any response for atom execution after ` + `${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
      }

      throw originalError;
    }
  };

  await handlePromiseError(_bluebird.default.any([_bluebird.default.delay(ATOM_INITIAL_WAIT_MS), timedAtomPromise]));

  if (timedAtomPromise.isFulfilled()) {
    return await timedAtomPromise;
  }

  if (!_lodash.default.isPlainObject(this._waitingAtoms)) {
    this._waitingAtoms = {
      count: 0,
      alertNotifier: new _events.EventEmitter(),
      alertMonitor: _bluebird.default.resolve()
    };
  }

  this._waitingAtoms.count++;
  let onAlertCallback;

  try {
    if (this._waitingAtoms.alertMonitor.isResolved()) {
      this._waitingAtoms.alertMonitor = _bluebird.default.resolve((async () => {
        while (this._waitingAtoms.count > 0) {
          try {
            if (await this.checkForAlert()) {
              this._waitingAtoms.alertNotifier.emit(ON_OBSTRUCTING_ALERT_EVENT);
            }
          } catch (ign) {}

          await _bluebird.default.delay(ATOM_INITIAL_WAIT_MS / 2);
        }
      })());
    }

    return await new _bluebird.default((resolve, reject) => {
      onAlertCallback = () => reject(new _appiumBaseDriver.errors.UnexpectedAlertOpenError());

      this._waitingAtoms.alertNotifier.once(ON_OBSTRUCTING_ALERT_EVENT, onAlertCallback);

      handlePromiseError(timedAtomPromise).then(resolve).catch(reject);
    });
  } finally {
    if (onAlertCallback) {
      this._waitingAtoms.alertNotifier.removeListener(ON_OBSTRUCTING_ALERT_EVENT, onAlertCallback);
    }

    this._waitingAtoms.count--;
  }
};

extensions.mobileWebNav = async function mobileWebNav(navType) {
  this.remote.allowNavigationWithoutReload = true;

  try {
    await this.executeAtom('execute_script', [`history.${navType}();`, null]);
  } finally {
    this.remote.allowNavigationWithoutReload = false;
  }
};

Object.assign(commands, extensions, helpers);
var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
