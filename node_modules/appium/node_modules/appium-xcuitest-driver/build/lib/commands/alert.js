"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

const commands = {};
exports.commands = commands;

function toAlertParams(opts = {}) {
  const params = {};

  if (opts.buttonLabel) {
    params.name = opts.buttonLabel;
  }

  return params;
}

commands.getAlertText = async function getAlertText() {
  return await this.proxyCommand('/alert/text', 'GET');
};

commands.setAlertText = async function setAlertText(value) {
  return await this.proxyCommand('/alert/text', 'POST', {
    value
  });
};

commands.postAcceptAlert = async function postAcceptAlert(opts = {}) {
  return await this.proxyCommand('/alert/accept', 'POST', toAlertParams(opts));
};

commands.postDismissAlert = async function postDismissAlert(opts = {}) {
  return await this.proxyCommand('/alert/dismiss', 'POST', toAlertParams(opts));
};

commands.getAlertButtons = async function getAlertButtons() {
  return await this.proxyCommand('/wda/alert/buttons', 'GET');
};

commands.mobileHandleAlert = async function mobileHandleAlert(opts = {}) {
  switch (opts.action) {
    case 'accept':
      return await this.postAcceptAlert(opts);

    case 'dismiss':
      return await this.postDismissAlert(opts);

    case 'getButtons':
      return await this.getAlertButtons();

    default:
      throw new Error(`The 'action' value should be either 'accept', 'dismiss' or 'getButtons'. ` + `'${opts.action}' is provided instead.`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsInRvQWxlcnRQYXJhbXMiLCJvcHRzIiwicGFyYW1zIiwiYnV0dG9uTGFiZWwiLCJuYW1lIiwiZ2V0QWxlcnRUZXh0IiwicHJveHlDb21tYW5kIiwic2V0QWxlcnRUZXh0IiwidmFsdWUiLCJwb3N0QWNjZXB0QWxlcnQiLCJwb3N0RGlzbWlzc0FsZXJ0IiwiZ2V0QWxlcnRCdXR0b25zIiwibW9iaWxlSGFuZGxlQWxlcnQiLCJhY3Rpb24iLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsTUFBTUEsUUFBUSxHQUFHLEVBQWpCOzs7QUFFQSxTQUFTQyxhQUFULENBQXdCQyxJQUFJLEdBQUcsRUFBL0IsRUFBbUM7QUFDakMsUUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsTUFBSUQsSUFBSSxDQUFDRSxXQUFULEVBQXNCO0FBQ3BCRCxJQUFBQSxNQUFNLENBQUNFLElBQVAsR0FBY0gsSUFBSSxDQUFDRSxXQUFuQjtBQUNEOztBQUNELFNBQU9ELE1BQVA7QUFDRDs7QUFFREgsUUFBUSxDQUFDTSxZQUFULEdBQXdCLGVBQWVBLFlBQWYsR0FBK0I7QUFDckQsU0FBTyxNQUFNLEtBQUtDLFlBQUwsQ0FBa0IsYUFBbEIsRUFBaUMsS0FBakMsQ0FBYjtBQUNELENBRkQ7O0FBSUFQLFFBQVEsQ0FBQ1EsWUFBVCxHQUF3QixlQUFlQSxZQUFmLENBQTZCQyxLQUE3QixFQUFvQztBQUMxRCxTQUFPLE1BQU0sS0FBS0YsWUFBTCxDQUFrQixhQUFsQixFQUFpQyxNQUFqQyxFQUF5QztBQUFDRSxJQUFBQTtBQUFELEdBQXpDLENBQWI7QUFDRCxDQUZEOztBQUlBVCxRQUFRLENBQUNVLGVBQVQsR0FBMkIsZUFBZUEsZUFBZixDQUFnQ1IsSUFBSSxHQUFHLEVBQXZDLEVBQTJDO0FBQ3BFLFNBQU8sTUFBTSxLQUFLSyxZQUFMLENBQWtCLGVBQWxCLEVBQW1DLE1BQW5DLEVBQTJDTixhQUFhLENBQUNDLElBQUQsQ0FBeEQsQ0FBYjtBQUNELENBRkQ7O0FBSUFGLFFBQVEsQ0FBQ1csZ0JBQVQsR0FBNEIsZUFBZUEsZ0JBQWYsQ0FBaUNULElBQUksR0FBRyxFQUF4QyxFQUE0QztBQUN0RSxTQUFPLE1BQU0sS0FBS0ssWUFBTCxDQUFrQixnQkFBbEIsRUFBb0MsTUFBcEMsRUFBNENOLGFBQWEsQ0FBQ0MsSUFBRCxDQUF6RCxDQUFiO0FBQ0QsQ0FGRDs7QUFJQUYsUUFBUSxDQUFDWSxlQUFULEdBQTJCLGVBQWVBLGVBQWYsR0FBa0M7QUFDM0QsU0FBTyxNQUFNLEtBQUtMLFlBQUwsQ0FBa0Isb0JBQWxCLEVBQXdDLEtBQXhDLENBQWI7QUFDRCxDQUZEOztBQUlBUCxRQUFRLENBQUNhLGlCQUFULEdBQTZCLGVBQWVBLGlCQUFmLENBQWtDWCxJQUFJLEdBQUcsRUFBekMsRUFBNkM7QUFDeEUsVUFBUUEsSUFBSSxDQUFDWSxNQUFiO0FBQ0UsU0FBSyxRQUFMO0FBQ0UsYUFBTyxNQUFNLEtBQUtKLGVBQUwsQ0FBcUJSLElBQXJCLENBQWI7O0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBTyxNQUFNLEtBQUtTLGdCQUFMLENBQXNCVCxJQUF0QixDQUFiOztBQUNGLFNBQUssWUFBTDtBQUNFLGFBQU8sTUFBTSxLQUFLVSxlQUFMLEVBQWI7O0FBQ0Y7QUFDRSxZQUFNLElBQUlHLEtBQUosQ0FBVywyRUFBRCxHQUNDLElBQUdiLElBQUksQ0FBQ1ksTUFBTyx3QkFEMUIsQ0FBTjtBQVJKO0FBV0QsQ0FaRDs7ZUFlZWQsUSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbW1hbmRzID0ge307XG5cbmZ1bmN0aW9uIHRvQWxlcnRQYXJhbXMgKG9wdHMgPSB7fSkge1xuICBjb25zdCBwYXJhbXMgPSB7fTtcbiAgaWYgKG9wdHMuYnV0dG9uTGFiZWwpIHtcbiAgICBwYXJhbXMubmFtZSA9IG9wdHMuYnV0dG9uTGFiZWw7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuY29tbWFuZHMuZ2V0QWxlcnRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gZ2V0QWxlcnRUZXh0ICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvdGV4dCcsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLnNldEFsZXJ0VGV4dCA9IGFzeW5jIGZ1bmN0aW9uIHNldEFsZXJ0VGV4dCAodmFsdWUpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvdGV4dCcsICdQT1NUJywge3ZhbHVlfSk7XG59O1xuXG5jb21tYW5kcy5wb3N0QWNjZXB0QWxlcnQgPSBhc3luYyBmdW5jdGlvbiBwb3N0QWNjZXB0QWxlcnQgKG9wdHMgPSB7fSkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9hbGVydC9hY2NlcHQnLCAnUE9TVCcsIHRvQWxlcnRQYXJhbXMob3B0cykpO1xufTtcblxuY29tbWFuZHMucG9zdERpc21pc3NBbGVydCA9IGFzeW5jIGZ1bmN0aW9uIHBvc3REaXNtaXNzQWxlcnQgKG9wdHMgPSB7fSkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9hbGVydC9kaXNtaXNzJywgJ1BPU1QnLCB0b0FsZXJ0UGFyYW1zKG9wdHMpKTtcbn07XG5cbmNvbW1hbmRzLmdldEFsZXJ0QnV0dG9ucyA9IGFzeW5jIGZ1bmN0aW9uIGdldEFsZXJ0QnV0dG9ucyAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9hbGVydC9idXR0b25zJywgJ0dFVCcpO1xufTtcblxuY29tbWFuZHMubW9iaWxlSGFuZGxlQWxlcnQgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVIYW5kbGVBbGVydCAob3B0cyA9IHt9KSB7XG4gIHN3aXRjaCAob3B0cy5hY3Rpb24pIHtcbiAgICBjYXNlICdhY2NlcHQnOlxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucG9zdEFjY2VwdEFsZXJ0KG9wdHMpO1xuICAgIGNhc2UgJ2Rpc21pc3MnOlxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucG9zdERpc21pc3NBbGVydChvcHRzKTtcbiAgICBjYXNlICdnZXRCdXR0b25zJzpcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEFsZXJ0QnV0dG9ucygpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSAnYWN0aW9uJyB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyICdhY2NlcHQnLCAnZGlzbWlzcycgb3IgJ2dldEJ1dHRvbnMnLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgJyR7b3B0cy5hY3Rpb259JyBpcyBwcm92aWRlZCBpbnN0ZWFkLmApO1xuICB9XG59O1xuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9hbGVydC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
