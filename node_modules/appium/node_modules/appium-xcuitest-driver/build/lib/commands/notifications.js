"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

const extensions = {};

extensions.mobilePushNotification = async function mobilePushNotification(opts = {}) {
  if (!this.isSimulator()) {
    throw new Error('This extension only works on Simulator');
  }

  const {
    payload,
    bundleId
  } = opts;

  if (!bundleId) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`'bundleId' argument must be a valid bundle identifier string`);
  }

  if (!_lodash.default.isPlainObject(payload)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`The 'payload' argument value must be a valid dictionary. ` + `Got ${JSON.stringify(payload)} instead`);
  }

  if (!_lodash.default.isPlainObject(payload.aps)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`The 'payload.aps' value must be a valid dictionary. ` + `Got ${JSON.stringify(payload.aps)} instead`);
  }

  return await this.opts.device.pushNotification({ ...payload,
    'Simulator Target Bundle': bundleId
  });
};

extensions.mobileExpectNotification = async function mobileExpectNotification(opts = {}) {
  const {
    name,
    type,
    timeoutSeconds
  } = opts;
  return await this.proxyCommand('/wda/expectNotification', 'POST', {
    name,
    type,
    timeout: timeoutSeconds
  });
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9ub3RpZmljYXRpb25zLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJtb2JpbGVQdXNoTm90aWZpY2F0aW9uIiwib3B0cyIsImlzU2ltdWxhdG9yIiwiRXJyb3IiLCJwYXlsb2FkIiwiYnVuZGxlSWQiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIl8iLCJpc1BsYWluT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsImFwcyIsImRldmljZSIsInB1c2hOb3RpZmljYXRpb24iLCJtb2JpbGVFeHBlY3ROb3RpZmljYXRpb24iLCJuYW1lIiwidHlwZSIsInRpbWVvdXRTZWNvbmRzIiwicHJveHlDb21tYW5kIiwidGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxVQUFVLEdBQUcsRUFBbkI7O0FBc0JBQSxVQUFVLENBQUNDLHNCQUFYLEdBQW9DLGVBQWVBLHNCQUFmLENBQXVDQyxJQUFJLEdBQUcsRUFBOUMsRUFBa0Q7QUFDcEYsTUFBSSxDQUFDLEtBQUtDLFdBQUwsRUFBTCxFQUF5QjtBQUN2QixVQUFNLElBQUlDLEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBTTtBQUFFQyxJQUFBQSxPQUFGO0FBQVdDLElBQUFBO0FBQVgsTUFBd0JKLElBQTlCOztBQUNBLE1BQUksQ0FBQ0ksUUFBTCxFQUFlO0FBQ2IsVUFBTSxJQUFJQyx5QkFBT0Msb0JBQVgsQ0FBaUMsOERBQWpDLENBQU47QUFDRDs7QUFDRCxNQUFJLENBQUNDLGdCQUFFQyxhQUFGLENBQWdCTCxPQUFoQixDQUFMLEVBQStCO0FBQzdCLFVBQU0sSUFBSUUseUJBQU9DLG9CQUFYLENBQWlDLDJEQUFELEdBQ25DLE9BQU1HLElBQUksQ0FBQ0MsU0FBTCxDQUFlUCxPQUFmLENBQXdCLFVBRDNCLENBQU47QUFFRDs7QUFDRCxNQUFJLENBQUNJLGdCQUFFQyxhQUFGLENBQWdCTCxPQUFPLENBQUNRLEdBQXhCLENBQUwsRUFBbUM7QUFDakMsVUFBTSxJQUFJTix5QkFBT0Msb0JBQVgsQ0FBaUMsc0RBQUQsR0FDbkMsT0FBTUcsSUFBSSxDQUFDQyxTQUFMLENBQWVQLE9BQU8sQ0FBQ1EsR0FBdkIsQ0FBNEIsVUFEL0IsQ0FBTjtBQUVEOztBQUNELFNBQU8sTUFBTSxLQUFLWCxJQUFMLENBQVVZLE1BQVYsQ0FBaUJDLGdCQUFqQixDQUFrQyxFQUM3QyxHQUFHVixPQUQwQztBQUU3QywrQkFBMkJDO0FBRmtCLEdBQWxDLENBQWI7QUFJRCxDQXJCRDs7QUEyQ0FOLFVBQVUsQ0FBQ2dCLHdCQUFYLEdBQXNDLGVBQWVBLHdCQUFmLENBQXlDZCxJQUFJLEdBQUcsRUFBaEQsRUFBb0Q7QUFDeEYsUUFBTTtBQUFFZSxJQUFBQSxJQUFGO0FBQVFDLElBQUFBLElBQVI7QUFBY0MsSUFBQUE7QUFBZCxNQUFpQ2pCLElBQXZDO0FBQ0EsU0FBTyxNQUFNLEtBQUtrQixZQUFMLENBQWtCLHlCQUFsQixFQUE2QyxNQUE3QyxFQUFxRDtBQUNoRUgsSUFBQUEsSUFEZ0U7QUFFaEVDLElBQUFBLElBRmdFO0FBR2hFRyxJQUFBQSxPQUFPLEVBQUVGO0FBSHVELEdBQXJELENBQWI7QUFLRCxDQVBEOztlQVNlbkIsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBleHRlbnNpb25zID0ge307XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHVzaE5vdGlmaWNhdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gYnVuZGxlSWQgLSBUaGUgYnVuZGxlIGlkZW50aWZpZXIgb2YgdGhlIHRhcmdldCBhcHBsaWNhdGlvblxuICogQHByb3BlcnR5IHshb2JqZWN0fSBwYXlsb2FkIC0gUmVtb3RlIG5vdGlmaWNhdGlvbiBwYXlsb2FkLiBSZWFkIHRoZSBgQ3JlYXRlIHRoZSBKU09OIFBheWxvYWRgIHRvcGljIG9mXG4gKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi91c2Vybm90aWZpY2F0aW9ucy9zZXR0aW5nX3VwX2FfcmVtb3RlX25vdGlmaWNhdGlvbl9zZXJ2ZXIvZ2VuZXJhdGluZ19hX3JlbW90ZV9ub3RpZmljYXRpb25cbiAqIGZvciBtb3JlIGRldGFpbHMgb24gaG93IHRvIGNyZWF0ZSB0aGlzIHBheWxvYWQuXG4gKi9cblxuLyoqXG4gKiBTaW11bGF0ZXMgcHVzaCBub3RpZmljYXRpb24gZGVsaXZlcnkgdG8gU2ltdWxhdG9yLlxuICogT25seSBhcHBsaWNhdGlvbiByZW1vdGUgcHVzaCBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWQuIFZvSVAsIENvbXBsaWNhdGlvbiwgRmlsZSBQcm92aWRlcixcbiAqIGFuZCBvdGhlciB0eXBlcyBhcmUgbm90IHN1cHBvcnRlZFxuICpcbiAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICogQHBhcmFtIHtQdXNoTm90aWZpY2F0aW9ufSBvcHRzIC0gVGhlIG9iamVjdCB0aGF0IGRlc2NyaWJlcyBBcHBsZSBwdXNoIG5vdGlmaWNhdGlvbiBjb250ZW50LlxuICogSXQgbXVzdCBjb250YWluIGEgdG9wLWxldmVsIGBidW5kbGVJZGAga2V5IHdpdGggYSBzdHJpbmcgdmFsdWUgbWF0Y2hpbmdcbiAqIHRoZSB0YXJnZXQgYXBwbGljYXRpb27igJhzIGJ1bmRsZSBpZGVudGlmaWVyIGFuZCBcInBheWxvYWQuYXBzXCIga2V5IHdpdGggdmFsaWQgQXBwbGUgUHVzaCBOb3RpZmljYXRpb24gdmFsdWVzLlxuICogQ2hlY2sgdGhlIG91dHB1dCBvZiBgeGNydW4gc2ltY3RsIGhlbHAgcHVzaGAgY29tbWFuZCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHRlbnNpb25zLm1vYmlsZVB1c2hOb3RpZmljYXRpb24gPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVQdXNoTm90aWZpY2F0aW9uIChvcHRzID0ge30pIHtcbiAgaWYgKCF0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZXh0ZW5zaW9uIG9ubHkgd29ya3Mgb24gU2ltdWxhdG9yJyk7XG4gIH1cblxuICBjb25zdCB7IHBheWxvYWQsIGJ1bmRsZUlkIH0gPSBvcHRzO1xuICBpZiAoIWJ1bmRsZUlkKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgJ2J1bmRsZUlkJyBhcmd1bWVudCBtdXN0IGJlIGEgdmFsaWQgYnVuZGxlIGlkZW50aWZpZXIgc3RyaW5nYCk7XG4gIH1cbiAgaWYgKCFfLmlzUGxhaW5PYmplY3QocGF5bG9hZCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBUaGUgJ3BheWxvYWQnIGFyZ3VtZW50IHZhbHVlIG11c3QgYmUgYSB2YWxpZCBkaWN0aW9uYXJ5LiBgICtcbiAgICAgIGBHb3QgJHtKU09OLnN0cmluZ2lmeShwYXlsb2FkKX0gaW5zdGVhZGApO1xuICB9XG4gIGlmICghXy5pc1BsYWluT2JqZWN0KHBheWxvYWQuYXBzKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYFRoZSAncGF5bG9hZC5hcHMnIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBkaWN0aW9uYXJ5LiBgICtcbiAgICAgIGBHb3QgJHtKU09OLnN0cmluZ2lmeShwYXlsb2FkLmFwcyl9IGluc3RlYWRgKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5vcHRzLmRldmljZS5wdXNoTm90aWZpY2F0aW9uKHtcbiAgICAuLi5wYXlsb2FkLFxuICAgICdTaW11bGF0b3IgVGFyZ2V0IEJ1bmRsZSc6IGJ1bmRsZUlkLFxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBOb3RpZmljYXRpb25FeHBlY3RhdGlvbk9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGV4cGVjdFxuICogQHByb3BlcnR5IHs/c3RyaW5nfSB0eXBlIFtwbGFpbl0gLSBXaGljaCBub3RpZmljYXRpb24gdHlwZSB0byBleHBlY3QuXG4gKiBFaXRoZXIgJ3BsYWluJyB0byB3YWl0IGZvciBhIG5vdGlmaWNhdGlvbiBmcm9tIHRoZSBkZWZhdWx0IG5vdGlmaWNhdGlvbiBjZW50ZXIgb3IgJ2RhcndpbidcbiAqIHRvIHdhaXQgZm9yIGEgc3lzdGVtIG5vdGlmaWNhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lb3V0U2Vjb25kcyBbNjBdIC0gRm9yIGhvdyBsb25nIHRvIHdhaXQgdW50aWwgdGhlIG5vdGlmaWNhdGlvbiBpcyBkZWxpdmVyZWRcbiAqIGluIGZsb2F0IHNlY29uZHMuXG4gKi9cblxuLyoqXG4gKiBCbG9ja3MgdW50aWwgdGhlIGV4cGVjdGVkIG5vdGlmaWNhdGlvbiBpcyBkZWxpdmVyZWQuXG4gKiBUaGlzIG1ldGhvZCBpcyBhIHRoaW4gd3JhcHBlciBvdmVyIFhDVE5TTm90aWZpY2F0aW9uRXhwZWN0YXRpb24gYW5kXG4gKiBYQ1REYXJ3aW5Ob3RpZmljYXRpb25FeHBlY3RhdGlvbiBlbnRpdGllcy5cbiAqXG4gKiBAcGFyYW0ge05vdGlmaWNhdGlvbkV4cGVjdGF0aW9uT3B0aW9uc30gb3B0c1xuICogQHRocm93cyBUaW1lb3V0RXJyb3IgaWYgdGhlIGV4cGVjdGVkIG5vdGlmaWNhdGlvbiBoYXMgbm90IGJlZW4gZGVsaXZlcmVkIHdpdGhpbiB0aGUgZ2l2ZW4gdGltZW91dFxuICovXG5leHRlbnNpb25zLm1vYmlsZUV4cGVjdE5vdGlmaWNhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZUV4cGVjdE5vdGlmaWNhdGlvbiAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHsgbmFtZSwgdHlwZSwgdGltZW91dFNlY29uZHMgfSA9IG9wdHM7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9leHBlY3ROb3RpZmljYXRpb24nLCAnUE9TVCcsIHtcbiAgICBuYW1lLFxuICAgIHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dFNlY29uZHMsXG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL25vdGlmaWNhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
