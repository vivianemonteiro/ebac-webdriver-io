"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertIDB = assertIDB;
exports.default = exports.commands = void 0;
exports.parseXCTestStdout = parseXCTestStdout;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

let commands = {};
exports.commands = commands;
const XCTEST_TIMEOUT = 60 * 60 * 1000;

const xctestLog = _appiumSupport.logger.getLogger('XCTest');

function assertIDB(opts) {
  var _opts$device;

  if (!((_opts$device = opts.device) !== null && _opts$device !== void 0 && _opts$device.idb) || !opts.launchWithIDB) {
    _logger.default.errorAndThrow(`To use XCTest runner, IDB (https://github.com/facebook/idb) must be installed ` + `and sessions must be run with the "launchWithIDB" capability`);
  }

  return opts.device.idb;
}

function parseXCTestStdout(stdout) {
  function parseKey(name) {
    const words = name.split(' ');
    let out = '';

    for (const word of words) {
      out += word.substr(0, 1).toUpperCase() + word.substr(1);
    }

    return out.substr(0, 1).toLowerCase() + out.substr(1);
  }

  function parseValue(value) {
    value = value || '';

    switch (value.toLowerCase()) {
      case 'true':
        return true;

      case 'false':
        return false;

      case '':
        return null;

      default:
        break;
    }

    if (!isNaN(value)) {
      if (!_lodash.default.isString(value)) {
        return 0;
      } else if (value.indexOf('.') > 0) {
        return parseFloat(value);
      }

      return parseInt(value, 10);
    }
  }

  if (!stdout) {
    return [];
  }

  const lines = stdout.trim().split('\n');

  if (lines.length === 1 && !lines[0].includes('|')) {
    return [lines[0]];
  }

  const results = [];

  for (const line of lines) {
    const properties = line.split('|');
    const output = {};
    let entryIndex = 0;

    for (const prop of properties) {
      if (entryIndex === 0) {
        output.testName = prop.trim();
      } else {
        let [key, value] = prop.split(':');
        output[parseKey(key.trim())] = parseValue(value ? value.trim() : '');
      }

      entryIndex++;
    }

    results.push(output);
  }

  return results;
}

commands.mobileRunXCTest = async function runXCTest({
  testRunnerBundleId,
  appUnderTestBundleId,
  xctestBundleId,
  testType = 'ui',
  env,
  args,
  timeout = XCTEST_TIMEOUT
}) {
  const subproc = await assertIDB(this.opts).runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, {
    env,
    args,
    testType
  });
  return await new _bluebird.default((resolve, reject) => {
    let mostRecentLogObject = null;
    let xctestTimeout;

    if (timeout > 0) {
      xctestTimeout = setTimeout(() => reject(`Timed out after '${timeout}ms' waiting for XCTest to complete`), timeout);
    }

    subproc.on('output', (stdout, stderr) => {
      if (stdout) {
        try {
          mostRecentLogObject = parseXCTestStdout(stdout);
        } catch (err) {
          _logger.default.warn(`Failed to parse logs from test output: '${stdout}'`);

          _logger.default.debug(err.stack);
        }
      }

      stdout && xctestLog.info(stdout);
      stderr && xctestLog.error(stderr);
    });
    subproc.on('exit', (code, signal) => {
      clearTimeout(xctestTimeout);

      if (code !== 0) {
        const err = new Error(mostRecentLogObject);
        err.code = code;

        if (signal != null) {
          err.signal = signal;
        }

        if (mostRecentLogObject) {
          err.result = mostRecentLogObject;
        }

        return reject(err);
      }

      resolve({
        code,
        signal,
        results: mostRecentLogObject,
        passed: true
      });
    });
  });
};

commands.mobileInstallXCTestBundle = async function installXCTestBundle(opts) {
  const {
    xctestApp
  } = opts;

  if (!_lodash.default.isString(xctestApp)) {
    _logger.default.errorAndThrow(`'xctestApp' is a required parameter for 'installXCTestBundle' and ` + `must be a string. Found '${xctestApp}'`);
  }

  xctestLog.info(`Installing bundle '${xctestApp}'`);
  const idb = assertIDB(this.opts);
  const res = await this.helpers.configureApp(xctestApp, '.xctest');
  await idb.installXCTestBundle(res);
};

commands.mobileListXCTestBundles = async function listXCTestsInTestBundle() {
  return await assertIDB(this.opts).listXCTestBundles();
};

commands.mobileListXCTestsInTestBundle = async function listXCTestsInTestBundle(opts) {
  const {
    bundle
  } = opts;

  if (!_lodash.default.isString(bundle)) {
    _logger.default.errorAndThrow(`'bundle' is a required parameter for 'listXCTestsInTestBundle' and ` + `must be a string. Found '${bundle}'`);
  }

  const idb = assertIDB(this.opts);
  return await idb.listXCTestsInTestBundle(bundle);
};

Object.assign(commands);
var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy94Y3Rlc3QuanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJYQ1RFU1RfVElNRU9VVCIsInhjdGVzdExvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImFzc2VydElEQiIsIm9wdHMiLCJkZXZpY2UiLCJpZGIiLCJsYXVuY2hXaXRoSURCIiwibG9nIiwiZXJyb3JBbmRUaHJvdyIsInBhcnNlWENUZXN0U3Rkb3V0Iiwic3Rkb3V0IiwicGFyc2VLZXkiLCJuYW1lIiwid29yZHMiLCJzcGxpdCIsIm91dCIsIndvcmQiLCJzdWJzdHIiLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwicGFyc2VWYWx1ZSIsInZhbHVlIiwiaXNOYU4iLCJfIiwiaXNTdHJpbmciLCJpbmRleE9mIiwicGFyc2VGbG9hdCIsInBhcnNlSW50IiwibGluZXMiLCJ0cmltIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJyZXN1bHRzIiwibGluZSIsInByb3BlcnRpZXMiLCJvdXRwdXQiLCJlbnRyeUluZGV4IiwicHJvcCIsInRlc3ROYW1lIiwia2V5IiwicHVzaCIsIm1vYmlsZVJ1blhDVGVzdCIsInJ1blhDVGVzdCIsInRlc3RSdW5uZXJCdW5kbGVJZCIsImFwcFVuZGVyVGVzdEJ1bmRsZUlkIiwieGN0ZXN0QnVuZGxlSWQiLCJ0ZXN0VHlwZSIsImVudiIsImFyZ3MiLCJ0aW1lb3V0Iiwic3VicHJvYyIsInJ1blhDVUlUZXN0IiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJtb3N0UmVjZW50TG9nT2JqZWN0IiwieGN0ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCJvbiIsInN0ZGVyciIsImVyciIsIndhcm4iLCJkZWJ1ZyIsInN0YWNrIiwiaW5mbyIsImVycm9yIiwiY29kZSIsInNpZ25hbCIsImNsZWFyVGltZW91dCIsIkVycm9yIiwicmVzdWx0IiwicGFzc2VkIiwibW9iaWxlSW5zdGFsbFhDVGVzdEJ1bmRsZSIsImluc3RhbGxYQ1Rlc3RCdW5kbGUiLCJ4Y3Rlc3RBcHAiLCJyZXMiLCJoZWxwZXJzIiwiY29uZmlndXJlQXBwIiwibW9iaWxlTGlzdFhDVGVzdEJ1bmRsZXMiLCJsaXN0WENUZXN0c0luVGVzdEJ1bmRsZSIsImxpc3RYQ1Rlc3RCdW5kbGVzIiwibW9iaWxlTGlzdFhDVGVzdHNJblRlc3RCdW5kbGUiLCJidW5kbGUiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjs7QUFFQSxNQUFNQyxjQUFjLEdBQUcsS0FBSyxFQUFMLEdBQVUsSUFBakM7O0FBRUEsTUFBTUMsU0FBUyxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixRQUFqQixDQUFsQjs7QUFPTyxTQUFTQyxTQUFULENBQW9CQyxJQUFwQixFQUEwQjtBQUFBOztBQUMvQixNQUFJLGtCQUFDQSxJQUFJLENBQUNDLE1BQU4seUNBQUMsYUFBYUMsR0FBZCxLQUFxQixDQUFDRixJQUFJLENBQUNHLGFBQS9CLEVBQThDO0FBQzVDQyxvQkFBSUMsYUFBSixDQUFtQixnRkFBRCxHQUNmLDhEQURIO0FBRUQ7O0FBQ0QsU0FBT0wsSUFBSSxDQUFDQyxNQUFMLENBQVlDLEdBQW5CO0FBQ0Q7O0FBbUJNLFNBQVNJLGlCQUFULENBQTRCQyxNQUE1QixFQUFvQztBQUV6QyxXQUFTQyxRQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUN2QixVQUFNQyxLQUFLLEdBQUdELElBQUksQ0FBQ0UsS0FBTCxDQUFXLEdBQVgsQ0FBZDtBQUNBLFFBQUlDLEdBQUcsR0FBRyxFQUFWOztBQUNBLFNBQUssTUFBTUMsSUFBWCxJQUFtQkgsS0FBbkIsRUFBMEI7QUFDeEJFLE1BQUFBLEdBQUcsSUFBSUMsSUFBSSxDQUFDQyxNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFdBQWxCLEtBQWtDRixJQUFJLENBQUNDLE1BQUwsQ0FBWSxDQUFaLENBQXpDO0FBQ0Q7O0FBQ0QsV0FBT0YsR0FBRyxDQUFDRSxNQUFKLENBQVcs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QUFmLEdBQTBDO0FBQzNFLFNBQU8sTUFBTTdFLFNBQVMsQ0FBQyxLQUFLQyxJQUFOLENBQVQsQ0FBcUI2RSxpQkFBckIsRUFBYjtBQUNELENBRkQ7O0FBbUJBbkYsUUFBUSxDQUFDb0YsNkJBQVQsR0FBeUMsZUFBZUYsdUJBQWYsQ0FBd0M1RSxJQUF4QyxFQUE4QztBQUNyRixRQUFNO0FBQUUrRSxJQUFBQTtBQUFGLE1BQWEvRSxJQUFuQjs7QUFDQSxNQUFJLENBQUNvQixnQkFBRUMsUUFBRixDQUFXMEQsTUFBWCxDQUFMLEVBQXlCO0FBQ3ZCM0Usb0JBQUlDLGFBQUosQ0FBbUIscUVBQUQsR0FDZiw0QkFBMkIwRSxNQUFPLEdBRHJDO0FBRUQ7O0FBQ0QsUUFBTTdFLEdBQUcsR0FBR0gsU0FBUyxDQUFDLEtBQUtDLElBQU4sQ0FBckI7QUFDQSxTQUFPLE1BQU1FLEdBQUcsQ0FBQzBFLHVCQUFKLENBQTRCRyxNQUE1QixDQUFiO0FBQ0QsQ0FSRDs7QUFVQUMsTUFBTSxDQUFDQyxNQUFQLENBQWN2RixRQUFkO2VBRWVBLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29uc3QgWENURVNUX1RJTUVPVVQgPSA2MCAqIDYwICogMTAwMDsgLy8gNjAgbWludXRlIHRpbWVvdXRcblxuY29uc3QgeGN0ZXN0TG9nID0gbG9nZ2VyLmdldExvZ2dlcignWENUZXN0Jyk7XG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IElEQiBpcyBwcmVzZW50IGFuZCB0aGF0IGxhdW5jaFdpdGhJREIgd2FzIHVzZWRcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRzIG9iamVjdCBmcm9tIHRoZSBkcml2ZXIgaW5zdGFuY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydElEQiAob3B0cykge1xuICBpZiAoIW9wdHMuZGV2aWNlPy5pZGIgfHwgIW9wdHMubGF1bmNoV2l0aElEQikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBUbyB1c2UgWENUZXN0IHJ1bm5lciwgSURCIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svaWRiKSBtdXN0IGJlIGluc3RhbGxlZCBgICtcbiAgICAgIGBhbmQgc2Vzc2lvbnMgbXVzdCBiZSBydW4gd2l0aCB0aGUgXCJsYXVuY2hXaXRoSURCXCIgY2FwYWJpbGl0eWApO1xuICB9XG4gIHJldHVybiBvcHRzLmRldmljZS5pZGI7XG59XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBYQ1Rlc3RSZXN1bHRcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGVzdE5hbWUgTmFtZSBvZiB0aGUgdGVzdCAoZS5nLjogJ1hDVGVzdGVyQXBwVUlUZXN0cyAtIFhDVGVzdGVyQXBwVUlUZXN0cy5YQ1Rlc3RlckFwcFVJVGVzdHMvdGVzdEV4YW1wbGUnKVxuICogQHByb3BlcnR5IHtib29sZWFufSBwYXNzZWQgRGlkIHRoZSB0ZXN0cyBwYXNzP1xuICogQHByb3BlcnR5IHtib29sZWFufSBjcmFzaGVkIERpZCB0aGUgdGVzdHMgY3Jhc2g/XG4gKiBAcHJvcGVydHkge251bWJlcn0gZHVyYXRpb24gSG93IGxvbmcgZGlkIHRoZSB0ZXN0cyB0YWtlIChpbiBzZWNvbmRzKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZhaWx1cmVNZXNzYWdlIEZhaWx1cmUgbWVzc2FnZSAoaWYgYXBwbGljYWJsZSlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb2NhdGlvbiBUaGUgZ2VvbG9jYXRpb24gb2YgdGhlIHRlc3RzIChpZiBhcHBsaWNhYmxlKVxuICovXG5cbi8qKlxuICogUGFyc2UgdGhlIHN0ZG91dCBvZiBYQyB0ZXN0IGxvZ1xuICogQHBhcmFtIHtzdHJpbmd9IHN0ZG91dCBBIGxpbmUgb2Ygc3RhbmRhcmQgb3V0IGZyb20gYGlkYiB4Y3Rlc3QgcnVuIC4uLmBcbiAqIEByZXR1cm5zIHtBcnJheTxYQ1Rlc3RSZXN1bHQ+fSByZXN1bHRzIFRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIFhDVGVzdCBydW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWENUZXN0U3Rkb3V0IChzdGRvdXQpIHtcbiAgLy8gUGFyc2VzIGEgJ2tleScgaW50byBKU09OIGZvcm1hdFxuICBmdW5jdGlvbiBwYXJzZUtleSAobmFtZSkge1xuICAgIGNvbnN0IHdvcmRzID0gbmFtZS5zcGxpdCgnICcpO1xuICAgIGxldCBvdXQgPSAnJztcbiAgICBmb3IgKGNvbnN0IHdvcmQgb2Ygd29yZHMpIHtcbiAgICAgIG91dCArPSB3b3JkLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQuc3Vic3RyKDAsIDEpLnRvTG93ZXJDYXNlKCkgKyBvdXQuc3Vic3RyKDEpO1xuICB9XG5cbiAgLy8gUGFyc2VzIGEgJ3ZhbHVlJyBpbnRvIEpTT04gZm9ybWF0XG4gIGZ1bmN0aW9uIHBhcnNlVmFsdWUgKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICBzd2l0Y2ggKHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ3RydWUnOiByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2ZhbHNlJzogcmV0dXJuIGZhbHNlO1xuICAgICAgY2FzZSAnJzogcmV0dXJuIG51bGw7XG4gICAgICBkZWZhdWx0OiBicmVhaztcbiAgICB9XG4gICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgIGlmICghXy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlLmluZGV4T2YoJy4nKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9XG4gIGlmICghc3Rkb3V0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gUGFyc2UgZWFjaCBsaW5lIGludG8gYW4gYXJyYXlcbiAgY29uc3QgbGluZXMgPSBzdGRvdXQudHJpbSgpLnNwbGl0KCdcXG4nKTtcblxuICAvLyBPbmUgc2luZ2xlIHN0cmluZywganVzdCByZXR1cm4gdGhlIHN0cmluZ1xuICBpZiAobGluZXMubGVuZ3RoID09PSAxICYmICFsaW5lc1swXS5pbmNsdWRlcygnfCcpKSB7XG4gICAgcmV0dXJuIFtsaW5lc1swXV07XG4gIH1cblxuICBjb25zdCByZXN1bHRzID0gW107XG4gIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgIC8vIFRoZSBwcm9wZXJ0aWVzIGFyZSBzcGxpdCB1cCBieSBwaXBlcyBhbmQgZWFjaCBwcm9wZXJ0eVxuICAgIC8vIGhhcyB0aGUgZm9ybWF0IFwiU29tZSBLZXkgOiBTb21lIFZhbHVlXCJcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gbGluZS5zcGxpdCgnfCcpO1xuXG4gICAgLy8gUGFyc2UgZWFjaCBwcm9wZXJ0eVxuICAgIGNvbnN0IG91dHB1dCA9IHt9O1xuICAgIGxldCBlbnRyeUluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgICAgaWYgKGVudHJ5SW5kZXggPT09IDApIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHByb3BlcnR5IG9ubHkgY29udGFpbnMgb25lIHN0cmluZyB0aGF0IGNvbnRhaW5zXG4gICAgICAgIC8vIHRoZSB0ZXN0IG5hbWUgKGUuZy46ICdYQ1Rlc3RlckFwcFVJVGVzdHMgLSBYQ1Rlc3RlckFwcFVJVGVzdHMuWENUZXN0ZXJBcHBVSVRlc3RzL3Rlc3RFeGFtcGxlJylcbiAgICAgICAgb3V0cHV0LnRlc3ROYW1lID0gcHJvcC50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBwcm9wLnNwbGl0KCc6Jyk7XG4gICAgICAgIG91dHB1dFtwYXJzZUtleShrZXkudHJpbSgpKV0gPSBwYXJzZVZhbHVlKHZhbHVlID8gdmFsdWUudHJpbSgpIDogJycpO1xuICAgICAgfVxuICAgICAgZW50cnlJbmRleCsrO1xuICAgIH1cbiAgICAvLyBBZGQgdGhpcyBsaW5lIHRvIHRoZSByZXN1bHRzXG4gICAgcmVzdWx0cy5wdXNoKG91dHB1dCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUnVuWENVSVRlc3RSZXNwb25zZVxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8WENUZXN0UmVzdWx0Pn0gcmVzdWx0cyBUaGUgcmVzdWx0cyBvZiBhbGwgdGhlIHRlc3RzIHdpdGggaW5mb3JtYXRpb25cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb2RlIFRoZSBleGl0IGNvZGUgb2YgdGhlIHByb2Nlc3NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzaWduYWwgVGhlIHNpZ25hbCB0aGF0IHRlcm1pbmF0ZWQgdGhlIHByb2Nlc3MgKG9yIG51bGwpIChlLmcuOiBTSUdURVJNKVxuICpcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJ1blhDVUlUZXN0T3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gdGVzdFJ1bm5lckJ1bmRsZUlkIFRlc3QgYXBwIGJ1bmRsZSAoZS5nLjogJ2lvLmFwcGl1bS5YQ1Rlc3RlckFwcFVJVGVzdHMueGN0cnVubmVyJylcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gYXBwVW5kZXJUZXN0QnVuZGxlSWQgQXBwLXVuZGVyLXRlc3QgYnVuZGxlXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IHhjVGVzdEJ1bmRsZUlEIHhjdGVzdCBidW5kbGUgaWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0ZXN0VHlwZSBbdWldIFhDIHRlc3QgdHlwZS4gJ2FwcCcsICd1aScsIG9yICdsb2dpYydcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBlbnYgRW52aXJvbm1lbnQgdmFyaWFibGVzIHBhc3NlZCB0byB0ZXN0XG4gKiBAcHJvcGVydHkge0FycmF5PFN0cmluZz59IGFyZ3MgTGF1bmNoIGFyZ3VtZW50cyB0byBzdGFydCB0aGUgdGVzdCB3aXRoIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGN0ZXN0L3hjdWlhcHBsaWNhdGlvbi8xNTAwNDc3LWxhdW5jaGFyZ3VtZW50cyBmb3IgcmVmZXJlbmNlKVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXQgWzM2MDAwMF0gVGltZW91dCBpZiBzZXNzaW9uIGRvZXNuJ3QgY29tcGxldGUgYWZ0ZXIgZ2l2ZW4gdGltZSAoaW4gbWlsbGlzZWNvbmRzKVxuICovXG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7RXJyb3J9IFhDVUlUZXN0RXJyb3JcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gY29kZSBTdWJwcm9jZXNzIGV4aXQgY29kZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNpZ25hbCBUaGUgc2lnbmFsIChTSUcqKSB0aGF0IGNhdXNlZCB0aGUgcHJvY2VzcyB0byBmYWlsXG4gKiBAcHJvcGVydHkgeyFBcnJheTxYQ1Rlc3RSZXN1bHQ+fSByZXN1bHRzIFRoZSBvdXRwdXQgb2YgdGhlIGZhaWxlZCB0ZXN0IChpZiB0aGVyZSBpcyBvdXRwdXQpXG4gKi9cblxuLyoqXG4gKiBSdW4gYW4gWENUZXN0LiBMYXVuY2hlcyBhIHN1YnByb2Nlc3MgdGhhdCBydW5zIHRoZSBYQyBUZXN0IGFuZCBibG9ja3NcbiAqIHVudGlsIGl0IGlzIGNvbXBsZXRlLiBQYXJzZXMgdGhlIHN0ZG91dCBvZiB0aGUgcHJvY2VzcyBhbmQgcmV0dXJuc1xuICogcmVzdWx0IGFzIGFuIGFycmF5XG4gKlxuICogU2VlIGh0dHBzOi8vZmJpZGIuaW8vZG9jcy90ZXN0X2V4ZWN1dGlvbiBmb3IgcmVmZXJlbmNlXG4gKlxuICogQHBhcmFtIHtSdW5YQ1VJVGVzdE9wdGlvbnN9IHJ1blhDVUlUZXN0T3B0aW9uc1xuICogQHRocm93cyB7WENVSVRlc3RFcnJvcn0gRXJyb3IgdGhyb3duIGlmIHN1YnByb2Nlc3MgcmV0dXJucyBub24temVybyBleGl0IGNvZGVcbiAqIEByZXR1cm5zIHtSdW5YQ1VJVGVzdFJlc3BvbnNlfVxuICovXG5jb21tYW5kcy5tb2JpbGVSdW5YQ1Rlc3QgPSBhc3luYyBmdW5jdGlvbiBydW5YQ1Rlc3QgKHtcbiAgdGVzdFJ1bm5lckJ1bmRsZUlkLFxuICBhcHBVbmRlclRlc3RCdW5kbGVJZCxcbiAgeGN0ZXN0QnVuZGxlSWQsXG4gIHRlc3RUeXBlID0gJ3VpJyxcbiAgZW52LFxuICBhcmdzLFxuICB0aW1lb3V0ID0gWENURVNUX1RJTUVPVVQsXG59KSB7XG4gIGNvbnN0IHN1YnByb2MgPSBhd2FpdCBhc3NlcnRJREIodGhpcy5vcHRzKS5ydW5YQ1VJVGVzdChcbiAgICAgICAgdGVzdFJ1bm5lckJ1bmRsZUlkLCBhcHBVbmRlclRlc3RCdW5kbGVJZCwgeGN0ZXN0QnVuZGxlSWQsIHtlbnYsIGFyZ3MsIHRlc3RUeXBlfSxcbiAgKTtcbiAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgbW9zdFJlY2VudExvZ09iamVjdCA9IG51bGw7XG4gICAgbGV0IHhjdGVzdFRpbWVvdXQ7XG4gICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICB4Y3Rlc3RUaW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gcmVqZWN0KGBUaW1lZCBvdXQgYWZ0ZXIgJyR7dGltZW91dH1tcycgd2FpdGluZyBmb3IgWENUZXN0IHRvIGNvbXBsZXRlYCksXG4gICAgICAgIHRpbWVvdXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3VicHJvYy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBpZiAoc3Rkb3V0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbW9zdFJlY2VudExvZ09iamVjdCA9IHBhcnNlWENUZXN0U3Rkb3V0KHN0ZG91dCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8vIEZhaWxzIGlmIGxvZyBwYXJzaW5nIGZhaWxzLlxuICAgICAgICAgIC8vIFRoaXMgaXMgaW4gY2FzZSBJREIgY2hhbmdlcyB0aGUgd2F5IHRoYXQgbG9ncyBhcmUgZm9ybWF0dGVkIGFuZFxuICAgICAgICAgIC8vIGl0IGJyZWFrcyAncGFyc2VYQ1Rlc3RTdGRvdXQnLiBJZiB0aGF0IGhhcHBlbnMgd2Ugc3RpbGwgd2FudCB0aGUgcHJvY2Vzc1xuICAgICAgICAgIC8vIHRvIGZpbmlzaFxuICAgICAgICAgIGxvZy53YXJuKGBGYWlsZWQgdG8gcGFyc2UgbG9ncyBmcm9tIHRlc3Qgb3V0cHV0OiAnJHtzdGRvdXR9J2ApO1xuICAgICAgICAgIGxvZy5kZWJ1ZyhlcnIuc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGRvdXQgJiYgeGN0ZXN0TG9nLmluZm8oc3Rkb3V0KTtcbiAgICAgIHN0ZGVyciAmJiB4Y3Rlc3RMb2cuZXJyb3Ioc3RkZXJyKTtcbiAgICB9KTtcblxuICAgIHN1YnByb2Mub24oJ2V4aXQnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoeGN0ZXN0VGltZW91dCk7XG4gICAgICBpZiAoY29kZSAhPT0gMCkge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobW9zdFJlY2VudExvZ09iamVjdCk7XG4gICAgICAgIGVyci5jb2RlID0gY29kZTtcbiAgICAgICAgaWYgKHNpZ25hbCAhPSBudWxsKSB7XG4gICAgICAgICAgZXJyLnNpZ25hbCA9IHNpZ25hbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9zdFJlY2VudExvZ09iamVjdCkge1xuICAgICAgICAgIGVyci5yZXN1bHQgPSBtb3N0UmVjZW50TG9nT2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoe1xuICAgICAgICBjb2RlLCBzaWduYWwsIHJlc3VsdHM6IG1vc3RSZWNlbnRMb2dPYmplY3QsIHBhc3NlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW5zdGFsbFhDVGVzdEJ1bmRsZU9wdHNcbiAqXG4gKiBAcHJvcGVydHkge3hjdGVzdEFwcH0geGN0ZXN0QnVuZGxlIFBhdGggb2YgdGhlIFhDVGVzdCBhcHAgKFVSTCBvciAuYXBwKVxuICovXG5cbi8qKlxuICogSW5zdGFsbCBhbiBYQ1Rlc3RCdW5kbGVcbiAqXG4gKiBAcGFyYW0ge0luc3RhbGxYQ1Rlc3RCdW5kbGVPcHRzIX0gb3B0cyBJbnN0YWxsIHhjdGVzdCBidW5kbGUgb3B0c1xuICovXG5jb21tYW5kcy5tb2JpbGVJbnN0YWxsWENUZXN0QnVuZGxlID0gYXN5bmMgZnVuY3Rpb24gaW5zdGFsbFhDVGVzdEJ1bmRsZSAob3B0cykge1xuICBjb25zdCB7IHhjdGVzdEFwcCB9ID0gb3B0cztcbiAgaWYgKCFfLmlzU3RyaW5nKHhjdGVzdEFwcCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgJ3hjdGVzdEFwcCcgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIgZm9yICdpbnN0YWxsWENUZXN0QnVuZGxlJyBhbmQgYCArXG4gICAgICBgbXVzdCBiZSBhIHN0cmluZy4gRm91bmQgJyR7eGN0ZXN0QXBwfSdgKTtcbiAgfVxuICB4Y3Rlc3RMb2cuaW5mbyhgSW5zdGFsbGluZyBidW5kbGUgJyR7eGN0ZXN0QXBwfSdgKTtcbiAgY29uc3QgaWRiID0gYXNzZXJ0SURCKHRoaXMub3B0cyk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaGVscGVycy5jb25maWd1cmVBcHAoeGN0ZXN0QXBwLCAnLnhjdGVzdCcpO1xuICBhd2FpdCBpZGIuaW5zdGFsbFhDVGVzdEJ1bmRsZShyZXMpO1xufTtcblxuLyoqXG4gKiBMaXN0IFhDVGVzdCBidW5kbGVzIHRoYXQgYXJlIGluc3RhbGxlZCBvbiBkZXZpY2VcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gTGlzdCBvZiBYQ1Rlc3QgYnVuZGxlcyAoZS5nLjogXCJYQ1Rlc3RlckFwcFVJVGVzdHMuWENUZXN0ZXJBcHBVSVRlc3RzL3Rlc3RMYXVuY2hQZXJmb3JtYW5jZVwiKVxuICovXG5jb21tYW5kcy5tb2JpbGVMaXN0WENUZXN0QnVuZGxlcyA9IGFzeW5jIGZ1bmN0aW9uIGxpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlICgpIHtcbiAgcmV0dXJuIGF3YWl0IGFzc2VydElEQih0aGlzLm9wdHMpLmxpc3RYQ1Rlc3RCdW5kbGVzKCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExpc3RYQ1Rlc3RzT3B0c1xuICpcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gYnVuZGxlIEJ1bmRsZSBJRCBvZiB0aGUgWENUZXN0XG4gKi9cblxuLyoqXG4gKiBMaXN0IFhDVGVzdHMgaW4gYSB0ZXN0IGJ1bmRsZVxuICpcbiAqIEBwYXJhbSB7IUxpc3RYQ1Rlc3RzT3B0c30gb3B0cyBYQ1Rlc3QgbGlzdCBvcHRpb25zXG4gKlxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59IFRoZSBsaXN0IG9mIHhjdGVzdHMgaW4gdGhlIHRlc3QgYnVuZGxlXG4gKiAgICAoZS5nLjogWyAnWENUZXN0ZXJBcHBVSVRlc3RzLlhDVGVzdGVyQXBwVUlUZXN0cy90ZXN0RXhhbXBsZScsXG4gICAgICAgICAgICAgICAgJ1hDVGVzdGVyQXBwVUlUZXN0cy5YQ1Rlc3RlckFwcFVJVGVzdHMvdGVzdExhdW5jaFBlcmZvcm1hbmNlJyBdIClcbiAqL1xuY29tbWFuZHMubW9iaWxlTGlzdFhDVGVzdHNJblRlc3RCdW5kbGUgPSBhc3luYyBmdW5jdGlvbiBsaXN0WENUZXN0c0luVGVzdEJ1bmRsZSAob3B0cykge1xuICBjb25zdCB7IGJ1bmRsZSB9ID0gb3B0cztcbiAgaWYgKCFfLmlzU3RyaW5nKGJ1bmRsZSkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgJ2J1bmRsZScgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIgZm9yICdsaXN0WENUZXN0c0luVGVzdEJ1bmRsZScgYW5kIGAgK1xuICAgICAgYG11c3QgYmUgYSBzdHJpbmcuIEZvdW5kICcke2J1bmRsZX0nYCk7XG4gIH1cbiAgY29uc3QgaWRiID0gYXNzZXJ0SURCKHRoaXMub3B0cyk7XG4gIHJldHVybiBhd2FpdCBpZGIubGlzdFhDVGVzdHNJblRlc3RCdW5kbGUoYnVuZGxlKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oY29tbWFuZHMpO1xuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMveGN0ZXN0LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
