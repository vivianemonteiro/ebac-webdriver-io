"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getCookies = async function getCookies() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const cookies = (await this.remote.getCookies()) || {
    cookies: []
  };
  const decodedCookieValues = cookies.cookies.map(cookie => {
    try {
      return decodeURI(cookie.value);
    } catch (error) {
      _logger.default.debug(`Cookie ${cookie.name} was not decoded successfully. Cookie value: ${cookie.value}`);

      _logger.default.warn(error);

      return undefined;
    }
  });
  return _lodash.default.zip(cookies.cookies, decodedCookieValues).filter(([, value]) => !_lodash.default.isUndefined(value)).map(([cookie, value]) => Object.assign({}, cookie, {
    value
  }));
};

commands.deleteCookie = async function deleteCookie(cookieName) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();
  const cookie = cookies.find(cookie => cookie.name === cookieName);

  if (!cookie) {
    _logger.default.debug(`Cookie '${cookieName}' not found. Ignoring.`);

    return true;
  }

  await this._deleteCookie(cookie);
  return true;
};

commands.deleteCookies = async function deleteCookies() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();

  for (const cookie of cookies) {
    await this._deleteCookie(cookie);
  }

  return true;
};

helpers._deleteCookie = async function _deleteCookie(cookie) {
  const url = `http${cookie.secure ? 's' : ''}://${cookie.domain}${cookie.path}`;
  return await this.remote.deleteCookie(cookie.name, url);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb29raWVzLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRDb29raWVzIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNvb2tpZXMiLCJyZW1vdGUiLCJkZWNvZGVkQ29va2llVmFsdWVzIiwibWFwIiwiY29va2llIiwiZGVjb2RlVVJJIiwidmFsdWUiLCJlcnJvciIsImxvZyIsImRlYnVnIiwibmFtZSIsIndhcm4iLCJ1bmRlZmluZWQiLCJfIiwiemlwIiwiZmlsdGVyIiwiaXNVbmRlZmluZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWxldGVDb29raWUiLCJjb29raWVOYW1lIiwiZmluZCIsIl9kZWxldGVDb29raWUiLCJkZWxldGVDb29raWVzIiwidXJsIiwic2VjdXJlIiwiZG9tYWluIiwicGF0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFGLFFBQVEsQ0FBQ0csVUFBVCxHQUFzQixlQUFlQSxVQUFmLEdBQTZCO0FBQ2pELE1BQUksQ0FBQyxLQUFLQyxZQUFMLEVBQUwsRUFBMEI7QUFDeEIsVUFBTSxJQUFJQyx5QkFBT0MsbUJBQVgsRUFBTjtBQUNEOztBQUdELFFBQU1DLE9BQU8sR0FBRyxPQUFNLEtBQUtDLE1BQUwsQ0FBWUwsVUFBWixFQUFOLEtBQWtDO0FBQUNJLElBQUFBLE9BQU8sRUFBRTtBQUFWLEdBQWxEO0FBR0EsUUFBTUUsbUJBQW1CLEdBQUdGLE9BQU8sQ0FBQ0EsT0FBUixDQUFnQkcsR0FBaEIsQ0FBcUJDLE1BQUQsSUFBWTtBQUMxRCxRQUFJO0FBQ0YsYUFBT0MsU0FBUyxDQUFDRCxNQUFNLENBQUNFLEtBQVIsQ0FBaEI7QUFDRCxLQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ2RDLHNCQUFJQyxLQUFKLENBQVcsVUFBU0wsTUFBTSxDQUFDTSxJQUFLLGdEQUErQ04sTUFBTSxDQUFDRSxLQUFNLEVBQTVGOztBQUNBRSxzQkFBSUcsSUFBSixDQUFTSixLQUFUOztBQUNBLGFBQU9LLFNBQVA7QUFDRDtBQUNGLEdBUjJCLENBQTVCO0FBV0EsU0FBT0MsZ0JBQUVDLEdBQUYsQ0FBTWQsT0FBTyxDQUFDQSxPQUFkLEVBQXVCRSxtQkFBdkIsRUFDSmEsTUFESSxDQUNHLENBQUMsR0FBR1QsS0FBSCxDQUFELEtBQWUsQ0FBQ08sZ0JBQUVHLFdBQUYsQ0FBY1YsS0FBZCxDQURuQixFQUVKSCxHQUZJLENBRUEsQ0FBQyxDQUFDQyxNQUFELEVBQVNFLEtBQVQsQ0FBRCxLQUFxQlcsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQmQsTUFBbEIsRUFBMEI7QUFBQ0UsSUFBQUE7QUFBRCxHQUExQixDQUZyQixDQUFQO0FBR0QsQ0F2QkQ7O0FBeUJBYixRQUFRLENBQUMwQixZQUFULEdBQXdCLGVBQWVBLFlBQWYsQ0FBNkJDLFVBQTdCLEVBQXlDO0FBQy9ELE1BQUksQ0FBQyxLQUFLdkIsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSUMseUJBQU9DLG1CQUFYLEVBQU47QUFDRDs7QUFFRCxRQUFNQyxPQUFPLEdBQUcsTUFBTSxLQUFLSixVQUFMLEVBQXRCO0FBQ0EsUUFBTVEsTUFBTSxHQUFHSixPQUFPLENBQUNxQixJQUFSLENBQWNqQixNQUFELElBQVlBLE1BQU0sQ0FBQ00sSUFBUCxLQUFnQlUsVUFBekMsQ0FBZjs7QUFDQSxNQUFJLENBQUNoQixNQUFMLEVBQWE7QUFDWEksb0JBQUlDLEtBQUosQ0FBVyxXQUFVVyxVQUFXLHdCQUFoQzs7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNLEtBQUtFLGFBQUwsQ0FBbUJsQixNQUFuQixDQUFOO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FkRDs7QUFnQkFYLFFBQVEsQ0FBQzhCLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixHQUFnQztBQUN2RCxNQUFJLENBQUMsS0FBSzFCLFlBQUwsRUFBTCxFQUEwQjtBQUN4QixVQUFNLElBQUlDLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBRUQsUUFBTUMsT0FBTyxHQUFHLE1BQU0sS0FBS0osVUFBTCxFQUF0Qjs7QUFDQSxPQUFLLE1BQU1RLE1BQVgsSUFBcUJKLE9BQXJCLEVBQThCO0FBQzVCLFVBQU0sS0FBS3NCLGFBQUwsQ0FBbUJsQixNQUFuQixDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxJQUFQO0FBQ0QsQ0FWRDs7QUFZQVYsT0FBTyxDQUFDNEIsYUFBUixHQUF3QixlQUFlQSxhQUFmLENBQThCbEIsTUFBOUIsRUFBc0M7QUFDNUQsUUFBTW9CLEdBQUcsR0FBSSxPQUFNcEIsTUFBTSxDQUFDcUIsTUFBUCxHQUFnQixHQUFoQixHQUFzQixFQUFHLE1BQUtyQixNQUFNLENBQUNzQixNQUFPLEdBQUV0QixNQUFNLENBQUN1QixJQUFLLEVBQTdFO0FBQ0EsU0FBTyxNQUFNLEtBQUsxQixNQUFMLENBQVlrQixZQUFaLENBQXlCZixNQUFNLENBQUNNLElBQWhDLEVBQXNDYyxHQUF0QyxDQUFiO0FBQ0QsQ0FIRDs7QUFLQVAsTUFBTSxDQUFDQyxNQUFQLENBQWN2QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuZ2V0Q29va2llcyA9IGFzeW5jIGZ1bmN0aW9uIGdldENvb2tpZXMgKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIC8vIGdldCB0aGUgY29va2llcyBmcm9tIHRoZSByZW1vdGUgZGVidWdnZXIsIG9yIGFuIGVtcHR5IG9iamVjdFxuICBjb25zdCBjb29raWVzID0gYXdhaXQgdGhpcy5yZW1vdGUuZ2V0Q29va2llcygpIHx8IHtjb29raWVzOiBbXX07XG5cbiAgLy8gdGhlIHZhbHVlIGlzIFVSSSBlbmNvZGVkLCBzbyBkZWNvZGUgaXQgc2FmZWx5XG4gIGNvbnN0IGRlY29kZWRDb29raWVWYWx1ZXMgPSBjb29raWVzLmNvb2tpZXMubWFwKChjb29raWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRlY29kZVVSSShjb29raWUudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2cuZGVidWcoYENvb2tpZSAke2Nvb2tpZS5uYW1lfSB3YXMgbm90IGRlY29kZWQgc3VjY2Vzc2Z1bGx5LiBDb29raWUgdmFsdWU6ICR7Y29va2llLnZhbHVlfWApO1xuICAgICAgbG9nLndhcm4oZXJyb3IpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHppcCBjb29rZXMgd2l0aCBkZWNvZGVkIHZhbHVlLCByZW1vdmluZyB1bmRlZmluZWQgY29va2llIHZhbHVlc1xuICByZXR1cm4gXy56aXAoY29va2llcy5jb29raWVzLCBkZWNvZGVkQ29va2llVmFsdWVzKVxuICAgIC5maWx0ZXIoKFssIHZhbHVlXSkgPT4gIV8uaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIC5tYXAoKFtjb29raWUsIHZhbHVlXSkgPT4gT2JqZWN0LmFzc2lnbih7fSwgY29va2llLCB7dmFsdWV9KSk7XG59O1xuXG5jb21tYW5kcy5kZWxldGVDb29raWUgPSBhc3luYyBmdW5jdGlvbiBkZWxldGVDb29raWUgKGNvb2tpZU5hbWUpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICBjb25zdCBjb29raWVzID0gYXdhaXQgdGhpcy5nZXRDb29raWVzKCk7XG4gIGNvbnN0IGNvb2tpZSA9IGNvb2tpZXMuZmluZCgoY29va2llKSA9PiBjb29raWUubmFtZSA9PT0gY29va2llTmFtZSk7XG4gIGlmICghY29va2llKSB7XG4gICAgbG9nLmRlYnVnKGBDb29raWUgJyR7Y29va2llTmFtZX0nIG5vdCBmb3VuZC4gSWdub3JpbmcuYCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhd2FpdCB0aGlzLl9kZWxldGVDb29raWUoY29va2llKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb21tYW5kcy5kZWxldGVDb29raWVzID0gYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ29va2llcyAoKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgY29uc3QgY29va2llcyA9IGF3YWl0IHRoaXMuZ2V0Q29va2llcygpO1xuICBmb3IgKGNvbnN0IGNvb2tpZSBvZiBjb29raWVzKSB7XG4gICAgYXdhaXQgdGhpcy5fZGVsZXRlQ29va2llKGNvb2tpZSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5oZWxwZXJzLl9kZWxldGVDb29raWUgPSBhc3luYyBmdW5jdGlvbiBfZGVsZXRlQ29va2llIChjb29raWUpIHtcbiAgY29uc3QgdXJsID0gYGh0dHAke2Nvb2tpZS5zZWN1cmUgPyAncycgOiAnJ306Ly8ke2Nvb2tpZS5kb21haW59JHtjb29raWUucGF0aH1gO1xuICByZXR1cm4gYXdhaXQgdGhpcy5yZW1vdGUuZGVsZXRlQ29va2llKGNvb2tpZS5uYW1lLCB1cmwpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2Nvb2tpZXMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
