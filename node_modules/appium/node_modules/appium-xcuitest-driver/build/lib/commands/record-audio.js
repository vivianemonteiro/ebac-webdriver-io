"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _asyncbox = require("asyncbox");

const commands = {};
exports.commands = commands;
const AUDIO_RECORD_FEAT_NAME = 'audio_record';
const MAX_RECORDING_TIME_SEC = 60 * 60 * 12;
const DEFAULT_RECORDING_TIME_SEC = 60 * 3;
const PROCESS_STARTUP_TIMEOUT_MS = 5000;
const DEFAULT_SOURCE = 'avfoundation';
const DEFAULT_BITRATE = '128k';
const DEFAULT_CODEC = 'aac';
const DEFAULT_CHANNELS = 2;
const DEFAULT_RATE = 44100;
const DEFAULT_EXT = '.mp4';
const FFMPEG_BINARY = 'ffmpeg';

const ffmpegLogger = _appiumSupport.logger.getLogger(FFMPEG_BINARY);

class AudioRecorder {
  constructor(input, audioPath, opts = {}) {
    this.audioPath = audioPath;
    this.opts = opts;
    this.input = input;
    this.mainProcess = null;
  }

  async start(timeoutSeconds) {
    try {
      await _appiumSupport.fs.which(FFMPEG_BINARY);
    } catch (err) {
      throw new Error(`'${FFMPEG_BINARY}' binary is not found in PATH. Install it using 'brew install ffmpeg'. ` + `Check https://www.ffmpeg.org/download.html for more details.`);
    }

    const {
      audioSource = DEFAULT_SOURCE,
      audioCodec,
      audioBitrate,
      audioChannels,
      audioRate
    } = this.opts;
    const args = ['-t', `${timeoutSeconds}`, '-f', audioSource, '-i', this.input, '-c:a', audioCodec, '-b:a', audioBitrate, '-ac', `${audioChannels}`, '-ar', `${audioRate}`, this.audioPath];
    this.mainProcess = new _teen_process.SubProcess(FFMPEG_BINARY, args);
    let isCaptureStarted = false;
    this.mainProcess.on('output', (stdout, stderr) => {
      if (stderr) {
        if (stderr.trim().startsWith('size=')) {
          if (!isCaptureStarted) {
            isCaptureStarted = true;
          }
        } else {
          ffmpegLogger.info(`${stderr}`);
        }
      }
    });
    await this.mainProcess.start(0);

    try {
      await (0, _asyncbox.waitForCondition)(() => isCaptureStarted, {
        waitMs: PROCESS_STARTUP_TIMEOUT_MS,
        intervalMs: 300
      });
    } catch (e) {
      _logger.default.warn(`Audio recording process did not start within ${PROCESS_STARTUP_TIMEOUT_MS}ms. Continuing anyway`);
    }

    if (!this.mainProcess.isRunning) {
      this.mainProcess = null;
      throw new Error(`The audio recording process '${FFMPEG_BINARY}' died unexpectedly. ` + `Check server logs for more details`);
    }

    _logger.default.info(`Starting capture on audio input '${this.input}' with command: '${_appiumSupport.util.quote([FFMPEG_BINARY, ...args])}'. ` + `Will timeout in ${timeoutSeconds}s`);

    this.mainProcess.once('exit', (code, signal) => {
      if ([0, 255].includes(code)) {
        _logger.default.info(`The recording session on audio input '${this.input}' has been finished`);
      } else {
        _logger.default.debug(`The recording session on audio input '${this.input}' has exited ` + `with code ${code}, signal ${signal}`);
      }
    });
  }

  isRecording() {
    var _this$mainProcess;

    return !!((_this$mainProcess = this.mainProcess) !== null && _this$mainProcess !== void 0 && _this$mainProcess.isRunning);
  }

  async interrupt(force = false) {
    if (this.isRecording()) {
      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');
      this.mainProcess = null;

      try {
        await interruptPromise;
      } catch (e) {
        _logger.default.warn(`Cannot ${force ? 'terminate' : 'interrupt'} ${FFMPEG_BINARY}. ` + `Original error: ${e.message}`);

        return false;
      }
    }

    return true;
  }

  async finish() {
    await this.interrupt();
    return this.audioPath;
  }

  async cleanup() {
    if (await _appiumSupport.fs.exists(this.audioPath)) {
      await _appiumSupport.fs.rimraf(this.audioPath);
    }
  }

}

commands.startAudioRecording = async function startAudioRecording(options = {}) {
  var _this$_audioRecorder;

  if (!this.isFeatureEnabled(AUDIO_RECORD_FEAT_NAME)) {
    _logger.default.errorAndThrow(`Audio capture feature must be enabled on the server side. ` + `Please set '--relaxed-security' or '--allow-insecure' with '${AUDIO_RECORD_FEAT_NAME}' option. ` + `Read https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.`);
  }

  const {
    timeLimit = DEFAULT_RECORDING_TIME_SEC,
    audioInput,
    audioSource,
    audioCodec = DEFAULT_CODEC,
    audioBitrate = DEFAULT_BITRATE,
    audioChannels = DEFAULT_CHANNELS,
    audioRate = DEFAULT_RATE,
    forceRestart
  } = options;

  if (!audioInput) {
    _logger.default.errorAndThrow(`The mandatory audioInput option is not provided. Please set it ` + `to a correct value (e. g. ':1'). Use 'ffmpeg -f avfoundation -list_devices true -i ""' ` + `command to list available input sources`);
  }

  if ((_this$_audioRecorder = this._audioRecorder) !== null && _this$_audioRecorder !== void 0 && _this$_audioRecorder.isRecording()) {
    _logger.default.info(`There is an active audio recording process`);

    if (forceRestart) {
      _logger.default.info(`Stopping it because 'forceRestart' option is set to true`);

      await this._audioRecorder.interrupt(true);
    } else {
      _logger.default.info(`Doing nothing. ` + `Set 'forceRestart' option to true if you'd like to start a new audio recording session`);

      return;
    }
  }

  if (this._audioRecorder) {
    await this._audioRecorder.cleanup();
    this._audioRecorder = null;
  }

  const audioPath = await _appiumSupport.tempDir.path({
    prefix: `appium_${_appiumSupport.util.uuidV4().substring(0, 8)}`,
    suffix: DEFAULT_EXT
  });
  const audioRecorder = new AudioRecorder(audioInput, audioPath, {
    audioSource,
    audioCodec,
    audioBitrate,
    audioChannels,
    audioRate
  });
  const timeoutSeconds = parseInt(timeLimit, 10);

  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_RECORDING_TIME_SEC || timeoutSeconds <= 0) {
    _logger.default.errorAndThrow(`The timeLimit value must be in range [1, ${MAX_RECORDING_TIME_SEC}] seconds. ` + `The value of '${timeLimit}' has been passed instead.`);
  }

  try {
    await audioRecorder.start(timeoutSeconds);
  } catch (e) {
    await audioRecorder.interrupt(true);
    await audioRecorder.cleanup();
    throw e;
  }

  this._audioRecorder = audioRecorder;
};

commands.stopAudioRecording = async function stopAudioRecording() {
  if (!this._audioRecorder) {
    _logger.default.info('Audio recording has not been started. There is nothing to stop');

    return '';
  }

  let resultPath;

  try {
    resultPath = await this._audioRecorder.finish();

    if (!(await _appiumSupport.fs.exists(resultPath))) {
      _logger.default.errorAndThrow(`${FFMPEG_BINARY} has failed ` + `to store the actual audio recording at '${resultPath}'`);
    }
  } catch (e) {
    await this._audioRecorder.interrupt(true);
    await this._audioRecorder.cleanup();
    this._audioRecorder = null;
    throw e;
  }

  return await (0, _utils.encodeBase64OrUpload)(resultPath);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
