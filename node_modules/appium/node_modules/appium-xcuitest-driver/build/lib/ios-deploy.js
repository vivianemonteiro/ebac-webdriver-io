"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDevice = require("appium-ios-device");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _appUtils = require("./app-utils");

var _iosFsHelpers = require("./ios-fs-helpers");

const APPLICATION_INSTALLED_NOTIFICATION = 'com.apple.mobile.application_installed';
const INSTALLATION_STAGING_DIR = 'PublicStaging';
const APPLICATION_NOTIFICATION_TIMEOUT_MS = 30 * 1000;
const IOS_DEPLOY_TIMEOUT_MS = 4 * 60 * 1000;
const IOS_DEPLOY = 'ios-deploy';
const APP_INSTALL_STRATEGY = Object.freeze({
  SERIAL: 'serial',
  PARALLEL: 'parallel',
  IOS_DEPLOY
});

class IOSDeploy {
  constructor(udid) {
    this.udid = udid;
  }

  async remove(bundleid) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      await service.uninstallApplication(bundleid);
    } finally {
      service.close();
    }
  }

  async removeApp(bundleId) {
    await this.remove(bundleId);
  }

  async install(app, timeout, strategy = null) {
    if (strategy && !_lodash.default.values(APP_INSTALL_STRATEGY).includes(_lodash.default.toLower(strategy))) {
      throw new Error(`App installation strategy '${strategy}' is unknown. ` + `Only the following strategies are supported: ${_lodash.default.values(APP_INSTALL_STRATEGY)}`);
    }

    _logger.default.debug(`Using '${strategy !== null && strategy !== void 0 ? strategy : APP_INSTALL_STRATEGY.SERIAL}' app deployment strategy. ` + `You could change it by providing another value to the 'appInstallStrategy' capability`);

    const installWithIosDeploy = async () => {
      try {
        await _appiumSupport.fs.which(IOS_DEPLOY);
      } catch (err) {
        throw new Error(`'${IOS_DEPLOY}' utility has not been found in PATH. Is it installed?`);
      }

      try {
        await (0, _teen_process.exec)(IOS_DEPLOY, ['--id', this.udid, '--bundle', app], {
          timeout: timeout !== null && timeout !== void 0 ? timeout : IOS_DEPLOY_TIMEOUT_MS
        });
      } catch (err) {
        throw new Error(err.stderr || err.stdout || err.message);
      }
    };

    const timer = new _appiumSupport.timing.Timer().start();

    if (_lodash.default.toLower(strategy) === APP_INSTALL_STRATEGY.IOS_DEPLOY) {
      await installWithIosDeploy();
    } else {
      const afcService = await _appiumIosDevice.services.startAfcService(this.udid);

      try {
        const bundleId = await (0, _appUtils.extractBundleId)(app);

        const bundlePathOnPhone = _path.default.join(INSTALLATION_STAGING_DIR, bundleId);

        await (0, _iosFsHelpers.pushFolder)(afcService, app, bundlePathOnPhone, {
          timeoutMs: timeout,
          enableParallelPush: _lodash.default.toLower(strategy) === APP_INSTALL_STRATEGY.PARALLEL
        });
        await this.installOrUpgradeApplication(bundlePathOnPhone, await this.isAppInstalled(bundleId));
      } catch (err) {
        _logger.default.warn(`Error installing app '${app}': ${err.message}`);

        if (err instanceof _bluebird.default.TimeoutError) {
          _logger.default.warn(`Consider increasing the value of 'appPushTimeout' capability`);
        }

        _logger.default.warn(`Falling back to '${IOS_DEPLOY}' usage`);

        try {
          await installWithIosDeploy();
        } catch (err1) {
          throw new Error(`Could not install '${app}':\n` + `  - ${err.message}\n` + `  - ${err1.message}`);
        }
      } finally {
        afcService.close();
      }
    }

    _logger.default.info(`App installation succeeded after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
  }

  async installOrUpgradeApplication(bundlePathOnPhone, isUpgrade = false) {
    const notificationService = await _appiumIosDevice.services.startNotificationProxyService(this.udid);
    const installationService = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    const appInstalledNotification = new _bluebird.default(resolve => {
      notificationService.observeNotification(APPLICATION_INSTALLED_NOTIFICATION, {
        notification: resolve
      });
    });
    const clientOptions = {
      PackageType: 'Developer'
    };

    try {
      if (isUpgrade) {
        _logger.default.debug(`An upgrade of the existing application is going to be performed`);

        await installationService.upgradeApplication(bundlePathOnPhone, clientOptions);
      } else {
        _logger.default.debug(`A new application installation is going to be performed`);

        await installationService.installApplication(bundlePathOnPhone, clientOptions);
      }

      try {
        await appInstalledNotification.timeout(APPLICATION_NOTIFICATION_TIMEOUT_MS, `Could not get the application installed notification within ` + `${APPLICATION_NOTIFICATION_TIMEOUT_MS}ms but we will continue`);
      } catch (e) {
        _logger.default.warn(`Failed to receive the notification. Error: ${e.message}`);
      }
    } finally {
      installationService.close();
      notificationService.close();
    }
  }

  async installApp(...args) {
    return await this.install(...args);
  }

  async isAppInstalled(bundleid) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      const applications = await service.lookupApplications({
        bundleIds: bundleid
      });
      return !!applications[bundleid];
    } finally {
      service.close();
    }
  }

  async getUserInstalledBundleIdsByBundleName(bundleName) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      const applications = await service.listApplications({
        applicationType: 'User'
      });
      return _lodash.default.reduce(applications, (acc, {
        CFBundleName
      }, key) => {
        if (CFBundleName === bundleName) {
          acc.push(key);
        }

        return acc;
      }, []);
    } finally {
      service.close();
    }
  }

  async getPlatformVersion() {
    return await _appiumIosDevice.utilities.getOSVersion(this.udid);
  }

}

var _default = IOSDeploy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pb3MtZGVwbG95LmpzIl0sIm5hbWVzIjpbIkFQUExJQ0FUSU9OX0lOU1RBTExFRF9OT1RJRklDQVRJT04iLCJJTlNUQUxMQVRJT05fU1RBR0lOR19ESVIiLCJBUFBMSUNBVElPTl9OT1RJRklDQVRJT05fVElNRU9VVF9NUyIsIklPU19ERVBMT1lfVElNRU9VVF9NUyIsIklPU19ERVBMT1kiLCJBUFBfSU5TVEFMTF9TVFJBVEVHWSIsIk9iamVjdCIsImZyZWV6ZSIsIlNFUklBTCIsIlBBUkFMTEVMIiwiSU9TRGVwbG95IiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwicmVtb3ZlIiwiYnVuZGxlaWQiLCJzZXJ2aWNlIiwic2VydmljZXMiLCJzdGFydEluc3RhbGxhdGlvblByb3h5U2VydmljZSIsInVuaW5zdGFsbEFwcGxpY2F0aW9uIiwiY2xvc2UiLCJyZW1vdmVBcHAiLCJidW5kbGVJZCIsImluc3RhbGwiLCJhcHAiLCJ0aW1lb3V0Iiwic3RyYXRlZ3kiLCJfIiwidmFsdWVzIiwiaW5jbHVkZXMiLCJ0b0xvd2VyIiwiRXJyb3IiLCJsb2ciLCJkZWJ1ZyIsImluc3RhbGxXaXRoSW9zRGVwbG95IiwiZnMiLCJ3aGljaCIsImVyciIsInN0ZGVyciIsInN0ZG91dCIsIm1lc3NhZ2UiLCJ0aW1lciIsInRpbWluZyIsIlRpbWVyIiwic3RhcnQiLCJhZmNTZXJ2aWNlIiwic3RhcnRBZmNTZXJ2aWNlIiwiYnVuZGxlUGF0aE9uUGhvbmUiLCJwYXRoIiwiam9pbiIsInRpbWVvdXRNcyIsImVuYWJsZVBhcmFsbGVsUHVzaCIsImluc3RhbGxPclVwZ3JhZGVBcHBsaWNhdGlvbiIsImlzQXBwSW5zdGFsbGVkIiwid2FybiIsIkIiLCJUaW1lb3V0RXJyb3IiLCJlcnIxIiwiaW5mbyIsImdldER1cmF0aW9uIiwiYXNNaWxsaVNlY29uZHMiLCJ0b0ZpeGVkIiwiaXNVcGdyYWRlIiwibm90aWZpY2F0aW9uU2VydmljZSIsInN0YXJ0Tm90aWZpY2F0aW9uUHJveHlTZXJ2aWNlIiwiaW5zdGFsbGF0aW9uU2VydmljZSIsImFwcEluc3RhbGxlZE5vdGlmaWNhdGlvbiIsInJlc29sdmUiLCJvYnNlcnZlTm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uIiwiY2xpZW50T3B0aW9ucyIsIlBhY2thZ2VUeXBlIiwidXBncmFkZUFwcGxpY2F0aW9uIiwiaW5zdGFsbEFwcGxpY2F0aW9uIiwiZSIsImluc3RhbGxBcHAiLCJhcmdzIiwiYXBwbGljYXRpb25zIiwibG9va3VwQXBwbGljYXRpb25zIiwiYnVuZGxlSWRzIiwiZ2V0VXNlckluc3RhbGxlZEJ1bmRsZUlkc0J5QnVuZGxlTmFtZSIsImJ1bmRsZU5hbWUiLCJsaXN0QXBwbGljYXRpb25zIiwiYXBwbGljYXRpb25UeXBlIiwicmVkdWNlIiwiYWNjIiwiQ0ZCdW5kbGVOYW1lIiwia2V5IiwicHVzaCIsImdldFBsYXRmb3JtVmVyc2lvbiIsInV0aWxpdGllcyIsImdldE9TVmVyc2lvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxrQ0FBa0MsR0FBRyx3Q0FBM0M7QUFDQSxNQUFNQyx3QkFBd0IsR0FBRyxlQUFqQztBQUNBLE1BQU1DLG1DQUFtQyxHQUFHLEtBQUssSUFBakQ7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxJQUFJLEVBQUosR0FBUyxJQUF2QztBQUNBLE1BQU1DLFVBQVUsR0FBRyxZQUFuQjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUN6Q0MsRUFBQUEsTUFBTSxFQUFFLFFBRGlDO0FBRXpDQyxFQUFBQSxRQUFRLEVBQUUsVUFGK0I7QUFHekNMLEVBQUFBO0FBSHlDLENBQWQsQ0FBN0I7O0FBT0EsTUFBTU0sU0FBTixDQUFnQjtBQUVkQyxFQUFBQSxXQUFXLENBQUVDLElBQUYsRUFBUTtBQUNqQixTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFVyxRQUFOQyxN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QU8sQ0FBQyxDQUFDOEQsWUFBWSxDQUFDOUQsUUFBRCxDQUFyQjtBQUNELEtBSEQsU0FHVTtBQUNSQyxNQUFBQSxPQUFPLENBQUNJLEtBQVI7QUFDRDtBQUNGOztBQVEwQyxRQUFyQzRELHFDQUFxQyxDQUFFQyxVQUFGLEVBQWM7QUFDdkQsVUFBTWpFLE9BQU8sR0FBRyxNQUFNQywwQkFBU0MsNkJBQVQsQ0FBdUMsS0FBS0wsSUFBNUMsQ0FBdEI7O0FBQ0EsUUFBSTtBQUNGLFlBQU1nRSxZQUFZLEdBQUcsTUFBTTdELE9BQU8sQ0FBQ2tFLGdCQUFSLENBQXlCO0FBQUNDLFFBQUFBLGVBQWUsRUFBRTtBQUFsQixPQUF6QixDQUEzQjtBQUNBLGFBQU94RCxnQkFBRXlELE1BQUYsQ0FBU1AsWUFBVCxFQUF1QixDQUFDUSxHQUFELEVBQU07QUFBQ0MsUUFBQUE7QUFBRCxPQUFOLEVBQXNCQyxHQUF0QixLQUE4QjtBQUMxRCxZQUFJRCxZQUFZLEtBQUtMLFVBQXJCLEVBQWlDO0FBQy9CSSxVQUFBQSxHQUFHLENBQUNHLElBQUosQ0FBU0QsR0FBVDtBQUNEOztBQUNELGVBQU9GLEdBQVA7QUFDRCxPQUxNLEVBS0osRUFMSSxDQUFQO0FBTUQsS0FSRCxTQVFVO0FBQ1JyRSxNQUFBQSxPQUFPLENBQUNJLEtBQVI7QUFDRDtBQUNGOztBQUV1QixRQUFsQnFFLGtCQUFrQixHQUFJO0FBQzFCLFdBQU8sTUFBTUMsMkJBQVVDLFlBQVYsQ0FBdUIsS0FBSzlFLElBQTVCLENBQWI7QUFDRDs7QUEzSmE7O2VBOEpERixTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMsIHRpbWluZyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgc2VydmljZXMsIHV0aWxpdGllcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZXh0cmFjdEJ1bmRsZUlkIH0gZnJvbSAnLi9hcHAtdXRpbHMnO1xuaW1wb3J0IHsgcHVzaEZvbGRlciB9IGZyb20gJy4vaW9zLWZzLWhlbHBlcnMnO1xuXG5jb25zdCBBUFBMSUNBVElPTl9JTlNUQUxMRURfTk9USUZJQ0FUSU9OID0gJ2NvbS5hcHBsZS5tb2JpbGUuYXBwbGljYXRpb25faW5zdGFsbGVkJztcbmNvbnN0IElOU1RBTExBVElPTl9TVEFHSU5HX0RJUiA9ICdQdWJsaWNTdGFnaW5nJztcbmNvbnN0IEFQUExJQ0FUSU9OX05PVElGSUNBVElPTl9USU1FT1VUX01TID0gMzAgKiAxMDAwO1xuY29uc3QgSU9TX0RFUExPWV9USU1FT1VUX01TID0gNCAqIDYwICogMTAwMDtcbmNvbnN0IElPU19ERVBMT1kgPSAnaW9zLWRlcGxveSc7XG5jb25zdCBBUFBfSU5TVEFMTF9TVFJBVEVHWSA9IE9iamVjdC5mcmVlemUoe1xuICBTRVJJQUw6ICdzZXJpYWwnLFxuICBQQVJBTExFTDogJ3BhcmFsbGVsJyxcbiAgSU9TX0RFUExPWSxcbn0pO1xuXG5cbmNsYXNzIElPU0RlcGxveSB7XG5cbiAgY29uc3RydWN0b3IgKHVkaWQpIHtcbiAgICB0aGlzLnVkaWQgPSB1ZGlkO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlIChidW5kbGVpZCkge1xuICAgIGNvbnN0IHNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydEluc3RhbGxhdGlvblByb3h5U2VydmljZSh0aGlzLnVkaWQpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBzZXJ2aWNlLnVuaW5zdGFsbEFwcGxpY2F0aW9uKGJ1bmRsZWlkKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2VydmljZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUFwcCAoYnVuZGxlSWQpIHtcbiAgICBhd2FpdCB0aGlzLnJlbW92ZShidW5kbGVJZCk7XG4gIH1cblxuICBhc3luYyBpbnN0YWxsIChhcHAsIHRpbWVvdXQsIHN0cmF0ZWd5ID0gbnVsbCkge1xuICAgIGlmIChzdHJhdGVneSAmJiAhXy52YWx1ZXMoQVBQX0lOU1RBTExfU1RSQVRFR1kpLmluY2x1ZGVzKF8udG9Mb3dlcihzdHJhdGVneSkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFwcCBpbnN0YWxsYXRpb24gc3RyYXRlZ3kgJyR7c3RyYXRlZ3l9JyBpcyB1bmtub3duLiBgICtcbiAgICAgICAgYE9ubHkgdGhlIGZvbGxvd2luZyBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQ6ICR7Xy52YWx1ZXMoQVBQX0lOU1RBTExfU1RSQVRFR1kpfWApO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYFVzaW5nICcke3N0cmF0ZWd5ID8/IEFQUF9JTlNUQUxMX1NUUkFURUdZLlNFUklBTH0nIGFwcCBkZXBsb3ltZW50IHN0cmF0ZWd5LiBgICtcbiAgICAgIGBZb3UgY291bGQgY2hhbmdlIGl0IGJ5IHByb3ZpZGluZyBhbm90aGVyIHZhbHVlIHRvIHRoZSAnYXBwSW5zdGFsbFN0cmF0ZWd5JyBjYXBhYmlsaXR5YCk7XG5cbiAgICBjb25zdCBpbnN0YWxsV2l0aElvc0RlcGxveSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGZzLndoaWNoKElPU19ERVBMT1kpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7SU9TX0RFUExPWX0nIHV0aWxpdHkgaGFzIG5vdCBiZWVuIGZvdW5kIGluIFBBVEguIElzIGl0IGluc3RhbGxlZD9gKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGV4ZWMoSU9TX0RFUExPWSwgW1xuICAgICAgICAgICctLWlkJywgdGhpcy51ZGlkLFxuICAgICAgICAgICctLWJ1bmRsZScsIGFwcCxcbiAgICAgICAgXSwge3RpbWVvdXQ6IHRpbWVvdXQgPz8gSU9TX0RFUExPWV9USU1FT1VUX01TfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyci5zdGRlcnIgfHwgZXJyLnN0ZG91dCB8fCBlcnIubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gICAgaWYgKF8udG9Mb3dlcihzdHJhdGVneSkgPT09IEFQUF9JTlNUQUxMX1NUUkFURUdZLklPU19ERVBMT1kpIHtcbiAgICAgIGF3YWl0IGluc3RhbGxXaXRoSW9zRGVwbG95KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGFmY1NlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydEFmY1NlcnZpY2UodGhpcy51ZGlkKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJ1bmRsZUlkID0gYXdhaXQgZXh0cmFjdEJ1bmRsZUlkKGFwcCk7XG4gICAgICAgIGNvbnN0IGJ1bmRsZVBhdGhPblBob25lID0gcGF0aC5qb2luKElOU1RBTExBVElPTl9TVEFHSU5HX0RJUiwgYnVuZGxlSWQpO1xuICAgICAgICBhd2FpdCBwdXNoRm9sZGVyKGFmY1NlcnZpY2UsIGFwcCwgYnVuZGxlUGF0aE9uUGhvbmUsIHtcbiAgICAgICAgICB0aW1lb3V0TXM6IHRpbWVvdXQsXG4gICAgICAgICAgZW5hYmxlUGFyYWxsZWxQdXNoOiBfLnRvTG93ZXIoc3RyYXRlZ3kpID09PSBBUFBfSU5TVEFMTF9TVFJBVEVHWS5QQVJBTExFTCxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5zdGFsbE9yVXBncmFkZUFwcGxpY2F0aW9uKGJ1bmRsZVBhdGhPblBob25lLCBhd2FpdCB0aGlzLmlzQXBwSW5zdGFsbGVkKGJ1bmRsZUlkKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nLndhcm4oYEVycm9yIGluc3RhbGxpbmcgYXBwICcke2FwcH0nOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgQi5UaW1lb3V0RXJyb3IpIHtcbiAgICAgICAgICBsb2cud2FybihgQ29uc2lkZXIgaW5jcmVhc2luZyB0aGUgdmFsdWUgb2YgJ2FwcFB1c2hUaW1lb3V0JyBjYXBhYmlsaXR5YCk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLndhcm4oYEZhbGxpbmcgYmFjayB0byAnJHtJT1NfREVQTE9ZfScgdXNhZ2VgKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBpbnN0YWxsV2l0aElvc0RlcGxveSgpO1xuICAgICAgICB9IGNhdGNoIChlcnIxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgaW5zdGFsbCAnJHthcHB9JzpcXG5gICtcbiAgICAgICAgICAgIGAgIC0gJHtlcnIubWVzc2FnZX1cXG5gICtcbiAgICAgICAgICAgIGAgIC0gJHtlcnIxLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGFmY1NlcnZpY2UuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmluZm8oYEFwcCBpbnN0YWxsYXRpb24gc3VjY2VlZGVkIGFmdGVyICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc01pbGxpU2Vjb25kcy50b0ZpeGVkKDApfW1zYCk7XG4gIH1cblxuICBhc3luYyBpbnN0YWxsT3JVcGdyYWRlQXBwbGljYXRpb24gKGJ1bmRsZVBhdGhPblBob25lLCBpc1VwZ3JhZGUgPSBmYWxzZSkge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvblNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydE5vdGlmaWNhdGlvblByb3h5U2VydmljZSh0aGlzLnVkaWQpO1xuICAgIGNvbnN0IGluc3RhbGxhdGlvblNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydEluc3RhbGxhdGlvblByb3h5U2VydmljZSh0aGlzLnVkaWQpO1xuICAgIGNvbnN0IGFwcEluc3RhbGxlZE5vdGlmaWNhdGlvbiA9IG5ldyBCKChyZXNvbHZlKSA9PiB7XG4gICAgICBub3RpZmljYXRpb25TZXJ2aWNlLm9ic2VydmVOb3RpZmljYXRpb24oQVBQTElDQVRJT05fSU5TVEFMTEVEX05PVElGSUNBVElPTiwge1xuICAgICAgICBub3RpZmljYXRpb246IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSB7UGFja2FnZVR5cGU6ICdEZXZlbG9wZXInfTtcbiAgICB0cnkge1xuICAgICAgaWYgKGlzVXBncmFkZSkge1xuICAgICAgICBsb2cuZGVidWcoYEFuIHVwZ3JhZGUgb2YgdGhlIGV4aXN0aW5nIGFwcGxpY2F0aW9uIGlzIGdvaW5nIHRvIGJlIHBlcmZvcm1lZGApO1xuICAgICAgICBhd2FpdCBpbnN0YWxsYXRpb25TZXJ2aWNlLnVwZ3JhZGVBcHBsaWNhdGlvbihidW5kbGVQYXRoT25QaG9uZSwgY2xpZW50T3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuZGVidWcoYEEgbmV3IGFwcGxpY2F0aW9uIGluc3RhbGxhdGlvbiBpcyBnb2luZyB0byBiZSBwZXJmb3JtZWRgKTtcbiAgICAgICAgYXdhaXQgaW5zdGFsbGF0aW9uU2VydmljZS5pbnN0YWxsQXBwbGljYXRpb24oYnVuZGxlUGF0aE9uUGhvbmUsIGNsaWVudE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgYXBwSW5zdGFsbGVkTm90aWZpY2F0aW9uLnRpbWVvdXQoQVBQTElDQVRJT05fTk9USUZJQ0FUSU9OX1RJTUVPVVRfTVMsXG4gICAgICAgICAgYENvdWxkIG5vdCBnZXQgdGhlIGFwcGxpY2F0aW9uIGluc3RhbGxlZCBub3RpZmljYXRpb24gd2l0aGluIGAgK1xuICAgICAgICAgIGAke0FQUExJQ0FUSU9OX05PVElGSUNBVElPTl9USU1FT1VUX01TfW1zIGJ1dCB3ZSB3aWxsIGNvbnRpbnVlYCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy53YXJuKGBGYWlsZWQgdG8gcmVjZWl2ZSB0aGUgbm90aWZpY2F0aW9uLiBFcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGluc3RhbGxhdGlvblNlcnZpY2UuY2xvc2UoKTtcbiAgICAgIG5vdGlmaWNhdGlvblNlcnZpY2UuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpbnN0YWxsQXBwICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5zdGFsbCguLi5hcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXBwbGljYXRpb24gb2JqZWN0IGlmIHRlc3QgYXBwIGhhcyAnYnVuZGxlaWQnLlxuICAgKiBUaGUgdGFyZ2V0IGJ1bmRsZWlkIGNhbiBiZSBVc2VyIGFuZCBTeXN0ZW0gYXBwcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZWlkIFRoZSBidW5kbGVJZCB0byBlbnN1cmUgaXQgaXMgaW5zdGFsbGVkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgVHJ1ZSBpZiB0aGUgYnVuZGxlaWQgZXhpc3RzIGluIHRoZSByZXN1bHQgb2YgJ2xpc3RBcHBsaWNhdGlvbnMnIGxpa2U6XG4gICAqIHsgXCJjb20uYXBwbGUuUHJlZmVyZW5jZXNcIjp7XG4gICAqICAgXCJVSVJlcXVpcmVkRGV2aWNlQ2FwYWJpbGl0aWVzXCI6W1wiYXJtNjRcIl0sXG4gICAqICAgXCJVSVJlcXVpcmVzRnVsbFNjcmVlblwiOnRydWUsXG4gICAqICAgXCJDRkJ1bmRsZUluZm9EaWN0aW9uYXJ5VmVyc2lvblwiOlwiNi4wXCIsXG4gICAqICAgXCJFbnRpdGxlbWVudHNcIjpcbiAgICogICAgIHtcImNvbS5hcHBsZS5mcm9udGJvYXJkLmRlbGV0ZS1hcHBsaWNhdGlvbi1zbmFwc2hvdHNcIjp0cnVlLC4uXG4gICAqL1xuICBhc3luYyBpc0FwcEluc3RhbGxlZCAoYnVuZGxlaWQpIHtcbiAgICBjb25zdCBzZXJ2aWNlID0gYXdhaXQgc2VydmljZXMuc3RhcnRJbnN0YWxsYXRpb25Qcm94eVNlcnZpY2UodGhpcy51ZGlkKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYXBwbGljYXRpb25zID0gYXdhaXQgc2VydmljZS5sb29rdXBBcHBsaWNhdGlvbnMoeyBidW5kbGVJZHM6IGJ1bmRsZWlkIH0pO1xuICAgICAgcmV0dXJuICEhYXBwbGljYXRpb25zW2J1bmRsZWlkXTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2VydmljZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlTmFtZSBUaGUgbmFtZSBvZiBDRkJ1bmRsZU5hbWUgaW4gSW5mby5wbGlzdFxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gQSBsaXN0IG9mIFVzZXIgbGV2ZWwgYXBwcycgYnVuZGxlIGlkcyB3aGljaCBoYXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICdDRkJ1bmRsZU5hbWUnIGF0dHJpYnV0ZSBhcyAnYnVuZGxlTmFtZScuXG4gICAqL1xuICBhc3luYyBnZXRVc2VySW5zdGFsbGVkQnVuZGxlSWRzQnlCdW5kbGVOYW1lIChidW5kbGVOYW1lKSB7XG4gICAgY29uc3Qgc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0SW5zdGFsbGF0aW9uUHJveHlTZXJ2aWNlKHRoaXMudWRpZCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcGxpY2F0aW9ucyA9IGF3YWl0IHNlcnZpY2UubGlzdEFwcGxpY2F0aW9ucyh7YXBwbGljYXRpb25UeXBlOiAnVXNlcid9KTtcbiAgICAgIHJldHVybiBfLnJlZHVjZShhcHBsaWNhdGlvbnMsIChhY2MsIHtDRkJ1bmRsZU5hbWV9LCBrZXkpID0+IHtcbiAgICAgICAgaWYgKENGQnVuZGxlTmFtZSA9PT0gYnVuZGxlTmFtZSkge1xuICAgICAgICAgIGFjYy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIFtdKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2VydmljZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFBsYXRmb3JtVmVyc2lvbiAoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHV0aWxpdGllcy5nZXRPU1ZlcnNpb24odGhpcy51ZGlkKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJT1NEZXBsb3k7XG4iXSwiZmlsZSI6ImxpYi9pb3MtZGVwbG95LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
