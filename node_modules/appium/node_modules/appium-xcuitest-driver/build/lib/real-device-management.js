"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectedDevices = getConnectedDevices;
exports.getOSVersion = getOSVersion;
exports.getRealDeviceObj = getRealDeviceObj;
exports.installToRealDevice = installToRealDevice;
exports.runRealDeviceReset = runRealDeviceReset;

require("source-map-support/register");

var _appiumIosDevice = require("appium-ios-device");

var _iosDeploy = _interopRequireDefault(require("./ios-deploy"));

var _logger = _interopRequireDefault(require("./logger"));

async function getConnectedDevices() {
  return await _appiumIosDevice.utilities.getConnectedDevices();
}

async function getOSVersion(udid) {
  return await _appiumIosDevice.utilities.getOSVersion(udid);
}

async function resetRealDevice(device, opts) {
  if (!opts.bundleId || !opts.fullReset) {
    return;
  }

  let bundleId = opts.bundleId;

  _logger.default.debug(`Reset: fullReset requested. Will try to uninstall the app '${bundleId}'.`);

  if (!(await device.isAppInstalled(bundleId))) {
    _logger.default.debug('Reset: app not installed. No need to uninstall');

    return;
  }

  try {
    await device.remove(bundleId);
  } catch (err) {
    _logger.default.error(`Reset: could not remove '${bundleId}' from device: ${err.message}`);

    throw err;
  }

  _logger.default.debug(`Reset: removed '${bundleId}'`);
}

async function runRealDeviceReset(device, opts) {
  if (!opts.noReset || opts.fullReset) {
    _logger.default.debug('Reset: running ios real device reset flow');

    if (!opts.noReset) {
      await resetRealDevice(device, opts);
    }
  } else {
    _logger.default.debug('Reset: fullReset not set. Leaving as is');
  }
}

async function installToRealDevice(device, app, bundleId, opts = {}) {
  if (!device.udid || !app) {
    _logger.default.debug('No device id or app, not installing to real device.');

    return;
  }

  const {
    noReset = false,
    strategy,
    timeout
  } = opts;

  if (await device.isAppInstalled(bundleId)) {
    if (noReset) {
      _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);

      return;
    }

    _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);

    await device.remove(bundleId);
  }

  _logger.default.debug(`Installing '${app}' on device with UUID '${device.udid}'...`);

  await device.install(app, timeout, strategy);

  _logger.default.debug('The app has been installed successfully.');
}

function getRealDeviceObj(udid) {
  _logger.default.debug(`Creating iDevice object with udid '${udid}'`);

  return new _iosDeploy.default(udid);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9yZWFsLWRldmljZS1tYW5hZ2VtZW50LmpzIl0sIm5hbWVzIjpbImdldENvbm5lY3RlZERldmljZXMiLCJ1dGlsaXRpZXMiLCJnZXRPU1ZlcnNpb24iLCJ1ZGlkIiwicmVzZXRSZWFsRGV2aWNlIiwiZGV2aWNlIiwib3B0cyIsImJ1bmRsZUlkIiwiZnVsbFJlc2V0IiwibG9nIiwiZGVidWciLCJpc0FwcEluc3RhbGxlZCIsInJlbW92ZSIsImVyciIsImVycm9yIiwibWVzc2FnZSIsInJ1blJlYWxEZXZpY2VSZXNldCIsIm5vUmVzZXQiLCJpbnN0YWxsVG9SZWFsRGV2aWNlIiwiYXBwIiwic3RyYXRlZ3kiLCJ0aW1lb3V0IiwiaW5zdGFsbCIsImdldFJlYWxEZXZpY2VPYmoiLCJJT1NEZXBsb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLGVBQWVBLG1CQUFmLEdBQXNDO0FBQ3BDLFNBQU8sTUFBTUMsMkJBQVVELG1CQUFWLEVBQWI7QUFDRDs7QUFFRCxlQUFlRSxZQUFmLENBQTZCQyxJQUE3QixFQUFtQztBQUNqQyxTQUFPLE1BQU1GLDJCQUFVQyxZQUFWLENBQXVCQyxJQUF2QixDQUFiO0FBQ0Q7O0FBRUQsZUFBZUMsZUFBZixDQUFnQ0MsTUFBaEMsRUFBd0NDLElBQXhDLEVBQThDO0FBQzVDLE1BQUksQ0FBQ0EsSUFBSSxDQUFDQyxRQUFOLElBQWtCLENBQUNELElBQUksQ0FBQ0UsU0FBNUIsRUFBdUM7QUFDckM7QUFDRDs7QUFFRCxNQUFJRCxRQUFRLEdBQUdELElBQUksQ0FBQ0MsUUFBcEI7O0FBQ0FFLGtCQUFJQyxLQUFKLENBQVcsOERBQTZESCxRQUFTLElBQWpGOztBQUNBLE1BQUksRUFBQyxNQUFNRixNQUFNLENBQUNNLGNBQVAsQ0FBc0JKLFFBQXRCLENBQVAsQ0FBSixFQUE0QztBQUMxQ0Usb0JBQUlDLEtBQUosQ0FBVSxnREFBVjs7QUFDQTtBQUNEOztBQUNELE1BQUk7QUFDRixVQUFNTCxNQUFNLENBQUNPLE1BQVAsQ0FBY0wsUUFBZCxDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9NLEdBQVAsRUFBWTtBQUNaSixvQkFBSUssS0FBSixDQUFXLDRCQUEyQlAsUUFBUyxrQkFBaUJNLEdBQUcsQ0FBQ0UsT0FBUSxFQUE1RTs7QUFDQSxVQUFNRixHQUFOO0FBQ0Q7O0FBQ0RKLGtCQUFJQyxLQUFKLENBQVcsbUJBQWtCSCxRQUFTLEdBQXRDO0FBQ0Q7O0FBRUQsZUFBZVMsa0JBQWYsQ0FBbUNYLE1BQW5DLEVBQTJDQyxJQUEzQyxFQUFpRDtBQUMvQyxNQUFJLENBQUNBLElBQUksQ0FBQ1csT0FBTixJQUFpQlgsSUFBSSxDQUFDRSxTQUExQixFQUFxQztBQUNuQ0Msb0JBQUlDLEtBQUosQ0FBVSwyQ0FBVjs7QUFDQSxRQUFJLENBQUNKLElBQUksQ0FBQ1csT0FBVixFQUFtQjtBQUNqQixZQUFNYixlQUFlLENBQUNDLE1BQUQsRUFBU0MsSUFBVCxDQUFyQjtBQUNEO0FBQ0YsR0FMRCxNQUtPO0FBQ0xHLG9CQUFJQyxLQUFKLENBQVUseUNBQVY7QUFDRDtBQUNGOztBQUVELGVBQWVRLG1CQUFmLENBQW9DYixNQUFwQyxFQUE0Q2MsR0FBNUMsRUFBaURaLFFBQWpELEVBQTJERCxJQUFJLEdBQUcsRUFBbEUsRUFBc0U7QUFDcEUsTUFBSSxDQUFDRCxNQUFNLENBQUNGLElBQVIsSUFBZ0IsQ0FBQ2dCLEdBQXJCLEVBQTBCO0FBQ3hCVixvQkFBSUMsS0FBSixDQUFVLHFEQUFWOztBQUNBO0FBQ0Q7O0FBRUQsUUFBTTtBQUNKTyxJQUFBQSxPQUFPLEdBQUcsS0FETjtBQUVKRyxJQUFBQSxRQUZJO0FBR0pDLElBQUFBO0FBSEksTUFJRmYsSUFKSjs7QUFNQSxNQUFJLE1BQU1ELE1BQU0sQ0FBQ00sY0FBUCxDQUFzQkosUUFBdEIsQ0FBVixFQUEyQztBQUN6QyxRQUFJVSxPQUFKLEVBQWE7QUFDWFIsc0JBQUlDLEtBQUosQ0FBVyxRQUFPSCxRQUFTLCtDQUEzQjs7QUFDQTtBQUNEOztBQUNERSxvQkFBSUMsS0FBSixDQUFXLDBDQUF5Q0gsUUFBUyxtQkFBN0Q7O0FBQ0EsVUFBTUYsTUFBTSxDQUFDTyxNQUFQLENBQWNMLFFBQWQsQ0FBTjtBQUNEOztBQUNERSxrQkFBSUMsS0FBSixDQUFXLGVBQWNTLEdBQUksMEJBQXlCZCxNQUFNLENBQUNGLElBQUssTUFBbEU7O0FBQ0EsUUFBTUUsTUFBTSxDQUFDaUIsT0FBUCxDQUFlSCxHQUFmLEVBQW9CRSxPQUFwQixFQUE2QkQsUUFBN0IsQ0FBTjs7QUFDQVgsa0JBQUlDLEtBQUosQ0FBVSwwQ0FBVjtBQUNEOztBQUVELFNBQVNhLGdCQUFULENBQTJCcEIsSUFBM0IsRUFBaUM7QUFDL0JNLGtCQUFJQyxLQUFKLENBQVcsc0NBQXFDUCxJQUFLLEdBQXJEOztBQUNBLFNBQU8sSUFBSXFCLGtCQUFKLENBQWNyQixJQUFkLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWxpdGllcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcbmltcG9ydCBJT1NEZXBsb3kgZnJvbSAnLi9pb3MtZGVwbG95JztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbm5lY3RlZERldmljZXMgKCkge1xuICByZXR1cm4gYXdhaXQgdXRpbGl0aWVzLmdldENvbm5lY3RlZERldmljZXMoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0T1NWZXJzaW9uICh1ZGlkKSB7XG4gIHJldHVybiBhd2FpdCB1dGlsaXRpZXMuZ2V0T1NWZXJzaW9uKHVkaWQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXNldFJlYWxEZXZpY2UgKGRldmljZSwgb3B0cykge1xuICBpZiAoIW9wdHMuYnVuZGxlSWQgfHwgIW9wdHMuZnVsbFJlc2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGJ1bmRsZUlkID0gb3B0cy5idW5kbGVJZDtcbiAgbG9nLmRlYnVnKGBSZXNldDogZnVsbFJlc2V0IHJlcXVlc3RlZC4gV2lsbCB0cnkgdG8gdW5pbnN0YWxsIHRoZSBhcHAgJyR7YnVuZGxlSWR9Jy5gKTtcbiAgaWYgKCFhd2FpdCBkZXZpY2UuaXNBcHBJbnN0YWxsZWQoYnVuZGxlSWQpKSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldDogYXBwIG5vdCBpbnN0YWxsZWQuIE5vIG5lZWQgdG8gdW5pbnN0YWxsJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgYXdhaXQgZGV2aWNlLnJlbW92ZShidW5kbGVJZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvcihgUmVzZXQ6IGNvdWxkIG5vdCByZW1vdmUgJyR7YnVuZGxlSWR9JyBmcm9tIGRldmljZTogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbiAgbG9nLmRlYnVnKGBSZXNldDogcmVtb3ZlZCAnJHtidW5kbGVJZH0nYCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1blJlYWxEZXZpY2VSZXNldCAoZGV2aWNlLCBvcHRzKSB7XG4gIGlmICghb3B0cy5ub1Jlc2V0IHx8IG9wdHMuZnVsbFJlc2V0KSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldDogcnVubmluZyBpb3MgcmVhbCBkZXZpY2UgcmVzZXQgZmxvdycpO1xuICAgIGlmICghb3B0cy5ub1Jlc2V0KSB7XG4gICAgICBhd2FpdCByZXNldFJlYWxEZXZpY2UoZGV2aWNlLCBvcHRzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldDogZnVsbFJlc2V0IG5vdCBzZXQuIExlYXZpbmcgYXMgaXMnKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBpbnN0YWxsVG9SZWFsRGV2aWNlIChkZXZpY2UsIGFwcCwgYnVuZGxlSWQsIG9wdHMgPSB7fSkge1xuICBpZiAoIWRldmljZS51ZGlkIHx8ICFhcHApIHtcbiAgICBsb2cuZGVidWcoJ05vIGRldmljZSBpZCBvciBhcHAsIG5vdCBpbnN0YWxsaW5nIHRvIHJlYWwgZGV2aWNlLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBub1Jlc2V0ID0gZmFsc2UsXG4gICAgc3RyYXRlZ3ksXG4gICAgdGltZW91dCxcbiAgfSA9IG9wdHM7XG5cbiAgaWYgKGF3YWl0IGRldmljZS5pc0FwcEluc3RhbGxlZChidW5kbGVJZCkpIHtcbiAgICBpZiAobm9SZXNldCkge1xuICAgICAgbG9nLmRlYnVnKGBBcHAgJyR7YnVuZGxlSWR9JyBpcyBhbHJlYWR5IGluc3RhbGxlZC4gTm8gbmVlZCB0byByZWluc3RhbGwuYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgUmVzZXQgcmVxdWVzdGVkLiBSZW1vdmluZyBhcHAgd2l0aCBpZCAnJHtidW5kbGVJZH0nIGZyb20gdGhlIGRldmljZWApO1xuICAgIGF3YWl0IGRldmljZS5yZW1vdmUoYnVuZGxlSWQpO1xuICB9XG4gIGxvZy5kZWJ1ZyhgSW5zdGFsbGluZyAnJHthcHB9JyBvbiBkZXZpY2Ugd2l0aCBVVUlEICcke2RldmljZS51ZGlkfScuLi5gKTtcbiAgYXdhaXQgZGV2aWNlLmluc3RhbGwoYXBwLCB0aW1lb3V0LCBzdHJhdGVneSk7XG4gIGxvZy5kZWJ1ZygnVGhlIGFwcCBoYXMgYmVlbiBpbnN0YWxsZWQgc3VjY2Vzc2Z1bGx5LicpO1xufVxuXG5mdW5jdGlvbiBnZXRSZWFsRGV2aWNlT2JqICh1ZGlkKSB7XG4gIGxvZy5kZWJ1ZyhgQ3JlYXRpbmcgaURldmljZSBvYmplY3Qgd2l0aCB1ZGlkICcke3VkaWR9J2ApO1xuICByZXR1cm4gbmV3IElPU0RlcGxveSh1ZGlkKTtcbn1cblxuZXhwb3J0IHsgZ2V0Q29ubmVjdGVkRGV2aWNlcywgZ2V0T1NWZXJzaW9uLCBydW5SZWFsRGV2aWNlUmVzZXQsIGluc3RhbGxUb1JlYWxEZXZpY2UsXG4gIGdldFJlYWxEZXZpY2VPYmogfTtcbiJdLCJmaWxlIjoibGliL3JlYWwtZGV2aWNlLW1hbmFnZW1lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
