"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractBundleId = extractBundleId;
exports.parseLocalizableStrings = parseLocalizableStrings;
exports.verifyApplicationPlatform = verifyApplicationPlatform;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger.js"));

const STRINGSDICT_RESOURCE = '.stringsdict';
const STRINGS_RESOURCE = '.strings';

async function extractPlistEntry(app, entryName) {
  const plistPath = _path.default.resolve(app, 'Info.plist');

  try {
    return (await _appiumSupport.plist.parsePlistFile(plistPath))[entryName];
  } catch (err) {
    throw new Error(`Could not extract Info.plist from '${_path.default.basename(app)}': ${err.message}`);
  }
}

async function extractBundleId(app) {
  const bundleId = await extractPlistEntry(app, 'CFBundleIdentifier');

  _logger.default.debug(`Getting bundle ID from app '${app}': '${bundleId}'`);

  return bundleId;
}

async function verifyApplicationPlatform(app, expectedPlatform) {
  _logger.default.debug('Verifying application platform');

  let supportedPlatforms;

  try {
    supportedPlatforms = await extractPlistEntry(app, 'CFBundleSupportedPlatforms');
  } catch (err) {
    _logger.default.debug(err.message);

    return;
  }

  _logger.default.debug(`CFBundleSupportedPlatforms: ${JSON.stringify(supportedPlatforms)}`);

  if (!_lodash.default.isArray(supportedPlatforms)) {
    _logger.default.debug(`CFBundleSupportedPlatforms key does not exist in '${_path.default.basename(app)}'`);

    return;
  }

  const {
    isSimulator,
    isTvOS
  } = expectedPlatform;
  const prefix = isTvOS ? 'AppleTV' : 'iPhone';
  const suffix = isSimulator ? 'Simulator' : 'OS';
  const dstPlatform = `${prefix}${suffix}`;

  if (!supportedPlatforms.includes(dstPlatform)) {
    throw new Error(`${isSimulator ? 'Simulator' : 'Real device'} architecture is unsupported by the '${app}' application. ` + `Make sure the correct deployment target has been selected for its compilation in Xcode.`);
  }
}

async function readResource(resourcePath) {
  const data = await _appiumSupport.plist.parsePlistFile(resourcePath);
  const result = {};

  for (const [key, value] of _lodash.default.toPairs(data)) {
    result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
  }

  return result;
}

async function parseLocalizableStrings(opts) {
  const {
    app,
    language = 'en',
    localizableStringsDir,
    stringFile,
    strictMode
  } = opts;

  if (!app) {
    const message = `Strings extraction is not supported if 'app' capability is not set`;

    if (strictMode) {
      throw new Error(message);
    }

    _logger.default.info(message);

    return {};
  }

  let lprojRoot;

  for (const subfolder of [`${language}.lproj`, localizableStringsDir, '']) {
    lprojRoot = _path.default.resolve(app, subfolder);

    if (await _appiumSupport.fs.exists(lprojRoot)) {
      break;
    }

    const message = `No '${lprojRoot}' resources folder has been found`;

    if (strictMode) {
      throw new Error(message);
    }

    _logger.default.debug(message);
  }

  _logger.default.info(`Will extract resource strings from '${lprojRoot}'`);

  const resourcePaths = [];

  if (stringFile) {
    const dstPath = _path.default.resolve(lprojRoot, stringFile);

    if (await _appiumSupport.fs.exists(dstPath)) {
      resourcePaths.push(dstPath);
    } else {
      const message = `No '${dstPath}' resource file has been found for '${app}'`;

      if (strictMode) {
        throw new Error(message);
      }

      _logger.default.info(message);

      _logger.default.info(`Getting all the available strings from '${lprojRoot}'`);
    }
  }

  if (_lodash.default.isEmpty(resourcePaths) && (await _appiumSupport.fs.exists(lprojRoot))) {
    const resourceFiles = (await _appiumSupport.fs.readdir(lprojRoot)).filter(name => _lodash.default.some([STRINGS_RESOURCE, STRINGSDICT_RESOURCE], x => name.endsWith(x))).map(name => _path.default.resolve(lprojRoot, name));
    resourcePaths.push(...resourceFiles);
  }

  _logger.default.info(`Got ${resourcePaths.length} resource file(s) in '${lprojRoot}'`);

  if (_lodash.default.isEmpty(resourcePaths)) {
    return {};
  }

  const resultStrings = {};

  const toAbsolutePath = function (p) {
    return _path.default.isAbsolute(p) ? p : _path.default.resolve(process.cwd(), p);
  };

  for (const resourcePath of resourcePaths) {
    if (!_appiumSupport.util.isSubPath(toAbsolutePath(resourcePath), toAbsolutePath(app))) {
      throw new Error(`'${resourcePath}' is expected to be located under '${app}'`);
    }

    try {
      const data = await readResource(resourcePath);

      _logger.default.debug(`Parsed ${_lodash.default.keys(data).length} string(s) from '${resourcePath}'`);

      _lodash.default.merge(resultStrings, data);
    } catch (e) {
      _logger.default.warn(`Cannot parse '${resourcePath}' resource. Original error: ${e.message}`);
    }
  }

  _logger.default.info(`Got ${_lodash.default.keys(resultStrings).length} string(s) from '${lprojRoot}'`);

  return resultStrings;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
