"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SafariConsoleLog = void 0;

require("source-map-support/register");

var _rotatingLog = require("./rotating-log");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

class SafariConsoleLog extends _rotatingLog.RotatingLog {
  constructor(showLogs) {
    super(showLogs, 'SafariConsole');
    this.log.warning = this.log.warn;
  }

  addLogLine(err, out) {
    if (this.isCapturing) {
      this.logs = this.logs || [];

      while (this.logs.length >= _rotatingLog.MAX_LOG_ENTRIES_COUNT) {
        this.logs.shift();

        if (this.logIdxSinceLastRequest > 0) {
          this.logIdxSinceLastRequest--;
        }
      }

      const entry = {
        level: {
          error: 'SEVERE',
          warning: 'WARNING',
          log: 'FINE'
        }[out.level] || 'INFO',
        timestamp: Date.now(),
        message: JSON.stringify(out)
      };
      this.logs.push(entry);
    }

    if (_lodash.default.has(out, 'count')) {
      const count = out.count;
      out = this._previousOutput || {};
      out.text = `Previous message repeated ${_appiumSupport.util.pluralize('time', count, true)}`;
    } else {
      this._previousOutput = out;
    }

    if (this.showLogs) {
      let level = 'debug';

      if (out.level === 'warning' || out.level === 'error') {
        level = out.level;
      }

      for (const line of out.text.split('\n')) {
        const url = out.url ? `${out.url} ` : '';
        this.log[level](`[${level.toUpperCase()}][${url}${out.line}:${out.column}] ${line}`);
      }
    }
  }

}

exports.SafariConsoleLog = SafariConsoleLog;
var _default = SafariConsoleLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL3NhZmFyaS1jb25zb2xlLWxvZy5qcyJdLCJuYW1lcyI6WyJTYWZhcmlDb25zb2xlTG9nIiwiUm90YXRpbmdMb2ciLCJjb25zdHJ1Y3RvciIsInNob3dMb2dzIiwibG9nIiwid2FybmluZyIsIndhcm4iLCJhZGRMb2dMaW5lIiwiZXJyIiwib3V0IiwiaXNDYXB0dXJpbmciLCJsb2dzIiwibGVuZ3RoIiwiTUFYX0xPR19FTlRSSUVTX0NPVU5UIiwic2hpZnQiLCJsb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IiwiZW50cnkiLCJsZXZlbCIsImVycm9yIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsIl8iLCJoYXMiLCJjb3VudCIsIl9wcmV2aW91c091dHB1dCIsInRleHQiLCJ1dGlsIiwicGx1cmFsaXplIiwibGluZSIsInNwbGl0IiwidXJsIiwidG9VcHBlckNhc2UiLCJjb2x1bW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZ0JBQU4sU0FBK0JDLHdCQUEvQixDQUEyQztBQUN6Q0MsRUFBQUEsV0FBVyxDQUFFQyxRQUFGLEVBQVk7QUFDckIsVUFBTUEsUUFBTixFQUFnQixlQUFoQjtBQUdBLFNBQUtDLEdBQUwsQ0FBU0MsT0FBVCxHQUFtQixLQUFLRCxHQUFMLENBQVNFLElBQTVCO0FBQ0Q7O0FBRURDLEVBQUFBLFVBQVUsQ0FBRUMsR0FBRixFQUFPQyxHQUFQLEVBQVk7QUFDcEIsUUFBSSxLQUFLQyxXQUFULEVBQXNCO0FBQ3BCLFdBQUtDLElBQUwsR0FBWSxLQUFLQSxJQUFMLElBQWEsRUFBekI7O0FBQ0EsYUFBTyxLQUFLQSxJQUFMLENBQVVDLE1BQVYsSUFBb0JDLGtDQUEzQixFQUFrRDtBQUNoRCxhQUFLRixJQUFMLENBQVVHLEtBQVY7O0FBQ0EsWUFBSSxLQUFLQyxzQkFBTCxHQUE4QixDQUFsQyxFQUFxQztBQUNuQyxlQUFLQSxzQkFBTDtBQUNEO0FBQ0Y7O0FBNEJELFlBQU1DLEtBQUssR0FBRztBQUNaQyxRQUFBQSxLQUFLLEVBQUU7QUFDTEMsVUFBQUEsS0FBSyxFQUFFLFFBREY7QUFFTGIsVUFBQUEsT0FBTyxFQUFFLFNBRko7QUFHTEQsVUFBQUEsR0FBRyxFQUFFO0FBSEEsVUFJTEssR0FBRyxDQUFDUSxLQUpDLEtBSVMsTUFMSjtBQU1aRSxRQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQU5DO0FBT1pDLFFBQUFBLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLEdBQWY7QUFQRyxPQUFkO0FBU0EsV0FBS0UsSUFBTCxDQUFVYyxJQUFWLENBQWVULEtBQWY7QUFDRDs7QUFFRCxRQUFJVSxnQkFBRUMsR0FBRixDQUFNbEIsR0FBTixFQUFXLE9BQVgsQ0FBSixFQUF5QjtBQUt2QixZQUFNbUIsS0FBSyxHQUFHbkIsR0FBRyxDQUFDbUIsS0FBbEI7QUFDQW5CLE1BQUFBLEdBQUcsR0FBRyxLQUFLb0IsZUFBTCxJQUF3QixFQUE5QjtBQUNBcEIsTUFBQUEsR0FBRyxDQUFDcUIsSUFBSixHQUFZLDZCQUE0QkMsb0JBQUtDLFNBQUwsQ0FBZSxNQUFmLEVBQXVCSixLQUF2QixFQUE4QixJQUE5QixDQUFvQyxFQUE1RTtBQUNELEtBUkQsTUFRTztBQUVMLFdBQUtDLGVBQUwsR0FBdUJwQixHQUF2QjtBQUNEOztBQUlELFFBQUksS0FBS04sUUFBVCxFQUFtQjtBQUNqQixVQUFJYyxLQUFLLEdBQUcsT0FBWjs7QUFDQSxVQUFJUixHQUFHLENBQUNRLEtBQUosS0FBYyxTQUFkLElBQTJCUixHQUFHLENBQUNRLEtBQUosS0FBYyxPQUE3QyxFQUFzRDtBQUNwREEsUUFBQUEsS0FBSyxHQUFHUixHQUFHLENBQUNRLEtBQVo7QUFDRDs7QUFDRCxXQUFLLE1BQU1nQixJQUFYLElBQW1CeEIsR0FBRyxDQUFDcUIsSUFBSixDQUFTSSxLQUFULENBQWUsSUFBZixDQUFuQixFQUF5QztBQUV2QyxjQUFNQyxHQUFHLEdBQUcxQixHQUFHLENBQUMwQixHQUFKLEdBQVcsR0FBRTFCLEdBQUcsQ0FBQzBCLEdBQUksR0FBckIsR0FBMEIsRUFBdEM7QUFDQSxhQUFLL0IsR0FBTCxDQUFTYSxLQUFULEVBQWlCLElBQUdBLEtBQUssQ0FBQ21CLFdBQU4sRUFBb0IsS0FBSUQsR0FBSSxHQUFFMUIsR0FBRyxDQUFDd0IsSUFBSyxJQUFHeEIsR0FBRyxDQUFDNEIsTUFBTyxLQUFJSixJQUFLLEVBQWxGO0FBQ0Q7QUFDRjtBQUNGOztBQWxGd0M7OztlQXNGNUJqQyxnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdGF0aW5nTG9nLCBNQVhfTE9HX0VOVFJJRVNfQ09VTlQgfSBmcm9tICcuL3JvdGF0aW5nLWxvZyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuXG5jbGFzcyBTYWZhcmlDb25zb2xlTG9nIGV4dGVuZHMgUm90YXRpbmdMb2cge1xuICBjb25zdHJ1Y3RvciAoc2hvd0xvZ3MpIHtcbiAgICBzdXBlcihzaG93TG9ncywgJ1NhZmFyaUNvbnNvbGUnKTtcblxuICAgIC8vIGpzIGNvbnNvbGUgaGFzIGB3YXJuaW5nYCBsZXZlbCwgc28gbWFwIHRvIGB3YXJuYFxuICAgIHRoaXMubG9nLndhcm5pbmcgPSB0aGlzLmxvZy53YXJuO1xuICB9XG5cbiAgYWRkTG9nTGluZSAoZXJyLCBvdXQpIHtcbiAgICBpZiAodGhpcy5pc0NhcHR1cmluZykge1xuICAgICAgdGhpcy5sb2dzID0gdGhpcy5sb2dzIHx8IFtdO1xuICAgICAgd2hpbGUgKHRoaXMubG9ncy5sZW5ndGggPj0gTUFYX0xPR19FTlRSSUVTX0NPVU5UKSB7XG4gICAgICAgIHRoaXMubG9ncy5zaGlmdCgpO1xuICAgICAgICBpZiAodGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID4gMCkge1xuICAgICAgICAgIHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdC0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKiBUaGUgb3V0cHV0IHdpbGwgYmUgbGlrZTpcbiAgICAgICAqICAge1xuICAgICAgICogICAgIFwic291cmNlXCI6IFwiamF2YXNjcmlwdFwiLFxuICAgICAgICogICAgIFwibGV2ZWxcIjpcImVycm9yXCIsXG4gICAgICAgKiAgICAgXCJ0ZXh0XCI6XCJSZWZlcmVuY2VFcnJvcjogQ2FuJ3QgZmluZCB2YXJpYWJsZTogc19hY2NvdW50XCIsXG4gICAgICAgKiAgICAgXCJ0eXBlXCI6XCJsb2dcIixcbiAgICAgICAqICAgICBcImxpbmVcIjoyLFxuICAgICAgICogICAgIFwiY29sdW1uXCI6MjEsXG4gICAgICAgKiAgICAgXCJ1cmxcIjpcImh0dHBzOi8vYXNzZXRzLmFkb2JlZHRtLmNvbS9iNDZlMzE4ZDg0NTI1MDgzNGVkYTEwYzVhMjA4MjdjMDQ1YTRkNzZmL3NjcmlwdHMvc2F0ZWxsaXRlLTU3ODY2ZjhiNjQ3NDZkNTNhODAwMDEwNC1zdGFnaW5nLmpzXCIsXG4gICAgICAgKiAgICAgXCJyZXBlYXRDb3VudFwiOjEsXG4gICAgICAgKiAgICAgXCJzdGFja1RyYWNlXCI6W3tcbiAgICAgICAqICAgICAgIFwiZnVuY3Rpb25OYW1lXCI6XCJnbG9iYWwgY29kZVwiLFxuICAgICAgICogICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vYXNzZXRzLmFkb2JlZHRtLmNvbS9iNDZlMzE4ZDg0NTI1MDgzNGVkYTEwYzVhMjA4MjdjMDQ1YTRkNzZmL3NjcmlwdHMvc2F0ZWxsaXRlLTU3ODY2ZjhiNjQ3NDZkNTNhODAwMDEwNC1zdGFnaW5nLmpzXCIsXG4gICAgICAgKiAgICAgICBcInNjcmlwdElkXCI6XCI2XCIsXG4gICAgICAgKiAgICAgICBcImxpbmVOdW1iZXJcIjoyLFxuICAgICAgICogICAgICAgXCJjb2x1bW5OdW1iZXJcIjoyMVxuICAgICAgICogICAgIH1dXG4gICAgICAgKiAgfVxuICAgICAgICpcbiAgICAgICAqIHdlIG5lZWQsIGF0IGxlYXN0LCBgbGV2ZWxgIChpbiBhY2NvcmRhbmNlIHdpdGggSmF2YSBsZXZlbHNcbiAgICAgICAqIChodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvNy9kb2NzL2FwaS9qYXZhL3V0aWwvbG9nZ2luZy9MZXZlbC5odG1sKSksXG4gICAgICAgKiBgdGltZXN0YW1wYCwgYW5kIGBtZXNzYWdlYCB0byBzYXRpc2Z5IHRoZSBqYXZhIGNsaWVudC4gSW4gb3JkZXIgdG9cbiAgICAgICAqIHByb3ZpZGUgYWxsIHRoZSBpbmZvcm1hdGlvbiB0byB0aGUgY2xpZW50LCBgbWVzc2FnZWAgaXMgdGhlIGZ1bGxcbiAgICAgICAqIG9iamVjdCwgc3RyaW5naWZpZWQuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICBsZXZlbDoge1xuICAgICAgICAgIGVycm9yOiAnU0VWRVJFJyxcbiAgICAgICAgICB3YXJuaW5nOiAnV0FSTklORycsXG4gICAgICAgICAgbG9nOiAnRklORScsXG4gICAgICAgIH1bb3V0LmxldmVsXSB8fCAnSU5GTycsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgbWVzc2FnZTogSlNPTi5zdHJpbmdpZnkob3V0KSxcbiAgICAgIH07XG4gICAgICB0aGlzLmxvZ3MucHVzaChlbnRyeSk7XG4gICAgfVxuXG4gICAgaWYgKF8uaGFzKG91dCwgJ2NvdW50JykpIHtcbiAgICAgIC8vIHRoaXMgaXMgYSBub3RpZmljYXRpb24gb2YgdGhlIHByZXZpb3VzIG1lc3NhZ2UgYmVpbmcgcmVwZWF0ZWRcbiAgICAgIC8vIHRoaXMgc2hvdWxkIF9uZXZlcl8gYmUgdGhlIGZpcnN0IG1lc3NhZ2UsIHNvIHRoZSBwcmV2aW91cyBvbmUgb3VnaHQgdG9cbiAgICAgIC8vIGJlIHBvcHVsYXRlZC4gSWYgaXQgaXMgbm90LCBub3RoaW5nIHdpbGwgYnJlYWssIGl0IHdpbGwganVzdCBsb29rIG9kZFxuICAgICAgLy8gaW4gdGhlIG91dHB1dCBiZWxvdyAobm8gdXJsIG9yIGxpbmUgbnVtYmVycylcbiAgICAgIGNvbnN0IGNvdW50ID0gb3V0LmNvdW50O1xuICAgICAgb3V0ID0gdGhpcy5fcHJldmlvdXNPdXRwdXQgfHwge307XG4gICAgICBvdXQudGV4dCA9IGBQcmV2aW91cyBtZXNzYWdlIHJlcGVhdGVkICR7dXRpbC5wbHVyYWxpemUoJ3RpbWUnLCBjb3VudCwgdHJ1ZSl9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2F2ZSB0aGUgbW9zdCByZWNlbnQgb3V0cHV0XG4gICAgICB0aGlzLl9wcmV2aW91c091dHB1dCA9IG91dDtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgb3V0cHV0IGxpa2VcbiAgICAvLyAgICAgU2FmYXJpQ29uc29sZSBbV0FSTklOR11baHR0cDovL2FwcGl1bS5pbyAyOjEzXSBMb2cgc29tZXRoaW5nIHRvIHdhcm5cbiAgICBpZiAodGhpcy5zaG93TG9ncykge1xuICAgICAgbGV0IGxldmVsID0gJ2RlYnVnJztcbiAgICAgIGlmIChvdXQubGV2ZWwgPT09ICd3YXJuaW5nJyB8fCBvdXQubGV2ZWwgPT09ICdlcnJvcicpIHtcbiAgICAgICAgbGV2ZWwgPSBvdXQubGV2ZWw7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGxpbmUgb2Ygb3V0LnRleHQuc3BsaXQoJ1xcbicpKSB7XG4gICAgICAgIC8vIHVybCBpcyBvcHRpb25hbCwgc28gZ2V0IGZvcm1hdHRpbmcgaGVyZVxuICAgICAgICBjb25zdCB1cmwgPSBvdXQudXJsID8gYCR7b3V0LnVybH0gYCA6ICcnO1xuICAgICAgICB0aGlzLmxvZ1tsZXZlbF0oYFske2xldmVsLnRvVXBwZXJDYXNlKCl9XVske3VybH0ke291dC5saW5lfToke291dC5jb2x1bW59XSAke2xpbmV9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFNhZmFyaUNvbnNvbGVMb2cgfTtcbmV4cG9ydCBkZWZhdWx0IFNhZmFyaUNvbnNvbGVMb2c7XG4iXSwiZmlsZSI6ImxpYi9kZXZpY2UtbG9nL3NhZmFyaS1jb25zb2xlLWxvZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
