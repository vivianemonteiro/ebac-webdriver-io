"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSLog = void 0;

require("source-map-support/register");

var _events = require("events");

const MAX_LOG_ENTRIES_COUNT = 10000;

class IOSLog extends _events.EventEmitter {
  constructor() {
    super();
    this.logs = [];
    this.logIdxSinceLastRequest = -1;
    this.maxBufferSize = MAX_LOG_ENTRIES_COUNT;
  }

  async startCapture() {
    throw new Error(`Sub-classes need to implement a 'startCapture' function`);
  }

  async stopCapture() {
    throw new Error(`Sub-classes need to implement a 'stopCapture' function`);
  }

  get isCapturing() {
    throw new Error(`Sub-classes need to implement a 'isCapturing' function`);
  }

  broadcast(logLine) {
    const logObj = {
      timestamp: Date.now(),
      level: 'ALL',
      message: logLine
    };
    this.logs.push(logObj);
    this.emit('output', logObj);

    if (this.logs.length > this.maxBufferSize) {
      this.logs.shift();

      if (this.logIdxSinceLastRequest > 0) {
        --this.logIdxSinceLastRequest;
      }
    }
  }

  getLogs() {
    if (this.logs.length && this.logIdxSinceLastRequest < this.logs.length) {
      let result = this.logs;

      if (this.logIdxSinceLastRequest > 0) {
        result = result.slice(this.logIdxSinceLastRequest);
      }

      this.logIdxSinceLastRequest = this.logs.length;
      return result;
    }

    return [];
  }

  getAllLogs() {
    return this.logs;
  }

}

exports.IOSLog = IOSLog;
var _default = IOSLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1sb2cuanMiXSwibmFtZXMiOlsiTUFYX0xPR19FTlRSSUVTX0NPVU5UIiwiSU9TTG9nIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJsb2dzIiwibG9nSWR4U2luY2VMYXN0UmVxdWVzdCIsIm1heEJ1ZmZlclNpemUiLCJzdGFydENhcHR1cmUiLCJFcnJvciIsInN0b3BDYXB0dXJlIiwiaXNDYXB0dXJpbmciLCJicm9hZGNhc3QiLCJsb2dMaW5lIiwibG9nT2JqIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImxldmVsIiwibWVzc2FnZSIsInB1c2giLCJlbWl0IiwibGVuZ3RoIiwic2hpZnQiLCJnZXRMb2dzIiwicmVzdWx0Iiwic2xpY2UiLCJnZXRBbGxMb2dzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFHQSxNQUFNQSxxQkFBcUIsR0FBRyxLQUE5Qjs7QUFFQSxNQUFNQyxNQUFOLFNBQXFCQyxvQkFBckIsQ0FBa0M7QUFFaENDLEVBQUFBLFdBQVcsR0FBSTtBQUNiO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLEVBQVo7QUFDQSxTQUFLQyxzQkFBTCxHQUE4QixDQUFDLENBQS9CO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQk4scUJBQXJCO0FBQ0Q7O0FBRWlCLFFBQVpPLFlBQVksR0FBSTtBQUNwQixVQUFNLElBQUlDLEtBQUosQ0FBVyx5REFBWCxDQUFOO0FBQ0Q7O0FBRWdCLFFBQVhDLFdBQVcsR0FBSTtBQUNuQixVQUFNLElBQUlELEtBQUosQ0FBVyx3REFBWCxDQUFOO0FBQ0Q7O0FBRWMsTUFBWEUsV0FBVyxHQUFJO0FBQ2pCLFVBQU0sSUFBSUYsS0FBSixDQUFXLHdEQUFYLENBQU47QUFDRDs7QUFFREcsRUFBQUEsU0FBUyxDQUFFQyxPQUFGLEVBQVc7QUFDbEIsVUFBTUMsTUFBTSxHQUFHO0FBQ2JDLE1BQUFBLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFMLEVBREU7QUFFYkMsTUFBQUEsS0FBSyxFQUFFLEtBRk07QUFHYkMsTUFBQUEsT0FBTyxFQUFFTjtBQUhJLEtBQWY7QUFLQSxTQUFLUixJQUFMLENBQVVlLElBQVYsQ0FBZU4sTUFBZjtBQUNBLFNBQUtPLElBQUwsQ0FBVSxRQUFWLEVBQW9CUCxNQUFwQjs7QUFDQSxRQUFJLEtBQUtULElBQUwsQ0FBVWlCLE1BQVYsR0FBbUIsS0FBS2YsYUFBNUIsRUFBMkM7QUFDekMsV0FBS0YsSUFBTCxDQUFVa0IsS0FBVjs7QUFDQSxVQUFJLEtBQUtqQixzQkFBTCxHQUE4QixDQUFsQyxFQUFxQztBQUNuQyxVQUFFLEtBQUtBLHNCQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVEa0IsRUFBQUEsT0FBTyxHQUFJO0FBQ1QsUUFBSSxLQUFLbkIsSUFBTCxDQUFVaUIsTUFBVixJQUFvQixLQUFLaEIsc0JBQUwsR0FBOEIsS0FBS0QsSUFBTCxDQUFVaUIsTUFBaEUsRUFBd0U7QUFDdEUsVUFBSUcsTUFBTSxHQUFHLEtBQUtwQixJQUFsQjs7QUFDQSxVQUFJLEtBQUtDLHNCQUFMLEdBQThCLENBQWxDLEVBQXFDO0FBQ25DbUIsUUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNDLEtBQVAsQ0FBYSxLQUFLcEIsc0JBQWxCLENBQVQ7QUFDRDs7QUFDRCxXQUFLQSxzQkFBTCxHQUE4QixLQUFLRCxJQUFMLENBQVVpQixNQUF4QztBQUNBLGFBQU9HLE1BQVA7QUFDRDs7QUFDRCxXQUFPLEVBQVA7QUFDRDs7QUFFREUsRUFBQUEsVUFBVSxHQUFJO0FBQ1osV0FBTyxLQUFLdEIsSUFBWjtBQUNEOztBQW5EK0I7OztlQXVEbkJILE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuXG4vLyBXZSBrZWVwIG9ubHkgdGhlIG1vc3QgcmVjZW50IGxvZyBlbnRyaWVzIHRvIGF2b2lkIG91dCBvZiBtZW1vcnkgZXJyb3JcbmNvbnN0IE1BWF9MT0dfRU5UUklFU19DT1VOVCA9IDEwMDAwO1xuXG5jbGFzcyBJT1NMb2cgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubG9ncyA9IFtdO1xuICAgIHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCA9IC0xO1xuICAgIHRoaXMubWF4QnVmZmVyU2l6ZSA9IE1BWF9MT0dfRU5UUklFU19DT1VOVDtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0Q2FwdHVyZSAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRocm93IG5ldyBFcnJvcihgU3ViLWNsYXNzZXMgbmVlZCB0byBpbXBsZW1lbnQgYSAnc3RhcnRDYXB0dXJlJyBmdW5jdGlvbmApO1xuICB9XG5cbiAgYXN5bmMgc3RvcENhcHR1cmUgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFN1Yi1jbGFzc2VzIG5lZWQgdG8gaW1wbGVtZW50IGEgJ3N0b3BDYXB0dXJlJyBmdW5jdGlvbmApO1xuICB9XG5cbiAgZ2V0IGlzQ2FwdHVyaW5nICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFN1Yi1jbGFzc2VzIG5lZWQgdG8gaW1wbGVtZW50IGEgJ2lzQ2FwdHVyaW5nJyBmdW5jdGlvbmApO1xuICB9XG5cbiAgYnJvYWRjYXN0IChsb2dMaW5lKSB7XG4gICAgY29uc3QgbG9nT2JqID0ge1xuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgbGV2ZWw6ICdBTEwnLFxuICAgICAgbWVzc2FnZTogbG9nTGluZVxuICAgIH07XG4gICAgdGhpcy5sb2dzLnB1c2gobG9nT2JqKTtcbiAgICB0aGlzLmVtaXQoJ291dHB1dCcsIGxvZ09iaik7XG4gICAgaWYgKHRoaXMubG9ncy5sZW5ndGggPiB0aGlzLm1heEJ1ZmZlclNpemUpIHtcbiAgICAgIHRoaXMubG9ncy5zaGlmdCgpO1xuICAgICAgaWYgKHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCA+IDApIHtcbiAgICAgICAgLS10aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0TG9ncyAoKSB7XG4gICAgaWYgKHRoaXMubG9ncy5sZW5ndGggJiYgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IDwgdGhpcy5sb2dzLmxlbmd0aCkge1xuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMubG9ncztcbiAgICAgIGlmICh0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPiAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSh0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QpO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID0gdGhpcy5sb2dzLmxlbmd0aDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGdldEFsbExvZ3MgKCkge1xuICAgIHJldHVybiB0aGlzLmxvZ3M7XG4gIH1cbn1cblxuZXhwb3J0IHsgSU9TTG9nIH07XG5leHBvcnQgZGVmYXVsdCBJT1NMb2c7XG4iXSwiZmlsZSI6ImxpYi9kZXZpY2UtbG9nL2lvcy1sb2cuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
