"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSPerformanceLog = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

const log = _appiumSupport.logger.getLogger('IOSPerformanceLog');

const MAX_EVENTS = 5000;

class IOSPerformanceLog {
  constructor(remoteDebugger, maxEvents = MAX_EVENTS) {
    this.remoteDebugger = remoteDebugger;
    this.maxEvents = parseInt(maxEvents, 10);
    this.timelineEvents = [];
  }

  async startCapture() {
    log.debug('Starting performance (Timeline) log capture');
    this.timelineEvents = [];
    return await this.remoteDebugger.startTimeline(this.onTimelineEvent.bind(this));
  }

  async stopCapture() {
    log.debug('Stopping performance (Timeline) log capture');
    return await this.remoteDebugger.stopTimeline();
  }

  onTimelineEvent(event) {
    log.debug(`Received Timeline event: ${_lodash.default.truncate(JSON.stringify(event))}`);
    this.timelineEvents.push(event);

    if (this.timelineEvents.length > this.maxEvents) {
      let removedEvent = this.timelineEvents.shift();
      log.warn(`Too many Timeline events, removing earliest: ${_lodash.default.truncate(JSON.stringify(removedEvent))}`);
    }
  }

  async getLogs() {
    let events = this.timelineEvents;
    log.debug('Flushing Timeline events');
    this.timelineEvents = [];
    return events;
  }

  async getAllLogs() {
    return this.getLogs();
  }

}

exports.IOSPerformanceLog = IOSPerformanceLog;
var _default = IOSPerformanceLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1wZXJmb3JtYW5jZS1sb2cuanMiXSwibmFtZXMiOlsibG9nIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiTUFYX0VWRU5UUyIsIklPU1BlcmZvcm1hbmNlTG9nIiwiY29uc3RydWN0b3IiLCJyZW1vdGVEZWJ1Z2dlciIsIm1heEV2ZW50cyIsInBhcnNlSW50IiwidGltZWxpbmVFdmVudHMiLCJzdGFydENhcHR1cmUiLCJkZWJ1ZyIsInN0YXJ0VGltZWxpbmUiLCJvblRpbWVsaW5lRXZlbnQiLCJiaW5kIiwic3RvcENhcHR1cmUiLCJzdG9wVGltZWxpbmUiLCJldmVudCIsIl8iLCJ0cnVuY2F0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwdXNoIiwibGVuZ3RoIiwicmVtb3ZlZEV2ZW50Iiwic2hpZnQiLCJ3YXJuIiwiZ2V0TG9ncyIsImV2ZW50cyIsImdldEFsbExvZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsR0FBRyxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixtQkFBakIsQ0FBWjs7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBbkI7O0FBRUEsTUFBTUMsaUJBQU4sQ0FBd0I7QUFDdEJDLEVBQUFBLFdBQVcsQ0FBRUMsY0FBRixFQUFrQkMsU0FBUyxHQUFHSixVQUE5QixFQUEwQztBQUNuRCxTQUFLRyxjQUFMLEdBQXNCQSxjQUF0QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJDLFFBQVEsQ0FBQ0QsU0FBRCxFQUFZLEVBQVosQ0FBekI7QUFFQSxTQUFLRSxjQUFMLEdBQXNCLEVBQXRCO0FBQ0Q7O0FBRWlCLFFBQVpDLFlBQVksR0FBSTtBQUNwQlYsSUFBQUEsR0FBRyxDQUFDVyxLQUFKLENBQVUsNkNBQVY7QUFDQSxTQUFLRixjQUFMLEdBQXNCLEVBQXRCO0FBQ0EsV0FBTyxNQUFNLEtBQUtILGNBQUwsQ0FBb0JNLGFBQXBCLENBQWtDLEtBQUtDLGVBQUwsQ0FBcUJDLElBQXJCLENBQTBCLElBQTFCLENBQWxDLENBQWI7QUFDRDs7QUFFZ0IsUUFBWEMsV0FBVyxHQUFJO0FBQ25CZixJQUFBQSxHQUFHLENBQUNXLEtBQUosQ0FBVSw2Q0FBVjtBQUNBLFdBQU8sTUFBTSxLQUFLTCxjQUFMLENBQW9CVSxZQUFwQixFQUFiO0FBQ0Q7O0FBRURILEVBQUFBLGVBQWUsQ0FBRUksS0FBRixFQUFTO0FBQ3RCakIsSUFBQUEsR0FBRyxDQUFDVyxLQUFKLENBQVcsNEJBQTJCTyxnQkFBRUMsUUFBRixDQUFXQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosS0FBZixDQUFYLENBQWtDLEVBQXhFO0FBQ0EsU0FBS1IsY0FBTCxDQUFvQmEsSUFBcEIsQ0FBeUJMLEtBQXpCOztBQUdBLFFBQUksS0FBS1IsY0FBTCxDQUFvQmMsTUFBcEIsR0FBNkIsS0FBS2hCLFNBQXRDLEVBQWlEO0FBQy9DLFVBQUlpQixZQUFZLEdBQUcsS0FBS2YsY0FBTCxDQUFvQmdCLEtBQXBCLEVBQW5CO0FBQ0F6QixNQUFBQSxHQUFHLENBQUMwQixJQUFKLENBQVUsZ0RBQStDUixnQkFBRUMsUUFBRixDQUFXQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUcsWUFBZixDQUFYLENBQXlDLEVBQWxHO0FBQ0Q7QUFDRjs7QUFFWSxRQUFQRyxPQUFPLEdBQUk7QUFDZixRQUFJQyxNQUFNLEdBQUcsS0FBS25CLGNBQWxCO0FBR0FULElBQUFBLEdBQUcsQ0FBQ1csS0FBSixDQUFVLDBCQUFWO0FBQ0EsU0FBS0YsY0FBTCxHQUFzQixFQUF0QjtBQUVBLFdBQU9tQixNQUFQO0FBQ0Q7O0FBRWUsUUFBVkMsVUFBVSxHQUFJO0FBQ2xCLFdBQU8sS0FBS0YsT0FBTCxFQUFQO0FBQ0Q7O0FBMUNxQjs7O2VBK0NUdkIsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdJT1NQZXJmb3JtYW5jZUxvZycpO1xuY29uc3QgTUFYX0VWRU5UUyA9IDUwMDA7XG5cbmNsYXNzIElPU1BlcmZvcm1hbmNlTG9nIHtcbiAgY29uc3RydWN0b3IgKHJlbW90ZURlYnVnZ2VyLCBtYXhFdmVudHMgPSBNQVhfRVZFTlRTKSB7XG4gICAgdGhpcy5yZW1vdGVEZWJ1Z2dlciA9IHJlbW90ZURlYnVnZ2VyO1xuICAgIHRoaXMubWF4RXZlbnRzID0gcGFyc2VJbnQobWF4RXZlbnRzLCAxMCk7XG5cbiAgICB0aGlzLnRpbWVsaW5lRXZlbnRzID0gW107XG4gIH1cblxuICBhc3luYyBzdGFydENhcHR1cmUgKCkge1xuICAgIGxvZy5kZWJ1ZygnU3RhcnRpbmcgcGVyZm9ybWFuY2UgKFRpbWVsaW5lKSBsb2cgY2FwdHVyZScpO1xuICAgIHRoaXMudGltZWxpbmVFdmVudHMgPSBbXTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZW1vdGVEZWJ1Z2dlci5zdGFydFRpbWVsaW5lKHRoaXMub25UaW1lbGluZUV2ZW50LmJpbmQodGhpcykpO1xuICB9XG5cbiAgYXN5bmMgc3RvcENhcHR1cmUgKCkge1xuICAgIGxvZy5kZWJ1ZygnU3RvcHBpbmcgcGVyZm9ybWFuY2UgKFRpbWVsaW5lKSBsb2cgY2FwdHVyZScpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlbW90ZURlYnVnZ2VyLnN0b3BUaW1lbGluZSgpO1xuICB9XG5cbiAgb25UaW1lbGluZUV2ZW50IChldmVudCkge1xuICAgIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgVGltZWxpbmUgZXZlbnQ6ICR7Xy50cnVuY2F0ZShKU09OLnN0cmluZ2lmeShldmVudCkpfWApO1xuICAgIHRoaXMudGltZWxpbmVFdmVudHMucHVzaChldmVudCk7XG5cbiAgICAvLyBpZiB3ZSBoYXZlIHRvbyBtYW55LCBnZXQgcmlkIG9mIHRoZSBvbGRlc3QgbG9nIGxpbmVcbiAgICBpZiAodGhpcy50aW1lbGluZUV2ZW50cy5sZW5ndGggPiB0aGlzLm1heEV2ZW50cykge1xuICAgICAgbGV0IHJlbW92ZWRFdmVudCA9IHRoaXMudGltZWxpbmVFdmVudHMuc2hpZnQoKTtcbiAgICAgIGxvZy53YXJuKGBUb28gbWFueSBUaW1lbGluZSBldmVudHMsIHJlbW92aW5nIGVhcmxpZXN0OiAke18udHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkocmVtb3ZlZEV2ZW50KSl9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0TG9ncyAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIGxldCBldmVudHMgPSB0aGlzLnRpbWVsaW5lRXZlbnRzO1xuXG4gICAgLy8gZmx1c2ggZXZlbnRzXG4gICAgbG9nLmRlYnVnKCdGbHVzaGluZyBUaW1lbGluZSBldmVudHMnKTtcbiAgICB0aGlzLnRpbWVsaW5lRXZlbnRzID0gW107XG5cbiAgICByZXR1cm4gZXZlbnRzO1xuICB9XG5cbiAgYXN5bmMgZ2V0QWxsTG9ncyAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHJldHVybiB0aGlzLmdldExvZ3MoKTtcbiAgfVxufVxuXG5cbmV4cG9ydCB7IElPU1BlcmZvcm1hbmNlTG9nIH07XG5leHBvcnQgZGVmYXVsdCBJT1NQZXJmb3JtYW5jZUxvZztcbiJdLCJmaWxlIjoibGliL2RldmljZS1sb2cvaW9zLXBlcmZvcm1hbmNlLWxvZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
