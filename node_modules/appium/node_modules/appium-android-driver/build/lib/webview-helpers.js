"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KNOWN_CHROME_PACKAGE_NAMES = exports.CHROMIUM_WIN = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _axios = _interopRequireDefault(require("axios"));

var _appiumSupport = require("appium-support");

var _portscanner = require("portscanner");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _os = _interopRequireDefault(require("os"));

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const CHROMIUM_WIN = 'CHROMIUM';
exports.CHROMIUM_WIN = CHROMIUM_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
const WEBVIEW_PID_PATTERN = new RegExp(`^${WEBVIEW_BASE}(\\d+)`);
const WEBVIEW_PKG_PATTERN = new RegExp(`^${WEBVIEW_BASE}([^\\d\\s][\\w.]*)`);
const DEVTOOLS_SOCKET_PATTERN = /@[\w.]+_devtools_remote_?(\d+)?\b/;
const CROSSWALK_SOCKET_PATTERN = /@([\w.]+)_devtools_remote\b/;
const CHROMIUM_DEVTOOLS_SOCKET = 'chrome_devtools_remote';
const CHROME_PACKAGE_NAME = 'com.android.chrome';
const KNOWN_CHROME_PACKAGE_NAMES = [CHROME_PACKAGE_NAME, 'com.chrome.beta', 'com.chrome.dev', 'com.chrome.canary'];
exports.KNOWN_CHROME_PACKAGE_NAMES = KNOWN_CHROME_PACKAGE_NAMES;
const DEVTOOLS_PORTS_RANGE = [10900, 11000];
const WEBVIEWS_DETAILS_CACHE = new _lruCache.default({
  max: 100,
  updateAgeOnGet: true
});
const CDP_REQ_TIMEOUT = 2000;

const DEVTOOLS_PORT_ALLOCATION_GUARD = _appiumSupport.util.getLockFileGuard(_path.default.resolve(_os.default.tmpdir(), 'android_devtools_port_guard'), {
  timeout: 7,
  tryRecovery: true
});

const helpers = {};
exports.helpers = helpers;

function toDetailsCacheKey(adb, webview) {
  return `${adb === null || adb === void 0 ? void 0 : adb.curDeviceId}:${webview}`;
}

async function getPotentialWebviewProcs(adb) {
  const out = await adb.shell(['cat', '/proc/net/unix']);
  const names = [];
  const allMatches = [];

  for (const line of out.split('\n')) {
    const [,,, flags,, st,, sockPath] = line.trim().split(/\s+/);

    if (!sockPath) {
      continue;
    }

    if (sockPath.startsWith('@')) {
      allMatches.push(line.trim());
    }

    if (flags !== '00010000' || st !== '01') {
      continue;
    }

    if (!DEVTOOLS_SOCKET_PATTERN.test(sockPath)) {
      continue;
    }

    names.push(sockPath);
  }

  if (_lodash.default.isEmpty(names)) {
    _logger.default.debug('Found no active devtools sockets');

    if (!_lodash.default.isEmpty(allMatches)) {
      _logger.default.debug(`Other sockets are: ${JSON.stringify(allMatches, null, 2)}`);
    }
  } else {
    _logger.default.debug(`Parsed ${names.length} active devtools ${_appiumSupport.util.pluralize('socket', names.length, false)}: ` + JSON.stringify(names));
  }

  return _lodash.default.uniq(names);
}

async function webviewsFromProcs(adb, deviceSocket = null) {
  const socketNames = await getPotentialWebviewProcs(adb);
  const webviews = [];

  for (const socketName of socketNames) {
    if (deviceSocket === CHROMIUM_DEVTOOLS_SOCKET && socketName === `@${deviceSocket}`) {
      webviews.push({
        proc: socketName,
        webview: CHROMIUM_WIN
      });
      continue;
    }

    const socketNameMatch = DEVTOOLS_SOCKET_PATTERN.exec(socketName);

    if (!socketNameMatch) {
      continue;
    }

    const crosswalkMatch = CROSSWALK_SOCKET_PATTERN.exec(socketName);

    if (!socketNameMatch[1] && !crosswalkMatch) {
      continue;
    }

    if (deviceSocket && socketName === `@${deviceSocket}` || !deviceSocket) {
      webviews.push({
        proc: socketName,
        webview: socketNameMatch[1] ? `${WEBVIEW_BASE}${socketNameMatch[1]}` : `${WEBVIEW_BASE}${crosswalkMatch[1]}`
      });
    }
  }

  return webviews;
}

async function allocateDevtoolsPort(adb, socketName, webviewDevtoolsPort = null) {
  const remotePort = socketName.replace(/^@/, '');
  let [startPort, endPort] = DEVTOOLS_PORTS_RANGE;

  if (webviewDevtoolsPort) {
    endPort = webviewDevtoolsPort + (endPort - startPort);
    startPort = webviewDevtoolsPort;
  }

  _logger.default.debug(`Forwarding remote port ${remotePort} to a local ` + `port in range ${startPort}..${endPort}`);

  if (!webviewDevtoolsPort) {
    _logger.default.debug(`You could use the 'webviewDevtoolsPort' capability to customize ` + `the starting port number`);
  }

  return await DEVTOOLS_PORT_ALLOCATION_GUARD(async () => {
    let localPort;

    try {
      localPort = await (0, _portscanner.findAPortNotInUse)(startPort, endPort);
    } catch (e) {
      throw new Error(`Cannot find any free port to forward the Devtools socket ` + `in range ${startPort}..${endPort}. You could set the starting port number ` + `manually by providing the 'webviewDevtoolsPort' capability`);
    }

    await adb.adbExec(['forward', `tcp:${localPort}`, `localabstract:${remotePort}`]);
    return localPort;
  });
}

async function collectWebviewsDetails(adb, webviewsMapping, opts = {}) {
  if (_lodash.default.isEmpty(webviewsMapping)) {
    return;
  }

  const {
    webviewDevtoolsPort = null,
    ensureWebviewsHavePages = null,
    enableWebviewDetailsCollection = null
  } = opts;

  if (!ensureWebviewsHavePages) {
    _logger.default.info(`Not checking whether webviews have active pages; use the ` + `'ensureWebviewsHavePages' cap to turn this check on`);
  }

  if (!enableWebviewDetailsCollection) {
    _logger.default.info(`Not collecting web view details. Details collection might help ` + `to make Chromedriver initialization more precise. Use the 'enableWebviewDetailsCollection' ` + `cap to turn it on`);
  }

  if (!ensureWebviewsHavePages && !enableWebviewDetailsCollection) {
    return;
  }

  _logger.default.debug(`Collecting CDP data of ${_appiumSupport.util.pluralize('webview', webviewsMapping.length, true)}`);

  const detailCollectors = [];

  for (const item of webviewsMapping) {
    detailCollectors.push((async () => {
      let localPort;

      try {
        localPort = await allocateDevtoolsPort(adb, item.proc, webviewDevtoolsPort);

        if (enableWebviewDetailsCollection) {
          item.info = await cdpInfo(localPort);
        }

        if (ensureWebviewsHavePages) {
          item.pages = await cdpList(localPort);
        }
      } catch (e) {
        _logger.default.debug(e);
      } finally {
        if (localPort) {
          await adb.removePortForward(localPort);
        }
      }
    })());
  }

  await _bluebird.default.all(detailCollectors);

  _logger.default.debug(`CDP data collection completed`);
}

async function cdpList(localPort) {
  return (await (0, _axios.default)({
    url: `http://127.0.0.1:${localPort}/json/list`,
    timeout: CDP_REQ_TIMEOUT
  })).data;
}

async function cdpInfo(localPort) {
  return (await (0, _axios.default)({
    url: `http://127.0.0.1:${localPort}/json/version`,
    timeout: CDP_REQ_TIMEOUT
  })).data;
}

helpers.procFromWebview = async function procFromWebview(adb, webview) {
  const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);

  if (!pidMatch) {
    throw new Error(`Could not find PID for webview '${webview}'`);
  }

  const pid = pidMatch[1];

  _logger.default.debug(`${webview} mapped to pid ${pid}`);

  _logger.default.debug(`Getting process name for webview '${webview}'`);

  const pkg = await adb.getNameByPid(pid);

  _logger.default.debug(`Got process name: '${pkg}'`);

  return pkg;
};

helpers.parseWebviewNames = function parseWebviewNames(webviewsMapping, {
  ensureWebviewsHavePages = true,
  isChromeSession = false
} = {}) {
  if (isChromeSession) {
    return [CHROMIUM_WIN];
  }

  const result = [];

  for (const {
    webview,
    pages,
    proc,
    webviewName
  } of webviewsMapping) {
    if (ensureWebviewsHavePages && (pages === null || pages === void 0 ? void 0 : pages.length) === 0) {
      _logger.default.info(`Skipping the webview '${webview}' at '${proc}' ` + `since it has reported having zero pages`);

      continue;
    }

    if (webviewName) {
      result.push(webviewName);
    }
  }

  _logger.default.debug(`Found ${_appiumSupport.util.pluralize('webview', result.length, true)}: ${JSON.stringify(result)}`);

  return result;
};

helpers.getWebViewsMapping = async function getWebViewsMapping(adb, {
  androidDeviceSocket = null,
  ensureWebviewsHavePages = true,
  webviewDevtoolsPort = null,
  enableWebviewDetailsCollection = true,
  isChromeSession = false
} = {}) {
  if (isChromeSession) {
    return [];
  }

  _logger.default.debug('Getting a list of available webviews');

  const webviewsMapping = await webviewsFromProcs(adb, androidDeviceSocket);
  await collectWebviewsDetails(adb, webviewsMapping, {
    ensureWebviewsHavePages,
    enableWebviewDetailsCollection,
    webviewDevtoolsPort
  });

  for (const webviewMapping of webviewsMapping) {
    const {
      webview,
      info
    } = webviewMapping;
    webviewMapping.webviewName = null;
    let wvName = webview;
    let process = undefined;

    if (!androidDeviceSocket) {
      const pkgMatch = WEBVIEW_PKG_PATTERN.exec(webview);

      try {
        const pkg = pkgMatch ? pkgMatch[1] : await helpers.procFromWebview(adb, webview);
        wvName = `${WEBVIEW_BASE}${pkg}`;
        const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);
        process = {
          name: pkg,
          id: pidMatch ? pidMatch[1] : null
        };
      } catch (e) {
        _logger.default.warn(e.message);

        continue;
      }
    }

    webviewMapping.webviewName = wvName;
    const key = toDetailsCacheKey(adb, wvName);

    if (info || process) {
      WEBVIEWS_DETAILS_CACHE.set(key, {
        info,
        process
      });
    } else if (WEBVIEWS_DETAILS_CACHE.has(key)) {
      WEBVIEWS_DETAILS_CACHE.del(key);
    }
  }

  return webviewsMapping;
};

helpers.getWebviewDetails = function getWebviewDetails(adb, webview) {
  const key = toDetailsCacheKey(adb, webview);
  return WEBVIEWS_DETAILS_CACHE.get(key);
};

helpers.createChromedriverCaps = function createChromedriverCaps(opts, deviceId, webViewDetails) {
  var _opts$chromeOptions, _webViewDetails$proce, _webViewDetails$proce2, _opts$chromeOptions2;

  const caps = {
    chromeOptions: {}
  };
  const androidPackage = ((_opts$chromeOptions = opts.chromeOptions) === null || _opts$chromeOptions === void 0 ? void 0 : _opts$chromeOptions.androidPackage) || opts.appPackage;

  if (androidPackage) {
    caps.chromeOptions.androidPackage = androidPackage;
  }

  if (_lodash.default.isBoolean(opts.chromeUseRunningApp)) {
    caps.chromeOptions.androidUseRunningApp = opts.chromeUseRunningApp;
  }

  if (opts.chromeAndroidPackage) {
    caps.chromeOptions.androidPackage = opts.chromeAndroidPackage;
  }

  if (opts.chromeAndroidActivity) {
    caps.chromeOptions.androidActivity = opts.chromeAndroidActivity;
  }

  if (opts.chromeAndroidProcess) {
    caps.chromeOptions.androidProcess = opts.chromeAndroidProcess;
  } else if (webViewDetails !== null && webViewDetails !== void 0 && (_webViewDetails$proce = webViewDetails.process) !== null && _webViewDetails$proce !== void 0 && _webViewDetails$proce.name && webViewDetails !== null && webViewDetails !== void 0 && (_webViewDetails$proce2 = webViewDetails.process) !== null && _webViewDetails$proce2 !== void 0 && _webViewDetails$proce2.id) {
    caps.chromeOptions.androidProcess = webViewDetails.process.name;
  }

  if (_lodash.default.toLower(opts.browserName) === 'chromium-webview') {
    caps.chromeOptions.androidActivity = opts.appActivity;
  }

  if (opts.pageLoadStrategy) {
    caps.pageLoadStrategy = opts.pageLoadStrategy;
  }

  const isChrome = _lodash.default.toLower(caps.chromeOptions.androidPackage) === 'chrome';

  if (_lodash.default.includes(KNOWN_CHROME_PACKAGE_NAMES, caps.chromeOptions.androidPackage) || isChrome) {
    if (isChrome) {
      caps.chromeOptions.androidPackage = CHROME_PACKAGE_NAME;
    }

    delete caps.chromeOptions.androidActivity;
    delete caps.chromeOptions.androidProcess;
  }

  caps.chromeOptions.androidDeviceSerial = deviceId;

  if (_lodash.default.isPlainObject(opts.loggingPrefs) || _lodash.default.isPlainObject(opts.chromeLoggingPrefs)) {
    if (opts.loggingPrefs) {
      _logger.default.warn(`The 'loggingPrefs' cap is deprecated; use the 'chromeLoggingPrefs' cap instead`);
    }

    caps.loggingPrefs = opts.chromeLoggingPrefs || opts.loggingPrefs;
  }

  if (opts.enablePerformanceLogging) {
    _logger.default.warn(`The 'enablePerformanceLogging' cap is deprecated; simply use ` + `the 'chromeLoggingPrefs' cap instead, with a 'performance' key set to 'ALL'`);

    const newPref = {
      performance: 'ALL'
    };
    caps.loggingPrefs = caps.loggingPrefs ? Object.assign({}, caps.loggingPrefs, newPref) : newPref;
  }

  if ((_opts$chromeOptions2 = opts.chromeOptions) !== null && _opts$chromeOptions2 !== void 0 && _opts$chromeOptions2.Arguments) {
    opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];
    delete opts.chromeOptions.Arguments;
  }

  _logger.default.debug('Precalculated Chromedriver capabilities: ' + JSON.stringify(caps.chromeOptions, null, 2));

  const protectedCapNames = [];

  for (const [opt, val] of _lodash.default.toPairs(opts.chromeOptions)) {
    if (_lodash.default.isUndefined(caps.chromeOptions[opt])) {
      caps.chromeOptions[opt] = val;
    } else {
      protectedCapNames.push(opt);
    }
  }

  if (!_lodash.default.isEmpty(protectedCapNames)) {
    _logger.default.info('The following Chromedriver capabilities cannot be overridden ' + 'by the provided chromeOptions:');

    for (const optName of protectedCapNames) {
      _logger.default.info(`  ${optName} (${JSON.stringify(opts.chromeOptions[optName])})`);
    }
  }

  return caps;
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
