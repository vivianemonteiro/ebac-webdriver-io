"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAttribute = async function getAttribute(attribute, elementId) {
  let p = {
    attribute,
    elementId
  };
  return await this.bootstrap.sendAction('element:getAttribute', p);
};

commands.getName = async function getName(elementId) {
  return await this.getAttribute('className', elementId);
};

commands.elementDisplayed = async function elementDisplayed(elementId) {
  return (await this.getAttribute('displayed', elementId)) === 'true';
};

commands.elementEnabled = async function elementEnabled(elementId) {
  return (await this.getAttribute('enabled', elementId)) === 'true';
};

commands.elementSelected = async function elementSelected(elementId) {
  return (await this.getAttribute('selected', elementId)) === 'true';
};

helpers.setElementValue = async function setElementValue(keys, elementId, replace = false) {
  let text = keys;

  if (keys instanceof Array) {
    text = keys.join('');
  }

  let params = {
    elementId,
    text,
    replace,
    unicodeKeyboard: this.opts.unicodeKeyboard
  };
  return await this.doSetElementValue(params);
};

helpers.doSetElementValue = async function doSetElementValue(params) {
  return await this.bootstrap.sendAction('element:setText', params);
};

commands.setValue = async function setValue(keys, elementId) {
  return await this.setElementValue(keys, elementId, false);
};

commands.replaceValue = async function replaceValue(keys, elementId) {
  return await this.setElementValue(keys, elementId, true);
};

commands.setValueImmediate = async function setValueImmediate(keys, elementId) {
  let text = keys;

  if (keys instanceof Array) {
    text = keys.join('');
  }

  await this.click(elementId);
  await this.adb.inputText(text);
};

commands.getText = async function getText(elementId) {
  return await this.bootstrap.sendAction('element:getText', {
    elementId
  });
};

commands.clear = async function clear(elementId) {
  let text = (await this.getText(elementId)) || '';
  let length = text.length;

  if (length === 0) {
    length = 100;
  }

  await this.click(elementId);

  _logger.default.debug(`Sending up to ${length} clear characters to device`);

  return await (0, _asyncbox.retryInterval)(5, 500, async () => {
    let remainingLength = length;

    while (remainingLength > 0) {
      let lengthToSend = remainingLength < 50 ? remainingLength : 50;

      _logger.default.debug(`Sending ${lengthToSend} clear characters to device`);

      await this.adb.clearTextField(lengthToSend);
      remainingLength -= lengthToSend;
    }
  });
};

commands.click = async function click(elementId) {
  return await this.bootstrap.sendAction('element:click', {
    elementId
  });
};

commands.getLocation = async function getLocation(elementId) {
  return await this.bootstrap.sendAction('element:getLocation', {
    elementId
  });
};

commands.getLocationInView = async function getLocationInView(elementId) {
  return await this.getLocation(elementId);
};

commands.getSize = async function getSize(elementId) {
  return await this.bootstrap.sendAction('element:getSize', {
    elementId
  });
};

commands.getElementRect = async function getElementRect(elementId) {
  return await this.bootstrap.sendAction('element:getRect', {
    elementId
  });
};

commands.touchLongClick = async function touchLongClick(elementId, x, y, duration) {
  let params = {
    elementId,
    x,
    y,
    duration
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchLongClick', params);
};

commands.touchDown = async function touchDown(elementId, x, y) {
  let params = {
    elementId,
    x,
    y
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchDown', params);
};

commands.touchUp = async function touchUp(elementId, x, y) {
  let params = {
    elementId,
    x,
    y
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchUp', params);
};

commands.touchMove = async function touchMove(elementId, x, y) {
  let params = {
    elementId,
    x,
    y
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchMove', params);
};

commands.complexTap = async function complexTap(tapCount, touchCount, duration, x, y) {
  return await this.bootstrap.sendAction('click', {
    x,
    y
  });
};

commands.tap = async function (elementId = null, x = null, y = null, count = 1) {
  if (!_appiumSupport.util.hasValue(elementId) && !_appiumSupport.util.hasValue(x) && !_appiumSupport.util.hasValue(y)) {
    throw new Error(`Either element to tap or both absolute coordinates should be defined`);
  }

  for (let i = 0; i < count; i++) {
    if (_appiumSupport.util.hasValue(elementId)) {
      await this.bootstrap.sendAction('element:click', {
        elementId,
        x,
        y
      });
    } else {
      await this.bootstrap.sendAction('click', {
        x,
        y
      });
    }
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
