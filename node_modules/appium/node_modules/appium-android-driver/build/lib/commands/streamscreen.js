"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

var _portscanner = require("portscanner");

var _http = _interopRequireDefault(require("http"));

var _net = _interopRequireDefault(require("net"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _child_process = require("child_process");

var _url = _interopRequireDefault(require("url"));

const commands = {};
const RECORDING_INTERVAL_SEC = 5;
const STREAMING_STARTUP_TIMEOUT_MS = 5000;
const GSTREAMER_BINARY = `gst-launch-1.0${_appiumSupport.system.isWindows() ? '.exe' : ''}`;
const GST_INSPECT_BINARY = `gst-inspect-1.0${_appiumSupport.system.isWindows() ? '.exe' : ''}`;
const REQUIRED_GST_PLUGINS = {
  avdec_h264: 'gst-libav',
  h264parse: 'gst-plugins-bad',
  jpegenc: 'gst-plugins-good',
  tcpserversink: 'gst-plugins-base',
  multipartmux: 'gst-plugins-good'
};
const SCREENRECORD_BINARY = 'screenrecord';
const GST_TUTORIAL_URL = 'https://gstreamer.freedesktop.org/documentation/installing/index.html';
const DEFAULT_HOST = '127.0.0.1';
const TCP_HOST = '127.0.0.1';
const DEFAULT_PORT = 8093;
const DEFAULT_QUALITY = 70;
const DEFAULT_BITRATE = 4000000;
const BOUNDARY_STRING = '--2ae9746887f170b8cf7c271047ce314c';
const ADB_SCREEN_STREAMING_FEATURE = 'adb_screen_streaming';

function createStreamingLogger(streamName, udid) {
  return _appiumSupport.logger.getLogger(`${streamName}@` + _lodash.default.truncate(udid, {
    length: 8,
    omission: ''
  }));
}

async function verifyStreamingRequirements(adb) {
  if (!_lodash.default.trim(await adb.shell(['which', SCREENRECORD_BINARY]))) {
    throw new Error(`The required '${SCREENRECORD_BINARY}' binary is not available on the device under test`);
  }

  const gstreamerCheckPromises = [];

  for (const binaryName of [GSTREAMER_BINARY, GST_INSPECT_BINARY]) {
    gstreamerCheckPromises.push((async () => {
      try {
        await _appiumSupport.fs.which(binaryName);
      } catch (e) {
        throw new Error(`The '${binaryName}' binary is not available in the PATH on the host system. ` + `See ${GST_TUTORIAL_URL} for more details on how to install it.`);
      }
    })());
  }

  await _bluebird.default.all(gstreamerCheckPromises);
  const moduleCheckPromises = [];

  for (const [name, modName] of _lodash.default.toPairs(REQUIRED_GST_PLUGINS)) {
    moduleCheckPromises.push((async () => {
      const {
        stdout
      } = await (0, _teen_process.exec)(GST_INSPECT_BINARY, [name]);

      if (!_lodash.default.includes(stdout, modName)) {
        throw new Error(`The required GStreamer plugin '${name}' from '${modName}' module is not installed. ` + `See ${GST_TUTORIAL_URL} for more details on how to install it.`);
      }
    })());
  }

  await _bluebird.default.all(moduleCheckPromises);
}

async function getDeviceInfo(adb) {
  const output = await adb.shell(['dumpsys', 'display']);
  const result = {};

  for (const [key, pattern] of [['width', /\bdeviceWidth=(\d+)/], ['height', /\bdeviceHeight=(\d+)/], ['fps', /\bfps=(\d+)/]]) {
    const match = pattern.exec(output);

    if (!match) {
      _logger.default.debug(output);

      throw new Error(`Cannot parse the device ${key} from the adb command output. ` + `Check the server log for more details.`);
    }

    result[key] = parseInt(match[1], 10);
  }

  result.udid = adb.curDeviceId;
  return result;
}

async function initDeviceStreamingProc(adb, deviceInfo, opts = {}) {
  const {
    width,
    height,
    bitRate
  } = opts;
  const adjustedWidth = parseInt(width, 10) || deviceInfo.width;
  const adjustedHeight = parseInt(height, 10) || deviceInfo.height;
  const adjustedBitrate = parseInt(bitRate, 10) || DEFAULT_BITRATE;
  let screenRecordCmd = SCREENRECORD_BINARY + ` --output-format=h264` + ` --time-limit=${RECORDING_INTERVAL_SEC}`;

  if (width || height) {
    screenRecordCmd += ` --size=${adjustedWidth}x${adjustedHeight}`;
  }

  if (bitRate) {
    screenRecordCmd += ` --bit-rate=${adjustedBitrate}`;
  }

  const adbArgs = [...adb.executable.defaultArgs, 'exec-out', `while true; do ${screenRecordCmd} -; done`];
  const deviceStreaming = (0, _child_process.spawn)(adb.executable.path, adbArgs);
  deviceStreaming.on('exit', (code, signal) => {
    _logger.default.debug(`Device streaming process exited with code ${code}, signal ${signal}`);
  });
  let isStarted = false;
  const deviceStreamingLogger = createStreamingLogger(SCREENRECORD_BINARY, deviceInfo.udid);

  const errorsListener = chunk => {
    const stderr = chunk.toString();

    if (_lodash.default.trim(stderr)) {
      deviceStreamingLogger.debug(stderr);
    }
  };

  deviceStreaming.stderr.on('data', errorsListener);

  const startupListener = chunk => {
    if (!isStarted) {
      isStarted = !_lodash.default.isEmpty(chunk);
    }
  };

  deviceStreaming.stdout.on('data', startupListener);

  try {
    _logger.default.info(`Starting device streaming: ${_appiumSupport.util.quote([adb.executable.path, ...adbArgs])}`);

    await (0, _asyncbox.waitForCondition)(() => isStarted, {
      waitMs: STREAMING_STARTUP_TIMEOUT_MS,
      intervalMs: 300
    });
  } catch (e) {
    _logger.default.errorAndThrow(`Cannot start the screen streaming process. Original error: ${e.message}`);
  } finally {
    deviceStreaming.stderr.removeListener('data', errorsListener);
    deviceStreaming.stdout.removeListener('data', startupListener);
  }

  return deviceStreaming;
}

async function initGstreamerPipeline(deviceStreamingProc, deviceInfo, opts = {}) {
  const {
    width,
    height,
    quality,
    tcpPort,
    considerRotation,
    logPipelineDetails
  } = opts;
  const adjustedWidth = parseInt(width, 10) || deviceInfo.width;
  const adjustedHeight = parseInt(height, 10) || deviceInfo.height;
  const gstreamerPipeline = new _teen_process.SubProcess(GSTREAMER_BINARY, ['-v', 'fdsrc', 'fd=0', '!', 'video/x-h264,' + `width=${considerRotation ? Math.max(adjustedWidth, adjustedHeight) : adjustedWidth},` + `height=${considerRotation ? Math.max(adjustedWidth, adjustedHeight) : adjustedHeight},` + `framerate=${deviceInfo.fps}/1,` + 'byte-stream=true', '!', 'h264parse', '!', 'queue', 'leaky=downstream', '!', 'avdec_h264', '!', 'queue', 'leaky=downstream', '!', 'jpegenc', `quality=${quality}`, '!', 'multipartmux', `boundary=${BOUNDARY_STRING}`, '!', 'tcpserversink', `host=${TCP_HOST}`, `port=${tcpPort}`], {
    stdio: [deviceStreamingProc.stdout, 'pipe', 'pipe']
  });
  gstreamerPipeline.on('exit', (code, signal) => {
    _logger.default.debug(`Pipeline streaming process exited with code ${code}, signal ${signal}`);
  });
  const gstreamerLogger = createStreamingLogger('gst', deviceInfo.udid);

  const gstOutputListener = (stdout, stderr) => {
    if (_lodash.default.trim(stderr || stdout)) {
      gstreamerLogger.debug(stderr || stdout);
    }
  };

  gstreamerPipeline.on('output', gstOutputListener);
  let didFail = false;

  try {
    _logger.default.info(`Starting GStreamer pipeline: ${gstreamerPipeline.rep}`);

    await gstreamerPipeline.start(0);
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        return (await (0, _portscanner.checkPortStatus)(tcpPort, TCP_HOST)) === 'open';
      } catch (ign) {
        return false;
      }
    }, {
      waitMs: STREAMING_STARTUP_TIMEOUT_MS,
      intervalMs: 300
    });
  } catch (e) {
    didFail = true;

    _logger.default.errorAndThrow(`Cannot start the screen streaming pipeline. Original error: ${e.message}`);
  } finally {
    if (!logPipelineDetails || didFail) {
      gstreamerPipeline.removeListener('output', gstOutputListener);
    }
  }

  return gstreamerPipeline;
}

function extractRemoteAddress(req) {
  return req.headers['x-forwarded-for'] || req.socket.remoteAddress || req.connection.remoteAddress || req.connection.socket.remoteAddress;
}

commands.mobileStartScreenStreaming = async function mobileStartScreenStreaming(options = {}) {
  this.ensureFeatureEnabled(ADB_SCREEN_STREAMING_FEATURE);
  const {
    width,
    height,
    bitRate,
    host = DEFAULT_HOST,
    port = DEFAULT_PORT,
    pathname,
    tcpPort = DEFAULT_PORT + 1,
    quality = DEFAULT_QUALITY,
    considerRotation = false,
    logPipelineDetails = false
  } = options;

  if (_lodash.default.isUndefined(this._screenStreamingProps)) {
    await verifyStreamingRequirements(this.adb);
  }

  if (!_lodash.default.isEmpty(this._screenStreamingProps)) {
    _logger.default.info(`The screen streaming session is already running. ` + `Stop it first in order to start a new one.`);

    return;
  }

  if ((await (0, _portscanner.checkPortStatus)(port, host)) === 'open') {
    _logger.default.info(`The port #${port} at ${host} is busy. ` + `Assuming the screen streaming is already running`);

    return;
  }

  if ((await (0, _portscanner.checkPortStatus)(tcpPort, TCP_HOST)) === 'open') {
    _logger.default.errorAndThrow(`The port #${tcpPort} at ${TCP_HOST} is busy. ` + `Make sure there are no leftovers from previous sessions.`);
  }

  this._screenStreamingProps = null;
  const deviceInfo = await getDeviceInfo(this.adb);
  const deviceStreamingProc = await initDeviceStreamingProc(this.adb, deviceInfo, {
    width,
    height,
    bitRate
  });
  let gstreamerPipeline;

  try {
    gstreamerPipeline = await initGstreamerPipeline(deviceStreamingProc, deviceInfo, {
      width,
      height,
      quality,
      tcpPort,
      considerRotation,
      logPipelineDetails
    });
  } catch (e) {
    if (deviceStreamingProc.kill(0)) {
      deviceStreamingProc.kill();
    }

    throw e;
  }

  let mjpegSocket;
  let mjpegServer;

  try {
    await new _bluebird.default((resolve, reject) => {
      mjpegSocket = _net.default.createConnection(tcpPort, TCP_HOST, () => {
        _logger.default.info(`Successfully connected to MJPEG stream at tcp://${TCP_HOST}:${tcpPort}`);

        mjpegServer = _http.default.createServer((req, res) => {
          const remoteAddress = extractRemoteAddress(req);

          const currentPathname = _url.default.parse(req.url).pathname;

          _logger.default.info(`Got an incoming screen bradcasting request from ${remoteAddress} ` + `(${req.headers['user-agent'] || 'User Agent unknown'}) at ${currentPathname}`);

          if (pathname && currentPathname !== pathname) {
            _logger.default.info('Rejecting the broadcast request since it does not match the given pathname');

            res.writeHead(404, {
              Connection: 'close',
              'Content-Type': 'text/plain; charset=utf-8'
            });
            res.write(`'${currentPathname}' did not match any known endpoints`);
            res.end();
            return;
          }

          _logger.default.info('Starting MJPEG broadcast');

          res.writeHead(200, {
            'Cache-Control': 'no-store, no-cache, must-revalidate, pre-check=0, post-check=0, max-age=0',
            Pragma: 'no-cache',
            Connection: 'close',
            'Content-Type': `multipart/x-mixed-replace; boundary=${BOUNDARY_STRING}`
          });
          mjpegSocket.pipe(res);
        });
        mjpegServer.on('error', e => {
          _logger.default.warn(e);

          reject(e);
        });
        mjpegServer.on('close', () => {
          _logger.default.debug(`MJPEG server at http://${host}:${port} has been closed`);
        });
        mjpegServer.on('listening', () => {
          _logger.default.info(`Successfully started MJPEG server at http://${host}:${port}`);

          resolve();
        });
        mjpegServer.listen(port, host);
      });
      mjpegSocket.on('error', e => {
        _logger.default.error(e);

        reject(e);
      });
    }).timeout(STREAMING_STARTUP_TIMEOUT_MS, `Cannot connect to the streaming server within ${STREAMING_STARTUP_TIMEOUT_MS}ms`);
  } catch (e) {
    if (deviceStreamingProc.kill(0)) {
      deviceStreamingProc.kill();
    }

    if (gstreamerPipeline.isRunning) {
      await gstreamerPipeline.stop();
    }

    if (mjpegSocket) {
      mjpegSocket.destroy();
    }

    if (mjpegServer && mjpegServer.listening) {
      mjpegServer.close();
    }

    throw e;
  }

  this._screenStreamingProps = {
    deviceStreamingProc,
    gstreamerPipeline,
    mjpegSocket,
    mjpegServer
  };
};

commands.mobileStopScreenStreaming = async function mobileStopScreenStreaming() {
  if (_lodash.default.isEmpty(this._screenStreamingProps)) {
    if (!_lodash.default.isUndefined(this._screenStreamingProps)) {
      _logger.default.debug(`Screen streaming is not running. There is nothing to stop`);
    }

    return;
  }

  const {
    deviceStreamingProc,
    gstreamerPipeline,
    mjpegSocket,
    mjpegServer
  } = this._screenStreamingProps;

  try {
    mjpegSocket.end();

    if (mjpegServer.listening) {
      mjpegServer.close();
    }

    if (deviceStreamingProc.kill(0)) {
      deviceStreamingProc.kill('SIGINT');
    }

    if (gstreamerPipeline.isRunning) {
      try {
        await gstreamerPipeline.stop('SIGINT');
      } catch (e) {
        _logger.default.warn(e);

        try {
          await gstreamerPipeline.stop('SIGKILL');
        } catch (e1) {
          _logger.default.error(e1);
        }
      }
    }

    _logger.default.info(`Successfully terminated the screen streaming MJPEG server`);
  } finally {
    this._screenStreamingProps = null;
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
