"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers.js");

var _bluebird = _interopRequireDefault(require("bluebird"));

const lockManagementMethods = {};
const CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR = `Credential can't be null or empty`;
const CREDENTIAL_DID_NOT_MATCH_ERROR = `didn't match`;
const SUPPORTED_LOCK_CREDENTIAL_TYPES = ['password', 'pin', 'pattern'];
const KEYCODE_POWER = 26;
const KEYCODE_WAKEUP = 224;
const HIDE_KEYBOARD_WAIT_TIME = 100;

function buildCommand(verb, oldCredential = null, ...args) {
  const cmd = ['locksettings', verb];

  if (!_lodash.default.isEmpty(oldCredential)) {
    cmd.push('--old', oldCredential);
  }

  if (!_lodash.default.isEmpty(args)) {
    cmd.push(...args);
  }

  return cmd;
}

async function swipeUp(adb) {
  const output = await adb.shell(['dumpsys', 'window']);
  const dimensionsMatch = /init=(\d+)x(\d+)/.exec(output);

  if (!dimensionsMatch) {
    throw new Error('Cannot retrieve the display size');
  }

  const displayWidth = parseInt(dimensionsMatch[1], 10);
  const displayHeight = parseInt(dimensionsMatch[2], 10);
  const x0 = displayWidth / 2;
  const y0 = displayHeight / 5 * 4;
  const x1 = x0;
  const y1 = displayHeight / 5;
  await adb.shell(['input', 'touchscreen', 'swipe', ...[x0, y0, x1, y1].map(c => Math.trunc(c))]);
}

lockManagementMethods.isLockManagementSupported = async function isLockManagementSupported() {
  if (!_lodash.default.isBoolean(this._isLockManagementSupported)) {
    const passFlag = '__PASS__';
    let output = '';

    try {
      output = await this.shell([`locksettings help && echo ${passFlag}`]);
    } catch (ign) {}

    this._isLockManagementSupported = _lodash.default.includes(output, passFlag);

    _logger.default.debug(`Extended lock settings management is ` + `${this._isLockManagementSupported ? '' : 'not '}supported`);
  }

  return this._isLockManagementSupported;
};

lockManagementMethods.verifyLockCredential = async function verifyLockCredential(credential = null) {
  try {
    const {
      stdout,
      stderr
    } = await this.shell(buildCommand('verify', credential), {
      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL
    });

    if (_lodash.default.includes(stdout, 'verified successfully')) {
      return true;
    }

    if ([`didn't match`, CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR].some(x => _lodash.default.includes(stderr || stdout, x))) {
      return false;
    }

    throw new Error(stderr || stdout);
  } catch (e) {
    throw new Error(`Device lock credential verification failed. ` + `Original error: ${e.stderr || e.stdout || e.message}`);
  }
};

lockManagementMethods.clearLockCredential = async function clearLockCredential(credential = null) {
  try {
    const {
      stdout,
      stderr
    } = await this.shell(buildCommand('clear', credential), {
      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL
    });

    if (!['user has no password', 'Lock credential cleared'].some(x => _lodash.default.includes(stderr || stdout, x))) {
      throw new Error(stderr || stdout);
    }
  } catch (e) {
    throw new Error(`Cannot clear device lock credential. ` + `Original error: ${e.stderr || e.stdout || e.message}`);
  }
};

lockManagementMethods.isLockEnabled = async function isLockEnabled() {
  try {
    const {
      stdout,
      stderr
    } = await this.shell(buildCommand('get-disabled'), {
      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL
    });

    if (/\bfalse\b/.test(stdout) || [CREDENTIAL_DID_NOT_MATCH_ERROR, CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR].some(x => _lodash.default.includes(stderr || stdout, x))) {
      return true;
    }

    if (/\btrue\b/.test(stdout)) {
      return false;
    }

    throw new Error(stderr || stdout);
  } catch (e) {
    throw new Error(`Cannot check if device lock is enabled. Original error: ${e.message}`);
  }
};

lockManagementMethods.setLockCredential = async function setLockCredential(credentialType, credential, oldCredential = null) {
  if (!SUPPORTED_LOCK_CREDENTIAL_TYPES.includes(credentialType)) {
    throw new Error(`Device lock credential type '${credentialType}' is unknown. ` + `Only the following credential types are supported: ${SUPPORTED_LOCK_CREDENTIAL_TYPES}`);
  }

  if (_lodash.default.isEmpty(credential) && !_lodash.default.isInteger(credential)) {
    throw new Error('Device lock credential cannot be empty');
  }

  const cmd = buildCommand(`set-${credentialType}`, oldCredential, credential);

  try {
    const {
      stdout,
      stderr
    } = await this.shell(cmd, {
      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL
    });

    if (!_lodash.default.includes(stdout, 'set to')) {
      throw new Error(stderr || stdout);
    }
  } catch (e) {
    throw new Error(`Setting of device lock ${credentialType} credential failed. ` + `Original error: ${e.stderr || e.stdout || e.message}`);
  }
};

lockManagementMethods.isScreenLocked = async function isScreenLocked() {
  const stdout = await this.shell(['dumpsys', 'window']);

  if (process.env.APPIUM_LOG_DUMPSYS) {
    const dumpsysFile = _path.default.resolve(process.cwd(), 'dumpsys.log');

    _logger.default.debug(`Writing dumpsys output to ${dumpsysFile}`);

    await _appiumSupport.fs.writeFile(dumpsysFile, stdout);
  }

  return (0, _helpers.isShowingLockscreen)(stdout) || (0, _helpers.isCurrentFocusOnKeyguard)(stdout) || !(0, _helpers.isScreenOnFully)(stdout);
};

lockManagementMethods.dismissKeyguard = async function dismissKeyguard() {
  _logger.default.info('Waking up the device to dismiss the keyguard');

  await this.cycleWakeUp();

  if ((await this.getApiLevel()) > 21) {
    await this.shell(['wm', 'dismiss-keyguard']);
    return;
  }

  const stdout = await this.shell(['dumpsys', 'window', 'windows']);

  if (!(0, _helpers.isCurrentFocusOnKeyguard)(stdout)) {
    _logger.default.debug('The keyguard seems to be inactive');

    return;
  }

  _logger.default.debug('Swiping up to dismiss the keyguard');

  if (await this.hideKeyboard()) {
    await _bluebird.default.delay(HIDE_KEYBOARD_WAIT_TIME);
  }

  _logger.default.debug('Dismissing notifications from the unlock view');

  await this.shell(['service', 'call', 'notification', '1']);
  await this.back();
  await swipeUp(this);
};

lockManagementMethods.cycleWakeUp = async function cycleWakeUp() {
  await this.keyevent(KEYCODE_POWER);
  await this.keyevent(KEYCODE_WAKEUP);
};

var _default = lockManagementMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
