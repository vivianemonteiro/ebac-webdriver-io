"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unwrapEl = unwrapEl;
exports.youiEngineKeycode = exports.youiEngineDriverReturnValues = void 0;

require("source-map-support/register");

function unwrapEl(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }

  return el;
}

const youiEngineDriverReturnValues = {
  WEBDRIVER_SUCCESS: 0,
  WEBDRIVER_NO_SUCH_ELEMENT: 7,
  WEBDRIVER_UNKNOWN_COMMAND: 9,
  WEBDRIVER_STALE_ELEMENT: 10,
  WEBDRIVER_ELEMENT_IS_NOT_SELECTABLE: 15,
  WEBDRIVER_NO_SUCH_WINDOW: 23,
  WEBDRIVER_INVALID_SELECTOR: 32,
  WEBDRIVER_ELEMENT_IS_NOT_VISIBLE: 11
};
exports.youiEngineDriverReturnValues = youiEngineDriverReturnValues;
const youiEngineKeycode = ['Unidentified', 'Attention', 'Application', 'Crsel', 'Exsel', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'LaunchApp1', 'LaunchApp2', 'LaunchMail', 'List', 'Props', 'Soft1', 'Soft2', 'Soft3', 'Soft4', 'Accept', 'Again', 'Enter', 'Find', 'Help', 'Info', 'Menu', 'Pause', 'Play', 'ScrollLock', 'Execute', 'Cancel', 'Escape', 'Zoom', 'Separator', 'Space', 'Add', 'Subtract', 'Multiply', 'Divide', 'Equal', 'Decimal', 'BrightnessDown', 'BrightnessUp', 'Camera', 'Eject', 'Power', 'PrintScreen', 'BrowserFavorites', 'BrowserHome', 'BrowserRefresh', 'BrowserSearch', 'BrowserStop', 'BrowserBack', 'BrowserForward', 'PageUp', 'PageDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowUpLeft', 'ArrowUpRight', 'ArrowDown', 'ArrowDownLeft', 'ArrowDownRight', 'Home', 'End', 'Select', 'Tab', 'Backspace', 'Clear', 'Copy', 'Cut', 'Delete', 'EraseEndOfField', 'Insert', 'Paste', 'Undo', 'DeadGrave', 'DeadAcute', 'DeadCircumflex', 'DeadTilde', 'DeadMacron', 'DeadBreve', 'DeadAboveDot', 'DeadUmlaut', 'DeadAboveRing', 'DeadDoubleAcute', 'DeadCaron', 'DeadCedilla', 'DeadOgonek', 'DeadIota', 'DeadVoicedSound', 'DeadSemiVoicedSound', 'Alphanumeric', 'Alt', 'AltGraph', 'CapsLock', 'Control', 'Function', 'Meta', 'Process', 'NumLock', 'Shift', 'SymbolLock', 'OperatingSystem', 'Compose', 'AllCandidates', 'NextCandidate', 'PreviousCandidate', 'CodeInput', 'Convert', 'NonConvert', 'FinalMode', 'FullWidth', 'HalfWidth', 'ModeChange', 'RomanCharacters', 'HangulMode', 'HanjaMode', 'JunjaMode', 'Hiragana', 'KanaMode', 'KanjiMode', 'Katakana', 'AudioFaderFront', 'AudioFaderRear', 'AudioBalanceLeft', 'AudioBalanceRight', 'AudioBaseBoostDown', 'AudioBaseBoostUp', 'VolumeMute', 'VolumeDown', 'VolumeUp', 'MediaPause', 'MediaPlay', 'MediaTrackEnd', 'MediaNextTrack', 'MediaFastForward', 'MediaRewind', 'MediaPlayPause', 'MediaPreviousTrack', 'MediaTrackSkip', 'MediaTrackStart', 'MediaStepForward', 'MediaStepBackward', 'MediaStop', 'MediaInstantReplay', 'SelectMedia', 'Blue', 'Brown', 'ChannelDown', 'ChannelUp', 'ClearFavorite0', 'ClearFavorite1', 'ClearFavorite2', 'ClearFavorite3', 'Dimmer', 'DisplaySwap', 'Green', 'Grey', 'Guide', 'MediaList', 'Link', 'Live', 'Lock', 'NextDay', 'NextFavoriteChannel', 'OnDemand', 'PictureInPictureDown', 'PictureInPictureMove', 'PictureInPictureToggle', 'PictureInPictureUp', 'PlaySpeedDown', 'PlaySpeedReset', 'PreviousDay', 'RandomToggle', 'RecallFavorite0', 'RecallFavorite1', 'RecallFavorite2', 'RecallFavorite3', 'MediaRecord', 'RecordSpeedNext', 'Red', 'RFBypass', 'ScanChannelsToggle', 'ScreenModeNext', 'Settings', 'SplitScreenToggle', 'StoreFavorite0', 'StoreFavorite1', 'StoreFavorite2', 'StoreFavorite3', 'Subtitle', 'AudioSurroundModeNext', 'Teletext', 'VideoModeNext', 'DisplayWide', 'Wink', 'Yellow', 'SystemHome', 'SystemBack', 'Gamepad0', 'Gamepad1', 'Gamepad2', 'Gamepad3', 'GamepadLeftBumper', 'GamepadRightBumper', 'GamepadLeftTrigger', 'GamepadRightTrigger', 'GamepadLeftStick', 'GamepadRightStick', 'GamepadSelect', 'GamepadStart', 'DVR', 'TV', 'Captions', 'Search', 'VoiceSearch', 'TV3DMode', 'MagicInput'];
exports.youiEngineKeycode = youiEngineKeycode;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
