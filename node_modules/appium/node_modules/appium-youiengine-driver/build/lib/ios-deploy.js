"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

const IOSDEPLOY_PATH = `ios-deploy`;

class IOSDeploy {
  constructor(udid) {
    this.udid = udid;
    this.cmd = IOSDEPLOY_PATH;
  }

  async checkStatus() {
    await _appiumSupport.fs.which(this.cmd);
  }

  async launchApp(app) {
    let remove = [`--justlaunch`, `--no-wifi`, `--noinstall`, this.udid, `--bundle`, app];

    try {
      await (0, _teen_process.exec)(this.cmd, remove);
    } catch (err) {
      _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

      throw new Error(`Could not remove app: '${err.message}'`);
    }
  }

  async remove(bundleid) {
    let remove = [`--uninstall_only`, `--no-wifi`, `--id`, this.udid, `--bundle_id`, bundleid];

    try {
      await (0, _teen_process.exec)(this.cmd, remove);
    } catch (err) {
      _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

      throw new Error(`Could not remove app: '${err.message}'`);
    }
  }

  async removeApp(bundleId) {
    await this.remove(bundleId);
  }

  async install(app) {
    const args = [`--justlaunch`, `--no-wifi`, `--uninstall`, `--id`, this.udid, `--bundle`, app];

    try {
      await (0, _asyncbox.retryInterval)(5, 500, _teen_process.exec, this.cmd, args);
    } catch (err) {
      _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

      throw new Error(`Could not install app: '${err.message}'`);
    }
  }

  async installApp(app) {
    await this.install(app);
  }

  async isAppInstalled(bundleid) {
    let isInstalled = [`--exists`, `--no-wifi`, `--id`, this.udid, `--bundle_id`, bundleid];

    try {
      let {
        stdout
      } = await (0, _teen_process.exec)(this.cmd, isInstalled);
      return stdout && stdout.includes('true');
    } catch (err) {
      if (err.code !== 255) {
        _logger.default.debug(`Error checking install status: '${err.message}'`);
      }

      return false;
    }
  }

}

var _default = IOSDeploy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pb3MtZGVwbG95LmpzIl0sIm5hbWVzIjpbIklPU0RFUExPWV9QQVRIIiwiSU9TRGVwbG95IiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwiY21kIiwiY2hlY2tTdGF0dXMiLCJmcyIsIndoaWNoIiwibGF1bmNoQXBwIiwiYXBwIiwicmVtb3ZlIiwiZXJyIiwibG9nZ2VyIiwiZGVidWciLCJzdGRvdXQiLCJzdGRlcnIiLCJFcnJvciIsIm1lc3NhZ2UiLCJidW5kbGVpZCIsInJlbW92ZUFwcCIsImJ1bmRsZUlkIiwiaW5zdGFsbCIsImFyZ3MiLCJleGVjIiwiaW5zdGFsbEFwcCIsImlzQXBwSW5zdGFsbGVkIiwiaXNJbnN0YWxsZWQiLCJpbmNsdWRlcyIsImNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsY0FBYyxHQUFJLFlBQXhCOztBQUVBLE1BQU1DLFNBQU4sQ0FBZ0I7QUFFZEMsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVE7QUFDakIsU0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsR0FBTCxHQUFXSixjQUFYO0FBQ0Q7O0FBRWdCLFFBQVhLLFdBQVcsR0FBSTtBQUVuQixVQUFNQyxrQkFBR0MsS0FBSCxDQUFTLEtBQUtILEdBQWQsQ0FBTjtBQUNEOztBQUVjLFFBQVRJLFNBQVMsQ0FBRUMsR0FBRixFQUFPO0FBQ3BCLFFBQUlDLE1BQU0sR0FBRyxDQUFFLGNBQUYsRUFBa0IsV0FBbEIsRUFBK0IsYUFBL0IsRUFBNkMsS0FBS1AsSUFBbEQsRUFBeUQsVUFBekQsRUFBb0VNLEdBQXBFLENBQWI7O0FBQ0EsUUFBSTtBQUNGLFlBQU0sd0JBQUssS0FBS0wsR0FBVixFQUFlTSxNQUFmLENBQU47QUFDRCxLQUZELENBRUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1pDLHNCQUFPQyxLQUFQLENBQWMsWUFBV0YsR0FBRyxDQUFDRyxNQUFPLGVBQWNILEdBQUcsQ0FBQ0ksTUFBTyxJQUE3RDs7QUFDQSxZQUFNLElBQUlDLEtBQUosQ0FBVywwQkFBeUJMLEdBQUcsQ0FBQ00sT0FBUSxHQUFoRCxDQUFOO0FBQ0Q7QUFDRjs7QUFFVyxRQUFOUCxNQUFNLENBQUVRLFFBQUYsRUFBWTtBQUN0QixRQUFJUixNQUFNLEdBQUcsQ0FBRSxrQkFBRixFQUFzQixXQUF0QixFQUFtQyxNQUFuQyxFQUEwQyxLQUFLUCxJQUEvQyxFQUFzRCxhQUF0RCxFQUFvRWUsUUFBcEUsQ0FBYjs7QUFDQSxRQUFJO0FBQ0YsWUFBTSx3QkFBSyxLQUFLZCxHQUFWLEVBQWVNLE1BQWYsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWkMsc0JBQU9DLEtBQVAsQ0FBYyxZQUFXRixHQUFHLENBQUNHLE1BQU8sZUFBY0gsR0FBRyxDQUFDSSxNQUFPLElBQTdEOztBQUNBLFlBQU0sSUFBSUMsS0FBSixDQUFXLDBCQUF5QkwsR0FBRyxDQUFDTSxPQUFRLEdBQWhELENBQU47QUFDRDtBQUNGOztBQUVjLFFBQVRFLFNBQVMsQ0FBRUMsUUFBRixFQUFZO0FBQ3pCLFVBQU0sS0FBS1YsTUFBTCxDQUFZVSxRQUFaLENBQU47QUFDRDs7QUFFWSxRQUFQQyxPQUFPLENBQUVaLEdBQUYsRUFBTztBQUNsQixVQUFNYSxJQUFJLEdBQUcsQ0FBRSxjQUFGLEVBQWtCLFdBQWxCLEVBQStCLGFBQS9CLEVBQThDLE1BQTlDLEVBQXFELEtBQUtuQixJQUExRCxFQUFpRSxVQUFqRSxFQUE0RU0sR0FBNUUsQ0FBYjs7QUFDQSxRQUFJO0FBQ0YsWUFBTSw2QkFBYyxDQUFkLEVBQWlCLEdBQWpCLEVBQXNCYyxrQkFBdEIsRUFBNEIsS0FBS25CLEdBQWpDLEVBQXNDa0IsSUFBdEMsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPWCxHQUFQLEVBQVk7QUFDWkMsc0JBQU9DLEtBQVAsQ0FBYyxZQUFXRixHQUFHLENBQUNHLE1BQU8sZUFBY0gsR0FBRyxDQUFDSSxNQUFPLElBQTdEOztBQUNBLFlBQU0sSUFBSUMsS0FBSixDQUFXLDJCQUEwQkwsR0FBRyxDQUFDTSxPQUFRLEdBQWpELENBQU47QUFDRDtBQUNGOztBQUVlLFFBQVZPLFVBQVUsQ0FBRWYsR0FBRixFQUFPO0FBQ3JCLFVBQU0sS0FBS1ksT0FBTCxDQUFhWixHQUFiLENBQU47QUFDRDs7QUFFbUIsUUFBZGdCLGNBQWMsQ0FBRVAsUUFBRixFQUFZO0FBQzlCLFFBQUlRLFdBQVcsR0FBRyxDQUFFLFVBQUYsRUFBYyxXQUFkLEVBQTJCLE1BQTNCLEVBQWtDLEtBQUt2QixJQUF2QyxFQUE4QyxhQUE5QyxFQUE0RGUsUUFBNUQsQ0FBbEI7O0FBQ0EsUUFBSTtBQUNGLFVBQUk7QUFBQ0osUUFBQUE7QUFBRCxVQUFXLE1BQU0sd0JBQUssS0FBS1YsR0FBVixFQUFlc0IsV0FBZixDQUFyQjtBQUNBLGFBQVFaLE1BQU0sSUFBS0EsTUFBTSxDQUFDYSxRQUFQLENBQWdCLE1BQWhCLENBQW5CO0FBQ0QsS0FIRCxDQUdFLE9BQU9oQixHQUFQLEVBQVk7QUFFWixVQUFJQSxHQUFHLENBQUNpQixJQUFKLEtBQWEsR0FBakIsRUFBc0I7QUFDcEJoQix3QkFBT0MsS0FBUCxDQUFjLG1DQUFrQ0YsR0FBRyxDQUFDTSxPQUFRLEdBQTVEO0FBQ0Q7O0FBQ0QsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUE5RGE7O2VBaUVEaEIsUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5cbmNvbnN0IElPU0RFUExPWV9QQVRIID0gYGlvcy1kZXBsb3lgO1xuXG5jbGFzcyBJT1NEZXBsb3kge1xuXG4gIGNvbnN0cnVjdG9yICh1ZGlkKSB7XG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgICB0aGlzLmNtZCA9IElPU0RFUExPWV9QQVRIOyAvLyB0aGlzLmNtZCBpcyBpbiBhY2NvcmRhbmNlIHdpdGggaURldmljZVxuICB9XG5cbiAgYXN5bmMgY2hlY2tTdGF0dXMgKCkge1xuICAgIC8vIG1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBoYXZlIHRoZSBwcm9ncmFtXG4gICAgYXdhaXQgZnMud2hpY2godGhpcy5jbWQpO1xuICB9XG5cbiAgYXN5bmMgbGF1bmNoQXBwIChhcHApIHtcbiAgICBsZXQgcmVtb3ZlID0gW2AtLWp1c3RsYXVuY2hgLCBgLS1uby13aWZpYCwgYC0tbm9pbnN0YWxsYCwgdGhpcy51ZGlkLCBgLS1idW5kbGVgLCBhcHBdO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBleGVjKHRoaXMuY21kLCByZW1vdmUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBTdGRvdXQ6ICcke2Vyci5zdGRvdXR9Jy4gU3RkZXJyOiAnJHtlcnIuc3RkZXJyfScuYCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCByZW1vdmUgYXBwOiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlIChidW5kbGVpZCkge1xuICAgIGxldCByZW1vdmUgPSBbYC0tdW5pbnN0YWxsX29ubHlgLCBgLS1uby13aWZpYCwgYC0taWRgLCB0aGlzLnVkaWQsIGAtLWJ1bmRsZV9pZGAsIGJ1bmRsZWlkXTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZXhlYyh0aGlzLmNtZCwgcmVtb3ZlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgU3Rkb3V0OiAnJHtlcnIuc3Rkb3V0fScuIFN0ZGVycjogJyR7ZXJyLnN0ZGVycn0nLmApO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcmVtb3ZlIGFwcDogJyR7ZXJyLm1lc3NhZ2V9J2ApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUFwcCAoYnVuZGxlSWQpIHtcbiAgICBhd2FpdCB0aGlzLnJlbW92ZShidW5kbGVJZCk7XG4gIH1cblxuICBhc3luYyBpbnN0YWxsIChhcHApIHtcbiAgICBjb25zdCBhcmdzID0gW2AtLWp1c3RsYXVuY2hgLCBgLS1uby13aWZpYCwgYC0tdW5pbnN0YWxsYCwgYC0taWRgLCB0aGlzLnVkaWQsIGAtLWJ1bmRsZWAsIGFwcF07XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwoNSwgNTAwLCBleGVjLCB0aGlzLmNtZCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYFN0ZG91dDogJyR7ZXJyLnN0ZG91dH0nLiBTdGRlcnI6ICcke2Vyci5zdGRlcnJ9Jy5gKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGluc3RhbGwgYXBwOiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgaW5zdGFsbEFwcCAoYXBwKSB7XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwcCk7XG4gIH1cblxuICBhc3luYyBpc0FwcEluc3RhbGxlZCAoYnVuZGxlaWQpIHtcbiAgICBsZXQgaXNJbnN0YWxsZWQgPSBbYC0tZXhpc3RzYCwgYC0tbm8td2lmaWAsIGAtLWlkYCwgdGhpcy51ZGlkLCBgLS1idW5kbGVfaWRgLCBidW5kbGVpZF07XG4gICAgdHJ5IHtcbiAgICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5jbWQsIGlzSW5zdGFsbGVkKTtcbiAgICAgIHJldHVybiAoc3Rkb3V0ICYmIChzdGRvdXQuaW5jbHVkZXMoJ3RydWUnKSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gZXJyb3IgMjU1IGlzIGp1c3QgaW9zLWRlcGxveSdzIHdheSBvZiBzYXlpbmcgaXQgaXMgbm90IGluc3RhbGxlZFxuICAgICAgaWYgKGVyci5jb2RlICE9PSAyNTUpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBFcnJvciBjaGVja2luZyBpbnN0YWxsIHN0YXR1czogJyR7ZXJyLm1lc3NhZ2V9J2ApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJT1NEZXBsb3k7XG4iXSwiZmlsZSI6ImxpYi9pb3MtZGVwbG95LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
