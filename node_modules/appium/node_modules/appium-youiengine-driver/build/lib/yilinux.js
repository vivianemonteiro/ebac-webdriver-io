"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _basedevice = _interopRequireDefault(require("./basedevice"));

class YiLinux extends _basedevice.default {
  constructor() {
    super();
    this.caps;
    this.shell;
  }

  async closeApp() {
    _logger.default.info(`YiLinux: Close App`);

    let process_name = this.caps.app.substring(this.caps.app.lastIndexOf('/') + 1);
    await this.shell.exec(`killall ${process_name}`);
  }

  async endSession() {
    _logger.default.info(`YiLinux: End Session`);

    await this.closeApp();
  }

  async launchApp() {
    _logger.default.info(`YiLinux: Launch app`);

    let spawn = require('child_process').spawn,
        ls = await spawn(this.caps.app);

    ls.stdout.on('data', function (data) {
      if (data != null) {
        _logger.default.debug(` Log Output: ${data.toString()}`);
      }
    });
    ls.stderr.on('data', function (data) {
      if (data != null) {
        _logger.default.debug(` Log Error: ${data.toString()}`);
      }
    });
    ls.on('exit', function (code) {
      if (code != null) {
        _logger.default.debug(`Application exited with code ${code.toString()}`);
      }
    });
  }

  async startSession(caps) {
    _logger.default.info(`YiLinux: Start Session`);

    this.caps = caps;
    this.shell = require('shelljs');
    await this.closeApp();
    await this.launchApp();
  }

}

var _default = YiLinux;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi95aWxpbnV4LmpzIl0sIm5hbWVzIjpbIllpTGludXgiLCJCYXNlRGV2aWNlIiwiY29uc3RydWN0b3IiLCJjYXBzIiwic2hlbGwiLCJjbG9zZUFwcCIsImxvZ2dlciIsImluZm8iLCJwcm9jZXNzX25hbWUiLCJhcHAiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsImV4ZWMiLCJlbmRTZXNzaW9uIiwibGF1bmNoQXBwIiwic3Bhd24iLCJyZXF1aXJlIiwibHMiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJkZWJ1ZyIsInRvU3RyaW5nIiwic3RkZXJyIiwiY29kZSIsInN0YXJ0U2Vzc2lvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxPQUFOLFNBQXNCQyxtQkFBdEIsQ0FBaUM7QUFDL0JDLEVBQUFBLFdBQVcsR0FBSTtBQUNiO0FBQ0EsU0FBS0MsSUFBTDtBQUNBLFNBQUtDLEtBQUw7QUFDRDs7QUFFYSxRQUFSQyxRQUFRLEdBQUk7QUFDaEJDLG9CQUFPQyxJQUFQLENBQWEsb0JBQWI7O0FBQ0EsUUFBSUMsWUFBWSxHQUFHLEtBQUtMLElBQUwsQ0FBVU0sR0FBVixDQUFjQyxTQUFkLENBQ2pCLEtBQUtQLElBQUwsQ0FBVU0sR0FBVixDQUFjRSxXQUFkLENBQTBCLEdBQTFCLElBQWlDLENBRGhCLENBQW5CO0FBR0EsVUFBTSxLQUFLUCxLQUFMLENBQVdRLElBQVgsQ0FBaUIsV0FBVUosWUFBYSxFQUF4QyxDQUFOO0FBQ0Q7O0FBRWUsUUFBVkssVUFBVSxHQUFJO0FBQ2xCUCxvQkFBT0MsSUFBUCxDQUFhLHNCQUFiOztBQUNBLFVBQU0sS0FBS0YsUUFBTCxFQUFOO0FBQ0Q7O0FBRWMsUUFBVFMsU0FBUyxHQUFJO0FBQ2pCUixvQkFBT0MsSUFBUCxDQUFhLHFCQUFiOztBQUNBLFFBQUlRLEtBQUssR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBUCxDQUF5QkQsS0FBckM7QUFBQSxRQUNJRSxFQUFFLEdBQUcsTUFBTUYsS0FBSyxDQUFDLEtBQUtaLElBQUwsQ0FBVU0sR0FBWCxDQURwQjs7QUFJQVEsSUFBQUEsRUFBRSxDQUFDQyxNQUFILENBQVVDLEVBQVYsQ0FBYSxNQUFiLEVBQXFCLFVBQVVDLElBQVYsRUFBZ0I7QUFDbkMsVUFBSUEsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFDaEJkLHdCQUFPZSxLQUFQLENBQWMsZ0JBQWVELElBQUksQ0FBQ0UsUUFBTCxFQUFnQixFQUE3QztBQUNEO0FBQ0YsS0FKRDtBQU9BTCxJQUFBQSxFQUFFLENBQUNNLE1BQUgsQ0FBVUosRUFBVixDQUFhLE1BQWIsRUFBcUIsVUFBVUMsSUFBVixFQUFnQjtBQUNuQyxVQUFJQSxJQUFJLElBQUksSUFBWixFQUFrQjtBQUNoQmQsd0JBQU9lLEtBQVAsQ0FBYyxlQUFjRCxJQUFJLENBQUNFLFFBQUwsRUFBZ0IsRUFBNUM7QUFDRDtBQUNGLEtBSkQ7QUFNQUwsSUFBQUEsRUFBRSxDQUFDRSxFQUFILENBQU0sTUFBTixFQUFjLFVBQVVLLElBQVYsRUFBZ0I7QUFDNUIsVUFBSUEsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFDaEJsQix3QkFBT2UsS0FBUCxDQUFjLGdDQUErQkcsSUFBSSxDQUFDRixRQUFMLEVBQWdCLEVBQTdEO0FBQ0Q7QUFDRixLQUpEO0FBS0Q7O0FBRWlCLFFBQVpHLFlBQVksQ0FBRXRCLElBQUYsRUFBUTtBQUN4Qkcsb0JBQU9DLElBQVAsQ0FBYSx3QkFBYjs7QUFDQSxTQUFLSixJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxLQUFMLEdBQWFZLE9BQU8sQ0FBQyxTQUFELENBQXBCO0FBQ0EsVUFBTSxLQUFLWCxRQUFMLEVBQU47QUFDQSxVQUFNLEtBQUtTLFNBQUwsRUFBTjtBQUNEOztBQXBEOEI7O2VBc0RsQmQsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IEJhc2VEZXZpY2UgZnJvbSAnLi9iYXNlZGV2aWNlJztcblxuY2xhc3MgWWlMaW51eCBleHRlbmRzIEJhc2VEZXZpY2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNhcHM7XG4gICAgdGhpcy5zaGVsbDtcbiAgfVxuXG4gIGFzeW5jIGNsb3NlQXBwICgpIHtcbiAgICBsb2dnZXIuaW5mbyhgWWlMaW51eDogQ2xvc2UgQXBwYCk7XG4gICAgbGV0IHByb2Nlc3NfbmFtZSA9IHRoaXMuY2Fwcy5hcHAuc3Vic3RyaW5nKFxuICAgICAgdGhpcy5jYXBzLmFwcC5sYXN0SW5kZXhPZignLycpICsgMVxuICAgICk7XG4gICAgYXdhaXQgdGhpcy5zaGVsbC5leGVjKGBraWxsYWxsICR7cHJvY2Vzc19uYW1lfWApO1xuICB9XG5cbiAgYXN5bmMgZW5kU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYFlpTGludXg6IEVuZCBTZXNzaW9uYCk7XG4gICAgYXdhaXQgdGhpcy5jbG9zZUFwcCgpO1xuICB9XG5cbiAgYXN5bmMgbGF1bmNoQXBwICgpIHtcbiAgICBsb2dnZXIuaW5mbyhgWWlMaW51eDogTGF1bmNoIGFwcGApO1xuICAgIGxldCBzcGF3biA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5zcGF3bixcbiAgICAgICAgbHMgPSBhd2FpdCBzcGF3bih0aGlzLmNhcHMuYXBwKTtcblxuICAgIC8vUHJpbnQgbG9ncyAoU1RET1VUKVxuICAgIGxzLnN0ZG91dC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgIExvZyBPdXRwdXQ6ICR7ZGF0YS50b1N0cmluZygpfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy9QcmludCBsb2dzIChTVERFUlIpXG4gICAgbHMuc3RkZXJyLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGAgTG9nIEVycm9yOiAke2RhdGEudG9TdHJpbmcoKX1gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxzLm9uKCdleGl0JywgZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlICE9IG51bGwpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBBcHBsaWNhdGlvbiBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZS50b1N0cmluZygpfWApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oYFlpTGludXg6IFN0YXJ0IFNlc3Npb25gKTtcbiAgICB0aGlzLmNhcHMgPSBjYXBzO1xuICAgIHRoaXMuc2hlbGwgPSByZXF1aXJlKCdzaGVsbGpzJyk7XG4gICAgYXdhaXQgdGhpcy5jbG9zZUFwcCgpO1xuICAgIGF3YWl0IHRoaXMubGF1bmNoQXBwKCk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFlpTGludXg7XG4iXSwiZmlsZSI6ImxpYi95aWxpbnV4LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
