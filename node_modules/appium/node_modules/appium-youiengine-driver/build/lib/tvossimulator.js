"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _appiumIosSimulator = require("appium-ios-simulator");

var simctl = _interopRequireWildcard(require("node-simctl"));

var _basedevice = _interopRequireDefault(require("./basedevice"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class TvOsSimulator extends _basedevice.default {
  constructor() {
    super();
    this.bundleId;
    this.caps;
    this.shell;
    this.sim;
  }

  execScript(script) {
    _logger.default.debug(`tvOS simulator: execScript`);

    script += ` --id ${this.caps.udid}`;

    try {
      return this.shell.exec(script);
    } catch (err) {
      _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

      throw new Error(`Could not run '${script}': '${err.message}'`);
    }
  }

  async closeApp() {
    _logger.default.info(`tvOS simulator: Close app`);

    await simctl.terminate(this.caps.udid, this.bundleId);
  }

  async endSession() {
    _logger.default.info(`tvOS simulator: End Session`);

    if (this.caps.fullReset) {
      await this.removeApp(this.bundleId);
    } else {
      await this.closeApp();
    }
  }

  async installApp(appPath) {
    _logger.default.info(`tvOS simulator: Installing and launching app`);

    this.bundleId = this.shell.exec(`osascript -e 'id of app "${appPath}"'`).replace(/(\r\n|\n|\r)/gm, '');
    let retry = false;

    do {
      try {
        await this.sim.installApp(appPath);
        retry = false;
      } catch (err) {
        retry = true;
      }
    } while (retry === true);

    await simctl.launch(this.caps.udid, this.bundleId);
  }

  async isAppInstalled(bundleId) {
    _logger.default.info(`tvOS simulator: Check if App is installed`);

    return await this.sim.isAppInstalled(bundleId);
  }

  async launchApp() {
    _logger.default.info(`tvOS simulator: Launching app`);

    await simctl.launch(this.caps.udid, this.bundleId);
  }

  async removeApp(bundleId) {
    _logger.default.info(`tvOS simulator: Deleting app`);

    await this.sim.removeApp(bundleId);
  }

  async startSession(caps) {
    _logger.default.info(`tvOS simulator: Start Session`);

    this.caps = caps;
    this.shell = require('shelljs');
    this.sim = await (0, _appiumIosSimulator.getSimulator)(this.caps.udid);
    await this.sim.run({
      startupTimeout: 10000
    });
    await (0, _asyncbox.sleep)(4000);
    this.bundleId = this.shell.exec(`osascript -e 'id of app "${caps.app}"'`).replace(/(\r\n|\n|\r)/gm, '');
    let devAppInstalled = await this.isAppInstalled(this.bundleId);

    if (caps.fullReset || !devAppInstalled) {
      await this.installApp(caps.app);
    } else {
      await this.launchApp(caps.app);
    }
  }

}

var _default = TvOsSimulator;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90dm9zc2ltdWxhdG9yLmpzIl0sIm5hbWVzIjpbIlR2T3NTaW11bGF0b3IiLCJCYXNlRGV2aWNlIiwiY29uc3RydWN0b3IiLCJidW5kbGVJZCIsImNhcHMiLCJzaGVsbCIsInNpbSIsImV4ZWNTY3JpcHQiLCJzY3JpcHQiLCJsb2dnZXIiLCJkZWJ1ZyIsInVkaWQiLCJleGVjIiwiZXJyIiwic3Rkb3V0Iiwic3RkZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiY2xvc2VBcHAiLCJpbmZvIiwic2ltY3RsIiwidGVybWluYXRlIiwiZW5kU2Vzc2lvbiIsImZ1bGxSZXNldCIsInJlbW92ZUFwcCIsImluc3RhbGxBcHAiLCJhcHBQYXRoIiwicmVwbGFjZSIsInJldHJ5IiwibGF1bmNoIiwiaXNBcHBJbnN0YWxsZWQiLCJsYXVuY2hBcHAiLCJzdGFydFNlc3Npb24iLCJyZXF1aXJlIiwicnVuIiwic3RhcnR1cFRpbWVvdXQiLCJhcHAiLCJkZXZBcHBJbnN0YWxsZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLGFBQU4sU0FBNEJDLG1CQUE1QixDQUF1QztBQUVyQ0MsRUFBQUEsV0FBVyxHQUFJO0FBQ2I7QUFDQSxTQUFLQyxRQUFMO0FBQ0EsU0FBS0MsSUFBTDtBQUNBLFNBQUtDLEtBQUw7QUFDQSxTQUFLQyxHQUFMO0FBQ0Q7O0FBRURDLEVBQUFBLFVBQVUsQ0FBRUMsTUFBRixFQUFVO0FBQ2xCQyxvQkFBT0MsS0FBUCxDQUFjLDRCQUFkOztBQUNBRixJQUFBQSxNQUFNLElBQUssU0FBUSxLQUFLSixJQUFMLENBQVVPLElBQUssRUFBbEM7O0FBQ0EsUUFBSTtBQUNGLGFBQU8sS0FBS04sS0FBTCxDQUFXTyxJQUFYLENBQWdCSixNQUFoQixDQUFQO0FBQ0QsS0FGRCxDQUVFLE9BQU9LLEdBQVAsRUFBWTtBQUNaSixzQkFBT0MsS0FBUCxDQUFjLFlBQVdHLEdBQUcsQ0FBQ0MsTUFB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Q0FBNUI7O0FBQ0EsUUFBSUMsSUFBSSxDQUFDbUIsU0FBTCxJQUFrQixDQUFDYyxlQUF2QixFQUF3QztBQUN0QyxZQUFNLEtBQUtaLFVBQUwsQ0FBZ0JyQixJQUFJLENBQUNnQyxHQUFyQixDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTSxLQUFLTCxTQUFMLENBQWUzQixJQUFJLENBQUNnQyxHQUFwQixDQUFOO0FBQ0Q7QUFDRjs7QUFyRm9DOztlQXVGeEJwQyxhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IGdldFNpbXVsYXRvciB9IGZyb20gJ2FwcGl1bS1pb3Mtc2ltdWxhdG9yJztcbmltcG9ydCAqIGFzIHNpbWN0bCBmcm9tICdub2RlLXNpbWN0bCc7XG5pbXBvcnQgQmFzZURldmljZSBmcm9tICcuL2Jhc2VkZXZpY2UnO1xuXG5jbGFzcyBUdk9zU2ltdWxhdG9yIGV4dGVuZHMgQmFzZURldmljZSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5idW5kbGVJZDtcbiAgICB0aGlzLmNhcHM7XG4gICAgdGhpcy5zaGVsbDtcbiAgICB0aGlzLnNpbTtcbiAgfVxuXG4gIGV4ZWNTY3JpcHQgKHNjcmlwdCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgdHZPUyBzaW11bGF0b3I6IGV4ZWNTY3JpcHRgKTtcbiAgICBzY3JpcHQgKz0gYCAtLWlkICR7dGhpcy5jYXBzLnVkaWR9YDtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hlbGwuZXhlYyhzY3JpcHQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBTdGRvdXQ6ICcke2Vyci5zdGRvdXR9Jy4gU3RkZXJyOiAnJHtlcnIuc3RkZXJyfScuYCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBydW4gJyR7c2NyaXB0fSc6ICcke2Vyci5tZXNzYWdlfSdgKTtcbiAgICB9XG4gIH1cblxuXG4gIGFzeW5jIGNsb3NlQXBwICgpIHtcbiAgICBsb2dnZXIuaW5mbyhgdHZPUyBzaW11bGF0b3I6IENsb3NlIGFwcGApO1xuICAgIGF3YWl0IHNpbWN0bC50ZXJtaW5hdGUodGhpcy5jYXBzLnVkaWQsIHRoaXMuYnVuZGxlSWQpO1xuICB9XG5cbiAgYXN5bmMgZW5kU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYHR2T1Mgc2ltdWxhdG9yOiBFbmQgU2Vzc2lvbmApO1xuICAgIC8vIElmIG11bHRpcGxlIGFwcHMgd2l0aCBvdXIgc29ja2V0IGFyZSBpbnN0YWxsZWQsIGl0IHdpbGwgY29ubmVjdCB0byB0aGUgZmlyc3QgYXBwIGluc3RhbGxlZC5cbiAgICAvLyBGb3IgdGhpcyByZWFzb24sIGV2ZXJ5IGFwcCBzaG91bGQgYmUgdW5pbnN0YWxsZWQgYWZ0ZXIgcnVubmluZy5cbiAgICBpZiAodGhpcy5jYXBzLmZ1bGxSZXNldCkge1xuICAgICAgYXdhaXQgdGhpcy5yZW1vdmVBcHAodGhpcy5idW5kbGVJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMuY2xvc2VBcHAoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpbnN0YWxsQXBwIChhcHBQYXRoKSB7XG4gICAgbG9nZ2VyLmluZm8oYHR2T1Mgc2ltdWxhdG9yOiBJbnN0YWxsaW5nIGFuZCBsYXVuY2hpbmcgYXBwYCk7XG4gICAgdGhpcy5idW5kbGVJZCA9IHRoaXMuc2hlbGwuZXhlYyhgb3Nhc2NyaXB0IC1lICdpZCBvZiBhcHAgXCIke2FwcFBhdGh9XCInYCkucmVwbGFjZSgvKFxcclxcbnxcXG58XFxyKS9nbSwgJycpO1xuICAgIGxldCByZXRyeSA9IGZhbHNlO1xuICAgIGRvIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2ltLmluc3RhbGxBcHAoYXBwUGF0aCk7XG4gICAgICAgIHJldHJ5ID0gZmFsc2U7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0cnkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAocmV0cnkgPT09IHRydWUpO1xuICAgIGF3YWl0IHNpbWN0bC5sYXVuY2godGhpcy5jYXBzLnVkaWQsIHRoaXMuYnVuZGxlSWQpO1xuICB9XG5cbiAgYXN5bmMgaXNBcHBJbnN0YWxsZWQgKGJ1bmRsZUlkKSB7XG4gICAgbG9nZ2VyLmluZm8oYHR2T1Mgc2ltdWxhdG9yOiBDaGVjayBpZiBBcHAgaXMgaW5zdGFsbGVkYCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2ltLmlzQXBwSW5zdGFsbGVkKGJ1bmRsZUlkKTtcbiAgfVxuXG4gIGFzeW5jIGxhdW5jaEFwcCAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYHR2T1Mgc2ltdWxhdG9yOiBMYXVuY2hpbmcgYXBwYCk7XG4gICAgYXdhaXQgc2ltY3RsLmxhdW5jaCh0aGlzLmNhcHMudWRpZCwgdGhpcy5idW5kbGVJZCk7XG4gIH1cblxuICBhc3luYyByZW1vdmVBcHAgKGJ1bmRsZUlkKSB7XG4gICAgbG9nZ2VyLmluZm8oYHR2T1Mgc2ltdWxhdG9yOiBEZWxldGluZyBhcHBgKTtcbiAgICBhd2FpdCB0aGlzLnNpbS5yZW1vdmVBcHAoYnVuZGxlSWQpO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oYHR2T1Mgc2ltdWxhdG9yOiBTdGFydCBTZXNzaW9uYCk7XG4gICAgdGhpcy5jYXBzID0gY2FwcztcbiAgICB0aGlzLnNoZWxsID0gcmVxdWlyZSgnc2hlbGxqcycpO1xuXG4gICAgdGhpcy5zaW0gPSBhd2FpdCBnZXRTaW11bGF0b3IodGhpcy5jYXBzLnVkaWQpO1xuICAgIGF3YWl0IHRoaXMuc2ltLnJ1bih7c3RhcnR1cFRpbWVvdXQ6IDEwMDAwfSk7XG4gICAgYXdhaXQgc2xlZXAoNDAwMCk7XG4gICAgLy8gQ2hlY2sgaWYgYXBwIGlzIGluc3RhbGxlZFxuICAgIHRoaXMuYnVuZGxlSWQgPSB0aGlzLnNoZWxsLmV4ZWMoYG9zYXNjcmlwdCAtZSAnaWQgb2YgYXBwIFwiJHtjYXBzLmFwcH1cIidgKS5yZXBsYWNlKC8oXFxyXFxufFxcbnxcXHIpL2dtLCAnJyk7XG4gICAgbGV0IGRldkFwcEluc3RhbGxlZCA9IGF3YWl0IHRoaXMuaXNBcHBJbnN0YWxsZWQodGhpcy5idW5kbGVJZCk7XG4gICAgaWYgKGNhcHMuZnVsbFJlc2V0IHx8ICFkZXZBcHBJbnN0YWxsZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuaW5zdGFsbEFwcChjYXBzLmFwcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMubGF1bmNoQXBwKGNhcHMuYXBwKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFR2T3NTaW11bGF0b3I7XG4iXSwiZmlsZSI6ImxpYi90dm9zc2ltdWxhdG9yLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
