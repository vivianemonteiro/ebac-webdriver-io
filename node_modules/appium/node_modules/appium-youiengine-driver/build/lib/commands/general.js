"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _utils = require("../utils");

let commands = {};

commands.installApp = async function (appPath) {
  await this.device.installApp(appPath);
};

commands.removeApp = async function (bundleId) {
  await this.device.removeApp(bundleId);
};

commands.closeApp = async function () {
  await this.device.closeApp();
};

commands.launchApp = async function () {
  await this.device.launchApp();
};

commands.isAppInstalled = async function (bundleId) {
  return await this.device.isAppInstalled(bundleId);
};

commands.yiCloseApp = async function () {
  let commandObject = {
    name: 'CloseApp'
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);

  try {
    JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from CloseApp');
  }
};

commands.getPageSource = async function () {
  let source;
  let commandObject = {
    name: 'GetSRC'
  };
  let commandJSON = JSON.stringify(commandObject);
  source = await this.executeSocketCommand(commandJSON);

  if (source) {
    return source.toString();
  } else {
    throw new Error('Bad response from getTreeForXML');
  }
};

commands.getWindowSize = async function () {
  let commandObject = {
    name: `getWindowSize`
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from window_size');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_WINDOW) {
    throw new Error('Could not find the requested surface');
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new Error('The requested command is not supported in the version of You.i Engine currently running.');
  }

  return result.value;
};

commands.getWindowRect = async function getWindowRect() {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.hideKeyboard = async function () {
  let commandObject = {
    name: `hideKeyboard`
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from hideKeyboard');
  }

  return result.value;
};

commands.isKeyboardShown = async function () {
  let commandObject = {
    name: `isKeyboardShown`
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from isKeyboardShown');
  }

  return result.value;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaW5zdGFsbEFwcCIsImFwcFBhdGgiLCJkZXZpY2UiLCJyZW1vdmVBcHAiLCJidW5kbGVJZCIsImNsb3NlQXBwIiwibGF1bmNoQXBwIiwiaXNBcHBJbnN0YWxsZWQiLCJ5aUNsb3NlQXBwIiwiY29tbWFuZE9iamVjdCIsIm5hbWUiLCJjb21tYW5kSlNPTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiZXhlY3V0ZVNvY2tldENvbW1hbmQiLCJwYXJzZSIsImUiLCJFcnJvciIsImdldFBhZ2VTb3VyY2UiLCJzb3VyY2UiLCJ0b1N0cmluZyIsImdldFdpbmRvd1NpemUiLCJyZXN1bHQiLCJzdGF0dXMiLCJ5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzIiwiV0VCRFJJVkVSX05PX1NVQ0hfV0lORE9XIiwiV0VCRFJJVkVSX1VOS05PV05fQ09NTUFORCIsInZhbHVlIiwiZ2V0V2luZG93UmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJoaWRlS2V5Ym9hcmQiLCJpc0tleWJvYXJkU2hvd24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmOztBQUVBQSxRQUFRLENBQUNDLFVBQVQsR0FBc0IsZ0JBQWdCQyxPQUFoQixFQUF5QjtBQUM3QyxRQUFNLEtBQUtDLE1BQUwsQ0FBWUYsVUFBWixDQUF1QkMsT0FBdkIsQ0FBTjtBQUNELENBRkQ7O0FBSUFGLFFBQVEsQ0FBQ0ksU0FBVCxHQUFxQixnQkFBZ0JDLFFBQWhCLEVBQTBCO0FBQzdDLFFBQU0sS0FBS0YsTUFBTCxDQUFZQyxTQUFaLENBQXNCQyxRQUF0QixDQUFOO0FBQ0QsQ0FGRDs7QUFJQUwsUUFBUSxDQUFDTSxRQUFULEdBQW9CLGtCQUFrQjtBQUNwQyxRQUFNLEtBQUtILE1BQUwsQ0FBWUcsUUFBWixFQUFOO0FBQ0QsQ0FGRDs7QUFJQU4sUUFBUSxDQUFDTyxT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SUMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosYUFBZixDQUFsQjtBQUVBLE1BQUlLLElBQUksR0FBRyxNQUFNLEtBQUtDLG9CQUFMLENBQTBCSixXQUExQixDQUFqQjtBQUVBLE1BQUlZLE1BQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxNQUFNLEdBQUdYLElBQUksQ0FBQ0ksS0FBTCxDQUFXRixJQUFYLENBQVQ7QUFDRCxHQUZELENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJQyxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEOztBQUNELFNBQU9LLE1BQU0sQ0FBQ0ssS0FBZDtBQUNELENBaEJEOztBQWtCQTdCLFFBQVEsQ0FBQ29DLGVBQVQsR0FBMkIsa0JBQWtCO0FBRTNDLE1BQUkxQixhQUFhLEdBQUc7QUFDbEJDLElBQUFBLElBQUksRUFBRztBQURXLEdBQXBCO0FBR0EsTUFBSUMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosYUFBZixDQUFsQjtBQUVBLE1BQUlLLElBQUksR0FBRyxNQUFNLEtBQUtDLG9CQUFMLENBQTBCSixXQUExQixDQUFqQjtBQUVBLE1BQUlZLE1BQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxNQUFNLEdBQUdYLElBQUksQ0FBQ0ksS0FBTCxDQUFXRixJQUFYLENBQVQ7QUFDRCxHQUZELENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJQyxLQUFKLENBQVUsbUNBQVYsQ0FBTjtBQUNEOztBQUNELFNBQU9LLE1BQU0sQ0FBQ0ssS0FBZDtBQUNELENBaEJEOztlQWtCZTdCLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMuaW5zdGFsbEFwcCA9IGFzeW5jIGZ1bmN0aW9uIChhcHBQYXRoKSB7XG4gIGF3YWl0IHRoaXMuZGV2aWNlLmluc3RhbGxBcHAoYXBwUGF0aCk7XG59O1xuXG5jb21tYW5kcy5yZW1vdmVBcHAgPSBhc3luYyBmdW5jdGlvbiAoYnVuZGxlSWQpIHtcbiAgYXdhaXQgdGhpcy5kZXZpY2UucmVtb3ZlQXBwKGJ1bmRsZUlkKTtcbn07XG5cbmNvbW1hbmRzLmNsb3NlQXBwID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBhd2FpdCB0aGlzLmRldmljZS5jbG9zZUFwcCgpO1xufTtcblxuY29tbWFuZHMubGF1bmNoQXBwID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBhd2FpdCB0aGlzLmRldmljZS5sYXVuY2hBcHAoKTtcbn07XG5cbmNvbW1hbmRzLmlzQXBwSW5zdGFsbGVkID0gYXN5bmMgZnVuY3Rpb24gKGJ1bmRsZUlkKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLmRldmljZS5pc0FwcEluc3RhbGxlZChidW5kbGVJZCk7XG59O1xuXG5jb21tYW5kcy55aUNsb3NlQXBwID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiAnQ2xvc2VBcHAnXG4gIH07XG4gIGxldCBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuXG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG4gIHRyeSB7XG4gICAgSlNPTi5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFkIHJlc3BvbnNlIGZyb20gQ2xvc2VBcHAnKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0UGFnZVNvdXJjZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICBsZXQgc291cmNlO1xuXG4gIGxldCBjb21tYW5kT2JqZWN0ID0ge1xuICAgIG5hbWU6ICdHZXRTUkMnXG4gIH07XG4gIGxldCBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuXG4gIHNvdXJjZSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoY29tbWFuZEpTT04pO1xuXG4gIGlmIChzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIGJ1dCB3ZSd2ZSByZWNlaXZlZCBidWcgcmVwb3J0czsgdGhpcyB3aWxsIGhlbHAgdXMgdHJhY2sgZG93blxuICAgIC8vIHdoYXQncyB3cm9uZyBpbiBnZXRUcmVlRm9yWE1MXG4gICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgcmVzcG9uc2UgZnJvbSBnZXRUcmVlRm9yWE1MJyk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmdldFdpbmRvd1NpemUgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgbGV0IGNvbW1hbmRPYmplY3QgPSB7XG4gICAgbmFtZTogYGdldFdpbmRvd1NpemVgXG4gIH07XG4gIGxldCBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuXG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG5cbiAgbGV0IHJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgcmVzcG9uc2UgZnJvbSB3aW5kb3dfc2l6ZScpO1xuICB9XG5cbiAgLy8gZ2V0IHN0YXR1cyByZXR1cm5lZCBhbmQgaGFuZGxlIGVycm9ycyByZXR1cm5lZCBmcm9tIHNlcnZlclxuICBpZiAocmVzdWx0LnN0YXR1cyA9PT0geW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcy5XRUJEUklWRVJfTk9fU1VDSF9XSU5ET1cpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRoZSByZXF1ZXN0ZWQgc3VyZmFjZScpO1xuICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMuV0VCRFJJVkVSX1VOS05PV05fQ09NTUFORCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHJlcXVlc3RlZCBjb21tYW5kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIHZlcnNpb24gb2YgWW91LmkgRW5naW5lIGN1cnJlbnRseSBydW5uaW5nLicpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5jb21tYW5kcy5nZXRXaW5kb3dSZWN0ID0gYXN5bmMgZnVuY3Rpb24gZ2V0V2luZG93UmVjdCAoKSB7XG4gIGNvbnN0IHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfSA9IGF3YWl0IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcbn07XG5cbmNvbW1hbmRzLmhpZGVLZXlib2FyZCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICBsZXQgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiBgaGlkZUtleWJvYXJkYFxuICB9O1xuICBsZXQgY29tbWFuZEpTT04gPSBKU09OLnN0cmluZ2lmeShjb21tYW5kT2JqZWN0KTtcblxuICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoY29tbWFuZEpTT04pO1xuXG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFkIHJlc3BvbnNlIGZyb20gaGlkZUtleWJvYXJkJyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cbmNvbW1hbmRzLmlzS2V5Ym9hcmRTaG93biA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICBsZXQgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiBgaXNLZXlib2FyZFNob3duYFxuICB9O1xuICBsZXQgY29tbWFuZEpTT04gPSBKU09OLnN0cmluZ2lmeShjb21tYW5kT2JqZWN0KTtcblxuICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoY29tbWFuZEpTT04pO1xuXG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFkIHJlc3BvbnNlIGZyb20gaXNLZXlib2FyZFNob3duJyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
