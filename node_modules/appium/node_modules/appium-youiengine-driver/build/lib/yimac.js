"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _basedevice = _interopRequireDefault(require("./basedevice"));

class YiMac extends _basedevice.default {
  constructor() {
    super();
    this.caps;
    this.shell;
  }

  async closeApp() {
    _logger.default.info(`YiMac: Close App`);

    let process_name = this.caps.app.substring(this.caps.app.lastIndexOf('/') + 1);
    await this.shell.exec(`killall ${process_name}`);
  }

  async endSession() {
    _logger.default.info(`YiMac: End Session`);

    await this.closeApp();
  }

  async launchApp() {
    _logger.default.info(`YiMac: Launch app`);

    let spawn = require('child_process').spawn,
        ls = await spawn(this.caps.app);

    let showXcodeLog = this.caps.showXcodeLog;
    ls.stdout.on('data', function (data) {
      if (showXcodeLog === true && data != null) {
        _logger.default.debug(`Xcode Log Output: ${data.toString()}`);
      }
    });
    ls.stderr.on('data', function (data) {
      if (showXcodeLog === true && data != null) {
        _logger.default.debug(`Xcode Log Error: ${data.toString()}`);
      }
    });
    ls.on('exit', function (code) {
      if (showXcodeLog === true && code != null) {
        _logger.default.debug(`Application exited with code ${code.toString()}`);
      }
    });
  }

  async startSession(caps) {
    _logger.default.info(`YiMac: Start Session`);

    this.caps = caps;
    this.shell = require('shelljs');
    await this.closeApp();
    await this.launchApp();
  }

}

var _default = YiMac;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi95aW1hYy5qcyJdLCJuYW1lcyI6WyJZaU1hYyIsIkJhc2VEZXZpY2UiLCJjb25zdHJ1Y3RvciIsImNhcHMiLCJzaGVsbCIsImNsb3NlQXBwIiwibG9nZ2VyIiwiaW5mbyIsInByb2Nlc3NfbmFtZSIsImFwcCIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwiZXhlYyIsImVuZFNlc3Npb24iLCJsYXVuY2hBcHAiLCJzcGF3biIsInJlcXVpcmUiLCJscyIsInNob3dYY29kZUxvZyIsInN0ZG91dCIsIm9uIiwiZGF0YSIsImRlYnVnIiwidG9TdHJpbmciLCJzdGRlcnIiLCJjb2RlIiwic3RhcnRTZXNzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLEtBQU4sU0FBb0JDLG1CQUFwQixDQUErQjtBQUU3QkMsRUFBQUEsV0FBVyxHQUFJO0FBQ2I7QUFDQSxTQUFLQyxJQUFMO0FBQ0EsU0FBS0MsS0FBTDtBQUNEOztBQUVhLFFBQVJDLFFBQVEsR0FBSTtBQUNoQkMsb0JBQU9DLElBQVAsQ0FBYSxrQkFBYjs7QUFDQSxRQUFJQyxZQUFZLEdBQUcsS0FBS0wsSUFBTCxDQUFVTSxHQUFWLENBQWNDLFNBQWQsQ0FBd0IsS0FBS1AsSUFBTCxDQUFVTSxHQUFWLENBQWNFLFdBQWQsQ0FBMEIsR0FBMUIsSUFBaUMsQ0FBekQsQ0FBbkI7QUFDQSxVQUFNLEtBQUtQLEtBQUwsQ0FBV1EsSUFBWCxDQUFpQixXQUFVSixZQUFhLEVBQXhDLENBQU47QUFDRDs7QUFFZSxRQUFWSyxVQUFVLEdBQUk7QUFDbEJQLG9CQUFPQyxJQUFQLENBQWEsb0JBQWI7O0FBQ0EsVUFBTSxLQUFLRixRQUFMLEVBQU47QUFDRDs7QUFFYyxRQUFUUyxTQUFTLEdBQUk7QUFDakJSLG9CQUFPQyxJQUFQLENBQWEsbUJBQWI7O0FBQ0EsUUFBSVEsS0FBSyxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUFQLENBQXlCRCxLQUFyQztBQUFBLFFBQ0lFLEVBQUUsR0FBRyxNQUFNRixLQUFLLENBQUMsS0FBS1osSUFBTCxDQUFVTSxHQUFYLENBRHBCOztBQUdBLFFBQUlTLFlBQVksR0FBRyxLQUFLZixJQUFMLENBQVVlLFlBQTdCO0FBR0FELElBQUFBLEVBQUUsQ0FBQ0UsTUFBSCxDQUFVQyxFQUFWLENBQWEsTUFBYixFQUFxQixVQUFVQyxJQUFWLEVBQWdCO0FBQ25DLFVBQUlILFlBQVksS0FBSyxJQUFqQixJQUF5QkcsSUFBSSxJQUFJLElBQXJDLEVBQTJDO0FBQ3pDZix3QkFBT2dCLEtBQVAsQ0FBYyxxQkFBb0JELElBQUksQ0FBQ0UsUUFBTCxFQUFnQixFQUFsRDtBQUNEO0FBQ0YsS0FKRDtBQU9BTixJQUFBQSxFQUFFLENBQUNPLE1BQUgsQ0FBVUosRUFBVixDQUFhLE1BQWIsRUFBcUIsVUFBVUMsSUFBVixFQUFnQjtBQUNuQyxVQUFJSCxZQUFZLEtBQUssSUFBakIsSUFBeUJHLElBQUksSUFBSSxJQUFyQyxFQUEyQztBQUN6Q2Ysd0JBQU9nQixLQUFQLENBQWMsb0JBQW1CRCxJQUFJLENBQUNFLFFBQUwsRUFBZ0IsRUFBakQ7QUFDRDtBQUNGLEtBSkQ7QUFNQU4sSUFBQUEsRUFBRSxDQUFDRyxFQUFILENBQU0sTUFBTixFQUFjLFVBQVVLLElBQVYsRUFBZ0I7QUFDNUIsVUFBSVAsWUFBWSxLQUFLLElBQWpCLElBQXlCTyxJQUFJLElBQUksSUFBckMsRUFBMkM7QUFDekNuQix3QkFBT2dCLEtBQVAsQ0FBYyxnQ0FBK0JHLElBQUksQ0FBQ0YsUUFBTCxFQUFnQixFQUE3RDtBQUNEO0FBQ0YsS0FKRDtBQUtEOztBQUVpQixRQUFaRyxZQUFZLENBQUV2QixJQUFGLEVBQVE7QUFDeEJHLG9CQUFPQyxJQUFQLENBQWEsc0JBQWI7O0FBQ0EsU0FBS0osSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsS0FBTCxHQUFhWSxPQUFPLENBQUMsU0FBRCxDQUFwQjtBQUNBLFVBQU0sS0FBS1gsUUFBTCxFQUFOO0FBQ0EsVUFBTSxLQUFLUyxTQUFMLEVBQU47QUFDRDs7QUFyRDRCOztlQXdEaEJkLEsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBCYXNlRGV2aWNlIGZyb20gJy4vYmFzZWRldmljZSc7XG5cbmNsYXNzIFlpTWFjIGV4dGVuZHMgQmFzZURldmljZSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jYXBzO1xuICAgIHRoaXMuc2hlbGw7XG4gIH1cblxuICBhc3luYyBjbG9zZUFwcCAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYFlpTWFjOiBDbG9zZSBBcHBgKTtcbiAgICBsZXQgcHJvY2Vzc19uYW1lID0gdGhpcy5jYXBzLmFwcC5zdWJzdHJpbmcodGhpcy5jYXBzLmFwcC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgYXdhaXQgdGhpcy5zaGVsbC5leGVjKGBraWxsYWxsICR7cHJvY2Vzc19uYW1lfWApO1xuICB9XG5cbiAgYXN5bmMgZW5kU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYFlpTWFjOiBFbmQgU2Vzc2lvbmApO1xuICAgIGF3YWl0IHRoaXMuY2xvc2VBcHAoKTtcbiAgfVxuXG4gIGFzeW5jIGxhdW5jaEFwcCAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYFlpTWFjOiBMYXVuY2ggYXBwYCk7XG4gICAgbGV0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduLFxuICAgICAgICBscyA9IGF3YWl0IHNwYXduKHRoaXMuY2Fwcy5hcHApO1xuXG4gICAgbGV0IHNob3dYY29kZUxvZyA9IHRoaXMuY2Fwcy5zaG93WGNvZGVMb2c7IC8vRm9yIHNvbWUgcmVhc29uIHN0ZGVyciBzdGF0ZW1lbnQgc2VlcyB0aGlzLmNhcHMgYXMgdW5kZWZpbmVkPyFcblxuICAgIC8vUHJpbnQgWGNvZGUgbG9ncyAoU1RET1VUKVxuICAgIGxzLnN0ZG91dC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoc2hvd1hjb2RlTG9nID09PSB0cnVlICYmIGRhdGEgIT0gbnVsbCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoYFhjb2RlIExvZyBPdXRwdXQ6ICR7ZGF0YS50b1N0cmluZygpfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy9QcmludCBYY29kZSBsb2dzIChTVERFUlIpXG4gICAgbHMuc3RkZXJyLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChzaG93WGNvZGVMb2cgPT09IHRydWUgJiYgZGF0YSAhPSBudWxsKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgWGNvZGUgTG9nIEVycm9yOiAke2RhdGEudG9TdHJpbmcoKX1gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxzLm9uKCdleGl0JywgZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIGlmIChzaG93WGNvZGVMb2cgPT09IHRydWUgJiYgY29kZSAhPSBudWxsKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgQXBwbGljYXRpb24gZXhpdGVkIHdpdGggY29kZSAke2NvZGUudG9TdHJpbmcoKX1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0U2Vzc2lvbiAoY2Fwcykge1xuICAgIGxvZ2dlci5pbmZvKGBZaU1hYzogU3RhcnQgU2Vzc2lvbmApO1xuICAgIHRoaXMuY2FwcyA9IGNhcHM7XG4gICAgdGhpcy5zaGVsbCA9IHJlcXVpcmUoJ3NoZWxsanMnKTtcbiAgICBhd2FpdCB0aGlzLmNsb3NlQXBwKCk7XG4gICAgYXdhaXQgdGhpcy5sYXVuY2hBcHAoKTtcbiAgfVxuXG59XG5leHBvcnQgZGVmYXVsdCBZaU1hYztcbiJdLCJmaWxlIjoibGliL3lpbWFjLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
