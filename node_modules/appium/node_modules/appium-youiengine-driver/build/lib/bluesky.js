"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _basedevice = _interopRequireDefault(require("./basedevice"));

var _asyncbox = require("asyncbox");

class BlueSky extends _basedevice.default {
  constructor() {
    super();
    this.channelId;
    this.caps;
    this.shell;
  }

  async closeApp() {
    _logger.default.info(`BlueSky: Close App`);

    await this.shell.exec(`curl -d '' http://${this.caps.youiEngineAppAddress}:8060/keypress/home`);
    let activeApp;

    do {
      await (0, _asyncbox.sleep)(1000);
      activeApp = await this.shell.exec(`curl http://${this.caps.youiEngineAppAddress}:8060/query/active-app`);
    } while (!activeApp.includes(`<app>Roku</app>`));
  }

  async endSession() {
    _logger.default.info(`BlueSky: End Session`);

    if (this.caps.fullReset) {
      await this.removeApp(this.channelId);
    } else {
      await this.closeApp();
    }
  }

  async installApp(appPath) {
    _logger.default.info(`BlueSky: Installing and launching app`);

    if (await this.isAppInstalled(this.channelId)) {
      await this.removeApp(this.channelId);
    }

    await this.shell.exec(`curl -v -# -f -i --user '${this.caps.username}:${this.caps.password}' --digest --progress-bar -F 'mysubmit=Install' -F 'archive=@${appPath}' -F 'passwd=' http://${this.caps.youiEngineAppAddress}/plugin_install | grep '<font color' | sed 's/<font color=\'red\'>//' `);
    await this.launchApp();
  }

  async isAppInstalled(channelId = this.channelId) {
    _logger.default.info(`BlueSky: Check if App is installed`);

    let devAppInstalled = false;
    let installedApps = await this.shell.exec(`curl http://${this.caps.youiEngineAppAddress}:8060/query/apps`);

    if (installedApps.includes(`id="${channelId}"`)) {
      devAppInstalled = true;
    }

    return devAppInstalled;
  }

  async launchApp() {
    _logger.default.info(`BlueSky: Launch app`);

    let activeApp;

    do {
      await (0, _asyncbox.sleep)(5000);
      await this.shell.exec(`curl -d '' http://${this.caps.youiEngineAppAddress}:8060/launch/${this.channelId}`);
      activeApp = await this.shell.exec(`curl http://${this.caps.youiEngineAppAddress}:8060/query/active-app`);
    } while (!activeApp.includes(`id="${this.channelId}"`));
  }

  async removeApp(channelId) {
    _logger.default.info(`BlueSky: Delete app`);

    await this.shell.exec(`curl --user ${this.caps.username}:${this.caps.password} --digest --progress-bar --show-error -F 'mysubmit=Delete' -F 'archive=' --output /tmp/dev_server_out --write-out '%{http_code}' 'http://${this.caps.youiEngineAppAddress}/plugin_install'`);
  }

  async startSession(caps) {
    _logger.default.info(`BlueSky: Start Session`);

    this.caps = caps;
    this.shell = require('shelljs');
    this.channelId = 'dev';

    if (caps.channelId) {
      this.channelId = caps.channelId;
    }

    let devAppInstalled = await this.isAppInstalled(this.channelId);

    if (caps.fullReset || !devAppInstalled) {
      await this.installApp(caps.app);
    } else {
      await this.launchApp();
    }
  }

}

var _default = BlueSky;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
