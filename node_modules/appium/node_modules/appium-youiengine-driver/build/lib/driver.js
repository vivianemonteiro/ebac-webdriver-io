"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YouiEngineDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _logger = _interopRequireDefault(require("./logger"));

var _commands = _interopRequireDefault(require("./commands"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumUiautomator2Driver = _interopRequireDefault(require("appium-uiautomator2-driver"));

var _appiumXcuitestDriver = _interopRequireDefault(require("appium-xcuitest-driver"));

var _appiumMacDriver = _interopRequireDefault(require("appium-mac-driver"));

var _bluesky = _interopRequireDefault(require("./bluesky"));

var _tvos = _interopRequireDefault(require("./tvos"));

var _tvossimulator = _interopRequireDefault(require("./tvossimulator"));

var _yimac = _interopRequireDefault(require("./yimac"));

var _yilinux = _interopRequireDefault(require("./yilinux"));

const TO_PROXY_COMMON = ['background', 'closeApp', 'getLog', 'getLogTypes', 'getOrientation', 'getStrings', 'installApp', 'launchApp', 'lock', 'removeApp', 'setOrientation', 'getDeviceTime', 'queryAppState', 'getPerformanceData', 'getSupportedPerformanceDataTypes'];
const TO_PROXY_IOS_ONLY = ['mobileShake'];
const TO_PROXY_ANDROID_ONLY = ['getNetworkConnection', 'isAppInstalled', 'isLocked', 'longPressKeyCode', 'pressKeyCode', 'setNetworkConnection', 'toggleLocationServices', 'unlock'];
const TO_PROXY_IOS = TO_PROXY_IOS_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_ANDROID = TO_PROXY_ANDROID_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_MAC = TO_PROXY_COMMON;
const DEFAULT_MAX_RETRY_COUNT = 3;
const SOCKET_TIMEOUT = 120000;

class YouiEngineDriver extends _appiumBaseDriver.BaseDriver {
  resetYouiEngine() {
    this.ready = false;
    this.socket = null;
    this.locatorStrategies = ['id', 'name', 'class name', 'accessibility id'];
    this.proxydriver = null;
    this.proxyAllowList = '';
    this.proxyAll = false;
    this.device = null;
  }

  constructor(opts, shouldValidateCaps) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.default;
    this.settings = new _appiumBaseDriver.DeviceSettings({
      'TimeDilation': 1,
      'SourceTreeFilter': ''
    }, this.onSettingsUpdate.bind(this));
    this.resetYouiEngine();
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, false);
  }

  async createSession(caps) {
    try {
      let [sessionId] = await super.createSession(caps);
      this.maxRetryCount = caps.maxRetryCount || DEFAULT_MAX_RETRY_COUNT;

      if (caps.platformName !== null) {
        let appPlatform = caps.platformName.toLowerCase();

        switch (appPlatform) {
          case 'ios':
          case 'tvos':
            await this.startXCUITestSession(caps);
            break;

          case 'android':
            await this.startAndroidSession(caps);
            break;

          case 'mac':
            await this.startMacSession(caps);
            break;

          case 'yimac':
            this.device = new _yimac.default();
            await this.device.startSession(caps);
            break;

          case 'yilinux':
            this.device = new _yilinux.default();
            await this.device.startSession(caps);
            break;

          case 'bluesky':
            this.device = new _bluesky.default();
            await this.device.startSession(caps);
            break;

          case 'yitvos':
            {
              let shell = require('shelljs');

              if (shell.exec(`instruments -s devices | grep '${caps.udid}'`).includes('(Simulator)')) {
                this.device = new _tvossimulator.default();
              } else {
                this.device = new _tvos.default();
              }

              await this.device.startSession(caps, this);
              break;
            }

          case 'noproxy':
          case 'connecttoapp':
            break;

          default:
            _logger.default.errorAndThrow(`Unsupported platformName: ${caps.platformName}`);

        }
      }

      await this.connectSocket();

      if (caps.fullSourceTree === true) {} else {
        _logger.default.debug('Setting SourceTreeFilter to displayed elements only');

        await this.updateSettings({
          SourceTreeFilter: "[@isDisplayed='true']"
        });
      }

      return [sessionId, this.opts];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async onSettingsUpdate(key, value) {
    if (key === 'TimeDilation') {
      await this.setTimeDilation(value);
    } else if (key === 'SourceTreeFilter') {
      await this.setSourceTreeFilter(value);
    }
  }

  async stop() {
    this.ready = false;
  }

  async deleteSession() {
    var _this$caps, _this$socket, _this$socket2;

    _logger.default.debug('Deleting YouiEngine session');

    if ((_this$caps = this.caps) !== null && _this$caps !== void 0 && _this$caps.platformName) {
      let appPlatform = this.caps.platformName.toLowerCase();

      if (['yimac', 'yitvos', 'bluesky', 'yilinux'].includes(appPlatform)) {
        if (this.device) {
          this.device.endSession();
        }
      }
    }

    if (this.proxydriver !== null) {
      await this.proxydriver.deleteSession();
    }

    (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.end();
    (_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.destroy();
    await super.deleteSession();
    await this.stop();
  }

  driverShouldDoProxyCmd(command) {
    if (!this.proxydriver) {
      return false;
    }

    if (this.proxyAll) {
      return true;
    }

    for (let allowedCommand of this.proxyAllowList) {
      if (allowedCommand === command) {
        return true;
      }
    }

    return false;
  }

  async executeCommand(cmd, ...args) {
    if (cmd === 'receiveAsyncResponse') {
      _logger.default.debug(`Executing YouiEngineDriver response '${cmd}'`);

      return await this.receiveAsyncResponse(...args);
    }

    if (this.ready) {
      if (this.driverShouldDoProxyCmd(cmd)) {
        _logger.default.debug(`Executing proxied WebDriver command '${cmd}'`);

        if (cmd === 'setContext' && args[0] === 'YOUI_APP') {
          this.proxyAll = false;
          return await this.executeCommand(cmd, ...args);
        }

        this.clearNewCommandTimeout();
        let result = this.proxydriver.executeCommand(cmd, ...args);
        this.startNewCommandTimeout(cmd);
        return result;
      } else {
        _logger.default.debug(`Executing YouiEngine WebDriver command '${cmd}'`);

        return await super.executeCommand(cmd, ...args);
      }
    } else {
      _logger.default.debug(`Command Error '${cmd}'`);

      throw new _appiumBaseDriver.errors.NoSuchDriverError(`Driver is not ready, cannot execute ${cmd}.`);
    }
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);

    if (!res) {
      return res;
    }

    const platformName = caps.platformName.toLowerCase();

    if (!caps.youiEngineAppAddress && platformName !== 'noproxy') {
      let msg = 'The desired capabilities must include youiEngineAppAddress';

      _logger.default.errorAndThrow(msg);
    }

    if (platformName !== 'connecttoapp' && platformName !== 'noproxy') {
      if (!caps.app) {
        let msg = 'The desired capabilities must include app';

        _logger.default.errorAndThrow(msg);
      }

      const fs = require('fs');

      const path = require('path');

      if (!fs.existsSync(caps.app)) {
        let absolutepath = path.resolve(caps.app);
        let msg = 'The app could not be found in following location: ' + absolutepath;

        _logger.default.errorAndThrow(msg);
      }

      if (caps.deviceName.toLowerCase() === 'android') {
        if (!caps.avd) {
          let msg = 'The desired capabilities must include avd';

          _logger.default.errorAndThrow(msg);
        }
      }
    }

    return true;
  }

  async setupNewXCUITestDriver(caps) {
    let args = {
      javascriptEnabled: true
    };
    args = Object.assign(this.opts, args);
    let driver = new _appiumXcuitestDriver.default(args);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await driver.createSession(capsCopy);
    return driver;
  }

  async startXCUITestSession(caps) {
    _logger.default.info('Starting an IOS proxy session');

    this.proxyAllowList = TO_PROXY_IOS;
    this.proxydriver = await this.setupNewXCUITestDriver(caps);
  }

  async setupNewAndroidDriver(caps) {
    let androidArgs = { ...this.opts,
      javascriptEnabled: true
    };
    let androiddriver = new _appiumUiautomator2Driver.default(androidArgs);
    this.setSecurityOptions(androiddriver);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await androiddriver.createSession(capsCopy);
    return androiddriver;
  }

  async startAndroidSession(caps) {
    _logger.default.info('Starting an Android proxy session');

    this.proxyAllowList = TO_PROXY_ANDROID;
    this.proxydriver = await this.setupNewAndroidDriver(caps);
  }

  async setupNewMacDriver(caps) {
    let macArgs = {
      javascriptEnabled: true
    };
    let macdriver = new _appiumMacDriver.default(macArgs);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await macdriver.createSession(capsCopy);
    return macdriver;
  }

  async startMacSession(caps) {
    _logger.default.info('Starting a Mac proxy session');

    this.proxyAllowList = TO_PROXY_MAC;
    this.proxydriver = await this.setupNewMacDriver(caps);
  }

  setSecurityOptions(driver) {
    if (this.relaxedSecurityEnabled) {
      driver.relaxedSecurityEnabled = this.relaxedSecurityEnabled;
    }

    if (this.denyInsecure) {
      driver.denyInsecure = this.denyInsecure;
    }

    if (this.allowInsecure) {
      driver.allowInsecure = this.allowInsecure;
    }
  }

  async connectSocket() {
    let retryCount = 0;
    let connected = false;
    let errno = 'EOK';

    while (retryCount < this.maxRetryCount && !connected) {
      _logger.default.info('Attempt #' + (retryCount + 1));

      let connectedPromise = new _bluebird.default(resolve => {
        let net = require('net');

        let HOST = this.opts.youiEngineAppAddress;
        let PORT;

        if (this.caps.youiEngineAppPort) {
          PORT = this.caps.youiEngineAppPort;
        } else if (this.caps.platformName.toLowerCase() === 'yips4') {
          PORT = 40123;
        } else {
          PORT = 12345;
        }

        if (this.caps.platformName.toLowerCase() === 'android' && this.caps.youiEngineAppAddress.toLowerCase() === 'localhost') {
          let shell = require('shelljs');

          _logger.default.info(' Forwarding the port for Android Emulators ');

          shell.exec(`adb -s '${this.caps.deviceName}' forward tcp:'${PORT}' tcp:'${PORT}'`);

          _logger.default.info(' Forwarding the traffic for Android Emulator ');
        }

        {
          _logger.default.info('Connecting to WebDriver: ' + HOST + ':' + PORT);
        }
        this.socket = new net.Socket();
        this.socket.setTimeout(SOCKET_TIMEOUT);
        this.socket.setKeepAlive(true, 1000);
        let socketClient = this.socket;

        let removeListenerHandler = function () {
          socketClient.removeListener('timeout', timeoutHandler);
          socketClient.removeListener('close', closeHandler);
          socketClient.removeListener('end', endHandler);
          socketClient.removeListener('error', errorHandler);
        };

        let errorHandler = function (ex) {
          _logger.default.error(ex);

          _logger.default.error('Check that WebDriver is enabled in application, if a device ensure the proper IP address is used.');

          removeListenerHandler();
          socketClient.destroy();
          errno = ex.errno;
          resolve(false);
        };

        this.socket.on('error', errorHandler);

        let closeHandler = function () {
          _logger.default.info('Connection closed');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('close', closeHandler);

        let timeoutHandler = function () {
          _logger.default.error('Connection timed out');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('timeout', timeoutHandler);
        this.socket.connect(PORT, HOST, function () {
          _logger.default.error('Connection established');

          removeListenerHandler();
          resolve(true);
        });

        let endHandler = function () {
          _logger.default.info('Connection ended');

          removeListenerHandler();
          socketClient.destroy();
          resolve(false);
        };

        this.socket.on('end', endHandler);
      });
      retryCount++;
      connected = await connectedPromise;

      if (!connected && (errno === 'ECONNREFUSED' || errno === -61)) {
        _logger.default.debug('Connection refused, sleeping...');

        await (0, _asyncbox.sleep)(4000);
        errno = 'EOK';
      }

      if (!connected && retryCount === this.maxRetryCount) {
        _logger.default.errorAndThrow('Failed to connect ' + this.maxRetryCount + ' times. Aborting.');
      }
    }

    retryCount = 0;
    this.ready = connected;
  }

  async executeSocketCommand(cmd) {
    if (!this.socket.writable) {
      _logger.default.info('Socket is not writable. Trying to reconnect.');

      await this.connectSocket();
    }

    let retryCount = 0;

    while (retryCount < this.maxRetryCount) {
      this.socket.setTimeout(SOCKET_TIMEOUT);
      let cmdPromise = new _bluebird.default(resolve => {
        _logger.default.debug('COMMAND: ' + cmd);

        let totaldata = [];
        let endMarker = new Buffer.from('youiend');
        let socketClient = this.socket;

        let removeListenerHandler = function () {
          socketClient.removeListener('data', dataHandler);
          socketClient.removeListener('timeout', timeoutHandler);
          socketClient.removeListener('error', errorHandler);
        };

        let timeoutHandler = function () {
          _logger.default.info('Timeout in execute command.');

          removeListenerHandler();
          resolve(false);
        };

        let errorHandler = function () {
          _logger.default.info('On error');

          removeListenerHandler();
          resolve(false);
        };

        let dataHandler = function (data) {
          if (data.length >= endMarker.length) {
            let dataend = new Buffer.alloc(endMarker.length);
            let startIndex = data.length - endMarker.length;
            data.copy(dataend, 0, startIndex, startIndex + endMarker.length);

            if (dataend.equals(endMarker)) {
              let lastData = data.slice(0, startIndex);
              totaldata.push(lastData);
              removeListenerHandler();
              resolve(Buffer.concat(totaldata));
            } else {
              totaldata.push(data);
            }
          }
        };

        socketClient.write(cmd + '\n', 'UTF8', () => {
          socketClient.on('data', dataHandler);
          socketClient.on('timeout', timeoutHandler);
          socketClient.on('error', errorHandler);
        });
      });
      let res = await cmdPromise;

      if (res === false) {
        retryCount++;

        _logger.default.info('Socket failed. Retrying: ' + retryCount);

        continue;
      } else {
        return res;
      }
    }

    throw new Error('ExecuteSocketCommand failed.');
  }

}

exports.YouiEngineDriver = YouiEngineDriver;

for (let [cmd, fn] of _lodash.default.toPairs(_commands.default)) {
  YouiEngineDriver.prototype[cmd] = fn;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
