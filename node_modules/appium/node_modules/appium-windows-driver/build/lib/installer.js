"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadWAD = downloadWAD;
exports.setupWAD = setupWAD;
exports.isWADChecksumOk = isWADChecksumOk;
exports.installWAD = installWAD;
exports.default = exports.isAdmin = exports.getWADExecutablePath = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _es6Error = _interopRequireDefault(require("es6-error"));

const WAD_VER = '1.2-RC';
const WAD_DOWNLOAD_LINK = `https://github.com/Microsoft/WinAppDriver/releases/download/v${WAD_VER}/WindowsApplicationDriver.msi`;
const WAD_DOWNLOAD_MD5 = 'dbaa9a3f7416c2b73cc5cd0e7452c8d0';
const WAD_DOWNLOAD_TIMEOUT_MS = 60000;
const POSSIBLE_WAD_INSTALL_ROOTS = [process.env['ProgramFiles(x86)'], process.env.ProgramFiles, `${process.env.SystemDrive || 'C:'}\\\\Program Files`];
const WAD_EXE_NAME = 'WinAppDriver.exe';
const WAD_EXE_MD5 = '50d694ebfaa622ef7e4061c1bf52efe6';

class WADNotFoundError extends _es6Error.default {}

const getWADExecutablePath = _lodash.default.memoize(async function getWADInstallPath() {
  const pathCandidates = POSSIBLE_WAD_INSTALL_ROOTS.filter(Boolean).map(root => _path.default.resolve(root, 'Windows Application Driver', WAD_EXE_NAME));

  for (const result of pathCandidates) {
    if (await _appiumSupport.fs.exists(result)) {
      return result;
    }
  }

  throw new WADNotFoundError(`${WAD_EXE_NAME} has not been found in any of these ` + `locations: ${pathCandidates}. Is it installed?`);
});

exports.getWADExecutablePath = getWADExecutablePath;

async function downloadWAD() {
  const tempFile = _path.default.resolve(await _appiumSupport.tempDir.staticDir(), `${_appiumSupport.util.uuidV4()}.msi`);

  _logger.default.info(`Downloading ${WAD_DOWNLOAD_LINK} to '${tempFile}'`);

  await _appiumSupport.net.downloadFile(WAD_DOWNLOAD_LINK, tempFile, {
    timeout: WAD_DOWNLOAD_TIMEOUT_MS
  });
  const downloadedMd5 = await _appiumSupport.fs.md5(tempFile);

  if (downloadedMd5 !== WAD_DOWNLOAD_MD5) {
    throw new Error(`Checksum validation error: expected ${WAD_DOWNLOAD_MD5} but got ${downloadedMd5}`);
  }

  return tempFile;
}

async function installWAD(msiPath) {
  _logger.default.info(`Running MSI installer`);

  await (0, _teen_process.exec)('msiexec', ['/i', msiPath, '/qn']);
}

async function isWADChecksumOk(executablePath) {
  return (await _appiumSupport.fs.md5(executablePath)) === WAD_EXE_MD5;
}

const isAdmin = _lodash.default.memoize(async function isAdmin() {
  try {
    await (0, _teen_process.exec)('fsutil.exe', ['dirty', 'query', process.env.SystemDrive || 'C:']);
    return true;
  } catch (ign) {
    return false;
  }
});

exports.isAdmin = isAdmin;

async function setupWAD() {
  if (!_appiumSupport.system.isWindows()) {
    throw new Error(`Can only download WinAppDriver on Windows!`);
  }

  try {
    const executablePath = await getWADExecutablePath();

    if (await isWADChecksumOk(executablePath)) {
      _logger.default.info(`WinAppDriver version ${WAD_VER} already exists with correct checksum, not re-downloading`);
    } else {
      _logger.default.warn('WinAppDriver exists, but the checksum did not match. Not re-downloading. ' + 'Was it replaced manually?');
    }

    return;
  } catch (e) {
    if (!(e instanceof WADNotFoundError)) {
      throw e;
    }

    _logger.default.info(`WinAppDriver doesn't exist, setting up`);
  }

  if (!(await isAdmin())) {
    throw new Error(`You are not running as an administrator so WinAppDriver cannot be installed for you; please reinstall as admin`);
  }

  const msiPath = await downloadWAD();

  try {
    await installWAD(msiPath);
  } finally {
    await _appiumSupport.fs.rimraf(msiPath);
  }
}

var _default = setupWAD;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
