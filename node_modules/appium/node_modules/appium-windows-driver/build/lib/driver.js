"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WindowsDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _winappdriver = require("./winappdriver");

var _logger = _interopRequireDefault(require("./logger"));

var _desiredCaps = require("./desired-caps");

var _index = _interopRequireDefault(require("./commands/index"));

var _constants = require("constants");

const NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium/(?!app/)[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/(?!app/)[^/]+')], ['POST', new RegExp('^/session/[^/]+/element/[^/]+/elements?$')], ['POST', new RegExp('^/session/[^/]+/elements?$')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute/sync')], ['POST', new RegExp('^/session/[^/]+/appium/device/push_file')], ['POST', new RegExp('^/session/[^/]+/appium/device/pull_file')], ['POST', new RegExp('^/session/[^/]+/appium/device/pull_folder')]];

class WindowsDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', 'accessibility id'];
    this.resetState();

    for (const [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      WindowsDriver.prototype[cmd] = fn;
    }
  }

  resetState() {
    this.jwpProxyAvoid = NO_PROXY;
    this.isProxyActive = false;
    this.winAppDriver = null;
    this._screenRecorder = null;
  }

  async createSession(...args) {
    if (!_appiumSupport.system.isWindows()) {
      throw new Error('WinAppDriver tests only run on Windows');
    }

    try {
      const [sessionId, caps] = await super.createSession(...args);

      if (caps.prerun) {
        _logger.default.info('Executing prerun PowerShell script');

        if (!_lodash.default.isString(caps.prerun.command) && !_lodash.default.isString(caps.prerun.script)) {
          throw new Error(`'prerun' capability value must either contain ` + `'script' or 'command' entry of string type`);
        }

        this.ensureFeatureEnabled(_constants.POWER_SHELL_FEATURE);
        const output = await this.execPowerShell(caps.prerun);

        if (output) {
          _logger.default.info(`Prerun script output: ${output}`);
        }
      }

      await this.startWinAppDriverSession();
      return [sessionId, caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async startWinAppDriverSession() {
    this.winAppDriver = new _winappdriver.WinAppDriver({
      port: this.opts.systemPort
    });
    await this.winAppDriver.start(this.caps);
    this.proxyReqRes = this.winAppDriver.proxy.proxyReqRes.bind(this.winAppDriver.proxy);
    this.isProxyActive = true;
  }

  async deleteSession() {
    var _this$_screenRecorder, _this$winAppDriver;

    _logger.default.debug('Deleting WinAppDriver session');

    await ((_this$_screenRecorder = this._screenRecorder) === null || _this$_screenRecorder === void 0 ? void 0 : _this$_screenRecorder.stop(true));
    await ((_this$winAppDriver = this.winAppDriver) === null || _this$winAppDriver === void 0 ? void 0 : _this$winAppDriver.stop());

    if (this.opts.postrun) {
      if (!_lodash.default.isString(this.opts.postrun.command) && !_lodash.default.isString(this.opts.postrun.script)) {
        _logger.default.error(`'postrun' capability value must either contain ` + `'script' or 'command' entry of string type`);
      } else {
        _logger.default.info('Executing postrun PowerShell script');

        try {
          this.ensureFeatureEnabled(_constants.POWER_SHELL_FEATURE);
          const output = await this.execPowerShell(this.opts.postrun);

          if (output) {
            _logger.default.info(`Postrun script output: ${output}`);
          }
        } catch (e) {
          _logger.default.error(e.message);
        }
      }
    }

    this.resetState();
    await super.deleteSession();
  }

  proxyActive() {
    return this.isProxyActive;
  }

  canProxy() {
    return true;
  }

  getProxyAvoidList() {
    return this.jwpProxyAvoid;
  }

}

exports.WindowsDriver = WindowsDriver;
var _default = WindowsDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
