"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _path = _interopRequireDefault(require("path"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _constants = require("../constants");

const KNOWN_ENV_VARS = ['APPDATA', 'LOCALAPPDATA', 'PROGRAMFILES', 'PROGRAMFILES(X86)', 'PROGRAMDATA', 'ALLUSERSPROFILE', 'TEMP', 'TMP', 'HOMEPATH', 'USERPROFILE', 'PUBLIC'];
const commands = {};
exports.commands = commands;

commands.pushFile = async function pushFile(remotePath, base64Data) {
  this.ensureFeatureEnabled(_constants.MODIFY_FS_FEATURE);

  if (remotePath.endsWith(_path.default.sep)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('It is expected that remote path points to a file rather than a folder. ' + `'${remotePath}' is given instead`);
  }

  if (_lodash.default.isArray(base64Data)) {
    base64Data = Buffer.from(base64Data).toString('utf8');
  }

  const fullPath = resolveToAbsolutePath(remotePath);
  await (0, _appiumSupport.mkdirp)(_path.default.dirname(fullPath));
  const content = Buffer.from(base64Data, 'base64');
  await _appiumSupport.fs.writeFile(fullPath, content);
};

commands.pullFile = async function pullFile(remotePath) {
  const fullPath = resolveToAbsolutePath(remotePath);
  await checkFileExists(fullPath);
  return (await _appiumSupport.util.toInMemoryBase64(fullPath)).toString();
};

commands.pullFolder = async function pullFolder(remotePath) {
  const fullPath = resolveToAbsolutePath(remotePath);
  await checkFolderExists(fullPath);
  return (await _appiumSupport.zip.toInMemoryZip(fullPath, {
    encodeToBase64: true
  })).toString();
};

commands.windowsDeleteFile = async function windowsDeleteFile(opts = {}) {
  this.ensureFeatureEnabled(_constants.MODIFY_FS_FEATURE);
  const {
    remotePath
  } = opts;
  const fullPath = resolveToAbsolutePath(remotePath);
  await checkFileExists(fullPath);
  await _appiumSupport.fs.unlink(fullPath);
};

commands.windowsDeleteFolder = async function windowsDeleteFolder(opts = {}) {
  this.ensureFeatureEnabled(_constants.MODIFY_FS_FEATURE);
  const {
    remotePath
  } = opts;
  const fullPath = resolveToAbsolutePath(remotePath);
  await checkFolderExists(fullPath);
  await _appiumSupport.fs.rimraf(fullPath);
};

function resolveToAbsolutePath(remotePath) {
  const resolvedPath = remotePath.replace(/%([^%]+)%/g, (_, key) => KNOWN_ENV_VARS.includes(key.toUpperCase()) ? process.env[key.toUpperCase()] : `%${key}%`);

  _logger.default.debug(`Resolved path '${resolvedPath}'.`);

  if (!_path.default.isAbsolute(resolvedPath)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('It is expected that remote path is absolute. ' + `'${resolvedPath}' is given instead`);
  }

  return resolvedPath;
}

async function checkFileExists(remotePath) {
  if (!(await _appiumSupport.fs.exists(remotePath))) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`The remote file '${remotePath}' does not exist.`);
  }

  const stat = await _appiumSupport.fs.stat(remotePath);

  if (!stat.isFile()) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('It is expected that remote path points to a file rather than a folder. ' + `'${remotePath}' is given instead`);
  }
}

async function checkFolderExists(remotePath) {
  if (!(await _appiumSupport.fs.exists(remotePath))) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`The remote folder '${remotePath}' does not exist.`);
  }

  const stat = await _appiumSupport.fs.stat(remotePath);

  if (!stat.isDirectory()) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('It is expected that remote path points to a folder rather than a file. ' + `'${remotePath}' is given instead`);
  }
}

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maWxlLW1vdmVtZW50LmpzIl0sIm5hbWVzIjpbIktOT1dOX0VOVl9WQVJTIiwiY29tbWFuZHMiLCJwdXNoRmlsZSIsInJlbW90ZVBhdGgiLCJiYXNlNjREYXRhIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJNT0RJRllfRlNfRkVBVFVSRSIsImVuZHNXaXRoIiwicGF0aCIsInNlcCIsImVycm9ycyIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiXyIsImlzQXJyYXkiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJmdWxsUGF0aCIsInJlc29sdmVUb0Fic29sdXRlUGF0aCIsImRpcm5hbWUiLCJjb250ZW50IiwiZnMiLCJ3cml0ZUZpbGUiLCJwdWxsRmlsZSIsImNoZWNrRmlsZUV4aXN0cyIsInV0aWwiLCJ0b0luTWVtb3J5QmFzZTY0IiwicHVsbEZvbGRlciIsImNoZWNrRm9sZGVyRXhpc3RzIiwiemlwIiwidG9Jbk1lbW9yeVppcCIsImVuY29kZVRvQmFzZTY0Iiwid2luZG93c0RlbGV0ZUZpbGUiLCJvcHRzIiwidW5saW5rIiwid2luZG93c0RlbGV0ZUZvbGRlciIsInJpbXJhZiIsInJlc29sdmVkUGF0aCIsInJlcGxhY2UiLCJrZXkiLCJpbmNsdWRlcyIsInRvVXBwZXJDYXNlIiwicHJvY2VzcyIsImVudiIsImxvZyIsImRlYnVnIiwiaXNBYnNvbHV0ZSIsImV4aXN0cyIsInN0YXQiLCJpc0ZpbGUiLCJpc0RpcmVjdG9yeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxjQUFjLEdBQUcsQ0FDckIsU0FEcUIsRUFDVixjQURVLEVBRXJCLGNBRnFCLEVBRUwsbUJBRkssRUFHckIsYUFIcUIsRUFHTixpQkFITSxFQUlyQixNQUpxQixFQUliLEtBSmEsRUFLckIsVUFMcUIsRUFLVCxhQUxTLEVBS00sUUFMTixDQUF2QjtBQU9BLE1BQU1DLFFBQVEs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QUwsRUFBTCxFQUF5QjtBQUN2QixVQUFNLElBQUl4Qyx5QkFBT0Msb0JBQVgsQ0FDSiw0RUFDQyxJQUFHUixVQUFXLG9CQUZYLENBQU47QUFHRDtBQUNGOztlQUdjRixRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IGZzLCBta2RpcnAsIHV0aWwsIHppcCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IE1PRElGWV9GU19GRUFUVVJFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuLy8gTGlzdCBvZiBlbnYgdmFyaWFibGVzLCB0aGF0IGNhbiBiZSBleHBhbmRlZCBpbiBwYXRoXG5jb25zdCBLTk9XTl9FTlZfVkFSUyA9IFtcbiAgJ0FQUERBVEEnLCAnTE9DQUxBUFBEQVRBJyxcbiAgJ1BST0dSQU1GSUxFUycsICdQUk9HUkFNRklMRVMoWDg2KScsXG4gICdQUk9HUkFNREFUQScsICdBTExVU0VSU1BST0ZJTEUnLFxuICAnVEVNUCcsICdUTVAnLFxuICAnSE9NRVBBVEgnLCAnVVNFUlBST0ZJTEUnLCAnUFVCTElDJ1xuXTtcbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLnB1c2hGaWxlID0gYXN5bmMgZnVuY3Rpb24gcHVzaEZpbGUgKHJlbW90ZVBhdGgsIGJhc2U2NERhdGEpIHtcbiAgdGhpcy5lbnN1cmVGZWF0dXJlRW5hYmxlZChNT0RJRllfRlNfRkVBVFVSRSk7XG4gIGlmIChyZW1vdGVQYXRoLmVuZHNXaXRoKHBhdGguc2VwKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAnSXQgaXMgZXhwZWN0ZWQgdGhhdCByZW1vdGUgcGF0aCBwb2ludHMgdG8gYSBmaWxlIHJhdGhlciB0aGFuIGEgZm9sZGVyLiAnICtcbiAgICAgIGAnJHtyZW1vdGVQYXRofScgaXMgZ2l2ZW4gaW5zdGVhZGApO1xuICB9XG5cbiAgaWYgKF8uaXNBcnJheShiYXNlNjREYXRhKSkge1xuICAgIC8vIHNvbWUgY2xpZW50cyAoYWhlbSkgamF2YSwgc2VuZCBhIGJ5dGUgYXJyYXkgZW5jb2RpbmcgdXRmOCBjaGFyYWN0ZXJzXG4gICAgLy8gaW5zdGVhZCBvZiBhIHN0cmluZywgd2hpY2ggd291bGQgYmUgaW5maW5pdGVseSBiZXR0ZXIhXG4gICAgYmFzZTY0RGF0YSA9IEJ1ZmZlci5mcm9tKGJhc2U2NERhdGEpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gIH1cblxuICBjb25zdCBmdWxsUGF0aCA9IHJlc29sdmVUb0Fic29sdXRlUGF0aChyZW1vdGVQYXRoKTtcbiAgYXdhaXQgbWtkaXJwKHBhdGguZGlybmFtZShmdWxsUGF0aCkpO1xuICBjb25zdCBjb250ZW50ID0gQnVmZmVyLmZyb20oYmFzZTY0RGF0YSwgJ2Jhc2U2NCcpO1xuICBhd2FpdCBmcy53cml0ZUZpbGUoZnVsbFBhdGgsIGNvbnRlbnQpO1xufTtcblxuY29tbWFuZHMucHVsbEZpbGUgPSBhc3luYyBmdW5jdGlvbiBwdWxsRmlsZSAocmVtb3RlUGF0aCkge1xuICBjb25zdCBmdWxsUGF0aCA9IHJlc29sdmVUb0Fic29sdXRlUGF0aChyZW1vdGVQYXRoKTtcbiAgYXdhaXQgY2hlY2tGaWxlRXhpc3RzKGZ1bGxQYXRoKTtcbiAgcmV0dXJuIChhd2FpdCB1dGlsLnRvSW5NZW1vcnlCYXNlNjQoZnVsbFBhdGgpKS50b1N0cmluZygpO1xufTtcblxuY29tbWFuZHMucHVsbEZvbGRlciA9IGFzeW5jIGZ1bmN0aW9uIHB1bGxGb2xkZXIgKHJlbW90ZVBhdGgpIHtcbiAgY29uc3QgZnVsbFBhdGggPSByZXNvbHZlVG9BYnNvbHV0ZVBhdGgocmVtb3RlUGF0aCk7XG4gIGF3YWl0IGNoZWNrRm9sZGVyRXhpc3RzKGZ1bGxQYXRoKTtcbiAgcmV0dXJuIChhd2FpdCB6aXAudG9Jbk1lbW9yeVppcChmdWxsUGF0aCwge1xuICAgIGVuY29kZVRvQmFzZTY0OiB0cnVlLFxuICB9KSkudG9TdHJpbmcoKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRGVsZXRlRmlsZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByZW1vdGVQYXRoIC0gVGhlIHBhdGggdG8gYSBmaWxlLlxuICogVGhlIHBhdGggbWF5IGNvbnRhaW4gZW52aXJvbm1lbnQgdmFyaWFibGVzIHRoYXQgY291bGQgYmUgZXhwYW5kZWQgb24gdGhlIHNlcnZlciBzaWRlLlxuICogRHVlIHRvIHNlY3VyaXR5IHJlYXNvbnMgb25seSB2YXJpYWJsZXMgbGlzdGVkIGJlbG93IHdvdWxkIGJlIGV4cGFuZGVkOiBgQVBQREFUQWAsXG4gKiBgTE9DQUxBUFBEQVRBYCwgYFBST0dSQU1GSUxFU2AsIGBQUk9HUkFNRklMRVMoWDg2KWAsIGBQUk9HUkFNREFUQWAsIGBBTExVU0VSU1BST0ZJTEVgLFxuICogYFRFTVBgLCBgVE1QYCwgYEhPTUVQQVRIYCwgYFVTRVJQUk9GSUxFYCwgYFBVQkxJQ2AuXG4gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGZpbGUgZnJvbSB0aGUgZmlsZSBzeXN0ZW1cbiAqXG4gKiBAcGFyYW0ge0RlbGV0ZUZpbGVPcHRpb25zfSBvcHRzXG4gKiBAdGhyb3dzIHtJbnZhbGlkQXJndW1lbnRFcnJvcn0gSWYgdGhlIGZpbGUgdG8gYmUgZGVsZXRlZCBkb2VzIG5vdCBleGlzdCBvclxuICogcmVtb3RlIHBhdGggaXMgbm90IGFuIGFic29sdXRlIHBhdGguXG4gKi9cbmNvbW1hbmRzLndpbmRvd3NEZWxldGVGaWxlID0gYXN5bmMgZnVuY3Rpb24gd2luZG93c0RlbGV0ZUZpbGUgKG9wdHMgPSB7fSkge1xuICB0aGlzLmVuc3VyZUZlYXR1cmVFbmFibGVkKE1PRElGWV9GU19GRUFUVVJFKTtcbiAgY29uc3QgeyByZW1vdGVQYXRoIH0gPSBvcHRzO1xuICBjb25zdCBmdWxsUGF0aCA9IHJlc29sdmVUb0Fic29sdXRlUGF0aChyZW1vdGVQYXRoKTtcbiAgYXdhaXQgY2hlY2tGaWxlRXhpc3RzKGZ1bGxQYXRoKTtcbiAgYXdhaXQgZnMudW5saW5rKGZ1bGxQYXRoKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRGVsZXRlRm9sZGVyT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcGF0aCB0byBhIGZvbGRlci5cbiAqIFRoZSBwYXRoIG1heSBjb250YWluIGVudmlyb25tZW50IHZhcmlhYmxlcyB0aGF0IGNvdWxkIGJlIGV4cGFuZGVkIG9uIHRoZSBzZXJ2ZXIgc2lkZS5cbiAqIER1ZSB0byBzZWN1cml0eSByZWFzb25zIG9ubHkgdmFyaWFibGVzIGxpc3RlZCBiZWxvdyB3b3VsZCBiZSBleHBhbmRlZDogYEFQUERBVEFgLFxuICogYExPQ0FMQVBQREFUQWAsIGBQUk9HUkFNRklMRVNgLCBgUFJPR1JBTUZJTEVTKFg4NilgLCBgUFJPR1JBTURBVEFgLCBgQUxMVVNFUlNQUk9GSUxFYCxcbiAqIGBURU1QYCwgYFRNUGAsIGBIT01FUEFUSGAsIGBVU0VSUFJPRklMRWAsIGBQVUJMSUNgLlxuICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBmb2xkZXIgZnJvbSB0aGUgZmlsZSBzeXN0ZW1cbiAqXG4gKiBAcGFyYW0ge0RlbGV0ZUZvbGRlck9wdGlvbnN9IG9wdHNcbiAqIEB0aHJvd3Mge0ludmFsaWRBcmd1bWVudEVycm9yfSBJZiB0aGUgZm9sZGVyIHRvIGJlIGRlbGV0ZWQgZG9lcyBub3QgZXhpc3Qgb3JcbiAqIHJlbW90ZSBwYXRoIGlzIG5vdCBhbiBhYnNvbHV0ZSBwYXRoLlxuICovXG5jb21tYW5kcy53aW5kb3dzRGVsZXRlRm9sZGVyID0gYXN5bmMgZnVuY3Rpb24gd2luZG93c0RlbGV0ZUZvbGRlciAob3B0cyA9IHt9KSB7XG4gIHRoaXMuZW5zdXJlRmVhdHVyZUVuYWJsZWQoTU9ESUZZX0ZTX0ZFQVRVUkUpO1xuICBjb25zdCB7IHJlbW90ZVBhdGggfSA9IG9wdHM7XG4gIGNvbnN0IGZ1bGxQYXRoID0gcmVzb2x2ZVRvQWJzb2x1dGVQYXRoKHJlbW90ZVBhdGgpO1xuICBhd2FpdCBjaGVja0ZvbGRlckV4aXN0cyhmdWxsUGF0aCk7XG4gIGF3YWl0IGZzLnJpbXJhZihmdWxsUGF0aCk7XG59O1xuXG5mdW5jdGlvbiByZXNvbHZlVG9BYnNvbHV0ZVBhdGggKHJlbW90ZVBhdGgpIHtcbiAgY29uc3QgcmVzb2x2ZWRQYXRoID0gcmVtb3RlUGF0aC5yZXBsYWNlKC8lKFteJV0rKSUvZyxcbiAgICAoXywga2V5KSA9PiBLTk9XTl9FTlZfVkFSUy5pbmNsdWRlcyhrZXkudG9VcHBlckNhc2UoKSlcbiAgICAgID8gcHJvY2Vzcy5lbnZba2V5LnRvVXBwZXJDYXNlKCldXG4gICAgICA6IGAlJHtrZXl9JWApO1xuXG4gIGxvZy5kZWJ1ZyhgUmVzb2x2ZWQgcGF0aCAnJHtyZXNvbHZlZFBhdGh9Jy5gKTtcbiAgaWYgKCFwYXRoLmlzQWJzb2x1dGUocmVzb2x2ZWRQYXRoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0l0IGlzIGV4cGVjdGVkIHRoYXQgcmVtb3RlIHBhdGggaXMgYWJzb2x1dGUuICcgK1xuICAgICAgYCcke3Jlc29sdmVkUGF0aH0nIGlzIGdpdmVuIGluc3RlYWRgKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZWRQYXRoO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja0ZpbGVFeGlzdHMgKHJlbW90ZVBhdGgpIHtcbiAgaWYgKCFhd2FpdCBmcy5leGlzdHMocmVtb3RlUGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBUaGUgcmVtb3RlIGZpbGUgJyR7cmVtb3RlUGF0aH0nIGRvZXMgbm90IGV4aXN0LmApO1xuICB9XG4gIGNvbnN0IHN0YXQgPSBhd2FpdCBmcy5zdGF0KHJlbW90ZVBhdGgpO1xuICBpZiAoIXN0YXQuaXNGaWxlKCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgJ0l0IGlzIGV4cGVjdGVkIHRoYXQgcmVtb3RlIHBhdGggcG9pbnRzIHRvIGEgZmlsZSByYXRoZXIgdGhhbiBhIGZvbGRlci4gJyArXG4gICAgICBgJyR7cmVtb3RlUGF0aH0nIGlzIGdpdmVuIGluc3RlYWRgKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja0ZvbGRlckV4aXN0cyAocmVtb3RlUGF0aCkge1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhyZW1vdGVQYXRoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYFRoZSByZW1vdGUgZm9sZGVyICcke3JlbW90ZVBhdGh9JyBkb2VzIG5vdCBleGlzdC5gKTtcbiAgfVxuICBjb25zdCBzdGF0ID0gYXdhaXQgZnMuc3RhdChyZW1vdGVQYXRoKTtcbiAgaWYgKCFzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgJ0l0IGlzIGV4cGVjdGVkIHRoYXQgcmVtb3RlIHBhdGggcG9pbnRzIHRvIGEgZm9sZGVyIHJhdGhlciB0aGFuIGEgZmlsZS4gJyArXG4gICAgICBgJyR7cmVtb3RlUGF0aH0nIGlzIGdpdmVuIGluc3RlYWRgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9maWxlLW1vdmVtZW50LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
