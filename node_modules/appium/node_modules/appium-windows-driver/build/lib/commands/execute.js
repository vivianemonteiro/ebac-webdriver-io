"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _constants = require("../constants");

const commands = {};
const POWER_SHELL_SCRIPT_PATTERN = /^powerShell$/;
const WINDOWS_EXTENSION_SCRIPT_PATTERN = /^windows:/;
const EXTENSION_COMMANDS_MAPPING = {
  startRecordingScreen: 'startRecordingScreen',
  stopRecordingScreen: 'stopRecordingScreen',
  deleteFile: 'windowsDeleteFile',
  deleteFolder: 'windowsDeleteFolder'
};

commands.execute = async function execute(script, args) {
  if (WINDOWS_EXTENSION_SCRIPT_PATTERN.test(script)) {
    _logger.default.info(`Executing extension command '${script}'`);

    script = script.replace(WINDOWS_EXTENSION_SCRIPT_PATTERN, '').trim();
    return await this.executeWindowsCommand(script, _lodash.default.isArray(args) ? args[0] : args);
  } else if (POWER_SHELL_SCRIPT_PATTERN.test(script)) {
    this.ensureFeatureEnabled(_constants.POWER_SHELL_FEATURE);
    return await this.execPowerShell(_lodash.default.isArray(args) ? _lodash.default.first(args) : args);
  }

  throw new _appiumBaseDriver.errors.NotImplementedError();
};

commands.executeWindowsCommand = async function executeWindowsCommand(command, opts = {}) {
  if (!_lodash.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown windows command '${command}'. ` + `Only ${_lodash.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
  }

  return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiUE9XRVJfU0hFTExfU0NSSVBUX1BBVFRFUk4iLCJXSU5ET1dTX0VYVEVOU0lPTl9TQ1JJUFRfUEFUVEVSTiIsIkVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HIiwic3RhcnRSZWNvcmRpbmdTY3JlZW4iLCJzdG9wUmVjb3JkaW5nU2NyZWVuIiwiZGVsZXRlRmlsZSIsImRlbGV0ZUZvbGRlciIsImV4ZWN1dGUiLCJzY3JpcHQiLCJhcmdzIiwidGVzdCIsImxvZyIsImluZm8iLCJyZXBsYWNlIiwidHJpbSIsImV4ZWN1dGVXaW5kb3dzQ29tbWFuZCIsIl8iLCJpc0FycmF5IiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJQT1dFUl9TSEVMTF9GRUFUVVJFIiwiZXhlY1Bvd2VyU2hlbGwiLCJmaXJzdCIsImVycm9ycyIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJjb21tYW5kIiwib3B0cyIsImhhcyIsIlVua25vd25Db21tYW5kRXJyb3IiLCJrZXlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjtBQUVBLE1BQU1DLDBCQUEwQixHQUFHLGNBQW5DO0FBQ0EsTUFBTUMsZ0NBQWdDLEdBQUcsV0FBekM7QUFDQSxNQUFNQywwQkFBMEIsR0FBRztBQUNqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsc0JBRFc7QUFFakNDLEVBQUFBLG1CQUFtQixFQUFFLHFCQUZZO0FBR2pDQyxFQUFBQSxVQUFVLEVBQUUsbUJBSHFCO0FBSWpDQyxFQUFBQSxZQUFZLEVBQUU7QUFKbUIsQ0FBbkM7O0FBT0FQLFFBQVEsQ0FBQ1EsT0FBVCxHQUFtQixlQUFlQSxPQUFmLENBQXdCQyxNQUF4QixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDdkQsTUFBSVIsZ0NBQWdDLENBQUNTLElBQWpDLENBQXNDRixNQUF0QyxDQUFKLEVBQW1EO0FBQ2pERyxvQkFBSUMsSUFBSixDQUFVLGdDQUErQkosTUFBTyxHQUFoRDs7QUFDQUEsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNLLE9BQVAsQ0FBZVosZ0NBQWYsRUFBaUQsRUFBakQsRUFBcURhLElBQXJELEVBQVQ7QUFDQSxXQUFPLE1BQU0sS0FBS0MscUJBQUwsQ0FBMkJQLE1BQTNCLEVBQW1DUSxnQkFBRUMsT0FBRixDQUFVUixJQUFWLElBQWtCQSxJQUFJLENBQUMsQ0FBRCxDQUF0QixHQUE0QkEsSUFBL0QsQ0FBYjtBQUNELEdBSkQsTUFJTyxJQUFJVCwwQkFBMEIsQ0FBQ1UsSUFBM0IsQ0FBZ0NGLE1BQWhDLENBQUosRUFBNkM7QUFDbEQsU0FBS1Usb0JBQUwsQ0FBMEJDLDhCQUExQjtBQUNBLFdBQU8sTUFBTSxLQUFLQyxjQUFMLENBQW9CSixnQkFBRUMsT0FBRixDQUFVUixJQUFWLElBQWtCTyxnQkFBRUssS0FBRixDQUFRWixJQUFSLENBQWxCLEdBQWtDQSxJQUF0RCxDQUFiO0FBQ0Q7O0FBQ0QsUUFBTSxJQUFJYSx5QkFBT0MsbUJBQVgsRUFBTjtBQUNELENBVkQ7O0FBWUF4QixRQUFRLENBQUNnQixxQkFBVCxHQUFpQyxlQUFlQSxxQkFBZixDQUFzQ1MsT0FBdEMsRUFBK0NDLElBQUksR0FBRyxFQUF0RCxFQUEwRDtBQUN6RixNQUFJLENBQUNULGdCQUFFVSxHQUFGLENBQU14QiwwQkFBTixFQUFrQ3NCLE9BQWxDLENBQUwsRUFBaUQ7QUFDL0MsVUFBTSxJQUFJRix5QkFBT0ssbUJBQVgsQ0FBZ0MsNEJBQTJCSCxPQUFRLEtBQXBDLEdBQ2xDLFFBQU9SLGdCQUFFWSxJQUFGLENBQU8xQiwwQkFBUCxDQUFtQywwQkFEdkMsQ0FBTjtBQUVEOztBQUNELFNBQU8sTUFBTSxLQUFLQSwwQkFBMEIsQ0FBQ3NCLE9BQUQsQ0FBL0IsRUFBMENDLElBQTFDLENBQWI7QUFDRCxDQU5EOztlQVFlMUIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgUE9XRVJfU0hFTExfRkVBVFVSRSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmNvbnN0IFBPV0VSX1NIRUxMX1NDUklQVF9QQVRURVJOID0gL15wb3dlclNoZWxsJC87XG5jb25zdCBXSU5ET1dTX0VYVEVOU0lPTl9TQ1JJUFRfUEFUVEVSTiA9IC9ed2luZG93czovO1xuY29uc3QgRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcgPSB7XG4gIHN0YXJ0UmVjb3JkaW5nU2NyZWVuOiAnc3RhcnRSZWNvcmRpbmdTY3JlZW4nLFxuICBzdG9wUmVjb3JkaW5nU2NyZWVuOiAnc3RvcFJlY29yZGluZ1NjcmVlbicsXG4gIGRlbGV0ZUZpbGU6ICd3aW5kb3dzRGVsZXRlRmlsZScsXG4gIGRlbGV0ZUZvbGRlcjogJ3dpbmRvd3NEZWxldGVGb2xkZXInLFxufTtcblxuY29tbWFuZHMuZXhlY3V0ZSA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUgKHNjcmlwdCwgYXJncykge1xuICBpZiAoV0lORE9XU19FWFRFTlNJT05fU0NSSVBUX1BBVFRFUk4udGVzdChzY3JpcHQpKSB7XG4gICAgbG9nLmluZm8oYEV4ZWN1dGluZyBleHRlbnNpb24gY29tbWFuZCAnJHtzY3JpcHR9J2ApO1xuICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKFdJTkRPV1NfRVhURU5TSU9OX1NDUklQVF9QQVRURVJOLCAnJykudHJpbSgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVXaW5kb3dzQ29tbWFuZChzY3JpcHQsIF8uaXNBcnJheShhcmdzKSA/IGFyZ3NbMF0gOiBhcmdzKTtcbiAgfSBlbHNlIGlmIChQT1dFUl9TSEVMTF9TQ1JJUFRfUEFUVEVSTi50ZXN0KHNjcmlwdCkpIHtcbiAgICB0aGlzLmVuc3VyZUZlYXR1cmVFbmFibGVkKFBPV0VSX1NIRUxMX0ZFQVRVUkUpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWNQb3dlclNoZWxsKF8uaXNBcnJheShhcmdzKSA/IF8uZmlyc3QoYXJncykgOiBhcmdzKTtcbiAgfVxuICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGVXaW5kb3dzQ29tbWFuZCA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVXaW5kb3dzQ29tbWFuZCAoY29tbWFuZCwgb3B0cyA9IHt9KSB7XG4gIGlmICghXy5oYXMoRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcsIGNvbW1hbmQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duQ29tbWFuZEVycm9yKGBVbmtub3duIHdpbmRvd3MgY29tbWFuZCAnJHtjb21tYW5kfScuIGAgK1xuICAgICAgYE9ubHkgJHtfLmtleXMoRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcpfSBjb21tYW5kcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzW0VYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HW2NvbW1hbmRdXShvcHRzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
