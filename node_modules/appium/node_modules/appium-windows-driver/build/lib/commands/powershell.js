"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const commands = {};
exports.commands = commands;
const EXECUTION_POLICY = {
  REMOTE_SIGNED: 'RemoteSigned',
  UNDEFINED: 'Undefined',
  RESTRICTED: 'Restricted'
};
const POWER_SHELL = 'powershell.exe';

commands.execPowerShell = async function execPowerShell(opts = {}) {
  const {
    script,
    command
  } = opts;

  if (!script && !command) {
    _logger.default.errorAndThrow('Power Shell script/command must not be empty');
  }

  if (/\n/.test(command)) {
    _logger.default.errorAndThrow('Power Shell commands cannot contain line breaks');
  }

  const shouldRunScript = !command && !!script;
  let tmpRoot;
  let userExecutionPolicy;

  try {
    let tmpScriptPath;

    if (shouldRunScript) {
      tmpRoot = await _appiumSupport.tempDir.openDir();
      tmpScriptPath = _path.default.resolve(tmpRoot, 'appium_script.ps1');
      await _appiumSupport.fs.writeFile(tmpScriptPath, script, 'utf8');
    }

    const psArgs = [];

    if (command) {
      psArgs.push('-command', command);
    } else {
      const {
        stdout
      } = await (0, _teen_process.exec)(POWER_SHELL, ['-command', 'Get-ExecutionPolicy -Scope CurrentUser']);
      userExecutionPolicy = _lodash.default.trim(stdout);

      if ([EXECUTION_POLICY.RESTRICTED, EXECUTION_POLICY.UNDEFINED].includes(userExecutionPolicy)) {
        _logger.default.debug(`Temporarily changing Power Shell execution policy to ${EXECUTION_POLICY.REMOTE_SIGNED} ` + 'to run the given script');

        await (0, _teen_process.exec)(POWER_SHELL, ['-command', `Set-ExecutionPolicy -ExecutionPolicy ${EXECUTION_POLICY.REMOTE_SIGNED} -Scope CurrentUser`]);
      } else {
        userExecutionPolicy = null;
      }

      psArgs.push('-file', tmpScriptPath);
    }

    _logger.default.info(`Running Power Shell with arguments: ${psArgs}`);

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(POWER_SHELL, psArgs);
      return stdout;
    } catch (e) {
      throw new Error(e.stderr || e.message);
    }
  } finally {
    await _bluebird.default.all([(async () => {
      if (userExecutionPolicy) {
        await (0, _teen_process.exec)(POWER_SHELL, ['-command', `Set-ExecutionPolicy -ExecutionPolicy ${userExecutionPolicy} -Scope CurrentUser`]);
      }
    })(), (async () => {
      if (tmpRoot) {
        await _appiumSupport.fs.rimraf(tmpRoot);
      }
    })()]);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9wb3dlcnNoZWxsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiRVhFQ1VUSU9OX1BPTElDWSIsIlJFTU9URV9TSUdORUQiLCJVTkRFRklORUQiLCJSRVNUUklDVEVEIiwiUE9XRVJfU0hFTEwiLCJleGVjUG93ZXJTaGVsbCIsIm9wdHMiLCJzY3JpcHQiLCJjb21tYW5kIiwibG9nIiwiZXJyb3JBbmRUaHJvdyIsInRlc3QiLCJzaG91bGRSdW5TY3JpcHQiLCJ0bXBSb290IiwidXNlckV4ZWN1dGlvblBvbGljeSIsInRtcFNjcmlwdFBhdGgiLCJ0ZW1wRGlyIiwib3BlbkRpciIsInBhdGgiLCJyZXNvbHZlIiwiZnMiLCJ3cml0ZUZpbGUiLCJwc0FyZ3MiLCJwdXNoIiwic3Rkb3V0IiwiXyIsInRyaW0iLCJpbmNsdWRlcyIsImRlYnVnIiwiaW5mbyIsImUiLCJFcnJvciIsInN0ZGVyciIsIm1lc3NhZ2UiLCJCIiwiYWxsIiwicmltcmFmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjs7QUFFQSxNQUFNQyxnQkFBZ0IsR0FBRztBQUN2QkMsRUFBQUEsYUFBYSxFQUFFLGNBRFE7QUFFdkJDLEVBQUFBLFNBQVMsRUFBRSxXQUZZO0FBR3ZCQyxFQUFBQSxVQUFVLEVBQUU7QUFIVyxDQUF6QjtBQUtBLE1BQU1DLFdBQVcsR0FBRyxnQkFBcEI7O0FBd0JBTCxRQUFRLENBQUNNLGNBQVQsR0FBMEIsZUFBZUEsY0FBZixDQUErQkMsSUFBSSxHQUFHLEVBQXRDLEVBQTBDO0FBQ2xFLFFBQU07QUFDSkMsSUFBQUEsTUFESTtBQUVKQyxJQUFBQTtBQUZJLE1BR0ZGLElBSEo7O0FBSUEsTUFBSSxDQUFDQyxNQUFELElBQVcsQ0FBQ0MsT0FBaEIsRUFBeUI7QUFDdkJDLG9CQUFJQyxhQUFKLENBQWtCLDhDQUFsQjtBQUNEOztBQUNELE1BQUksS0FBS0MsSUFBTCxDQUFVSCxPQUFWLENBQUosRUFBd0I7QUFDdEJDLG9CQUFJQyxhQUFKLENBQWtCLGlEQUFsQjtBQUNEOztBQUNELFFBQU1FLGVBQWUsR0FBRyxDQUFDSixPQUFELElBQVksQ0FBQyxDQUFDRCxNQUF0QztBQUVBLE1BQUlNLE9BQUo7QUFDQSxNQUFJQyxtQkFBSjs7QUFDQSxNQUFJO0FBQ0YsUUFBSUMsYUFBSjs7QUFDQSxRQUFJSCxlQUFKLEVBQXFCO0FBQ25CQyxNQUFBQSxPQUFPLEdBQUcsTUFBTUcsdUJBQVFDLE9BQVIsRUFBaEI7QUFDQUYsTUFBQUEsYUFBYSxHQUFHRyxjQUFLQyxPQUFMLENBQWFOLE9BQWIsRUFBc0IsbUJBQXRCLENBQWhCO0FBQ0EsWUFBTU8sa0JBQUdDLFNBQUgsQ0FBYU4sYUFBYixFQUE0QlIsTUFBNUIsRUFBb0MsTUFBcEMsQ0FBTjtBQUNEOztBQUNELFVBQU1lLE1BQU0sR0FBRyxFQUFmOztBQUNBLFFBQUlkLE9BQUosRUFBYTtBQUNYYyxNQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWSxVQUFaLEVBQXdCZixPQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU07QUFBQ2dCLFFBQUFBO0FBQUQsVUFBVyxNQUFNLHdCQUFLcEIsV0FBTCxFQUFrQixDQUFDLFVBQUQsRUFBYSx3Q0FBYixDQUFsQixDQUF2QjtBQUNBVSxNQUFBQSxtQkFBbUIsR0FBR1csZ0JBQUVDLElBQUYsQ0FBT0YsTUFBUCxDQUF0Qjs7QUFDQSxVQUFJLENBQUN4QixnQkFBZ0IsQ0FBQ0csVUFBbEIsRUFBOEJILGdCQUFnQixDQUFDRSxTQUEvQyxFQUEwRHlCLFFBQTFELENBQW1FYixtQkFBbkUsQ0FBSixFQUE2RjtBQUMzRkwsd0JBQUltQixLQUFKLENBQVcsd0RBQXVENUIsZ0JBQWdCLENBQUNDLGFBQWMsR0FBdkYsR0FDUix5QkFERjs7QUFFQSxjQUFNLHdCQUFLRyxXQUFMLEVBQWtCLENBQ3RCLFVBRHNCLEVBQ1Qsd0NBQXVDSixnQkFBZ0IsQ0FBQ0MsYUFBYyxxQkFEN0QsQ0FBbEIsQ0FBTjtBQUdELE9BTkQsTUFNTztBQUVMYSxRQUFBQSxtQkFBbUIsR0FBRyxJQUF0QjtBQUNEOztBQUNEUSxNQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWSxPQUFaLEVBQXFCUixhQUFyQjtBQUNEOztBQUNETixvQkFBSW9CLElBQUosQ0FBVSx1Q0FBc0NQLE1BQU8sRUFBdkQ7O0FBQ0EsUUFBSTtBQUNGLFlBQU07QUFBQ0UsUUFBQUE7QUFBRCxVQUFXLE1BQU0sd0JBQUtwQixXQUFMLEVBQWtCa0IsTUFBbEIsQ0FBdkI7QUFDQSxhQUFPRSxNQUFQO0FBQ0QsS0FIRCxDQUdFLE9BQU9NLENBQVAsRUFBVTtBQUNWLFlBQU0sSUFBSUMsS0FBSixDQUFVRCxDQUFDLENBQUNFLE1BQUYsSUFBWUYsQ0FBQyxDQUFDRyxPQUF4QixDQUFOO0FBQ0Q7QUFDRixHQWhDRCxTQWdDVTtBQUNSLFVBQU1DLGtCQUFFQyxHQUFGLENBQU0sQ0FDVixDQUFDLFlBQVk7QUFDWCxVQUFJckIsbUJBQUosRUFBeUI7QUFDdkIsY0FBTSx3QkFBS1YsV0FBTCxFQUFrQixDQUN0QixVQURzQixFQUNULHdDQUF1Q1UsbUJBQW9CLHFCQURsRCxDQUFsQixDQUFOO0FBR0Q7QUFDRixLQU5ELEdBRFUsRUFRVixDQUFDLFlBQVk7QUFDWCxVQUFJRCxPQUFKLEVBQWE7QUFDWCxjQUFNTyxrQkFBR2dCLE1BQUgsQ0FBVXZCLE9BQVYsQ0FBTjtBQUNEO0FBQ0YsS0FKRCxHQVJVLENBQU4sQ0FBTjtBQWNEO0FBQ0YsQ0EvREQ7O2VBa0VlZCxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZzLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuY29uc3QgRVhFQ1VUSU9OX1BPTElDWSA9IHtcbiAgUkVNT1RFX1NJR05FRDogJ1JlbW90ZVNpZ25lZCcsXG4gIFVOREVGSU5FRDogJ1VuZGVmaW5lZCcsXG4gIFJFU1RSSUNURUQ6ICdSZXN0cmljdGVkJyxcbn07XG5jb25zdCBQT1dFUl9TSEVMTCA9ICdwb3dlcnNoZWxsLmV4ZSc7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFeGVjUG93ZXJTaGVsbE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gc2NyaXB0IEEgdmFsaWQgUG93ZXIgU2hlbGwgc2NyaXB0IHRvIGV4ZWN1dGVcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gY29tbWFuZCBBIHZhbGlkIFBvd2VyIFNoZWxsIGNvbW1hbmQgdG8gZXhlY3V0ZVxuICovXG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIGdpdmVuIFBvd2VyIFNoZWxsIGNvbW1hbmQgb3IgYSB3aG9sZSBzY3JpcHQgYmFzZWQgb24gdGhlXG4gKiBnaXZlbiBvcHRpb25zLiBFaXRoZXIgb2YgdGhlc2Ugb3B0aW9ucyBtdXN0IGJlIHByb3ZpZGVkLiBJZiBib3RoIGFyZSBwcm92aWRlZFxuICogdGhlbiB0aGUgYGNvbW1hbmRgIG9uZSBnZXRzIHRoZSBwcmlvcml0eS5cbiAqIE5vdGUgdGhhdCBQb3dlciBTaGVsbCBjb21tYW5kIGNhbm5vdCBjb250YWluIGxpbmUgYnJlYWtzLiBDb25zaWRlciBtYWtpbmcgaXRcbiAqIHRvIGEgc2NyaXB0IGluIHN1Y2ggY2FzZS5cbiAqIE5vdGUgdGhhdCBieSBkZWZhdWx0IFBvd2VyIFNoZWxsIGJsb2NrcyBzY3JpcHRzIGV4ZWN1dGlvbiwgc28gdGhlIHNjcmlwdCBtdXN0XG4gKiB0ZW1wb3JhcmlseSBzd2l0Y2ggdXNlciBleGVjdXRpb24gcG9saWN5IGlmIG5lY2Vzc2FyeSBhbmQgcmVzdG9yZSBpdCBhZnRlcndhcmRzLlxuICogVGhpcyBtYWtlcyBzY3JpcHRzIHNsaWdodGx5IGxlc3MgcGVyZm9ybWFudCwgYXMgc2luZ2xlIGNvbW1hbmRzLlxuICpcbiAqIEBwYXJhbSB7IUV4ZWNQb3dlclNoZWxsT3B0aW9uc30gb3B0c1xuICogQHJldHVybnMge3N0cmluZ30gVGhlIGFjdHVhbCBzdGRvdXQgb2YgdGhlIGdpdmVuIGNvbW1hbmQvc2NyaXB0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGV4aXQgY29kZSBvZiB0aGUgZ2l2ZW4gY29tbWFuZC9zY3JpcHQgaXMgbm90IHplcm8uXG4gKiBUaGUgYWN0dWFsIHN0ZGVyciBvdXRwdXQgaXMgc2V0IHRvIHRoZSBlcnJvciBtZXNzYWdlIHZhbHVlLlxuICovXG5jb21tYW5kcy5leGVjUG93ZXJTaGVsbCA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWNQb3dlclNoZWxsIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHNjcmlwdCxcbiAgICBjb21tYW5kLFxuICB9ID0gb3B0cztcbiAgaWYgKCFzY3JpcHQgJiYgIWNvbW1hbmQpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnUG93ZXIgU2hlbGwgc2NyaXB0L2NvbW1hbmQgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxuICBpZiAoL1xcbi8udGVzdChjb21tYW5kKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdQb3dlciBTaGVsbCBjb21tYW5kcyBjYW5ub3QgY29udGFpbiBsaW5lIGJyZWFrcycpO1xuICB9XG4gIGNvbnN0IHNob3VsZFJ1blNjcmlwdCA9ICFjb21tYW5kICYmICEhc2NyaXB0O1xuXG4gIGxldCB0bXBSb290O1xuICBsZXQgdXNlckV4ZWN1dGlvblBvbGljeTtcbiAgdHJ5IHtcbiAgICBsZXQgdG1wU2NyaXB0UGF0aDtcbiAgICBpZiAoc2hvdWxkUnVuU2NyaXB0KSB7XG4gICAgICB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gICAgICB0bXBTY3JpcHRQYXRoID0gcGF0aC5yZXNvbHZlKHRtcFJvb3QsICdhcHBpdW1fc2NyaXB0LnBzMScpO1xuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHRtcFNjcmlwdFBhdGgsIHNjcmlwdCwgJ3V0ZjgnKTtcbiAgICB9XG4gICAgY29uc3QgcHNBcmdzID0gW107XG4gICAgaWYgKGNvbW1hbmQpIHtcbiAgICAgIHBzQXJncy5wdXNoKCctY29tbWFuZCcsIGNvbW1hbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoUE9XRVJfU0hFTEwsIFsnLWNvbW1hbmQnLCAnR2V0LUV4ZWN1dGlvblBvbGljeSAtU2NvcGUgQ3VycmVudFVzZXInXSk7XG4gICAgICB1c2VyRXhlY3V0aW9uUG9saWN5ID0gXy50cmltKHN0ZG91dCk7XG4gICAgICBpZiAoW0VYRUNVVElPTl9QT0xJQ1kuUkVTVFJJQ1RFRCwgRVhFQ1VUSU9OX1BPTElDWS5VTkRFRklORURdLmluY2x1ZGVzKHVzZXJFeGVjdXRpb25Qb2xpY3kpKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgVGVtcG9yYXJpbHkgY2hhbmdpbmcgUG93ZXIgU2hlbGwgZXhlY3V0aW9uIHBvbGljeSB0byAke0VYRUNVVElPTl9QT0xJQ1kuUkVNT1RFX1NJR05FRH0gYCArXG4gICAgICAgICAgJ3RvIHJ1biB0aGUgZ2l2ZW4gc2NyaXB0Jyk7XG4gICAgICAgIGF3YWl0IGV4ZWMoUE9XRVJfU0hFTEwsIFtcbiAgICAgICAgICAnLWNvbW1hbmQnLCBgU2V0LUV4ZWN1dGlvblBvbGljeSAtRXhlY3V0aW9uUG9saWN5ICR7RVhFQ1VUSU9OX1BPTElDWS5SRU1PVEVfU0lHTkVEfSAtU2NvcGUgQ3VycmVudFVzZXJgXG4gICAgICAgIF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIHBvbGljeSwgc2NyaXB0cyBhcmUgYWxsb3dlZFxuICAgICAgICB1c2VyRXhlY3V0aW9uUG9saWN5ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHBzQXJncy5wdXNoKCctZmlsZScsIHRtcFNjcmlwdFBhdGgpO1xuICAgIH1cbiAgICBsb2cuaW5mbyhgUnVubmluZyBQb3dlciBTaGVsbCB3aXRoIGFyZ3VtZW50czogJHtwc0FyZ3N9YCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhQT1dFUl9TSEVMTCwgcHNBcmdzKTtcbiAgICAgIHJldHVybiBzdGRvdXQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGUuc3RkZXJyIHx8IGUubWVzc2FnZSk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IEIuYWxsKFtcbiAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh1c2VyRXhlY3V0aW9uUG9saWN5KSB7XG4gICAgICAgICAgYXdhaXQgZXhlYyhQT1dFUl9TSEVMTCwgW1xuICAgICAgICAgICAgJy1jb21tYW5kJywgYFNldC1FeGVjdXRpb25Qb2xpY3kgLUV4ZWN1dGlvblBvbGljeSAke3VzZXJFeGVjdXRpb25Qb2xpY3l9IC1TY29wZSBDdXJyZW50VXNlcmBcbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgfSkoKSxcbiAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0bXBSb290KSB7XG4gICAgICAgICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICAgICAgICB9XG4gICAgICB9KSgpXG4gICAgXSk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3Bvd2Vyc2hlbGwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
