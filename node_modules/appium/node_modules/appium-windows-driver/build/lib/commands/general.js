"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

const commands = {};
exports.commands = commands;

commands.getWindowSize = async function getWindowSize() {
  const size = await this.winAppDriver.sendCommand('/window/size', 'GET');

  if (_lodash.default.isPlainObject(size)) {
    return size;
  }

  _logger.default.info('Cannot retrieve window size from WinAppDriver. ' + 'Falling back to Windows Forms to calculate dimensions');

  return await getScreenSize();
};

async function getScreenSize() {
  const dimensions = await this.execPowerShell({
    command: 'Add-Type -AssemblyName System.Windows.Forms;[System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Size'
  });

  _logger.default.debug(`Screen size information retrieved: ${dimensions}`);

  const match = /^\s*(True|False)\s+(\d+)\s+(\d+)/m.exec(dimensions);

  if (!match) {
    throw new Error('Cannot retrieve the screen size. Check the server log for more details');
  }

  return {
    width: parseInt(match[2], 10),
    height: parseInt(match[3], 10)
  };
}

commands.getScreenshot = async function getScreenshot() {
  return await this.winAppDriver.sendCommand('/screenshot', 'GET');
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiZ2V0V2luZG93U2l6ZSIsInNpemUiLCJ3aW5BcHBEcml2ZXIiLCJzZW5kQ29tbWFuZCIsIl8iLCJpc1BsYWluT2JqZWN0IiwibG9nIiwiaW5mbyIsImdldFNjcmVlblNpemUiLCJkaW1lbnNpb25zIiwiZXhlY1Bvd2VyU2hlbGwiLCJjb21tYW5kIiwiZGVidWciLCJtYXRjaCIsImV4ZWMiLCJFcnJvciIsIndpZHRoIiwicGFyc2VJbnQiLCJoZWlnaHQiLCJnZXRTY3JlZW5zaG90Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjs7O0FBSUFBLFFBQVEsQ0FBQ0MsYUFBVCxHQUF5QixlQUFlQSxhQUFmLEdBQWdDO0FBQ3ZELFFBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtDLFlBQUwsQ0FBa0JDLFdBQWxCLENBQThCLGNBQTlCLEVBQThDLEtBQTlDLENBQW5COztBQUNBLE1BQUlDLGdCQUFFQyxhQUFGLENBQWdCSixJQUFoQixDQUFKLEVBQTJCO0FBQ3pCLFdBQU9BLElBQVA7QUFDRDs7QUFFREssa0JBQUlDLElBQUosQ0FBUyxvREFDTCx1REFESjs7QUFFQSxTQUFPLE1BQU1DLGFBQWEsRUFBMUI7QUFDRCxDQVREOztBQVdBLGVBQWVBLGFBQWYsR0FBZ0M7QUFDOUIsUUFBTUMsVUFBVSxHQUFHLE1BQU0sS0FBS0MsY0FBTCxDQUFvQjtBQUMzQ0MsSUFBQUEsT0FBTyxFQUFFO0FBRGtDLEdBQXBCLENBQXpCOztBQUdBTCxrQkFBSU0sS0FBSixDQUFXLHNDQUFxQ0gsVUFBVyxFQUEzRDs7QUFDQSxRQUFNSSxLQUFLLEdBQUcsb0NBQW9DQyxJQUFwQyxDQUF5Q0wsVUFBekMsQ0FBZDs7QUFDQSxNQUFJLENBQUNJLEtBQUwsRUFBWTtBQUNWLFVBQU0sSUFBSUUsS0FBSixDQUFVLHdFQUFWLENBQU47QUFDRDs7QUFDRCxTQUFPO0FBQ0xDLElBQUFBLEtBQUssRUFBRUMsUUFBUSxDQUFDSixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQURWO0FBRUxLLElBQUFBLE1BQU0sRUFBRUQsUUFBUSxDQUFDSixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWDtBQUZYLEdBQVA7QUFJRDs7QUFFRGQsUUFBUSxDQUFDb0IsYUFBVCxHQUF5QixlQUFlQSxhQUFmLEdBQWdDO0FBQ3ZELFNBQU8sTUFBTSxLQUFLakIsWUFBTCxDQUFrQkMsV0FBbEIsQ0FBOEIsYUFBOUIsRUFBNkMsS0FBN0MsQ0FBYjtBQUNELENBRkQ7O2VBS2VKLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG4vLyBUaGUgbmV4dCB0d28gY29tbWFuZHMgYXJlIHJlcXVpcmVkXG4vLyBmb3IgcHJvcGVyIGAtaW1hZ2VgIGxvY2F0b3IgZnVuY3Rpb25hbGl0eVxuY29tbWFuZHMuZ2V0V2luZG93U2l6ZSA9IGFzeW5jIGZ1bmN0aW9uIGdldFdpbmRvd1NpemUgKCkge1xuICBjb25zdCBzaXplID0gYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc2VuZENvbW1hbmQoJy93aW5kb3cvc2l6ZScsICdHRVQnKTtcbiAgaWYgKF8uaXNQbGFpbk9iamVjdChzaXplKSkge1xuICAgIHJldHVybiBzaXplO1xuICB9XG4gIC8vIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvV2luQXBwRHJpdmVyL2lzc3Vlcy8xMTA0XG4gIGxvZy5pbmZvKCdDYW5ub3QgcmV0cmlldmUgd2luZG93IHNpemUgZnJvbSBXaW5BcHBEcml2ZXIuICcgK1xuICAgICAgJ0ZhbGxpbmcgYmFjayB0byBXaW5kb3dzIEZvcm1zIHRvIGNhbGN1bGF0ZSBkaW1lbnNpb25zJyk7XG4gIHJldHVybiBhd2FpdCBnZXRTY3JlZW5TaXplKCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRTY3JlZW5TaXplICgpIHtcbiAgY29uc3QgZGltZW5zaW9ucyA9IGF3YWl0IHRoaXMuZXhlY1Bvd2VyU2hlbGwoe1xuICAgIGNvbW1hbmQ6ICdBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5XaW5kb3dzLkZvcm1zO1tTeXN0ZW0uV2luZG93cy5Gb3Jtcy5TY3JlZW5dOjpQcmltYXJ5U2NyZWVuLkJvdW5kcy5TaXplJyxcbiAgfSk7XG4gIGxvZy5kZWJ1ZyhgU2NyZWVuIHNpemUgaW5mb3JtYXRpb24gcmV0cmlldmVkOiAke2RpbWVuc2lvbnN9YCk7XG4gIGNvbnN0IG1hdGNoID0gL15cXHMqKFRydWV8RmFsc2UpXFxzKyhcXGQrKVxccysoXFxkKykvbS5leGVjKGRpbWVuc2lvbnMpO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmV0cmlldmUgdGhlIHNjcmVlbiBzaXplLiBDaGVjayB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBkZXRhaWxzJyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcGFyc2VJbnQobWF0Y2hbMl0sIDEwKSxcbiAgICBoZWlnaHQ6IHBhcnNlSW50KG1hdGNoWzNdLCAxMCksXG4gIH07XG59XG5cbmNvbW1hbmRzLmdldFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiBnZXRTY3JlZW5zaG90ICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnNlbmRDb21tYW5kKCcvc2NyZWVuc2hvdCcsICdHRVQnKTtcbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2dlbmVyYWwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
