"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REQ_A4M_APP_PATH = exports.A4M_APP_BUNDLE_ID = exports.DEFAULT_A4M_PORT = exports.DEFAULT_A4M_HOST = exports.AppiumForMac = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

const DEFAULT_A4M_HOST = '127.0.0.1';
exports.DEFAULT_A4M_HOST = DEFAULT_A4M_HOST;
const DEFAULT_A4M_PORT = 4622;
exports.DEFAULT_A4M_PORT = DEFAULT_A4M_PORT;
const REQ_A4M_APP_PATH = '/Applications/AppiumForMac.app';
exports.REQ_A4M_APP_PATH = REQ_A4M_APP_PATH;
const A4M_APP_BUNDLE_ID = 'com.appium.AppiumForMac';
exports.A4M_APP_BUNDLE_ID = A4M_APP_BUNDLE_ID;

const a4mLog = _appiumSupport.logger.getLogger('Appium4Mac');

class AppiumForMac {
  constructor(opts = {}) {
    this.proxyHost = opts.a4mHost;
    this.proxyPort = opts.a4mPort;
    this.a4mAppPath = opts.a4mAppPath;
    this.killAllA4MAppBeforeStart = opts.killAllA4MAppBeforeStart || true;
    this.proc = null;
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.proxyHost,
      port: this.proxyPort
    });
  }

  async start() {
    if (!(await _appiumSupport.fs.exists(this.a4mAppPath))) {
      throw new Error(`Could not verify AppiumForMacDriver install in '${this.a4mAppPath}'; please install it to '${this.a4mAppPath}'`);
    }

    const startDetector = (stdout, stderr) => stderr.includes('Started HTTP server');

    let processIsAlive = false;

    try {
      if (this.killAllA4MAppBeforeStart) {
        await this.killAll();
      }

      const a4mBinary = _path.default.resolve(this.a4mAppPath, 'Contents', 'MacOS', 'AppiumForMac');

      this.proc = new _teen_process.SubProcess(a4mBinary, []);
      processIsAlive = true;

      for (let stream of ['STDOUT', 'STDERR']) {
        this.proc.on(`lines-${stream.toLowerCase()}`, lines => {
          for (let l of lines) {
            a4mLog.info(`[${stream}] ${l.trim()}`);
          }
        });
      }

      this.proc.on('exit', (code, signal) => {
        processIsAlive = false;
        let msg = `AppiumForMac exited unexpectedly with code ${code}, ` + `signal ${signal}`;

        _logger.default.error(msg);
      });

      _logger.default.info(`Spawning AppiumForMac with: ${this.a4mAppPath}`);

      await this.proc.start(startDetector);
      await this.waitForOnline();
    } catch (e) {
      this.emit(AppiumForMac.EVENT_ERROR, e);

      if (processIsAlive) {
        await this.proc.stop();
      }

      _logger.default.errorAndThrow(e);
    }
  }

  sessionId() {
    if (this.state !== AppiumForMac.STATE_ONLINE) {
      return null;
    }

    return this.jwproxy.sessionId;
  }

  async waitForOnline() {
    return true;
  }

  async getStatus() {
    return await this.sendCommand('/status', 'GET');
  }

  async startSession(caps) {
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    await this.sendCommand('/session', 'POST', {
      desiredCapabilities: caps
    });
  }

  async stop() {
    try {
      if (this.proc) {
        await this.proc.stop();
      }
    } catch (e) {
      _logger.default.error(e);
    }
  }

  async sendCommand(url, method, body) {
    let res;

    try {
      res = await this.jwproxy.command(url, method, body);
    } catch (e) {
      if (e.message.indexOf('Did not get a valid response object') === -1 || e.message.indexOf('value') !== -1) {
        throw e;
      }
    }

    return res;
  }

  async proxyReq(req, res) {
    return await this.jwproxy.proxyReqRes(req, res);
  }

  async killAll() {
    const processName = 'AppiumForMac';

    _logger.default.info(`Killing any old AppiumForMac`);

    await _appiumSupport.process.killProcess(processName);

    _logger.default.info('Successfully cleaned up old Appium4Mac servers');
  }

  async deleteSession() {
    _logger.default.debug('Deleting AppiumForMac server session');

    try {
      await this.sendCommand('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation AppiumForMac deleteSession worked; ` + `Error was: ${err}`);
    }
  }

}

exports.AppiumForMac = AppiumForMac;
var _default = AppiumForMac;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
