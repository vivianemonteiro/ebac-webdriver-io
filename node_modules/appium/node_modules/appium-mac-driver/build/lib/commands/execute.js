"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

const SYSTEM_SHELL_FEATURE = 'system_shell';
const commands = {};
exports.commands = commands;

commands.execute = async function execute(script, args) {
  this.ensureFeatureEnabled(SYSTEM_SHELL_FEATURE);

  if (_lodash.default.isEmpty(script)) {
    _logger.default.errorAndThrow(`The 'script' argument cannot be empty`);
  }

  let opts = {};

  if (_lodash.default.isArray(args) && _lodash.default.isPlainObject(args[0])) {
    opts = args[0];
  } else if (_lodash.default.isPlainObject(args)) {
    opts = args;
  }

  const {
    interpreter = process.env.SHELL || '/bin/bash',
    throwOnFail = false,
    timeout,
    env
  } = opts;
  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    const tmpScriptPath = _path.default.resolve(tmpRoot, 'appium.sh');

    await _appiumSupport.fs.writeFile(tmpScriptPath, script, 'utf8');

    _logger.default.debug(`Executing script using '${interpreter}' shell interpreter:`);

    const execOpts = {};

    if (_lodash.default.isInteger(timeout)) {
      _logger.default.debug(`- Timeout: ${timeout}ms`);

      execOpts.timeout = timeout;
    }

    if (!_lodash.default.isEmpty(env)) {
      _logger.default.debug(`- Environment: ${JSON.stringify(env)}`);

      execOpts.env = Object.assign({}, process.env, env);
    }

    _logger.default.debug(script);

    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(interpreter, [tmpScriptPath], execOpts);
    return {
      stdout,
      stderr,
      code: 0
    };
  } catch (e) {
    if (_lodash.default.has(e, 'code')) {
      const {
        stdout,
        stderr,
        code
      } = e;

      _logger.default.debug(`The script has returned non-zero exit code ${code}`);

      if (stderr) {
        _logger.default.debug(`Stderr: ${stderr}`);
      }

      if (!throwOnFail) {
        return {
          stdout,
          stderr,
          code
        };
      }
    }

    throw e;
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbIlNZU1RFTV9TSEVMTF9GRUFUVVJFIiwiY29tbWFuZHMiLCJleGVjdXRlIiwic2NyaXB0IiwiYXJncyIsImVuc3VyZUZlYXR1cmVFbmFibGVkIiwiXyIsImlzRW1wdHkiLCJsb2ciLCJlcnJvckFuZFRocm93Iiwib3B0cyIsImlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwiaW50ZXJwcmV0ZXIiLCJwcm9jZXNzIiwiZW52IiwiU0hFTEwiLCJ0aHJvd09uRmFpbCIsInRpbWVvdXQiLCJ0bXBSb290IiwidGVtcERpciIsIm9wZW5EaXIiLCJ0bXBTY3JpcHRQYXRoIiwicGF0aCIsInJlc29sdmUiLCJmcyIsIndyaXRlRmlsZSIsImRlYnVnIiwiZXhlY09wdHMiLCJpc0ludGVnZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0IiwiYXNzaWduIiwic3Rkb3V0Iiwic3RkZXJyIiwiY29kZSIsImUiLCJoYXMiLCJyaW1yYWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsb0JBQW9CLEdBQUcsY0FBN0I7QUFFQSxNQUFNQyxRQUFRLEdBQUcsRUFBakI7OztBQWdDQUEsUUFBUSxDQUFDQyxPQUFULEdBQW1CLGVBQWVBLE9BQWYsQ0FBd0JDLE1BQXhCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUN2RCxPQUFLQyxvQkFBTCxDQUEwQkwsb0JBQTFCOztBQUVBLE1BQUlNLGdCQUFFQyxPQUFGLENBQVVKLE1BQVYsQ0FBSixFQUF1QjtBQUNyQkssb0JBQUlDLGFBQUosQ0FBbUIsdUNBQW5CO0FBQ0Q7O0FBRUQsTUFBSUMsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsTUFBSUosZ0JBQUVLLE9BQUYsQ0FBVVAsSUFBVixLQUFtQkUsZ0JBQUVNLGFBQUYsQ0FBZ0JSLElBQUksQ0FBQyxDQUFELENBQXBCLENBQXZCLEVBQWlEO0FBQy9DTSxJQUFBQSxJQUFJLEdBQUdOLElBQUksQ0FBQyxDQUFELENBQVg7QUFDRCxHQUZELE1BRU8sSUFBSUUsZ0JBQUVNLGFBQUYsQ0FBZ0JSLElBQWhCLENBQUosRUFBMkI7QUFDaENNLElBQUFBLElBQUksR0FBR04sSUFBUDtBQUNEOztBQUNELFFBQU07QUFDSlMsSUFBQUEsV0FBVyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBWixJQUFxQixXQUQvQjtBQUVKQyxJQUFBQSxXQUFXLEdBQUcsS0FGVjtBQUdKQyxJQUFBQSxPQUhJO0FBSUpILElBQUFBO0FBSkksTUFLRkwsSUFMSjtBQU9BLFFBQU1TLE9BQU8sR0FBRyxNQUFNQyx1QkFBUUMsT0FBUixFQUF0Qjs7QUFDQSxNQUFJO0FBQ0YsVUFBTUMsYUFBYSxHQUFHQyxjQUFLQyxPQUFMLENBQWFMLE9BQWIsRUFBc0IsV0FBdEIsQ0FBdEI7O0FBQ0EsVUFBTU0sa0JBQUdDLFNBQUgsQ0FBYUosYUFBYixFQUE0Qm5CLE1BQTVCLEVBQW9DLE1BQXBDLENBQU47O0FBQ0FLLG9CQUFJbUIsS0FBSixDQUFXLDJCQUEwQmQsV0FBWSxzQkFBakQ7O0FBQ0EsVUFBTWUsUUFBUSxHQUFHLEVBQWpCOztBQUNBLFFBQUl0QixnQkFBRXVCLFNBQUYsQ0FBWVgsT0FBWixDQUFKLEVBQTBCO0FBQ3hCVixzQkFBSW1CLEtBQUosQ0FBVyxjQUFhVCxPQUFRLElBQWhDOztBQUNBVSxNQUFBQSxRQUFRLENBQUNWLE9BQVQsR0FBbUJBLE9BQW5CO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDWixnQkFBRUMsT0FBRixDQUFVUSxHQUFWLENBQUwsRUFBcUI7QUFDbkJQLHNCQUFJbUIsS0FBSixDQUFXLGtCQUFpQkcsSUFBSSxDQUFDQyxTQUFMLENBQWVoQixHQUFmLENBQW9CLEVBQWhEOztBQUNBYSxNQUFBQSxRQUFRLENBQUNiLEdBQVQsR0FBZWlCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JuQixPQUFPLENBQUNDLEdBQTFCLEVBQStCQSxHQUEvQixDQUFmO0FBQ0Q7O0FBQ0RQLG9CQUFJbUIsS0FBSixDQUFVeEIsTUFBVjs7QUFFQSxVQUFNO0FBQUMrQixNQUFBQSxNQUFEO0FBQVNDLE1BQUFBO0FBQVQsUUFBbUIsTUFBTSx3QkFBS3RCLFdBQUwsRUFBa0IsQ0FBQ1MsYUFBRCxDQUFsQixFQUFtQ00sUUFBbkMsQ0FBL0I7QUFDQSxXQUFPO0FBQ0xNLE1BQUFBLE1BREs7QUFFTEMsTUFBQUEsTUFGSztBQUdMQyxNQUFBQSxJQUFJLEVBQUU7QUFIRCxLQUFQO0FBS0QsR0FyQkQsQ0FxQkUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsUUFBSS9CLGdCQUFFZ0MsR0FBRixDQUFNRCxDQUFOLEVBQVMsTUFBVCxDQUFKLEVBQXNCO0FBQ3BCLFlBQU07QUFBQ0gsUUFBQUEsTUFBRDtBQUFTQyxRQUFBQSxNQUFUO0FBQWlCQyxRQUFBQTtBQUFqQixVQUF5QkMsQ0FBL0I7O0FBRUE3QixzQkFBSW1CLEtBQUosQ0FBVyw4Q0FBNkNTLElBQUssRUFBN0Q7O0FBQ0EsVUFBSUQsTUFBSixFQUFZO0FBQ1YzQix3QkFBSW1CLEtBQUosQ0FBVyxXQUFVUSxNQUFPLEVBQTVCO0FBQ0Q7O0FBQ0QsVUFBSSxDQUFDbEIsV0FBTCxFQUFrQjtBQUNoQixlQUFPO0FBQUNpQixVQUFBQSxNQUFEO0FBQVNDLFVBQUFBLE1BQVQ7QUFBaUJDLFVBQUFBO0FBQWpCLFNBQVA7QUFDRDtBQUNGOztBQUNELFVBQU1DLENBQU47QUFDRCxHQWxDRCxTQWtDVTtBQUNSLFVBQU1aLGtCQUFHYyxNQUFILENBQVVwQixPQUFWLENBQU47QUFDRDtBQUNGLENBMUREOztlQTZEZWxCLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBmcywgdGVtcERpciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBTWVNURU1fU0hFTExfRkVBVFVSRSA9ICdzeXN0ZW1fc2hlbGwnO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEV4ZWNPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGludGVycHJldGVyIC0gRnVsbCBwYXRoIHRvIHRoZSBjb21tYW5kIGxpbmUgaW50ZXJwcmV0ZXIgYmluYXJ5LlxuICogVGhlIGN1cnJlbnQgaW50ZXJwcmV0ZXIgKGAkU0hFTExgKSBvciBgL2Jpbi9iYXNoYCBpcyB1c2VkIGJ5IGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IHRocm93T25GYWlsIFtmYWxzZV0gLSBXaGV0aGVyIHRvIHRocm93IGFuIGV4Y2VwdGlvbiBpZlxuICogdGhlIGdpdmVuIHNjcmlwdCBoYXMgcmV0dXJuZWQgbm9uLXplcm8gZXhpdCBjb2RlXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHRpbWVvdXQgWzIwMDAwXSAtIFRoZSBkZWZhdWx0IHRpbWVvdXQgZm9yIHRoZSBzY3JpcHQgZXhlY3V0aW9uLlxuICogQHByb3BlcnR5IHs/T2JqZWN0fSBlbnYgW3Byb2Nlc3MuZW52XSAtIEFkZGl0aW9uYWwgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvclxuICogdGhlIHNoZWxsIHNjcmlwdFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRXhlY1Jlc3VsdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0ZG91dCAtIFNjcmlwdCBzdGRvdXRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdGRlcnIgLSBTY3JpcHQgc3RkZXJyXG4gKiBAcHJvcGVydHkge251bWJlcn0gY29kZSAtIFNjcmlwdCByZXR1cm4gY29kZS4gSXQgd2lsbCBuZXZlciBiZSBvdGhlclxuICogdGhhbiB6ZXJvIGlmIGB0aHJvd09uRmFpbGAgb3B0aW9uIGlzIHNldCB0byBgdHJ1ZWBcbiAqL1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBnaXZlbiBzaGVsbCBzY3JpcHQgaWYgdGhlIGBzeXN0ZW1fc2hlbGxgXG4gKiBzZXJ2ZXIgZmVhdHVyZSBpcyBlbmFibGVkLiBUaGUgY29tbWFuZCBibG9ja3MgdW50aWxcbiAqIHRoZSBzY3JpcHQgZmluaXNoZXMgaXRzIGV4ZWN1dGlvbiBvciBpdHMgdGltZW91dCBleHBpcmVzLlxuICpcbiAqIEBwYXJhbSB7IXN0cmluZ30gc2NyaXB0IC0gVGhlIGFjdHVhbCBzaGVsbCBzY3JpcHQgdG8gZXhlY3V0ZS5cbiAqIFRoaXMgc2hvdWxkIGJlIGEgdmFsaWQgc2NyaXB0IHNuaXBwZXQuXG4gKiBAcGFyYW0gez9FeGVjT3B0aW9uc30gYXJnc1xuICogQHJldHVybiB7RXhlY1Jlc3VsdH0gLSBUaGUgcmVzdWx0IG9mIHRoZSBzY3JpcHQgZXhlY3V0aW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGEgcHJvYmxlbSBkdXJpbmcgY29tbWFuZCBleGVjdXRpb25cbiAqL1xuY29tbWFuZHMuZXhlY3V0ZSA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUgKHNjcmlwdCwgYXJncykge1xuICB0aGlzLmVuc3VyZUZlYXR1cmVFbmFibGVkKFNZU1RFTV9TSEVMTF9GRUFUVVJFKTtcblxuICBpZiAoXy5pc0VtcHR5KHNjcmlwdCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlICdzY3JpcHQnIGFyZ3VtZW50IGNhbm5vdCBiZSBlbXB0eWApO1xuICB9XG5cbiAgbGV0IG9wdHMgPSB7fTtcbiAgaWYgKF8uaXNBcnJheShhcmdzKSAmJiBfLmlzUGxhaW5PYmplY3QoYXJnc1swXSkpIHtcbiAgICBvcHRzID0gYXJnc1swXTtcbiAgfSBlbHNlIGlmIChfLmlzUGxhaW5PYmplY3QoYXJncykpIHtcbiAgICBvcHRzID0gYXJncztcbiAgfVxuICBjb25zdCB7XG4gICAgaW50ZXJwcmV0ZXIgPSBwcm9jZXNzLmVudi5TSEVMTCB8fCAnL2Jpbi9iYXNoJyxcbiAgICB0aHJvd09uRmFpbCA9IGZhbHNlLFxuICAgIHRpbWVvdXQsXG4gICAgZW52LFxuICB9ID0gb3B0cztcblxuICBjb25zdCB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgdG1wU2NyaXB0UGF0aCA9IHBhdGgucmVzb2x2ZSh0bXBSb290LCAnYXBwaXVtLnNoJyk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHRtcFNjcmlwdFBhdGgsIHNjcmlwdCwgJ3V0ZjgnKTtcbiAgICBsb2cuZGVidWcoYEV4ZWN1dGluZyBzY3JpcHQgdXNpbmcgJyR7aW50ZXJwcmV0ZXJ9JyBzaGVsbCBpbnRlcnByZXRlcjpgKTtcbiAgICBjb25zdCBleGVjT3B0cyA9IHt9O1xuICAgIGlmIChfLmlzSW50ZWdlcih0aW1lb3V0KSkge1xuICAgICAgbG9nLmRlYnVnKGAtIFRpbWVvdXQ6ICR7dGltZW91dH1tc2ApO1xuICAgICAgZXhlY09wdHMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgfVxuICAgIGlmICghXy5pc0VtcHR5KGVudikpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgLSBFbnZpcm9ubWVudDogJHtKU09OLnN0cmluZ2lmeShlbnYpfWApO1xuICAgICAgZXhlY09wdHMuZW52ID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvY2Vzcy5lbnYsIGVudik7XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhzY3JpcHQpO1xuICAgIC8vIFRPRE86IEFkZCBzb21lIHBlcmYgbWVhc3VyZW1lbnQgaGVyZT9cbiAgICBjb25zdCB7c3Rkb3V0LCBzdGRlcnJ9ID0gYXdhaXQgZXhlYyhpbnRlcnByZXRlciwgW3RtcFNjcmlwdFBhdGhdLCBleGVjT3B0cyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZG91dCxcbiAgICAgIHN0ZGVycixcbiAgICAgIGNvZGU6IDAsXG4gICAgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChfLmhhcyhlLCAnY29kZScpKSB7XG4gICAgICBjb25zdCB7c3Rkb3V0LCBzdGRlcnIsIGNvZGV9ID0gZTtcbiAgICAgIC8vIERvIG5vdCB0aHJvdyBpZiB0aGUgc2NyaXB0IHJldHVybiBjb2RlIGlzIG5vdCB6ZXJvXG4gICAgICBsb2cuZGVidWcoYFRoZSBzY3JpcHQgaGFzIHJldHVybmVkIG5vbi16ZXJvIGV4aXQgY29kZSAke2NvZGV9YCk7XG4gICAgICBpZiAoc3RkZXJyKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgU3RkZXJyOiAke3N0ZGVycn1gKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhyb3dPbkZhaWwpIHtcbiAgICAgICAgcmV0dXJuIHtzdGRvdXQsIHN0ZGVyciwgY29kZX07XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG59O1xuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
