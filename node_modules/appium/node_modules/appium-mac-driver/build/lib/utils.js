"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAppPath = findAppPath;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

async function findAppPath(bundleId) {
  let stdout;

  try {
    const output = await (0, _teen_process.exec)('/usr/bin/mdfind', [`kMDItemCFBundleIdentifier=${bundleId}`]);
    stdout = output.stdout;
  } catch (e) {
    _logger.default.info(e.stderr || e.message);

    return null;
  }

  const matchedPaths = _lodash.default.trim(stdout).split('\n').map(p => _lodash.default.trim(p)).filter(Boolean);

  const appsMapping = {};

  for (const matchedPath of matchedPaths) {
    if (await _appiumSupport.fs.exists(matchedPath)) {
      const {
        mtimeMs
      } = await _appiumSupport.fs.stat(matchedPath);
      appsMapping[matchedPath] = mtimeMs;
    }
  }

  if (_lodash.default.isEmpty(appsMapping)) {
    return null;
  }

  if (_lodash.default.size(appsMapping) > 1) {
    _logger.default.debug(`Got multiple apps having the bundle identifier '${bundleId}': ` + `${_lodash.default.keys(appsMapping)}. Will return the most recent one`);
  }

  return _lodash.default.toPairs(appsMapping).reduce((acc, x) => x[1] > acc[1] ? x : acc)[0];
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJmaW5kQXBwUGF0aCIsImJ1bmRsZUlkIiwic3Rkb3V0Iiwib3V0cHV0IiwiZSIsImxvZyIsImluZm8iLCJzdGRlcnIiLCJtZXNzYWdlIiwibWF0Y2hlZFBhdGhzIiwiXyIsInRyaW0iLCJzcGxpdCIsIm1hcCIsInAiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwc01hcHBpbmciLCJtYXRjaGVkUGF0aCIsImZzIiwiZXhpc3RzIiwibXRpbWVNcyIsInN0YXQiLCJpc0VtcHR5Iiwic2l6ZSIsImRlYnVnIiwia2V5cyIsInRvUGFpcnMiLCJyZWR1Y2UiLCJhY2MiLCJ4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLGVBQWVBLFdBQWYsQ0FBNEJDLFFBQTVCLEVBQXNDO0FBQ3BDLE1BQUlDLE1BQUo7O0FBQ0EsTUFBSTtBQUNGLFVBQU1DLE1BQU0sR0FBRyxNQUFNLHdCQUFLLGlCQUFMLEVBQXdCLENBQzFDLDZCQUE0QkYsUUFBUyxFQURLLENBQXhCLENBQXJCO0FBR0FDLElBQUFBLE1BQU0sR0FBR0MsTUFBTSxDQUFDRCxNQUFoQjtBQUNELEdBTEQsQ0FLRSxPQUFPRSxDQUFQLEVBQVU7QUFDVkMsb0JBQUlDLElBQUosQ0FBU0YsQ0FBQyxDQUFDRyxNQUFGLElBQVlILENBQUMsQ0FBQ0ksT0FBdkI7O0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBTUMsWUFBWSxHQUFHQyxnQkFBRUMsSUFBRixDQUFPVCxNQUFQLEVBQ2xCVSxLQURrQixDQUNaLElBRFksRUFFbEJDLEdBRmtCLENBRWJDLENBQUQsSUFBT0osZ0JBQUVDLElBQUYsQ0FBT0csQ0FBUCxDQUZPLEVBR2xCQyxNQUhrQixDQUdYQyxPQUhXLENBQXJCOztBQUlBLFFBQU1DLFdBQVcsR0FBRyxFQUFwQjs7QUFDQSxPQUFLLE1BQU1DLFdBQVgsSUFBMEJULFlBQTFCLEVBQXdDO0FBQ3RDLFFBQUksTUFBTVUsa0JBQUdDLE1BQUgsQ0FBVUYsV0FBVixDQUFWLEVBQWtDO0FBQ2hDLFlBQU07QUFBQ0csUUFBQUE7QUFBRCxVQUFZLE1BQU1GLGtCQUFHRyxJQUFILENBQVFKLFdBQVIsQ0FBeEI7QUFDQUQsTUFBQUEsV0FBVyxDQUFDQyxXQUFELENBQVgsR0FBMkJHLE9BQTNCO0FBQ0Q7QUFDRjs7QUFDRCxNQUFJWCxnQkFBRWEsT0FBRixDQUFVTixXQUFWLENBQUosRUFBNEI7QUFDMUIsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0QsTUFBSVAsZ0JBQUVjLElBQUYsQ0FBT1AsV0FBUCxJQUFzQixDQUExQixFQUE2QjtBQUMzQlosb0JBQUlvQixLQUFKLENBQVcsbURBQWtEeEIsUUFBUyxLQUE1RCxHQUNQLEdBQUVTLGdCQUFFZ0IsSUFBRixDQUFPVCxXQUFQLENBQW9CLG1DQUR6QjtBQUVEOztBQUVELFNBQU9QLGdCQUFFaUIsT0FBRixDQUFVVixXQUFWLEVBQ0pXLE1BREksQ0FDRyxDQUFDQyxHQUFELEVBQU1DLENBQU4sS0FBYUEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPRCxHQUFHLENBQUMsQ0FBRCxDQUFWLEdBQWdCQyxDQUFoQixHQUFvQkQsR0FEcEMsRUFDMEMsQ0FEMUMsQ0FBUDtBQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5hc3luYyBmdW5jdGlvbiBmaW5kQXBwUGF0aCAoYnVuZGxlSWQpIHtcbiAgbGV0IHN0ZG91dDtcbiAgdHJ5IHtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBleGVjKCcvdXNyL2Jpbi9tZGZpbmQnLCBbXG4gICAgICBga01ESXRlbUNGQnVuZGxlSWRlbnRpZmllcj0ke2J1bmRsZUlkfWBcbiAgICBdKTtcbiAgICBzdGRvdXQgPSBvdXRwdXQuc3Rkb3V0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmluZm8oZS5zdGRlcnIgfHwgZS5tZXNzYWdlKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZWRQYXRocyA9IF8udHJpbShzdGRvdXQpXG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5tYXAoKHApID0+IF8udHJpbShwKSlcbiAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICBjb25zdCBhcHBzTWFwcGluZyA9IHt9O1xuICBmb3IgKGNvbnN0IG1hdGNoZWRQYXRoIG9mIG1hdGNoZWRQYXRocykge1xuICAgIGlmIChhd2FpdCBmcy5leGlzdHMobWF0Y2hlZFBhdGgpKSB7XG4gICAgICBjb25zdCB7bXRpbWVNc30gPSBhd2FpdCBmcy5zdGF0KG1hdGNoZWRQYXRoKTtcbiAgICAgIGFwcHNNYXBwaW5nW21hdGNoZWRQYXRoXSA9IG10aW1lTXM7XG4gICAgfVxuICB9XG4gIGlmIChfLmlzRW1wdHkoYXBwc01hcHBpbmcpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKF8uc2l6ZShhcHBzTWFwcGluZykgPiAxKSB7XG4gICAgbG9nLmRlYnVnKGBHb3QgbXVsdGlwbGUgYXBwcyBoYXZpbmcgdGhlIGJ1bmRsZSBpZGVudGlmaWVyICcke2J1bmRsZUlkfSc6IGAgK1xuICAgICAgYCR7Xy5rZXlzKGFwcHNNYXBwaW5nKX0uIFdpbGwgcmV0dXJuIHRoZSBtb3N0IHJlY2VudCBvbmVgKTtcbiAgfVxuICAvLyBHZXQgdGhlIG1vc3QgcmVjZW50IGFwcFxuICByZXR1cm4gXy50b1BhaXJzKGFwcHNNYXBwaW5nKVxuICAgIC5yZWR1Y2UoKGFjYywgeCkgPT4gKHhbMV0gPiBhY2NbMV0gPyB4IDogYWNjKSlbMF07XG59XG5cbmV4cG9ydCB7IGZpbmRBcHBQYXRoIH07XG4iXSwiZmlsZSI6ImxpYi91dGlscy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
