"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MacDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _appiumForMac = require("./appium-for-mac");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _logger = _interopRequireDefault(require("./logger"));

var _index = _interopRequireDefault(require("./commands/index"));

var _lodash = _interopRequireDefault(require("lodash"));

var _utils = require("./utils");

const NO_PROXY_LIST = [['GET', new RegExp('^/session/[^/]+/log/types')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/log')]];

class MacDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.jwpProxyActive = false;
    this.opts.address = opts.address || _appiumForMac.DEFAULT_A4M_HOST;
    this.desiredCapConstraints = _desiredCaps.default;

    for (const [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      MacDriver.prototype[cmd] = fn;
    }
  }

  async createSession(...args) {
    if (!_appiumSupport.system.isMac()) {
      throw new Error('AppiumForMac tests only run on the Mac');
    }

    try {
      let [sessionId, caps] = await super.createSession(...args);
      await this.startAppiumForMacSession();

      if (caps.app) {
        _logger.default.info(`Automatically navigating to app '${caps.app}'`);

        await this.a4mDriver.sendCommand('/url', 'POST', {
          url: caps.app
        });
      }

      return [sessionId, caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async startAppiumForMacSession() {
    let a4mAppPath = this.opts.a4mAppPath;

    if (!a4mAppPath) {
      _logger.default.debug(`The path to AppiumForMac server has not been provided explicitly. ` + `Trying to autodetect it`);

      a4mAppPath = await (0, _utils.findAppPath)(_appiumForMac.A4M_APP_BUNDLE_ID);

      if (a4mAppPath) {
        _logger.default.info(`Autodetected AppiumForMac server's location at '${a4mAppPath}'`);
      } else {
        a4mAppPath = _appiumForMac.REQ_A4M_APP_PATH;

        _logger.default.info(`Cannot autodetect AppiumForMac server's location. ` + `Using the default server path at '${a4mAppPath}'. Consider ` + `providing a custom path to 'a4mAppPath' capability if such behaviour ` + `is undesired`);
      }
    }

    this.opts.a4mAppPath = a4mAppPath;

    _lodash.default.defaults(this.opts, {
      a4mHost: _appiumForMac.DEFAULT_A4M_HOST,
      a4mPort: _appiumForMac.DEFAULT_A4M_PORT
    });

    this.a4mDriver = new _appiumForMac.AppiumForMac(this.opts);
    await this.a4mDriver.start();
    await this.a4mDriver.startSession(this.caps);
    this.proxyReqRes = this.a4mDriver.proxyReqRes.bind(this.a4mDriver);
    this.jwpProxyActive = true;
  }

  async deleteSession() {
    _logger.default.debug('Deleting AppiumForMac session');

    if (this.a4mDriver && this.jwpProxyActive) {
      await this.a4mDriver.deleteSession();
      await this.a4mDriver.stop();
      this.a4mDriver = null;
    }

    this.jwpProxyActive = false;
    await super.deleteSession();
  }

  proxyActive() {
    return true;
  }

  getProxyAvoidList() {
    return NO_PROXY_LIST;
  }

  canProxy() {
    return true;
  }

  get driverData() {
    return {
      A4MPort: this.opts.port
    };
  }

}

exports.MacDriver = MacDriver;
var _default = MacDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
