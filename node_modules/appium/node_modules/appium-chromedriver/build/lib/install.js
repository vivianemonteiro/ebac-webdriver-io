"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
exports.doInstall = doInstall;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _storageClient = _interopRequireDefault(require("./storage-client"));

var _utils = require("./utils");

const DOWNLOAD_TIMEOUT_MS = 15 * 1000;
const LATEST_VERSION = 'LATEST';

async function formatCdVersion(ver) {
  return ver === LATEST_VERSION ? (await (0, _utils.retrieveData)(`${_utils.CD_CDN}/LATEST_RELEASE`, {
    'user-agent': 'appium',
    accept: '*/*'
  }, {
    timeout: DOWNLOAD_TIMEOUT_MS
  })).trim() : ver;
}

async function prepareChromedriverDir(platformName) {
  const chromedriverDir = (0, _utils.getChromedriverDir)(platformName);

  if (!(await _appiumSupport.fs.exists(chromedriverDir))) {
    await (0, _appiumSupport.mkdirp)(chromedriverDir);
  }

  return chromedriverDir;
}

async function install() {
  const osInfo = await (0, _utils.getOsInfo)();
  const client = new _storageClient.default({
    chromedriverDir: await prepareChromedriverDir(osInfo.name)
  });
  await client.syncDrivers({
    osInfo,
    versions: [await formatCdVersion(_utils.CD_VER)]
  });
}

async function doInstall() {
  await install();
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbnN0YWxsLmpzIl0sIm5hbWVzIjpbIkRPV05MT0FEX1RJTUVPVVRfTVMiLCJMQVRFU1RfVkVSU0lPTiIsImZvcm1hdENkVmVyc2lvbiIsInZlciIsIkNEX0NETiIsImFjY2VwdCIsInRpbWVvdXQiLCJ0cmltIiwicHJlcGFyZUNocm9tZWRyaXZlckRpciIsInBsYXRmb3JtTmFtZSIsImNocm9tZWRyaXZlckRpciIsImZzIiwiZXhpc3RzIiwiaW5zdGFsbCIsIm9zSW5mbyIsImNsaWVudCIsIkNocm9tZWRyaXZlclN0b3JhZ2VDbGllbnQiLCJuYW1lIiwic3luY0RyaXZlcnMiLCJ2ZXJzaW9ucyIsIkNEX1ZFUiIsImRvSW5zdGFsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBS0EsTUFBTUEsbUJBQW1CLEdBQUcsS0FBSyxJQUFqQztBQUNBLE1BQU1DLGNBQWMsR0FBRyxRQUF2Qjs7QUFFQSxlQUFlQyxlQUFmLENBQWdDQyxHQUFoQyxFQUFxQztBQUNuQyxTQUFPQSxHQUFHLEtBQUtGLGNBQVIsR0FDSCxDQUFDLE1BQU0seUJBQWMsR0FBRUcsYUFBTyxpQkFBdkIsRUFBeUM7QUFDaEQsa0JBQWMsUUFEa0M7QUFFaERDLElBQUFBLE1BQU0sRUFBRTtBQUZ3QyxHQUF6QyxFQUdOO0FBQUVDLElBQUFBLE9BQU8sRUFBRU47QUFBWCxHQUhNLENBQVAsRUFHb0NPLElBSHBDLEVBREcsR0FLSEosR0FMSjtBQU1EOztBQUVELGVBQWVLLHNCQUFmLENBQXVDQyxZQUF2QyxFQUFxRDtBQUNuRCxRQUFNQyxlQUFlLEdBQUcsK0JBQW1CRCxZQUFuQixDQUF4Qjs7QUFDQSxNQUFJLEVBQUMsTUFBTUUsa0JBQUdDLE1BQUgsQ0FBVUYsZUFBVixDQUFQLENBQUosRUFBdUM7QUFDckMsVUFBTSwyQkFBT0EsZUFBUCxDQUFOO0FBQ0Q7O0FBQ0QsU0FBT0EsZUFBUDtBQUNEOztBQUVELGVBQWVHLE9BQWYsR0FBMEI7QUFDeEIsUUFBTUMsTUFBTSxHQUFHLE1BQU0sdUJBQXJCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHLElBQUlDLHNCQUFKLENBQThCO0FBQzNDTixJQUFBQSxlQUFlLEVBQUUsTUFBTUYsc0JBQXNCLENBQUNNLE1BQU0sQ0FBQ0csSUFBUjtBQURGLEdBQTlCLENBQWY7QUFHQSxRQUFNRixNQUFNLENBQUNHLFdBQVAsQ0FBbUI7QUFDdkJKLElBQUFBLE1BRHVCO0FBRXZCSyxJQUFBQSxRQUFRLEVBQUUsQ0FBQyxNQUFNakIsZUFBZSxDQUFDa0IsYUFBRCxDQUF0QjtBQUZhLEdBQW5CLENBQU47QUFJRDs7QUFFRCxlQUFlQyxTQUFmLEdBQTRCO0FBQzFCLFFBQU1SLE9BQU8sRUFBYjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMsIG1rZGlycCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBDaHJvbWVkcml2ZXJTdG9yYWdlQ2xpZW50IGZyb20gJy4vc3RvcmFnZS1jbGllbnQnO1xuaW1wb3J0IHtcbiAgQ0RfQ0ROLCBDRF9WRVIsIHJldHJpZXZlRGF0YSwgZ2V0T3NJbmZvLCBnZXRDaHJvbWVkcml2ZXJEaXIsXG59IGZyb20gJy4vdXRpbHMnO1xuXG5cbmNvbnN0IERPV05MT0FEX1RJTUVPVVRfTVMgPSAxNSAqIDEwMDA7XG5jb25zdCBMQVRFU1RfVkVSU0lPTiA9ICdMQVRFU1QnO1xuXG5hc3luYyBmdW5jdGlvbiBmb3JtYXRDZFZlcnNpb24gKHZlcikge1xuICByZXR1cm4gdmVyID09PSBMQVRFU1RfVkVSU0lPTlxuICAgID8gKGF3YWl0IHJldHJpZXZlRGF0YShgJHtDRF9DRE59L0xBVEVTVF9SRUxFQVNFYCwge1xuICAgICAgJ3VzZXItYWdlbnQnOiAnYXBwaXVtJyxcbiAgICAgIGFjY2VwdDogJyovKicsXG4gICAgfSwgeyB0aW1lb3V0OiBET1dOTE9BRF9USU1FT1VUX01TIH0pKS50cmltKClcbiAgICA6IHZlcjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJlcGFyZUNocm9tZWRyaXZlckRpciAocGxhdGZvcm1OYW1lKSB7XG4gIGNvbnN0IGNocm9tZWRyaXZlckRpciA9IGdldENocm9tZWRyaXZlckRpcihwbGF0Zm9ybU5hbWUpO1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhjaHJvbWVkcml2ZXJEaXIpKSB7XG4gICAgYXdhaXQgbWtkaXJwKGNocm9tZWRyaXZlckRpcik7XG4gIH1cbiAgcmV0dXJuIGNocm9tZWRyaXZlckRpcjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5zdGFsbCAoKSB7XG4gIGNvbnN0IG9zSW5mbyA9IGF3YWl0IGdldE9zSW5mbygpO1xuICBjb25zdCBjbGllbnQgPSBuZXcgQ2hyb21lZHJpdmVyU3RvcmFnZUNsaWVudCh7XG4gICAgY2hyb21lZHJpdmVyRGlyOiBhd2FpdCBwcmVwYXJlQ2hyb21lZHJpdmVyRGlyKG9zSW5mby5uYW1lKSxcbiAgfSk7XG4gIGF3YWl0IGNsaWVudC5zeW5jRHJpdmVycyh7XG4gICAgb3NJbmZvLFxuICAgIHZlcnNpb25zOiBbYXdhaXQgZm9ybWF0Q2RWZXJzaW9uKENEX1ZFUildLFxuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZG9JbnN0YWxsICgpIHtcbiAgYXdhaXQgaW5zdGFsbCgpO1xufVxuXG5leHBvcnQgeyBpbnN0YWxsLCBkb0luc3RhbGwgfTtcbiJdLCJmaWxlIjoibGliL2luc3RhbGwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
