"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChromeVersion = getChromeVersion;
exports.getChromedriverDir = getChromedriverDir;
exports.getChromedriverBinaryPath = getChromedriverBinaryPath;
exports.getMostRecentChromedriver = getMostRecentChromedriver;
exports.retrieveData = retrieveData;
exports.M1_ARCH_SUFFIX = exports.X86 = exports.X64 = exports.OS = exports.getOsInfo = exports.CHROMEDRIVER_CHROME_MAPPING = exports.CD_VER = exports.CD_CDN = exports.CD_BASE_DIR = exports.getOsName = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _compareVersions = _interopRequireDefault(require("compare-versions"));

var _axios = _interopRequireDefault(require("axios"));

var _teen_process = require("teen_process");

const rootDir = _path.default.basename(__dirname) === 'lib' ? _path.default.resolve(__dirname, process.env.NO_PRECOMPILE ? '..' : '../..') : __dirname;

const CHROMEDRIVER_CHROME_MAPPING = require(_path.default.resolve(rootDir, 'config', 'mapping.json'));

exports.CHROMEDRIVER_CHROME_MAPPING = CHROMEDRIVER_CHROME_MAPPING;
const CD_VER = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION || getMostRecentChromedriver();
exports.CD_VER = CD_VER;

const CD_BASE_DIR = _path.default.resolve(__dirname, '..', '..', 'chromedriver');

exports.CD_BASE_DIR = CD_BASE_DIR;
const CD_CDN = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || 'https://chromedriver.storage.googleapis.com';
exports.CD_CDN = CD_CDN;
const OS = {
  linux: 'linux',
  windows: 'win',
  mac: 'mac'
};
exports.OS = OS;
const X64 = '64';
exports.X64 = X64;
const X86 = '32';
exports.X86 = X86;
const M1_ARCH_SUFFIX = '_m1';
exports.M1_ARCH_SUFFIX = M1_ARCH_SUFFIX;
const CD_EXECUTABLE_PREFIX = 'chromedriver';

function getMostRecentChromedriver(mapping = CHROMEDRIVER_CHROME_MAPPING) {
  if (_lodash.default.isEmpty(mapping)) {
    throw new Error('Unable to get most recent Chromedriver version from empty mapping');
  }

  return _lodash.default.last(_lodash.default.keys(mapping).sort(_compareVersions.default));
}

async function getChromeVersion(adb, bundleId) {
  const {
    versionName
  } = await adb.getPackageInfo(bundleId);
  return versionName;
}

function getChromedriverDir(osName = getOsName()) {
  return _path.default.resolve(CD_BASE_DIR, osName);
}

async function getChromedriverBinaryPath(osName = getOsName()) {
  const rootDir = getChromedriverDir(osName);
  const pathSuffix = osName === OS.windows ? '.exe' : '';
  const paths = await _appiumSupport.fs.glob(`${CD_EXECUTABLE_PREFIX}*${pathSuffix}`, {
    cwd: rootDir,
    absolute: true,
    nocase: true,
    nodir: true,
    strict: false
  });
  return _lodash.default.isEmpty(paths) ? _path.default.resolve(rootDir, `${CD_EXECUTABLE_PREFIX}${pathSuffix}`) : _lodash.default.first(paths);
}

async function retrieveData(url, headers, opts = {}) {
  const {
    timeout = 5000,
    responseType = 'text'
  } = opts;
  return (await (0, _axios.default)({
    url,
    headers,
    timeout,
    responseType
  })).data;
}

const getOsName = _lodash.default.memoize(function getOsName() {
  if (_appiumSupport.system.isWindows()) {
    return OS.windows;
  }

  if (_appiumSupport.system.isMac()) {
    return OS.mac;
  }

  return OS.linux;
});

exports.getOsName = getOsName;

const getOsInfo = _lodash.default.memoize(async function getOsInfo() {
  return {
    name: getOsName(),
    arch: await _appiumSupport.system.arch(),
    hardwareName: _appiumSupport.system.isWindows() ? null : _lodash.default.trim(await (0, _teen_process.exec)('uname', ['-m']))
  };
});

exports.getOsInfo = getOsInfo;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
