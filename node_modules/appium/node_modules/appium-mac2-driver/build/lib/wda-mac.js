"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _axios = _interopRequireDefault(require("axios"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _portscanner = require("portscanner");

var _child_process = require("child_process");

var _utils = require("./utils");

const log = _appiumSupport.logger.getLogger('WebDriverAgentMac');

const ROOT_DIR = _path.default.basename(__dirname) === 'lib' ? _path.default.resolve(__dirname, process.env.NO_PRECOMPILE ? '..' : '../..') : __dirname;

const DEFAULT_WDA_ROOT = _path.default.resolve(ROOT_DIR, 'WebDriverAgentMac');

const WDA_PROJECT_NAME = 'WebDriverAgentMac.xcodeproj';

const WDA_PROJECT = (wdaRoot = DEFAULT_WDA_ROOT) => _path.default.resolve(wdaRoot, WDA_PROJECT_NAME);

const RUNNER_SCHEME = 'WebDriverAgentRunner';
const DISABLE_STORE_ARG = 'COMPILER_INDEX_STORE_ENABLE=NO';
const XCODEBUILD = 'xcodebuild';
const STARTUP_TIMEOUT_MS = 120000;
const DEFAULT_SYSTEM_PORT = 10100;
const DEFAULT_SYSTEM_HOST = '127.0.0.1';
const DEFAULT_SHOW_SERVER_LOGS = false;
const RUNNING_PROCESS_IDS = [];

const RECENT_UPGRADE_TIMESTAMP_PATH = _path.default.join('.appium', 'webdriveragent_mac', 'upgrade.time');

async function getUpgradeTimestamp() {
  const packageManifest = _path.default.resolve(ROOT_DIR, 'package.json');

  if (!(await _appiumSupport.fs.exists(packageManifest))) {
    return null;
  }

  const {
    mtime
  } = await _appiumSupport.fs.stat(packageManifest);
  return mtime.getTime();
}

async function cleanupObsoleteProcesses() {
  if (!_lodash.default.isEmpty(RUNNING_PROCESS_IDS)) {
    log.debug(`Cleaning up ${RUNNING_PROCESS_IDS.length} obsolete ` + _appiumSupport.util.pluralize('process', RUNNING_PROCESS_IDS.length, false));

    try {
      await (0, _teen_process.exec)('kill', ['-9', ...RUNNING_PROCESS_IDS]);
    } catch (ign) {}

    _lodash.default.pullAll(RUNNING_PROCESS_IDS, RUNNING_PROCESS_IDS);
  }
}

process.once('exit', () => {
  if (!_lodash.default.isEmpty(RUNNING_PROCESS_IDS)) {
    try {
      (0, _child_process.execSync)(`kill -9 ${RUNNING_PROCESS_IDS.join(' ')}`);
    } catch (ign) {}

    _lodash.default.pullAll(RUNNING_PROCESS_IDS, RUNNING_PROCESS_IDS);
  }
});

class WDAMacProxy extends _appiumBaseDriver.JWProxy {
  async proxyCommand(url, method, body = null) {
    if (this.didProcessExit) {
      throw new _appiumBaseDriver.errors.InvalidContextError(`'${method} ${url}' cannot be proxied to Mac2 Driver server because ` + 'its process is not running (probably crashed). Check the Appium log for more details');
    }

    return await super.proxyCommand(url, method, body);
  }

}

class WDAMacProcess {
  constructor() {
    this.showServerLogs = DEFAULT_SHOW_SERVER_LOGS;
    this.port = DEFAULT_SYSTEM_PORT;
    this.host = DEFAULT_SYSTEM_HOST;
    this.bootstrapRoot = DEFAULT_WDA_ROOT;
    this.proc = null;
  }

  get isRunning() {
    var _this$proc;

    return !!((_this$proc = this.proc) !== null && _this$proc !== void 0 && _this$proc.isRunning);
  }

  get pid() {
    return this.isRunning ? this.proc.pid : null;
  }

  async listChildrenPids() {
    return this.pid ? await (0, _utils.listChildrenProcessIds)(this.pid) : [];
  }

  async isFreshUpgrade() {
    const homeFolder = process.env.HOME;

    if (!homeFolder) {
      log.info('The HOME folder path cannot be determined');
      return false;
    }

    const currentUpgradeTimestamp = await getUpgradeTimestamp();

    if (!_lodash.default.isInteger(currentUpgradeTimestamp)) {
      log.info('It is impossible to determine the timestamp of the package');
      return false;
    }

    const timestampPath = _path.default.resolve(homeFolder, RECENT_UPGRADE_TIMESTAMP_PATH);

    if (await _appiumSupport.fs.exists(timestampPath)) {
      try {
        await _appiumSupport.fs.access(timestampPath, _appiumSupport.fs.W_OK);
      } catch (ign) {
        log.info(`WebDriverAgent upgrade timestamp at '${timestampPath}' is not writeable`);
        return false;
      }

      const recentUpgradeTimestamp = parseInt(await _appiumSupport.fs.readFile(timestampPath, 'utf8'), 10);

      if (_lodash.default.isInteger(recentUpgradeTimestamp)) {
        if (recentUpgradeTimestamp >= currentUpgradeTimestamp) {
          log.info(`WebDriverAgent sources are up to date ` + `(${recentUpgradeTimestamp} >= ${currentUpgradeTimestamp})`);
          return false;
        }

        log.info(`WebDriverAgent sources have been upgraded ` + `(${recentUpgradeTimestamp} < ${currentUpgradeTimestamp})`);
      } else {
        log.warn(`The recent upgrade timestamp at '${timestampPath}' is corrupted. Trying to fix it`);
      }
    }

    try {
      await (0, _appiumSupport.mkdirp)(_path.default.dirname(timestampPath));
      await _appiumSupport.fs.writeFile(timestampPath, `${currentUpgradeTimestamp}`, 'utf8');
      log.debug(`Stored the recent WebDriverAgent upgrade timestamp ${currentUpgradeTimestamp} ` + `at '${timestampPath}'`);
    } catch (e) {
      log.info(`Unable to create the recent WebDriverAgent upgrade timestamp at '${timestampPath}'. ` + `Original error: ${e.message}`);
      return false;
    }

    return true;
  }

  hasSameOpts({
    showServerLogs,
    systemPort,
    systemHost,
    bootstrapRoot
  }) {
    if (_lodash.default.isBoolean(showServerLogs) && this.showServerLogs !== showServerLogs || _lodash.default.isNil(showServerLogs) && this.showServerLogs !== DEFAULT_SHOW_SERVER_LOGS) {
      return false;
    }

    if (systemPort && this.port !== systemPort || !systemPort && this.port !== DEFAULT_SYSTEM_PORT) {
      return false;
    }

    if (systemHost && this.host !== systemHost || !systemHost && this.host !== DEFAULT_SYSTEM_HOST) {
      return false;
    }

    if (bootstrapRoot && this.bootstrapRoot !== bootstrapRoot || !bootstrapRoot && this.bootstrapRoot !== DEFAULT_WDA_ROOT) {
      return false;
    }

    return true;
  }

  async init(opts = {}) {
    var _opts$showServerLogs, _opts$systemPort, _opts$systemHost, _opts$bootstrapRoot;

    if (this.isRunning && this.hasSameOpts(opts)) {
      return false;
    }

    this.showServerLogs = (_opts$showServerLogs = opts.showServerLogs) !== null && _opts$showServerLogs !== void 0 ? _opts$showServerLogs : this.showServerLogs;
    this.port = (_opts$systemPort = opts.systemPort) !== null && _opts$systemPort !== void 0 ? _opts$systemPort : this.port;
    this.host = (_opts$systemHost = opts.systemHost) !== null && _opts$systemHost !== void 0 ? _opts$systemHost : this.host;
    this.bootstrapRoot = (_opts$bootstrapRoot = opts.bootstrapRoot) !== null && _opts$bootstrapRoot !== void 0 ? _opts$bootstrapRoot : this.bootstrapRoot;
    log.debug(`Using bootstrap root: ${this.bootstrapRoot}`);

    if (!(await _appiumSupport.fs.exists(WDA_PROJECT(this.bootstrapRoot)))) {
      throw new Error(`${WDA_PROJECT_NAME} does not exist at '${WDA_PROJECT(this.bootstrapRoot)}'. ` + `Was 'bootstrapRoot' set to a proper value?`);
    }

    await this.kill();
    await cleanupObsoleteProcesses();
    let xcodebuild;

    try {
      xcodebuild = await _appiumSupport.fs.which(XCODEBUILD);
    } catch (e) {
      throw new Error(`${XCODEBUILD} binary cannot be found in PATH. ` + `Please make sure that Xcode is installed on your system`);
    }

    log.debug(`Using ${XCODEBUILD} binary at '${xcodebuild}'`);

    if (await this.isFreshUpgrade()) {
      log.info('Performing project cleanup');
      const args = ['clean', '-project', WDA_PROJECT(this.bootstrapRoot), '-scheme', RUNNER_SCHEME];

      try {
        await (0, _teen_process.exec)(XCODEBUILD, args, {
          cwd: this.bootstrapRoot
        });
      } catch (e) {
        log.warn(`Cannot perform project cleanup. ` + `Original error: ${e.stderr || e.message}`);
      }
    }

    log.debug(`Using ${this.host} as server host`);
    log.debug(`Using port ${this.port}`);

    const isPortBusy = async () => (await (0, _portscanner.checkPortStatus)(this.port, this.host)) === 'open';

    if (await isPortBusy()) {
      log.warn(`The port #${this.port} at ${this.host} is busy. ` + `Assuming it is an obsolete WDA server instance and ` + `trying to terminate it in order to start a new one`);
      const timer = new _appiumSupport.timing.Timer().start();

      try {
        await _axios.default.delete(`http://${this.host}:${this.port}/`, {
          timeout: 5000
        });
        await _bluebird.default.delay(500);
        await (0, _asyncbox.waitForCondition)(async () => !(await isPortBusy()), {
          waitMs: 3000,
          intervalMs: 100
        });
      } catch (e) {
        log.warn(`Did not know how to terminate the process at ${this.host}:${this.port}: ${e.message}. ` + `Perhaps, it is not a WDA server, which is hogging the port?`);
        throw new Error(`The port #${this.port} at ${this.host} is busy. ` + `Consider setting 'systemPort' capability to another free port number and/or ` + `make sure previous driver sessions have been closed properly.`);
      }

      log.info(`The previously running WDA server has been successfully terminated after ` + `${Math.round(timer.getDuration().asMilliSeconds)}ms`);
    }

    const args = ['build-for-testing', 'test-without-building', '-project', WDA_PROJECT(this.bootstrapRoot), '-scheme', RUNNER_SCHEME, DISABLE_STORE_ARG];
    const env = Object.assign({}, process.env, {
      USE_PORT: `${this.port}`,
      USE_HOST: this.host
    });
    this.proc = new _teen_process.SubProcess(xcodebuild, args, {
      cwd: this.bootstrapRoot,
      env
    });

    if (!this.showServerLogs) {
      log.info(`Mac2Driver host process logging is disabled. ` + `All the ${XCODEBUILD} output is going to be suppressed. ` + `Set the 'showServerLogs' capability to 'true' if this is an undesired behavior`);
    }

    this.proc.on('output', (stdout, stderr) => {
      if (!this.showServerLogs) {
        return;
      }

      const line = _lodash.default.trim(stdout || stderr);

      if (line) {
        log.debug(`[${XCODEBUILD}] ${line}`);
      }
    });
    this.proc.on('exit', (code, signal) => {
      log.info(`Mac2Driver host process has exited with code ${code}, signal ${signal}`);
    });
    log.info(`Starting Mac2Driver host process: ${XCODEBUILD} ${_appiumSupport.util.quote(args)}`);
    await this.proc.start(0);
    return true;
  }

  async stop() {
    if (!this.isRunning) {
      return;
    }

    const childrenPids = await this.listChildrenPids();

    if (!_lodash.default.isEmpty(childrenPids)) {
      try {
        await (0, _teen_process.exec)('kill', childrenPids);
      } catch (ign) {}
    }

    await this.proc.stop('SIGTERM', 3000);
  }

  async kill() {
    if (!this.isRunning) {
      return;
    }

    const childrenPids = await this.listChildrenPids();

    if (!_lodash.default.isEmpty(childrenPids)) {
      try {
        await (0, _teen_process.exec)('kill', ['-9', ...childrenPids]);
      } catch (ign) {}
    }

    try {
      await this.proc.stop('SIGKILL');
    } catch (ign) {}
  }

}

class WDAMacServer {
  constructor() {
    this.process = null;
    this.serverStartupTimeoutMs = STARTUP_TIMEOUT_MS;
    this.proxy = null;
    this.isProxyingToRemoteServer = false;
  }

  async isProxyReady(throwOnExit = true) {
    if (!this.proxy) {
      return false;
    }

    try {
      await this.proxy.command('/status', 'GET');
      return true;
    } catch (err) {
      if (throwOnExit && this.proxy.didProcessExit) {
        throw new Error(err.message);
      }

      return false;
    }
  }

  parseProxyProperties(caps) {
    let scheme = 'http';

    if (!caps.webDriverAgentMacUrl) {
      var _ref, _this$process$host, _this$process, _ref2, _this$process$port, _this$process2;

      return {
        scheme,
        server: (_ref = (_this$process$host = (_this$process = this.process) === null || _this$process === void 0 ? void 0 : _this$process.host) !== null && _this$process$host !== void 0 ? _this$process$host : caps.systemHost) !== null && _ref !== void 0 ? _ref : DEFAULT_SYSTEM_HOST,
        port: (_ref2 = (_this$process$port = (_this$process2 = this.process) === null || _this$process2 === void 0 ? void 0 : _this$process2.port) !== null && _this$process$port !== void 0 ? _this$process$port : caps.systemPort) !== null && _ref2 !== void 0 ? _ref2 : DEFAULT_SYSTEM_PORT,
        path: ''
      };
    }

    let parsedUrl;

    try {
      parsedUrl = new _url.default.URL(caps.webDriverAgentMacUrl);
    } catch (e) {
      throw new Error(`webDriverAgentMacUrl, '${caps.webDriverAgentMacUrl}', ` + `in the capabilities is invalid. ${e.message}`);
    }

    const {
      protocol,
      hostname,
      port,
      pathname
    } = parsedUrl;

    if (_lodash.default.isString(protocol)) {
      scheme = protocol.split(':')[0];
    }

    return {
      scheme,
      server: hostname !== null && hostname !== void 0 ? hostname : DEFAULT_SYSTEM_HOST,
      port: _lodash.default.isEmpty(port) ? DEFAULT_SYSTEM_PORT : _lodash.default.parseInt(port),
      path: pathname === '/' ? '' : pathname
    };
  }

  async startSession(caps) {
    var _caps$serverStartupTi;

    this.serverStartupTimeoutMs = (_caps$serverStartupTi = caps.serverStartupTimeout) !== null && _caps$serverStartupTi !== void 0 ? _caps$serverStartupTi : this.serverStartupTimeoutMs;
    this.isProxyingToRemoteServer = !!caps.webDriverAgentMacUrl;
    let wasProcessInitNecessary;

    if (this.isProxyingToRemoteServer) {
      if (this.process) {
        await this.process.kill();
        await cleanupObsoleteProcesses();
        this.process = null;
      }

      wasProcessInitNecessary = false;
    } else {
      if (!this.process) {
        this.process = new WDAMacProcess();
      }

      wasProcessInitNecessary = await this.process.init(caps);
    }

    if (wasProcessInitNecessary || this.isProxyingToRemoteServer || !this.proxy) {
      const {
        scheme,
        server,
        port,
        path
      } = this.parseProxyProperties(caps);
      this.proxy = new WDAMacProxy({
        scheme,
        server,
        port,
        base: path,
        keepAlive: true
      });
      this.proxy.didProcessExit = false;

      if (this.process) {
        this.process.proc.on('exit', () => {
          this.proxy.didProcessExit = true;
        });
      }

      const timer = new _appiumSupport.timing.Timer().start();

      try {
        await (0, _asyncbox.waitForCondition)(async () => await this.isProxyReady(), {
          waitMs: this.serverStartupTimeoutMs,
          intervalMs: 1000
        });
      } catch (e) {
        var _this$process3;

        if ((_this$process3 = this.process) !== null && _this$process3 !== void 0 && _this$process3.isRunning) {
          await this.process.kill();
        }

        if (/Condition unmet/.test(e.message)) {
          const msg = this.isProxyingToRemoteServer ? `No response from '${scheme}://${server}:${port}${path}' within ${this.serverStartupTimeoutMs}ms timeout.` + `Please make sure the remote server is running and accessible by Appium` : `Mac2Driver server is not listening within ${this.serverStartupTimeoutMs}ms timeout. ` + `Try to increase the value of 'serverStartupTimeout' capability, check the server logs ` + `and make sure the ${XCODEBUILD} host process could be started manually from a terminal`;
          throw new Error(msg);
        }

        throw e;
      }

      if (this.process) {
        const pid = this.process.pid;
        const childrenPids = await this.process.listChildrenPids();
        RUNNING_PROCESS_IDS.push(...childrenPids, pid);
        this.process.proc.on('exit', () => void _lodash.default.pull(RUNNING_PROCESS_IDS, pid));
        log.info(`The host process is ready within ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
      }
    } else {
      log.info('The host process has already been listening. Proceeding with session creation');
    }

    await this.proxy.command('/session', 'POST', {
      capabilities: {
        firstMatch: [{}],
        alwaysMatch: caps
      }
    });
  }

  async stopSession() {
    var _this$process4, _this$proxy;

    if (!this.isProxyingToRemoteServer && !((_this$process4 = this.process) !== null && _this$process4 !== void 0 && _this$process4.isRunning)) {
      log.info(`Mac2Driver session cannot be stopped, because the server is not running`);
      return;
    }

    if ((_this$proxy = this.proxy) !== null && _this$proxy !== void 0 && _this$proxy.sessionId) {
      try {
        await this.proxy.command(`/session/${this.proxy.sessionId}`, 'DELETE');
      } catch (e) {
        log.info(`Mac2Driver session cannot be deleted. Original error: ${e.message}`);
      }
    }
  }

}

const WDA_MAC_SERVER = new WDAMacServer();
var _default = WDA_MAC_SERVER;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZGEtbWFjLmpzIl0sIm5hbWVzIjpbImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsIlJPT1RfRElSIiwicGF0aCIsImJhc2VuYW1lIiwiX19kaXJuYW1lIiwicmVzb2x2ZSIsInByb2Nlc3MiLCJlbnYiLCJOT19QUkVDT01QSUxFIiwiREVGQVVMVF9XREFfUk9PVCIsIldEQV9QUk9KRUNUX05BTUUiLCJXREFfUFJPSkVDVCIsIndkYVJvb3QiLCJSVU5ORVJfU0NIRU1FIiwiRElTQUJMRV9TVE9SRV9BUkciLCJYQ09ERUJVSUxEIiwiU1RBUlRVUF9USU1FT1VUX01TIiwiREVGQVVMVF9TWVNURU1fUE9SVCIsIkRFRkFVTFRfU1lTVEVNX0hPU1QiLCJERUZBVUxUX1NIT1dfU0VSVkVSX0xPR1MiLCJSVU5OSU5HX1BST0NFU1NfSURTIiwiUkVDRU5UX1VQR1JBREVfVElNRVNUQU1QX1BBVEgiLCJqb2luIiwiZ2V0VXBncmFkZVRpbWVzdGFtcCIsInBhY2thZ2VNYW5pZmVzdCIsImZzIiwiZXhpc3RzIiwibXRpbWUiLCJzdGF0IiwiZ2V0VGltZSIsImNsZWFudXBPYnNvbGV0ZVByb2Nlc3NlcyIsIl8iLCJpc0VtcHR5IiwiZGVidWciLCJsZW5ndGgiLCJ1dGlsIiwicGx1cmFsaXplIiwiaWduIiwicHVsbEFsbCIsIm9uY2UiLCJXREFNYWNQcm94eSIsIkpXUHJveHkiLCJwcm94eUNvbW1hbmQiLCJ1cmwiLCJtZXRob2QiLCJib2R5IiwiZGlkUHJvY2Vzc0V4aXQiLCJlcnJvcnMiLCJJbnZhbGlkQ29udGV4dEVycm9yIiwiV0RBTWFjUHJvY2VzcyIsImNvbnN0cnVjdG9yIiwic2hvd1NlcnZlckxvZ3MiLCJwb3J0IiwiaG9zdCIsImJvb3RzdHJhcFJvb3QiLCJwcm9jIiwiaXNSdW5uaW5nIiwicGlkIiwibGlzdENoaWxkcmVuUGlkcyIsImlzRnJlc2hVcGdyYWRlIiwiaG9tZUZvbGRlciIsIkhPTUUiLCJpbmZvIiwiY3VycmVudFVwZ3JhZGVUaW1lc3RhbXAiLCJpc0ludGVnZXIiLCJ0aW1lc3RhbXBQYXRoIiwiYWNjZXNzIiwiV19PSyIsInJlY2VudFVwZ3JhZGVUaW1lc3RhbXAiLCJwYXJzZUludCIsInJlYWRGaWxlIiwid2FybiIsImRpcm5hbWUiLCJ3cml0ZUZpbGUiLCJlIiwibWVzc2FnZSIsImhhc1NhbWVPcHRzIiwic3lzdGVtUG9ydCIsInN5c3RlbUhvc3QiLCJpc0Jvb2xlYW4iLCJpc05pbCIsImluaXQiLCJvcHRzIiwiRXJyb3IiLCJraWxsIiwieGNvZGVidWlsZCIsIndoaWNoIiwiYXJncyIsImN3ZCIsInN0ZGVyciIsImlzUG9ydEJ1c3kiLCJ0aW1lciIsInRpbWluZyIsIlRpbWVyIiwic3RhcnQiLCJheGlvcyIsImRlbGV0ZSIsInRpbWVvdXQiLCJCIiwiZGVsYXkiLCJ3YWl0TXMiLCJpbnRlcnZhbE1zIiwiTWF0aCIsInJvdW5kIiwiZ2V0RHVyYXRpb24iLCJhc01pbGxpU2Vjb25kcyIsIk9iamVjdCIsImFzc2lnbiIsIlVTRV9QT1JUIiwiVVNFX0hPU1QiLCJTdWJQcm9jZXNzIiwib24iLCJzdGRvdXQiLCJsaW5lIiwidHJpbSIsImNvZGUiLCJzaWduYWwiLCJxdW90ZSIsInN0b3AiLCJjaGlsZHJlblBpZHMiLCJXREFNYWNTZXJ2ZXIiLCJzZXJ2ZXJTdGFydHVwVGltZW91dE1zIiwicHJveHkiLCJpc1Byb3h5aW5nVG9SZW1vdGVTZXJ2ZXIiLCJpc1Byb3h5UmVhZHkiLCJ0aHJvd09uRXhpdCIsImNvbW1hbmQiLCJlcnIiLCJwYXJzZVByb3h5UHJvcGVydGllcyIsImNhcHMiLCJzY2hlbWUiLCJ3ZWJEcml2ZXJBZ2VudE1hY1VybCIsInNlcnZlciIsInBhcnNlZFVybCIsIlVSTCIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsImlzU3RyaW5nIiwic3BsaXQiLCJzdGFydFNlc3Npb24iLCJzZXJ2ZXJTdGFydHVwVGltZW91dCIsIndhc1Byb2Nlc3NJbml0TmVjZXNzYXJ5IiwiYmFzZSIsImtlZXBBbGl2ZSIsInRlc3QiLCJtc2ciLCJwdXNoIiwicHVsbCIsInRvRml4ZWQiLCJjYXBhYmlsaXRpZXMiLCJmaXJzdE1hdGNoIiwiYWx3YXlzTWF0Y2giLCJzdG9wU2Vzc2lvbiIsInNlc3Npb25JZCIsIldEQV9NQUNfU0VSVkVSIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLEdBQUcsR0FBR0Msc0JBQU9DLFNBQVAsQ0FBaUIsbUJBQWpCLENBQVo7O0FBRUEsTUFBTUMsUUFBUSxHQUFHQyxjQUFLQyxRQUFMLENBQWNDLFNBQWQsTUFBNkIsS0FBN0IsR0FDYkYsY0FBS0csT0FBTCxDQUFhRCxTQUFiLEVBQXdCRSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsYUFBWixHQUE0QixJQUE1QixHQUFtQyxPQUEzRCxDQURhLEdBRWJKLFNBRko7O0FBR0EsTUFBTUssZ0JBQWdCLEdBQUdQLGNBQUtHLE9BQUwsQ0FBYUosUUFBYixFQUF1QixtQkFBdkIsQ0FBekI7O0FBQ0EsTUFBTVMsZ0JBQWdCLEdBQUcsNkJBQXpCOztBQUNBLE1BQU1DLFdBQVcsR0FBRyxDQUFDQyxPQUFPLEdBQUdILGdCQUFYLEtBQWdDUCxjQUFLRyxPQUFMLENBQWFPLE9BQWIsRUFBc0JGLGdCQUF0QixDQUFwRDs7QUFDQSxNQUFNRyxhQUFhLEdBQUcsc0JBQXRCO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsZ0NBQTFCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLFlBQW5CO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsTUFBM0I7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxLQUE1QjtBQUNBLE1BQU1DLG1CQUFtQixHQUFHLFdBQTVCO0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUcsS0FBakM7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxFQUE1Qjs7QUFDQSxNQUFNQyw2QkFBNkIsR0FBR25CLGNBQUtvQixJQUFMLENBQVUsU0FBVixFQUNwQyxv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RixjQUFjLEdBQUcsSUFBSW5DLFlBQUosRUFBdkI7ZUFFZW1DLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgSldQcm94eSwgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IGZzLCBsb2dnZXIsIHV0aWwsIHRpbWluZywgbWtkaXJwIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgU3ViUHJvY2VzcywgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgY2hlY2tQb3J0U3RhdHVzIH0gZnJvbSAncG9ydHNjYW5uZXInO1xuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IGxpc3RDaGlsZHJlblByb2Nlc3NJZHMgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignV2ViRHJpdmVyQWdlbnRNYWMnKTtcblxuY29uc3QgUk9PVF9ESVIgPSBwYXRoLmJhc2VuYW1lKF9fZGlybmFtZSkgPT09ICdsaWInXG4gID8gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgcHJvY2Vzcy5lbnYuTk9fUFJFQ09NUElMRSA/ICcuLicgOiAnLi4vLi4nKVxuICA6IF9fZGlybmFtZTtcbmNvbnN0IERFRkFVTFRfV0RBX1JPT1QgPSBwYXRoLnJlc29sdmUoUk9PVF9ESVIsICdXZWJEcml2ZXJBZ2VudE1hYycpO1xuY29uc3QgV0RBX1BST0pFQ1RfTkFNRSA9ICdXZWJEcml2ZXJBZ2VudE1hYy54Y29kZXByb2onO1xuY29uc3QgV0RBX1BST0pFQ1QgPSAod2RhUm9vdCA9IERFRkFVTFRfV0RBX1JPT1QpID0+IHBhdGgucmVzb2x2ZSh3ZGFSb290LCBXREFfUFJPSkVDVF9OQU1FKTtcbmNvbnN0IFJVTk5FUl9TQ0hFTUUgPSAnV2ViRHJpdmVyQWdlbnRSdW5uZXInO1xuY29uc3QgRElTQUJMRV9TVE9SRV9BUkcgPSAnQ09NUElMRVJfSU5ERVhfU1RPUkVfRU5BQkxFPU5PJztcbmNvbnN0IFhDT0RFQlVJTEQgPSAneGNvZGVidWlsZCc7XG5jb25zdCBTVEFSVFVQX1RJTUVPVVRfTVMgPSAxMjAwMDA7XG5jb25zdCBERUZBVUxUX1NZU1RFTV9QT1JUID0gMTAxMDA7XG5jb25zdCBERUZBVUxUX1NZU1RFTV9IT1NUID0gJzEyNy4wLjAuMSc7XG5jb25zdCBERUZBVUxUX1NIT1dfU0VSVkVSX0xPR1MgPSBmYWxzZTtcbmNvbnN0IFJVTk5JTkdfUFJPQ0VTU19JRFMgPSBbXTtcbmNvbnN0IFJFQ0VOVF9VUEdSQURFX1RJTUVTVEFNUF9QQVRIID0gcGF0aC5qb2luKCcuYXBwaXVtJyxcbiAgJ3dlYmRyaXZlcmFnZW50X21hYycsICd1cGdyYWRlLnRpbWUnKTtcblxuXG5hc3luYyBmdW5jdGlvbiBnZXRVcGdyYWRlVGltZXN0YW1wICgpIHtcbiAgY29uc3QgcGFja2FnZU1hbmlmZXN0ID0gcGF0aC5yZXNvbHZlKFJPT1RfRElSLCAncGFja2FnZS5qc29uJyk7XG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKHBhY2thZ2VNYW5pZmVzdCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB7bXRpbWV9ID0gYXdhaXQgZnMuc3RhdChwYWNrYWdlTWFuaWZlc3QpO1xuICByZXR1cm4gbXRpbWUuZ2V0VGltZSgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjbGVhbnVwT2Jzb2xldGVQcm9jZXNzZXMgKCkge1xuICBpZiAoIV8uaXNFbXB0eShSVU5OSU5HX1BST0NFU1NfSURTKSkge1xuICAgIGxvZy5kZWJ1ZyhgQ2xlYW5pbmcgdXAgJHtSVU5OSU5HX1BST0NFU1NfSURTLmxlbmd0aH0gb2Jzb2xldGUgYCArXG4gICAgICB1dGlsLnBsdXJhbGl6ZSgncHJvY2VzcycsIFJVTk5JTkdfUFJPQ0VTU19JRFMubGVuZ3RoLCBmYWxzZSkpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBleGVjKCdraWxsJywgWyctOScsIC4uLlJVTk5JTkdfUFJPQ0VTU19JRFNdKTtcbiAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgXy5wdWxsQWxsKFJVTk5JTkdfUFJPQ0VTU19JRFMsIFJVTk5JTkdfUFJPQ0VTU19JRFMpO1xuICB9XG59XG5cbnByb2Nlc3Mub25jZSgnZXhpdCcsICgpID0+IHtcbiAgaWYgKCFfLmlzRW1wdHkoUlVOTklOR19QUk9DRVNTX0lEUykpIHtcbiAgICB0cnkge1xuICAgICAgZXhlY1N5bmMoYGtpbGwgLTkgJHtSVU5OSU5HX1BST0NFU1NfSURTLmpvaW4oJyAnKX1gKTtcbiAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgXy5wdWxsQWxsKFJVTk5JTkdfUFJPQ0VTU19JRFMsIFJVTk5JTkdfUFJPQ0VTU19JRFMpO1xuICB9XG59KTtcblxuXG5jbGFzcyBXREFNYWNQcm94eSBleHRlbmRzIEpXUHJveHkge1xuICBhc3luYyBwcm94eUNvbW1hbmQgKHVybCwgbWV0aG9kLCBib2R5ID0gbnVsbCkge1xuICAgIGlmICh0aGlzLmRpZFByb2Nlc3NFeGl0KSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRDb250ZXh0RXJyb3IoXG4gICAgICAgIGAnJHttZXRob2R9ICR7dXJsfScgY2Fubm90IGJlIHByb3hpZWQgdG8gTWFjMiBEcml2ZXIgc2VydmVyIGJlY2F1c2UgYCArXG4gICAgICAgICdpdHMgcHJvY2VzcyBpcyBub3QgcnVubmluZyAocHJvYmFibHkgY3Jhc2hlZCkuIENoZWNrIHRoZSBBcHBpdW0gbG9nIGZvciBtb3JlIGRldGFpbHMnKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLnByb3h5Q29tbWFuZCh1cmwsIG1ldGhvZCwgYm9keSk7XG4gIH1cbn1cblxuY2xhc3MgV0RBTWFjUHJvY2VzcyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnNob3dTZXJ2ZXJMb2dzID0gREVGQVVMVF9TSE9XX1NFUlZFUl9MT0dTO1xuICAgIHRoaXMucG9ydCA9IERFRkFVTFRfU1lTVEVNX1BPUlQ7XG4gICAgdGhpcy5ob3N0ID0gREVGQVVMVF9TWVNURU1fSE9TVDtcbiAgICB0aGlzLmJvb3RzdHJhcFJvb3QgPSBERUZBVUxUX1dEQV9ST09UO1xuICAgIHRoaXMucHJvYyA9IG51bGw7XG4gIH1cblxuICBnZXQgaXNSdW5uaW5nICgpIHtcbiAgICByZXR1cm4gISEodGhpcy5wcm9jPy5pc1J1bm5pbmcpO1xuICB9XG5cbiAgZ2V0IHBpZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSdW5uaW5nID8gdGhpcy5wcm9jLnBpZCA6IG51bGw7XG4gIH1cblxuICBhc3luYyBsaXN0Q2hpbGRyZW5QaWRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5waWQgPyAoYXdhaXQgbGlzdENoaWxkcmVuUHJvY2Vzc0lkcyh0aGlzLnBpZCkpIDogW107XG4gIH1cblxuICBhc3luYyBpc0ZyZXNoVXBncmFkZSAoKSB7XG4gICAgY29uc3QgaG9tZUZvbGRlciA9IHByb2Nlc3MuZW52LkhPTUU7XG4gICAgaWYgKCFob21lRm9sZGVyKSB7XG4gICAgICBsb2cuaW5mbygnVGhlIEhPTUUgZm9sZGVyIHBhdGggY2Fubm90IGJlIGRldGVybWluZWQnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50VXBncmFkZVRpbWVzdGFtcCA9IGF3YWl0IGdldFVwZ3JhZGVUaW1lc3RhbXAoKTtcbiAgICBpZiAoIV8uaXNJbnRlZ2VyKGN1cnJlbnRVcGdyYWRlVGltZXN0YW1wKSkge1xuICAgICAgbG9nLmluZm8oJ0l0IGlzIGltcG9zc2libGUgdG8gZGV0ZXJtaW5lIHRoZSB0aW1lc3RhbXAgb2YgdGhlIHBhY2thZ2UnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB0aW1lc3RhbXBQYXRoID0gcGF0aC5yZXNvbHZlKGhvbWVGb2xkZXIsIFJFQ0VOVF9VUEdSQURFX1RJTUVTVEFNUF9QQVRIKTtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHRpbWVzdGFtcFBhdGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBmcy5hY2Nlc3ModGltZXN0YW1wUGF0aCwgZnMuV19PSyk7XG4gICAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgICAgbG9nLmluZm8oYFdlYkRyaXZlckFnZW50IHVwZ3JhZGUgdGltZXN0YW1wIGF0ICcke3RpbWVzdGFtcFBhdGh9JyBpcyBub3Qgd3JpdGVhYmxlYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlY2VudFVwZ3JhZGVUaW1lc3RhbXAgPSBwYXJzZUludChhd2FpdCBmcy5yZWFkRmlsZSh0aW1lc3RhbXBQYXRoLCAndXRmOCcpLCAxMCk7XG4gICAgICBpZiAoXy5pc0ludGVnZXIocmVjZW50VXBncmFkZVRpbWVzdGFtcCkpIHtcbiAgICAgICAgaWYgKHJlY2VudFVwZ3JhZGVUaW1lc3RhbXAgPj0gY3VycmVudFVwZ3JhZGVUaW1lc3RhbXApIHtcbiAgICAgICAgICBsb2cuaW5mbyhgV2ViRHJpdmVyQWdlbnQgc291cmNlcyBhcmUgdXAgdG8gZGF0ZSBgICtcbiAgICAgICAgICAgIGAoJHtyZWNlbnRVcGdyYWRlVGltZXN0YW1wfSA+PSAke2N1cnJlbnRVcGdyYWRlVGltZXN0YW1wfSlgKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmluZm8oYFdlYkRyaXZlckFnZW50IHNvdXJjZXMgaGF2ZSBiZWVuIHVwZ3JhZGVkIGAgK1xuICAgICAgICAgIGAoJHtyZWNlbnRVcGdyYWRlVGltZXN0YW1wfSA8ICR7Y3VycmVudFVwZ3JhZGVUaW1lc3RhbXB9KWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLndhcm4oYFRoZSByZWNlbnQgdXBncmFkZSB0aW1lc3RhbXAgYXQgJyR7dGltZXN0YW1wUGF0aH0nIGlzIGNvcnJ1cHRlZC4gVHJ5aW5nIHRvIGZpeCBpdGApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBta2RpcnAocGF0aC5kaXJuYW1lKHRpbWVzdGFtcFBhdGgpKTtcbiAgICAgIGF3YWl0IGZzLndyaXRlRmlsZSh0aW1lc3RhbXBQYXRoLCBgJHtjdXJyZW50VXBncmFkZVRpbWVzdGFtcH1gLCAndXRmOCcpO1xuICAgICAgbG9nLmRlYnVnKGBTdG9yZWQgdGhlIHJlY2VudCBXZWJEcml2ZXJBZ2VudCB1cGdyYWRlIHRpbWVzdGFtcCAke2N1cnJlbnRVcGdyYWRlVGltZXN0YW1wfSBgICtcbiAgICAgICAgYGF0ICcke3RpbWVzdGFtcFBhdGh9J2ApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZy5pbmZvKGBVbmFibGUgdG8gY3JlYXRlIHRoZSByZWNlbnQgV2ViRHJpdmVyQWdlbnQgdXBncmFkZSB0aW1lc3RhbXAgYXQgJyR7dGltZXN0YW1wUGF0aH0nLiBgICtcbiAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGhhc1NhbWVPcHRzICh7IHNob3dTZXJ2ZXJMb2dzLCBzeXN0ZW1Qb3J0LCBzeXN0ZW1Ib3N0LCBib290c3RyYXBSb290IH0pIHtcbiAgICBpZiAoXy5pc0Jvb2xlYW4oc2hvd1NlcnZlckxvZ3MpICYmIHRoaXMuc2hvd1NlcnZlckxvZ3MgIT09IHNob3dTZXJ2ZXJMb2dzXG4gICAgICB8fCBfLmlzTmlsKHNob3dTZXJ2ZXJMb2dzKSAmJiB0aGlzLnNob3dTZXJ2ZXJMb2dzICE9PSBERUZBVUxUX1NIT1dfU0VSVkVSX0xPR1MpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN5c3RlbVBvcnQgJiYgdGhpcy5wb3J0ICE9PSBzeXN0ZW1Qb3J0XG4gICAgICB8fCAhc3lzdGVtUG9ydCAmJiB0aGlzLnBvcnQgIT09IERFRkFVTFRfU1lTVEVNX1BPUlQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN5c3RlbUhvc3QgJiYgdGhpcy5ob3N0ICE9PSBzeXN0ZW1Ib3N0XG4gICAgICB8fCAhc3lzdGVtSG9zdCAmJiB0aGlzLmhvc3QgIT09IERFRkFVTFRfU1lTVEVNX0hPU1QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGJvb3RzdHJhcFJvb3QgJiYgdGhpcy5ib290c3RyYXBSb290ICE9PSBib290c3RyYXBSb290XG4gICAgICB8fCAhYm9vdHN0cmFwUm9vdCAmJiB0aGlzLmJvb3RzdHJhcFJvb3QgIT09IERFRkFVTFRfV0RBX1JPT1QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGluaXQgKG9wdHMgPSB7fSkge1xuICAgIGlmICh0aGlzLmlzUnVubmluZyAmJiB0aGlzLmhhc1NhbWVPcHRzKG9wdHMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zaG93U2VydmVyTG9ncyA9IG9wdHMuc2hvd1NlcnZlckxvZ3MgPz8gdGhpcy5zaG93U2VydmVyTG9ncztcbiAgICB0aGlzLnBvcnQgPSBvcHRzLnN5c3RlbVBvcnQgPz8gdGhpcy5wb3J0O1xuICAgIHRoaXMuaG9zdCA9IG9wdHMuc3lzdGVtSG9zdCA/PyB0aGlzLmhvc3Q7XG4gICAgdGhpcy5ib290c3RyYXBSb290ID0gb3B0cy5ib290c3RyYXBSb290ID8/IHRoaXMuYm9vdHN0cmFwUm9vdDtcblxuICAgIGxvZy5kZWJ1ZyhgVXNpbmcgYm9vdHN0cmFwIHJvb3Q6ICR7dGhpcy5ib290c3RyYXBSb290fWApO1xuICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKFdEQV9QUk9KRUNUKHRoaXMuYm9vdHN0cmFwUm9vdCkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7V0RBX1BST0pFQ1RfTkFNRX0gZG9lcyBub3QgZXhpc3QgYXQgJyR7V0RBX1BST0pFQ1QodGhpcy5ib290c3RyYXBSb290KX0nLiBgICtcbiAgICAgICAgYFdhcyAnYm9vdHN0cmFwUm9vdCcgc2V0IHRvIGEgcHJvcGVyIHZhbHVlP2ApO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMua2lsbCgpO1xuICAgIGF3YWl0IGNsZWFudXBPYnNvbGV0ZVByb2Nlc3NlcygpO1xuXG4gICAgbGV0IHhjb2RlYnVpbGQ7XG4gICAgdHJ5IHtcbiAgICAgIHhjb2RlYnVpbGQgPSBhd2FpdCBmcy53aGljaChYQ09ERUJVSUxEKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7WENPREVCVUlMRH0gYmluYXJ5IGNhbm5vdCBiZSBmb3VuZCBpbiBQQVRILiBgICtcbiAgICAgICAgYFBsZWFzZSBtYWtlIHN1cmUgdGhhdCBYY29kZSBpcyBpbnN0YWxsZWQgb24geW91ciBzeXN0ZW1gKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBVc2luZyAke1hDT0RFQlVJTER9IGJpbmFyeSBhdCAnJHt4Y29kZWJ1aWxkfSdgKTtcblxuICAgIGlmIChhd2FpdCB0aGlzLmlzRnJlc2hVcGdyYWRlKCkpIHtcbiAgICAgIGxvZy5pbmZvKCdQZXJmb3JtaW5nIHByb2plY3QgY2xlYW51cCcpO1xuICAgICAgY29uc3QgYXJncyA9IFtcbiAgICAgICAgJ2NsZWFuJyxcbiAgICAgICAgJy1wcm9qZWN0JywgV0RBX1BST0pFQ1QodGhpcy5ib290c3RyYXBSb290KSxcbiAgICAgICAgJy1zY2hlbWUnLCBSVU5ORVJfU0NIRU1FLFxuICAgICAgXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGV4ZWMoWENPREVCVUlMRCwgYXJncywge1xuICAgICAgICAgIGN3ZDogdGhpcy5ib290c3RyYXBSb290LFxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLndhcm4oYENhbm5vdCBwZXJmb3JtIHByb2plY3QgY2xlYW51cC4gYCArXG4gICAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsb2cuZGVidWcoYFVzaW5nICR7dGhpcy5ob3N0fSBhcyBzZXJ2ZXIgaG9zdGApO1xuICAgIGxvZy5kZWJ1ZyhgVXNpbmcgcG9ydCAke3RoaXMucG9ydH1gKTtcbiAgICBjb25zdCBpc1BvcnRCdXN5ID0gYXN5bmMgKCkgPT4gKGF3YWl0IGNoZWNrUG9ydFN0YXR1cyh0aGlzLnBvcnQsIHRoaXMuaG9zdCkpID09PSAnb3Blbic7XG4gICAgaWYgKGF3YWl0IGlzUG9ydEJ1c3koKSkge1xuICAgICAgbG9nLndhcm4oYFRoZSBwb3J0ICMke3RoaXMucG9ydH0gYXQgJHt0aGlzLmhvc3R9IGlzIGJ1c3kuIGAgK1xuICAgICAgICBgQXNzdW1pbmcgaXQgaXMgYW4gb2Jzb2xldGUgV0RBIHNlcnZlciBpbnN0YW5jZSBhbmQgYCArXG4gICAgICAgIGB0cnlpbmcgdG8gdGVybWluYXRlIGl0IGluIG9yZGVyIHRvIHN0YXJ0IGEgbmV3IG9uZWApO1xuICAgICAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGF4aW9zLmRlbGV0ZShgaHR0cDovLyR7dGhpcy5ob3N0fToke3RoaXMucG9ydH0vYCwge1xuICAgICAgICAgIHRpbWVvdXQ6IDUwMDAsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBHaXZlIHRoZSBzZXJ2ZXIgc29tZSB0aW1lIHRvIGZpbmlzaCBhbmQgc3RvcCBsaXN0ZW5pbmdcbiAgICAgICAgYXdhaXQgQi5kZWxheSg1MDApO1xuICAgICAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+ICEoYXdhaXQgaXNQb3J0QnVzeSgpKSwge1xuICAgICAgICAgIHdhaXRNczogMzAwMCxcbiAgICAgICAgICBpbnRlcnZhbE1zOiAxMDAsXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cud2FybihgRGlkIG5vdCBrbm93IGhvdyB0byB0ZXJtaW5hdGUgdGhlIHByb2Nlc3MgYXQgJHt0aGlzLmhvc3R9OiR7dGhpcy5wb3J0fTogJHtlLm1lc3NhZ2V9LiBgICtcbiAgICAgICAgICBgUGVyaGFwcywgaXQgaXMgbm90IGEgV0RBIHNlcnZlciwgd2hpY2ggaXMgaG9nZ2luZyB0aGUgcG9ydD9gKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcG9ydCAjJHt0aGlzLnBvcnR9IGF0ICR7dGhpcy5ob3N0fSBpcyBidXN5LiBgICtcbiAgICAgICAgICBgQ29uc2lkZXIgc2V0dGluZyAnc3lzdGVtUG9ydCcgY2FwYWJpbGl0eSB0byBhbm90aGVyIGZyZWUgcG9ydCBudW1iZXIgYW5kL29yIGAgK1xuICAgICAgICAgIGBtYWtlIHN1cmUgcHJldmlvdXMgZHJpdmVyIHNlc3Npb25zIGhhdmUgYmVlbiBjbG9zZWQgcHJvcGVybHkuYCk7XG4gICAgICB9XG4gICAgICBsb2cuaW5mbyhgVGhlIHByZXZpb3VzbHkgcnVubmluZyBXREEgc2VydmVyIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSB0ZXJtaW5hdGVkIGFmdGVyIGAgK1xuICAgICAgICBgJHtNYXRoLnJvdW5kKHRpbWVyLmdldER1cmF0aW9uKCkuYXNNaWxsaVNlY29uZHMpfW1zYCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXJncyA9IFtcbiAgICAgICdidWlsZC1mb3ItdGVzdGluZycsICd0ZXN0LXdpdGhvdXQtYnVpbGRpbmcnLFxuICAgICAgJy1wcm9qZWN0JywgV0RBX1BST0pFQ1QodGhpcy5ib290c3RyYXBSb290KSxcbiAgICAgICctc2NoZW1lJywgUlVOTkVSX1NDSEVNRSxcbiAgICAgIERJU0FCTEVfU1RPUkVfQVJHLFxuICAgIF07XG4gICAgY29uc3QgZW52ID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvY2Vzcy5lbnYsIHtcbiAgICAgIFVTRV9QT1JUOiBgJHt0aGlzLnBvcnR9YCxcbiAgICAgIFVTRV9IT1NUOiB0aGlzLmhvc3QsXG4gICAgfSk7XG4gICAgdGhpcy5wcm9jID0gbmV3IFN1YlByb2Nlc3MoeGNvZGVidWlsZCwgYXJncywge1xuICAgICAgY3dkOiB0aGlzLmJvb3RzdHJhcFJvb3QsXG4gICAgICBlbnYsXG4gICAgfSk7XG4gICAgaWYgKCF0aGlzLnNob3dTZXJ2ZXJMb2dzKSB7XG4gICAgICBsb2cuaW5mbyhgTWFjMkRyaXZlciBob3N0IHByb2Nlc3MgbG9nZ2luZyBpcyBkaXNhYmxlZC4gYCArXG4gICAgICAgIGBBbGwgdGhlICR7WENPREVCVUlMRH0gb3V0cHV0IGlzIGdvaW5nIHRvIGJlIHN1cHByZXNzZWQuIGAgK1xuICAgICAgICBgU2V0IHRoZSAnc2hvd1NlcnZlckxvZ3MnIGNhcGFiaWxpdHkgdG8gJ3RydWUnIGlmIHRoaXMgaXMgYW4gdW5kZXNpcmVkIGJlaGF2aW9yYCk7XG4gICAgfVxuICAgIHRoaXMucHJvYy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuc2hvd1NlcnZlckxvZ3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsaW5lID0gXy50cmltKHN0ZG91dCB8fCBzdGRlcnIpO1xuICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBbJHtYQ09ERUJVSUxEfV0gJHtsaW5lfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucHJvYy5vbignZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIGxvZy5pbmZvKGBNYWMyRHJpdmVyIGhvc3QgcHJvY2VzcyBoYXMgZXhpdGVkIHdpdGggY29kZSAke2NvZGV9LCBzaWduYWwgJHtzaWduYWx9YCk7XG4gICAgfSk7XG4gICAgbG9nLmluZm8oYFN0YXJ0aW5nIE1hYzJEcml2ZXIgaG9zdCBwcm9jZXNzOiAke1hDT0RFQlVJTER9ICR7dXRpbC5xdW90ZShhcmdzKX1gKTtcbiAgICBhd2FpdCB0aGlzLnByb2Muc3RhcnQoMCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBzdG9wICgpIHtcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW5QaWRzID0gYXdhaXQgdGhpcy5saXN0Q2hpbGRyZW5QaWRzKCk7XG4gICAgaWYgKCFfLmlzRW1wdHkoY2hpbGRyZW5QaWRzKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZXhlYygna2lsbCcsIGNoaWxkcmVuUGlkcyk7XG4gICAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgfVxuICAgIGF3YWl0IHRoaXMucHJvYy5zdG9wKCdTSUdURVJNJywgMzAwMCk7XG4gIH1cblxuICBhc3luYyBraWxsICgpIHtcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW5QaWRzID0gYXdhaXQgdGhpcy5saXN0Q2hpbGRyZW5QaWRzKCk7XG4gICAgaWYgKCFfLmlzRW1wdHkoY2hpbGRyZW5QaWRzKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZXhlYygna2lsbCcsIFsnLTknLCAuLi5jaGlsZHJlblBpZHNdKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucHJvYy5zdG9wKCdTSUdLSUxMJyk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICB9XG59XG5cbmNsYXNzIFdEQU1hY1NlcnZlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnByb2Nlc3MgPSBudWxsO1xuICAgIHRoaXMuc2VydmVyU3RhcnR1cFRpbWVvdXRNcyA9IFNUQVJUVVBfVElNRU9VVF9NUztcbiAgICB0aGlzLnByb3h5ID0gbnVsbDtcblxuICAgIC8vIFRvIGhhbmRsZSBpZiB0aGUgV0RBTWFjIHNlcnZlciBpcyBwcm94eWluZyByZXF1ZXN0cyB0byBhIHJlbW90ZSBXREFNYWMgYXBwIGluc3RhbmNlXG4gICAgdGhpcy5pc1Byb3h5aW5nVG9SZW1vdGVTZXJ2ZXIgPSBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIGlzUHJveHlSZWFkeSAodGhyb3dPbkV4aXQgPSB0cnVlKSB7XG4gICAgaWYgKCF0aGlzLnByb3h5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucHJveHkuY29tbWFuZCgnL3N0YXR1cycsICdHRVQnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHRocm93T25FeGl0ICYmIHRoaXMucHJveHkuZGlkUHJvY2Vzc0V4aXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm94eVByb3BlcnRpZXNcbiAgICpcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHNjaGVtZSAtIFRoZSBzY2hlbWUgcHJveHkgdG8uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBob3N0IC0gVGhlIGhvc3QgbmFtZSBwcm94eSB0by5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHBvcnQgLSBUaGUgcG9ydCBudW1iZXIgcHJveHkgdG8uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggcHJveHkgdG8uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHByb3h5IGluZm9ybWF0aW9uIHdoZXJlIFdEQU1hY1NlcnZlciBwcm94eSB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhcHMgLSBUaGUgY2FwYWJpbGl0aWVzIGluIHRoZSBzZXNzaW9uLlxuICAgKiBAcmV0dXJuIHtQcm94eVByb3BlcnRpZXN9XG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgJ3dlYkRyaXZlckFnZW50TWFjVXJsJyBoYWQgaW52YWxpZCBVUkxcbiAgICovXG4gIHBhcnNlUHJveHlQcm9wZXJ0aWVzIChjYXBzKSB7XG4gICAgbGV0IHNjaGVtZSA9ICdodHRwJztcbiAgICBpZiAoIWNhcHMud2ViRHJpdmVyQWdlbnRNYWNVcmwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZSxcbiAgICAgICAgc2VydmVyOiAodGhpcy5wcm9jZXNzPy5ob3N0ID8/IGNhcHMuc3lzdGVtSG9zdCkgPz8gREVGQVVMVF9TWVNURU1fSE9TVCxcbiAgICAgICAgcG9ydDogKHRoaXMucHJvY2Vzcz8ucG9ydCA/PyBjYXBzLnN5c3RlbVBvcnQpID8/IERFRkFVTFRfU1lTVEVNX1BPUlQsXG4gICAgICAgIHBhdGg6ICcnXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBwYXJzZWRVcmw7XG4gICAgdHJ5IHtcbiAgICAgIHBhcnNlZFVybCA9IG5ldyB1cmwuVVJMKGNhcHMud2ViRHJpdmVyQWdlbnRNYWNVcmwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgd2ViRHJpdmVyQWdlbnRNYWNVcmwsICcke2NhcHMud2ViRHJpdmVyQWdlbnRNYWNVcmx9JywgYCArXG4gICAgICAgIGBpbiB0aGUgY2FwYWJpbGl0aWVzIGlzIGludmFsaWQuICR7ZS5tZXNzYWdlfWApO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBwYXRobmFtZSB9ID0gcGFyc2VkVXJsO1xuICAgIGlmIChfLmlzU3RyaW5nKHByb3RvY29sKSkge1xuICAgICAgc2NoZW1lID0gcHJvdG9jb2wuc3BsaXQoJzonKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjaGVtZSxcbiAgICAgIHNlcnZlcjogaG9zdG5hbWUgPz8gREVGQVVMVF9TWVNURU1fSE9TVCxcbiAgICAgIHBvcnQ6IF8uaXNFbXB0eShwb3J0KSA/IERFRkFVTFRfU1lTVEVNX1BPUlQgOiBfLnBhcnNlSW50KHBvcnQpLFxuICAgICAgcGF0aDogcGF0aG5hbWUgPT09ICcvJyA/ICcnIDogcGF0aG5hbWVcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgc3RhcnRTZXNzaW9uIChjYXBzKSB7XG4gICAgdGhpcy5zZXJ2ZXJTdGFydHVwVGltZW91dE1zID0gY2Fwcy5zZXJ2ZXJTdGFydHVwVGltZW91dCA/PyB0aGlzLnNlcnZlclN0YXJ0dXBUaW1lb3V0TXM7XG5cbiAgICB0aGlzLmlzUHJveHlpbmdUb1JlbW90ZVNlcnZlciA9ICEhY2Fwcy53ZWJEcml2ZXJBZ2VudE1hY1VybDtcblxuICAgIGxldCB3YXNQcm9jZXNzSW5pdE5lY2Vzc2FyeTtcbiAgICBpZiAodGhpcy5pc1Byb3h5aW5nVG9SZW1vdGVTZXJ2ZXIpIHtcbiAgICAgIGlmICh0aGlzLnByb2Nlc3MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzLmtpbGwoKTtcbiAgICAgICAgYXdhaXQgY2xlYW51cE9ic29sZXRlUHJvY2Vzc2VzKCk7XG4gICAgICAgIHRoaXMucHJvY2VzcyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHdhc1Byb2Nlc3NJbml0TmVjZXNzYXJ5ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5wcm9jZXNzKSB7XG4gICAgICAgIHRoaXMucHJvY2VzcyA9IG5ldyBXREFNYWNQcm9jZXNzKCk7XG4gICAgICB9XG4gICAgICB3YXNQcm9jZXNzSW5pdE5lY2Vzc2FyeSA9IGF3YWl0IHRoaXMucHJvY2Vzcy5pbml0KGNhcHMpO1xuICAgIH1cblxuICAgIGlmICh3YXNQcm9jZXNzSW5pdE5lY2Vzc2FyeSB8fCB0aGlzLmlzUHJveHlpbmdUb1JlbW90ZVNlcnZlciB8fCAhdGhpcy5wcm94eSkge1xuICAgICAgY29uc3Qge3NjaGVtZSwgc2VydmVyLCBwb3J0LCBwYXRofSA9IHRoaXMucGFyc2VQcm94eVByb3BlcnRpZXMoY2Fwcyk7XG4gICAgICB0aGlzLnByb3h5ID0gbmV3IFdEQU1hY1Byb3h5KHtcbiAgICAgICAgc2NoZW1lLFxuICAgICAgICBzZXJ2ZXIsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIGJhc2U6IHBhdGgsXG4gICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm94eS5kaWRQcm9jZXNzRXhpdCA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5wcm9jZXNzKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzcy5wcm9jLm9uKCdleGl0JywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMucHJveHkuZGlkUHJvY2Vzc0V4aXQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5pc1Byb3h5UmVhZHkoKSwge1xuICAgICAgICAgIHdhaXRNczogdGhpcy5zZXJ2ZXJTdGFydHVwVGltZW91dE1zLFxuICAgICAgICAgIGludGVydmFsTXM6IDEwMDAsXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAodGhpcy5wcm9jZXNzPy5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAvLyBhdm9pZCBcImZyb3plblwiIHByb2Nlc3NlcyxcbiAgICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3Mua2lsbCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvQ29uZGl0aW9uIHVubWV0Ly50ZXN0KGUubWVzc2FnZSkpIHtcbiAgICAgICAgICBjb25zdCBtc2cgPSB0aGlzLmlzUHJveHlpbmdUb1JlbW90ZVNlcnZlclxuICAgICAgICAgICAgPyBgTm8gcmVzcG9uc2UgZnJvbSAnJHtzY2hlbWV9Oi8vJHtzZXJ2ZXJ9OiR7cG9ydH0ke3BhdGh9JyB3aXRoaW4gJHt0aGlzLnNlcnZlclN0YXJ0dXBUaW1lb3V0TXN9bXMgdGltZW91dC5gICtcbiAgICAgICAgICAgIGBQbGVhc2UgbWFrZSBzdXJlIHRoZSByZW1vdGUgc2VydmVyIGlzIHJ1bm5pbmcgYW5kIGFjY2Vzc2libGUgYnkgQXBwaXVtYFxuICAgICAgICAgICAgOiBgTWFjMkRyaXZlciBzZXJ2ZXIgaXMgbm90IGxpc3RlbmluZyB3aXRoaW4gJHt0aGlzLnNlcnZlclN0YXJ0dXBUaW1lb3V0TXN9bXMgdGltZW91dC4gYCArXG4gICAgICAgICAgICBgVHJ5IHRvIGluY3JlYXNlIHRoZSB2YWx1ZSBvZiAnc2VydmVyU3RhcnR1cFRpbWVvdXQnIGNhcGFiaWxpdHksIGNoZWNrIHRoZSBzZXJ2ZXIgbG9ncyBgICtcbiAgICAgICAgICAgIGBhbmQgbWFrZSBzdXJlIHRoZSAke1hDT0RFQlVJTER9IGhvc3QgcHJvY2VzcyBjb3VsZCBiZSBzdGFydGVkIG1hbnVhbGx5IGZyb20gYSB0ZXJtaW5hbGA7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvY2Vzcykge1xuICAgICAgICBjb25zdCBwaWQgPSB0aGlzLnByb2Nlc3MucGlkO1xuICAgICAgICBjb25zdCBjaGlsZHJlblBpZHMgPSBhd2FpdCB0aGlzLnByb2Nlc3MubGlzdENoaWxkcmVuUGlkcygpO1xuICAgICAgICBSVU5OSU5HX1BST0NFU1NfSURTLnB1c2goLi4uY2hpbGRyZW5QaWRzLCBwaWQpO1xuICAgICAgICB0aGlzLnByb2Nlc3MucHJvYy5vbignZXhpdCcsICgpID0+IHZvaWQgXy5wdWxsKFJVTk5JTkdfUFJPQ0VTU19JRFMsIHBpZCkpO1xuICAgICAgICBsb2cuaW5mbyhgVGhlIGhvc3QgcHJvY2VzcyBpcyByZWFkeSB3aXRoaW4gJHt0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzLnRvRml4ZWQoMCl9bXNgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmluZm8oJ1RoZSBob3N0IHByb2Nlc3MgaGFzIGFscmVhZHkgYmVlbiBsaXN0ZW5pbmcuIFByb2NlZWRpbmcgd2l0aCBzZXNzaW9uIGNyZWF0aW9uJyk7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5wcm94eS5jb21tYW5kKCcvc2Vzc2lvbicsICdQT1NUJywge1xuICAgICAgY2FwYWJpbGl0aWVzOiB7XG4gICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICAgIGFsd2F5c01hdGNoOiBjYXBzLFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc3RvcFNlc3Npb24gKCkge1xuICAgIGlmICghdGhpcy5pc1Byb3h5aW5nVG9SZW1vdGVTZXJ2ZXIgJiYgISh0aGlzLnByb2Nlc3M/LmlzUnVubmluZykpIHtcbiAgICAgIGxvZy5pbmZvKGBNYWMyRHJpdmVyIHNlc3Npb24gY2Fubm90IGJlIHN0b3BwZWQsIGJlY2F1c2UgdGhlIHNlcnZlciBpcyBub3QgcnVubmluZ2ApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3h5Py5zZXNzaW9uSWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMucHJveHkuY29tbWFuZChgL3Nlc3Npb24vJHt0aGlzLnByb3h5LnNlc3Npb25JZH1gLCAnREVMRVRFJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5pbmZvKGBNYWMyRHJpdmVyIHNlc3Npb24gY2Fubm90IGJlIGRlbGV0ZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgV0RBX01BQ19TRVJWRVIgPSBuZXcgV0RBTWFjU2VydmVyKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFdEQV9NQUNfU0VSVkVSO1xuIl0sImZpbGUiOiJsaWIvd2RhLW1hYy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
