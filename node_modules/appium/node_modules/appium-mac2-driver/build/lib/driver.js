"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _wdaMac = _interopRequireDefault(require("./wda-mac"));

var _desiredCaps = require("./desired-caps");

var _index = _interopRequireDefault(require("./commands/index"));

var _logger = _interopRequireDefault(require("./logger"));

const NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/element/[^/]+/elements?$')], ['POST', new RegExp('^/session/[^/]+/elements?$')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute/sync')], ['GET', new RegExp('^/session/[^/]+/timeouts$')], ['POST', new RegExp('^/session/[^/]+/timeouts$')]];

class Mac2Driver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}) {
    super(opts);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.locatorStrategies = ['id', 'name', 'accessibility id', 'xpath', 'class name', '-ios predicate string', 'predicate string', '-ios class chain', 'class chain'];
    this.resetState();
    this.settings = new _appiumBaseDriver.DeviceSettings({}, this.onSettingsUpdate.bind(this));

    for (const [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      Mac2Driver.prototype[cmd] = fn;
    }
  }

  async onSettingsUpdate(key, value) {
    return await this.wda.proxy.command('/appium/settings', 'POST', {
      settings: {
        [key]: value
      }
    });
  }

  resetState() {
    this.wda = null;
    this.proxyReqRes = null;
    this.isProxyActive = false;
    this._screenRecorder = null;
  }

  proxyActive() {
    return this.isProxyActive;
  }

  getProxyAvoidList() {
    return NO_PROXY;
  }

  canProxy() {
    return true;
  }

  async createSession(...args) {
    const [sessionId, caps] = await super.createSession(...args);
    this.wda = _wdaMac.default;

    try {
      if (caps.prerun) {
        if (!_lodash.default.isString(caps.prerun.command) && !_lodash.default.isString(caps.prerun.script)) {
          throw new Error(`'prerun' capability value must either contain ` + `'script' or 'command' entry of string type`);
        }

        _logger.default.info('Executing prerun AppleScript');

        const output = await this.macosExecAppleScript(caps.prerun);

        if (_lodash.default.trim(output)) {
          _logger.default.info(`Prerun script output: ${output}`);
        }
      }

      await this.wda.startSession(caps);
    } catch (e) {
      await this.deleteSession();
      throw e;
    }

    this.proxyReqRes = this.wda.proxy.proxyReqRes.bind(this.wda.proxy);
    this.isProxyActive = true;
    return [sessionId, caps];
  }

  async deleteSession() {
    var _this$_screenRecorder, _this$wda;

    await ((_this$_screenRecorder = this._screenRecorder) === null || _this$_screenRecorder === void 0 ? void 0 : _this$_screenRecorder.stop(true));
    await ((_this$wda = this.wda) === null || _this$wda === void 0 ? void 0 : _this$wda.stopSession());

    if (this.opts.postrun) {
      if (!_lodash.default.isString(this.opts.postrun.command) && !_lodash.default.isString(this.opts.postrun.script)) {
        _logger.default.error(`'postrun' capability value must either contain ` + `'script' or 'command' entry of string type`);
      } else {
        _logger.default.info('Executing postrun AppleScript');

        try {
          const output = await this.macosExecAppleScript(this.opts.postrun);

          if (_lodash.default.trim(output)) {
            _logger.default.info(`Postrun script output: ${output}`);
          }
        } catch (e) {
          _logger.default.error(e.message);
        }
      }
    }

    this.resetState();
    await super.deleteSession();
  }

}

var _default = Mac2Driver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
