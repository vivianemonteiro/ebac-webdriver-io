"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _path = _interopRequireDefault(require("path"));

const OSASCRIPT = 'osascript';
const APPLE_SCRIPT_FEATURE = 'apple_script';
const commands = {};
exports.commands = commands;

commands.macosExecAppleScript = async function macosExecAppleScript(opts = {}) {
  this.ensureFeatureEnabled(APPLE_SCRIPT_FEATURE);
  const {
    script,
    language,
    command,
    cwd,
    timeout
  } = opts;

  if (!script && !command) {
    _logger.default.errorAndThrow('AppleScript script/command must not be empty');
  }

  if (/\n/.test(command)) {
    _logger.default.errorAndThrow('AppleScript commands cannot contain line breaks');
  }

  const shouldRunScript = !command;
  const args = [];

  if (language) {
    args.push('-l', language);
  }

  let tmpRoot;

  try {
    if (shouldRunScript) {
      tmpRoot = await _appiumSupport.tempDir.openDir();

      const tmpScriptPath = _path.default.resolve(tmpRoot, 'appium_script.scpt');

      await _appiumSupport.fs.writeFile(tmpScriptPath, script, 'utf8');
      args.push(tmpScriptPath);
    } else {
      args.push('-e', command);
    }

    _logger.default.info(`Running ${OSASCRIPT} with arguments: ${_appiumSupport.util.quote(args)}`);

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(OSASCRIPT, args, {
        cwd,
        timeout
      });
      return stdout;
    } catch (e) {
      throw new Error(e.stderr || e.message);
    }
  } finally {
    if (tmpRoot) {
      await _appiumSupport.fs.rimraf(tmpRoot);
    }
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hcHBsZXNjcmlwdC5qcyJdLCJuYW1lcyI6WyJPU0FTQ1JJUFQiLCJBUFBMRV9TQ1JJUFRfRkVBVFVSRSIsImNvbW1hbmRzIiwibWFjb3NFeGVjQXBwbGVTY3JpcHQiLCJvcHRzIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJzY3JpcHQiLCJsYW5ndWFnZSIsImNvbW1hbmQiLCJjd2QiLCJ0aW1lb3V0IiwibG9nIiwiZXJyb3JBbmRUaHJvdyIsInRlc3QiLCJzaG91bGRSdW5TY3JpcHQiLCJhcmdzIiwicHVzaCIsInRtcFJvb3QiLCJ0ZW1wRGlyIiwib3BlbkRpciIsInRtcFNjcmlwdFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImZzIiwid3JpdGVGaWxlIiwiaW5mbyIsInV0aWwiLCJxdW90ZSIsInN0ZG91dCIsImUiLCJFcnJvciIsInN0ZGVyciIsIm1lc3NhZ2UiLCJyaW1yYWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsU0FBUyxHQUFHLFdBQWxCO0FBQ0EsTUFBTUMsb0JBQW9CLEdBQUcsY0FBN0I7QUFFQSxNQUFNQyxRQUFRLEdBQUcsRUFBakI7OztBQThCQUEsUUFBUSxDQUFDQyxvQkFBVCxHQUFnQyxlQUFlQSxvQkFBZixDQUFxQ0MsSUFBSSxHQUFHLEVBQTVDLEVBQWdEO0FBQzlFLE9BQUtDLG9CQUFMLENBQTBCSixvQkFBMUI7QUFFQSxRQUFNO0FBQ0pLLElBQUFBLE1BREk7QUFFSkMsSUFBQUEsUUFGSTtBQUdKQyxJQUFBQSxPQUhJO0FBSUpDLElBQUFBLEdBSkk7QUFLSkMsSUFBQUE7QUFMSSxNQU1GTixJQU5KOztBQU9BLE1BQUksQ0FBQ0UsTUFBRCxJQUFXLENBQUNFLE9BQWhCLEVBQXlCO0FBQ3ZCRyxvQkFBSUMsYUFBSixDQUFrQiw4Q0FBbEI7QUFDRDs7QUFDRCxNQUFJLEtBQUtDLElBQUwsQ0FBVUwsT0FBVixDQUFKLEVBQXdCO0FBQ3RCRyxvQkFBSUMsYUFBSixDQUFrQixpREFBbEI7QUFDRDs7QUFFRCxRQUFNRSxlQUFlLEdBQUcsQ0FBQ04sT0FBekI7QUFFQSxRQUFNTyxJQUFJLEdBQUcsRUFBYjs7QUFDQSxNQUFJUixRQUFKLEVBQWM7QUFDWlEsSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsSUFBVixFQUFnQlQsUUFBaEI7QUFDRDs7QUFDRCxNQUFJVSxPQUFKOztBQUNBLE1BQUk7QUFDRixRQUFJSCxlQUFKLEVBQXFCO0FBQ25CRyxNQUFBQSxPQUFPLEdBQUcsTUFBTUMsdUJBQVFDLE9BQVIsRUFBaEI7O0FBQ0EsWUFBTUMsYUFBYSxHQUFHQyxjQUFLQyxPQUFMLENBQWFMLE9BQWIsRUFBc0Isb0JBQXRCLENBQXRCOztBQUNBLFlBQU1NLGtCQUFHQyxTQUFILENBQWFKLGFBQWIsRUFBNEJkLE1BQTVCLEVBQW9DLE1BQXBDLENBQU47QUFDQVMsTUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVVJLGFBQVY7QUFDRCxLQUxELE1BS087QUFDTEwsTUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsSUFBVixFQUFnQlIsT0FBaEI7QUFDRDs7QUFDREcsb0JBQUljLElBQUosQ0FBVSxXQUFVekIsU0FBVSxvQkFBbUIwQixvQkFBS0MsS0FBTCxDQUFXWixJQUFYLENBQWlCLEVBQWxFOztBQUNBLFFBQUk7QUFDRixZQUFNO0FBQUNhLFFBQUFBO0FBQUQsVUFBVyxNQUFNLHdCQUFLNUIsU0FBTCxFQUFnQmUsSUFBaEIsRUFBc0I7QUFBQ04sUUFBQUEsR0FBRDtBQUFNQyxRQUFBQTtBQUFOLE9BQXRCLENBQXZCO0FBQ0EsYUFBT2tCLE1BQVA7QUFDRCxLQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsWUFBTSxJQUFJQyxLQUFKLENBQVVELENBQUMsQ0FBQ0UsTUFBRixJQUFZRixDQUFDLENBQUNHLE9BQXhCLENBQU47QUFDRDtBQUNGLEdBaEJELFNBZ0JVO0FBQ1IsUUFBSWYsT0FBSixFQUFhO0FBQ1gsWUFBTU0sa0JBQUdVLE1BQUgsQ0FBVWhCLE9BQVYsQ0FBTjtBQUNEO0FBQ0Y7QUFDRixDQTdDRDs7ZUFnRGVmLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcywgdGVtcERpciwgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IE9TQVNDUklQVCA9ICdvc2FzY3JpcHQnO1xuY29uc3QgQVBQTEVfU0NSSVBUX0ZFQVRVUkUgPSAnYXBwbGVfc2NyaXB0JztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFeGVjQXBwbGVTY3JpcHRPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHNjcmlwdCBBIHZhbGlkIEFwcGxlU2NyaXB0IHRvIGV4ZWN1dGVcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gbGFuZ3VhZ2UgT3ZlcnJpZGVzIHRoZSBzY3JpcHRpbmcgbGFuZ3VhZ2UuIEJhc2ljYWxseSwgc2V0cyB0aGUgdmFsdWUgb2YgYC1sYCBjb21tYW5kXG4gKiBsaW5lIGFyZ3VtZW50IG9mIGBvc2FzY3JpcHRgIHRvb2wuIElmIHVuc2V0IHRoZSBBcHBsZVNjcmlwdCBsYW5ndWFnZSBpcyBhc3N1bWVkLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBjb21tYW5kIEEgdmFsaWQgQXBwbGVTY3JpcHQgYXMgYSBzaW5nbGUgY29tbWFuZCAobm8gbGluZSBicmVha3MpIHRvIGV4ZWN1dGVcbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gdGltZW91dCBbMjAwMDBdIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byB3YWl0IHVudGlsIGEgbG9uZy1ydW5uaW5nIGNvbW1hbmQgaXNcbiAqIGZpbmlzaGVkLiBBbiBlcnJvciBpcyB0aHJvd24gaWYgdGhlIGNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciB0aGlzIHRpbWVvdXQgZXhwaXJlcy5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gY3dkIFRoZSBwYXRoIHRvIGFuIGV4aXN0aW5nIGZvbGRlciwgd2hpY2ggaXMgZ29pbmcgdG8gYmUgc2V0IGFzIHRoZVxuICogd29ya2luZyBkaXJlY3RvcnkgZm9yIHRoZSBjb21tYW5kL3NjcmlwdCBiZWluZyBleGVjdXRlZC5cbiAqL1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBnaXZlbiBBcHBsZVNjcmlwdCBjb21tYW5kIG9yIGEgd2hvbGUgc2NyaXB0IGJhc2VkIG9uIHRoZVxuICogZ2l2ZW4gb3B0aW9ucy4gRWl0aGVyIG9mIHRoZXNlIG9wdGlvbnMgbXVzdCBiZSBwcm92aWRlZC4gSWYgYm90aCBhcmUgcHJvdmlkZWRcbiAqIHRoZW4gdGhlIGBjb21tYW5kYCBvbmUgZ2V0cyB0aGUgcHJpb3JpdHkuXG4gKiBOb3RlIHRoYXQgQXBwbGVTY3JpcHQgY29tbWFuZCBjYW5ub3QgY29udGFpbiBsaW5lIGJyZWFrcy4gQ29uc2lkZXIgbWFraW5nIGl0XG4gKiB0byBhIHNjcmlwdCBpbiBzdWNoIGNhc2UuXG4gKiBOb3RlIHRoYXQgYnkgZGVmYXVsdCBBcHBsZVNjcmlwdCBlbmdpbmUgYmxvY2tzIGNvbW1hbmRzL3NjcmlwdHMgZXhlY3V0aW9uIGlmIHlvdXIgc2NyaXB0XG4gKiBpcyB0cnlpbmcgdG8gYWNjZXNzIHNvbWUgcHJpdmF0ZSBlbnRpdGllcywgbGlrZSBjYW1lcmFzIG9yIHRoZSBkZXNrdG9wIHNjcmVlblxuICogYW5kIG5vIHBlcm1pc3Npb25zIHRvIGRvIGl0IGFyZSBnaXZlbiB0byB0aGUgcGFyZW50IChmb3IgZXhhbXBsZSwgQXBwaXVtIG9yIFRlcm1pbmFsKVxuICogcHJvY2VzcyBpbiBTeXN0ZW0gUHJlZmVyZW5jZXMgLT4gUHJpdmFjeSBsaXN0LlxuICpcbiAqIEBwYXJhbSB7IUV4ZWNBcHBsZVNjcmlwdE9wdGlvbnN9IG9wdHNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBhY3R1YWwgc3Rkb3V0IG9mIHRoZSBnaXZlbiBjb21tYW5kL3NjcmlwdFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBleGl0IGNvZGUgb2YgdGhlIGdpdmVuIGNvbW1hbmQvc2NyaXB0IGlzIG5vdCB6ZXJvLlxuICogVGhlIGFjdHVhbCBzdGRlcnIgb3V0cHV0IGlzIHNldCB0byB0aGUgZXJyb3IgbWVzc2FnZSB2YWx1ZS5cbiAqL1xuY29tbWFuZHMubWFjb3NFeGVjQXBwbGVTY3JpcHQgPSBhc3luYyBmdW5jdGlvbiBtYWNvc0V4ZWNBcHBsZVNjcmlwdCAob3B0cyA9IHt9KSB7XG4gIHRoaXMuZW5zdXJlRmVhdHVyZUVuYWJsZWQoQVBQTEVfU0NSSVBUX0ZFQVRVUkUpO1xuXG4gIGNvbnN0IHtcbiAgICBzY3JpcHQsXG4gICAgbGFuZ3VhZ2UsXG4gICAgY29tbWFuZCxcbiAgICBjd2QsXG4gICAgdGltZW91dCxcbiAgfSA9IG9wdHM7XG4gIGlmICghc2NyaXB0ICYmICFjb21tYW5kKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ0FwcGxlU2NyaXB0IHNjcmlwdC9jb21tYW5kIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cbiAgaWYgKC9cXG4vLnRlc3QoY29tbWFuZCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnQXBwbGVTY3JpcHQgY29tbWFuZHMgY2Fubm90IGNvbnRhaW4gbGluZSBicmVha3MnKTtcbiAgfVxuICAvLyAnY29tbWFuZCcgaGFzIHByaW9yaXR5IG92ZXIgJ3NjcmlwdCdcbiAgY29uc3Qgc2hvdWxkUnVuU2NyaXB0ID0gIWNvbW1hbmQ7XG5cbiAgY29uc3QgYXJncyA9IFtdO1xuICBpZiAobGFuZ3VhZ2UpIHtcbiAgICBhcmdzLnB1c2goJy1sJywgbGFuZ3VhZ2UpO1xuICB9XG4gIGxldCB0bXBSb290O1xuICB0cnkge1xuICAgIGlmIChzaG91bGRSdW5TY3JpcHQpIHtcbiAgICAgIHRtcFJvb3QgPSBhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKTtcbiAgICAgIGNvbnN0IHRtcFNjcmlwdFBhdGggPSBwYXRoLnJlc29sdmUodG1wUm9vdCwgJ2FwcGl1bV9zY3JpcHQuc2NwdCcpO1xuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHRtcFNjcmlwdFBhdGgsIHNjcmlwdCwgJ3V0ZjgnKTtcbiAgICAgIGFyZ3MucHVzaCh0bXBTY3JpcHRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJncy5wdXNoKCctZScsIGNvbW1hbmQpO1xuICAgIH1cbiAgICBsb2cuaW5mbyhgUnVubmluZyAke09TQVNDUklQVH0gd2l0aCBhcmd1bWVudHM6ICR7dXRpbC5xdW90ZShhcmdzKX1gKTtcbiAgICB0cnkge1xuICAgICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKE9TQVNDUklQVCwgYXJncywge2N3ZCwgdGltZW91dH0pO1xuICAgICAgcmV0dXJuIHN0ZG91dDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZS5zdGRlcnIgfHwgZS5tZXNzYWdlKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHRtcFJvb3QpIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZih0bXBSb290KTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2FwcGxlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
