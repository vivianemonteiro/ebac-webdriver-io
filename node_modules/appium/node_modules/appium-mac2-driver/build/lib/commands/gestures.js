"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _appiumBaseDriver = require("appium-base-driver");

const commands = {};

function extractUuid(options = {}, keyNames = ['elementId', 'element']) {
  for (const name of keyNames) {
    if (options[name]) {
      const result = _appiumSupport.util.unwrapElement(options[name]);

      if (result) {
        return result;
      }
    }
  }

  return null;
}

function requireUuid(options = {}, keyNames = ['elementId', 'element']) {
  const result = extractUuid(options, keyNames);

  if (!result) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError(`${keyNames[0]} field is mandatory`);
  }

  return result;
}

commands.macosSetValue = async function macosSetValue(opts = {}) {
  const uuid = requireUuid(opts);
  const {
    value,
    text,
    keyModifierFlags
  } = opts;
  return await this.wda.proxy.command(`/element/${uuid}/value`, 'POST', {
    value,
    text,
    keyModifierFlags
  });
};

commands.macosClick = async function macosClick(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/element/${uuid}/click` : '/wda/click';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosScroll = async function macosScroll(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    deltaX,
    deltaY,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/scroll` : '/wda/scroll';
  return await this.wda.proxy.command(url, 'POST', {
    deltaX,
    deltaY,
    x,
    y,
    keyModifierFlags
  });
};

commands.macosSwipe = async function macosSwipe(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    direction,
    velocity,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/swipe` : `/wda/swipe`;
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    direction,
    velocity,
    keyModifierFlags
  });
};

commands.macosRightClick = async function macosRightClick(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/rightClick` : '/wda/rightClick';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosHover = async function macosHover(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/hover` : '/wda/hover';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosDoubleClick = async function macosDoubleClick(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/doubleClick` : '/wda/doubleClick';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosClickAndDrag = async function macosClickAndDrag(opts = {}) {
  const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
  const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
  const {
    startX,
    startY,
    endX,
    endY,
    duration,
    keyModifierFlags
  } = opts;
  const url = sourceUuid && destUuid ? `/wda/element/${sourceUuid}/clickAndDrag` : '/wda/clickAndDrag';

  const dest = destUuid && _appiumSupport.util.wrapElement(destUuid);

  return await this.wda.proxy.command(url, 'POST', {
    startX,
    startY,
    endX,
    endY,
    duration,
    dest,
    keyModifierFlags
  });
};

commands.macosClickAndDragAndHold = async function macosClickAndDragAndHold(opts = {}) {
  const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
  const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
  const {
    startX,
    startY,
    endX,
    endY,
    duration,
    holdDuration,
    velocity,
    keyModifierFlags
  } = opts;
  const url = sourceUuid && destUuid ? `/wda/element/${sourceUuid}/clickAndDragAndHold` : '/wda/clickAndDragAndHold';

  const dest = destUuid && _appiumSupport.util.wrapElement(destUuid);

  return await this.wda.proxy.command(url, 'POST', {
    startX,
    startY,
    endX,
    endY,
    duration,
    holdDuration,
    velocity,
    dest,
    keyModifierFlags
  });
};

commands.macosKeys = async function macosKeys(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    keys
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/keys` : '/wda/keys';
  return await this.wda.proxy.command(url, 'POST', {
    keys
  });
};

commands.macosPressAndHold = async function macosPressAndHold(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    duration,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/press` : '/wda/press';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    duration,
    keyModifierFlags
  });
};

commands.macosTap = async function macosTap(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/tap` : '/wda/tap';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosDoubleTap = async function macosDoubleTap(opts = {}) {
  const uuid = extractUuid(opts);
  const {
    x,
    y,
    keyModifierFlags
  } = opts;
  const url = uuid ? `/wda/element/${uuid}/doubleTap` : '/wda/doubleTap';
  return await this.wda.proxy.command(url, 'POST', {
    x,
    y,
    keyModifierFlags
  });
};

commands.macosPressAndDrag = async function macosPressAndDrag(opts = {}) {
  const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
  const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
  const {
    startX,
    startY,
    endX,
    endY,
    duration,
    keyModifierFlags
  } = opts;
  const url = sourceUuid && destUuid ? `/wda/element/${sourceUuid}/pressAndDrag` : '/wda/pressAndDrag';

  const dest = destUuid && _appiumSupport.util.wrapElement(destUuid);

  return await this.wda.proxy.command(url, 'POST', {
    startX,
    startY,
    endX,
    endY,
    duration,
    dest,
    keyModifierFlags
  });
};

commands.macosPressAndDragAndHold = async function macosPressAndDragAndHold(opts = {}) {
  const sourceUuid = extractUuid(opts, ['sourceElementId', 'sourceElement']);
  const destUuid = extractUuid(opts, ['destinationElementId', 'destinationElement']);
  const {
    startX,
    startY,
    endX,
    endY,
    duration,
    holdDuration,
    velocity,
    keyModifierFlags
  } = opts;
  const url = sourceUuid && destUuid ? `/wda/element/${sourceUuid}/pressAndDragAndHold` : '/wda/pressAndDragAndHold';

  const dest = destUuid && _appiumSupport.util.wrapElement(destUuid);

  return await this.wda.proxy.command(url, 'POST', {
    startX,
    startY,
    endX,
    endY,
    duration,
    holdDuration,
    velocity,
    dest,
    keyModifierFlags
  });
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
