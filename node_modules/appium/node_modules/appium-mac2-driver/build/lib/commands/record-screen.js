"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

const commands = {};
const RETRY_PAUSE = 300;
const RETRY_TIMEOUT = 5000;
const DEFAULT_TIME_LIMIT = 60 * 10;
const PROCESS_SHUTDOWN_TIMEOUT = 10 * 1000;
const DEFAULT_EXT = 'mp4';
const FFMPEG_BINARY = 'ffmpeg';
const DEFAULT_FPS = 15;
const DEFAULT_PRESET = 'veryfast';

async function uploadRecordedMedia(localFile, remotePath = null, uploadOptions = {}) {
  if (_lodash.default.isEmpty(remotePath)) {
    const {
      size
    } = await _appiumSupport.fs.stat(localFile);

    _logger.default.debug(`The size of the resulting screen recording is ${_appiumSupport.util.toReadableSizeString(size)}`);

    return (await _appiumSupport.util.toInMemoryBase64(localFile)).toString();
  }

  const {
    user,
    pass,
    method,
    headers,
    fileFieldName,
    formFields
  } = uploadOptions;
  const options = {
    method: method || 'PUT',
    headers,
    fileFieldName,
    formFields
  };

  if (user && pass) {
    options.auth = {
      user,
      pass
    };
  }

  await _appiumSupport.net.uploadFile(localFile, remotePath, options);
  return '';
}

async function requireFfmpegPath() {
  try {
    return await _appiumSupport.fs.which(FFMPEG_BINARY);
  } catch (e) {
    _logger.default.errorAndThrow(`${FFMPEG_BINARY} has not been found in PATH. ` + `Please make sure it is installed`);
  }
}

class ScreenRecorder {
  constructor(videoPath, opts = {}) {
    this._videoPath = videoPath;
    this._process = null;
    this._fps = opts.fps && opts.fps > 0 ? opts.fps : DEFAULT_FPS;
    this._deviceId = opts.deviceId;
    this._captureCursor = opts.captureCursor;
    this._captureClicks = opts.captureClicks;
    this._preset = opts.preset || DEFAULT_PRESET;
    this._videoFilter = opts.videoFilter;
    this._timeLimit = opts.timeLimit && opts.timeLimit > 0 ? opts.timeLimit : DEFAULT_TIME_LIMIT;
  }

  async getVideoPath() {
    return (await _appiumSupport.fs.exists(this._videoPath)) ? this._videoPath : '';
  }

  isRunning() {
    var _this$_process;

    return !!((_this$_process = this._process) !== null && _this$_process !== void 0 && _this$_process.isRunning);
  }

  async _enforceTermination() {
    if (this._process && this.isRunning()) {
      _logger.default.debug('Force-stopping the currently running video recording');

      try {
        await this._process.stop('SIGKILL');
      } catch (ign) {}
    }

    this._process = null;
    const videoPath = await this.getVideoPath();

    if (videoPath) {
      await _appiumSupport.fs.rimraf(videoPath);
    }

    return '';
  }

  async start() {
    const ffmpeg = await requireFfmpegPath();
    const args = ['-loglevel', 'error', '-t', `${this._timeLimit}`, '-f', 'avfoundation', ...(this._captureCursor ? ['-capture_cursor', '1'] : []), ...(this._captureClicks ? ['-capture_mouse_clicks', '1'] : []), '-framerate', `${this._fps}`, '-i', this._deviceId, '-vcodec', 'libx264', '-preset', this._preset, '-tune', 'zerolatency', '-pix_fmt', 'yuv420p', '-movflags', '+faststart', '-fflags', 'nobuffer', '-f', DEFAULT_EXT, '-r', `${this._fps}`, ...(this._videoFilter ? ['-filter:v', this._videoFilter] : [])];
    const fullCmd = [ffmpeg, ...args, this._videoPath];
    this._process = new _teen_process.SubProcess(fullCmd[0], fullCmd.slice(1));

    _logger.default.debug(`Starting ${FFMPEG_BINARY}: ${_appiumSupport.util.quote(fullCmd)}`);

    this._process.on('output', (stdout, stderr) => {
      if (_lodash.default.trim(stdout || stderr)) {
        _logger.default.debug(`[${FFMPEG_BINARY}] ${stdout || stderr}`);
      }
    });

    this._process.once('exit', async (code, signal) => {
      this._process = null;

      if (code === 0) {
        _logger.default.debug('Screen recording exited without errors');
      } else {
        await this._enforceTermination();

        _logger.default.warn(`Screen recording exited with error code ${code}, signal ${signal}`);
      }
    });

    await this._process.start(0);

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (await this.getVideoPath()) {
          return true;
        }

        if (!this._process) {
          throw new Error(`${FFMPEG_BINARY} process died unexpectedly`);
        }

        return false;
      }, {
        waitMs: RETRY_TIMEOUT,
        intervalMs: RETRY_PAUSE
      });
    } catch (e) {
      await this._enforceTermination();

      _logger.default.errorAndThrow(`The expected screen record file '${this._videoPath}' does not exist. ` + `Check the server log for more details`);
    }

    _logger.default.info(`The video recording has started. Will timeout in ${_appiumSupport.util.pluralize('second', this._timeLimit, true)}`);
  }

  async stop(force = false) {
    if (force) {
      return await this._enforceTermination();
    }

    if (!this.isRunning()) {
      _logger.default.debug('Screen recording is not running. Returning the recent result');

      return await this.getVideoPath();
    }

    return new _bluebird.default((resolve, reject) => {
      const timer = setTimeout(async () => {
        await this._enforceTermination();
        reject(new Error(`Screen recording has failed to exit after ${PROCESS_SHUTDOWN_TIMEOUT}ms`));
      }, PROCESS_SHUTDOWN_TIMEOUT);

      this._process.once('exit', async (code, signal) => {
        clearTimeout(timer);

        if (code === 0) {
          resolve(await this.getVideoPath());
        } else {
          reject(new Error(`Screen recording exited with error code ${code}, signal ${signal}`));
        }
      });

      this._process.proc.stdin.write('q');

      this._process.proc.stdin.end();
    });
  }

}

commands.startRecordingScreen = async function startRecordingScreen(options = {}) {
  var _this$_screenRecorder, _this$_screenRecorder2;

  const {
    timeLimit,
    videoFilter,
    fps,
    preset,
    captureCursor,
    captureClicks,
    deviceId,
    forceRestart = true
  } = options;

  if (_lodash.default.isNil(deviceId)) {
    throw new Error(`'deviceId' option must be provided. Run 'ffmpeg -f avfoundation -list_devices true -i' ` + 'to fetch the list of available device ids');
  }

  if ((_this$_screenRecorder = this._screenRecorder) !== null && _this$_screenRecorder !== void 0 && (_this$_screenRecorder2 = _this$_screenRecorder.isRunning) !== null && _this$_screenRecorder2 !== void 0 && _this$_screenRecorder2.call(_this$_screenRecorder)) {
    _logger.default.debug('The screen recording is already running');

    if (!forceRestart) {
      _logger.default.debug('Doing nothing');

      return;
    }

    _logger.default.debug('Forcing the active screen recording to stop');

    await this._screenRecorder.stop(true);
  }

  this._screenRecorder = null;
  const videoPath = await _appiumSupport.tempDir.path({
    prefix: _appiumSupport.util.uuidV4().substring(0, 8),
    suffix: `.${DEFAULT_EXT}`
  });
  this._screenRecorder = new ScreenRecorder(videoPath, {
    fps: parseInt(fps, 10),
    timeLimit: parseInt(timeLimit, 10),
    preset,
    captureCursor,
    captureClicks,
    videoFilter,
    deviceId
  });

  try {
    await this._screenRecorder.start();
  } catch (e) {
    this._screenRecorder = null;
    throw e;
  }
};

commands.stopRecordingScreen = async function stopRecordingScreen(options = {}) {
  if (!this._screenRecorder) {
    _logger.default.debug('No screen recording has been started. Doing nothing');

    return '';
  }

  _logger.default.debug('Retrieving the resulting video data');

  const videoPath = await this._screenRecorder.stop();

  if (!videoPath) {
    _logger.default.debug('No video data is found. Returning an empty string');

    return '';
  }

  return await uploadRecordedMedia(videoPath, options.remotePath, options);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
