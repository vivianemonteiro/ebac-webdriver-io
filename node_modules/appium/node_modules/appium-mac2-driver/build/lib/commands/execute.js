"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {};
const EXTENSION_COMMANDS_MAPPING = {
  setValue: 'macosSetValue',
  click: 'macosClick',
  scroll: 'macosScroll',
  swipe: 'macosSwipe',
  rightClick: 'macosRightClick',
  hover: 'macosHover',
  doubleClick: 'macosDoubleClick',
  clickAndDrag: 'macosClickAndDrag',
  clickAndDragAndHold: 'macosClickAndDragAndHold',
  keys: 'macosKeys',
  tap: 'macosTap',
  doubleTap: 'macosDoubleTap',
  press: 'macosPress',
  pressAndDrag: 'macosPressAndDrag',
  pressAndDragAndHold: 'macosPressAndDragAndHold',
  source: 'macosSource',
  launchApp: 'macosLaunchApp',
  activateApp: 'macosActivateApp',
  terminateApp: 'macosTerminateApp',
  queryAppState: 'macosQueryAppState',
  appleScript: 'macosExecAppleScript',
  startRecordingScreen: 'startRecordingScreen',
  stopRecordingScreen: 'stopRecordingScreen'
};

commands.execute = async function execute(script, args) {
  if (script.match(/^macos:/)) {
    _logger.default.info(`Executing extension command '${script}'`);

    script = script.replace(/^macos:/, '').trim();
    return await this.executeMacosCommand(script, _lodash.default.isArray(args) ? args[0] : args);
  }

  throw new _appiumBaseDriver.errors.NotImplementedError();
};

commands.executeMacosCommand = async function executeMacosCommand(command, opts = {}) {
  if (!_lodash.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown extension command "${command}". ` + `Only ${_lodash.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
  }

  return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkciLCJzZXRWYWx1ZSIsImNsaWNrIiwic2Nyb2xsIiwic3dpcGUiLCJyaWdodENsaWNrIiwiaG92ZXIiLCJkb3VibGVDbGljayIsImNsaWNrQW5kRHJhZyIsImNsaWNrQW5kRHJhZ0FuZEhvbGQiLCJrZXlzIiwidGFwIiwiZG91YmxlVGFwIiwicHJlc3MiLCJwcmVzc0FuZERyYWciLCJwcmVzc0FuZERyYWdBbmRIb2xkIiwic291cmNlIiwibGF1bmNoQXBwIiwiYWN0aXZhdGVBcHAiLCJ0ZXJtaW5hdGVBcHAiLCJxdWVyeUFwcFN0YXRlIiwiYXBwbGVTY3JpcHQiLCJzdGFydFJlY29yZGluZ1NjcmVlbiIsInN0b3BSZWNvcmRpbmdTY3JlZW4iLCJleGVjdXRlIiwic2NyaXB0IiwiYXJncyIsIm1hdGNoIiwibG9nIiwiaW5mbyIsInJlcGxhY2UiLCJ0cmltIiwiZXhlY3V0ZU1hY29zQ29tbWFuZCIsIl8iLCJpc0FycmF5IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNvbW1hbmQiLCJvcHRzIiwiaGFzIiwiVW5rbm93bkNvbW1hbmRFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7QUFFQSxNQUFNQywwQkFBMEIsR0FBRztBQUNqQ0MsRUFBQUEsUUFBUSxFQUFFLGVBRHVCO0FBRWpDQyxFQUFBQSxLQUFLLEVBQUUsWUFGMEI7QUFHakNDLEVBQUFBLE1BQU0sRUFBRSxhQUh5QjtBQUlqQ0MsRUFBQUEsS0FBSyxFQUFFLFlBSjBCO0FBS2pDQyxFQUFBQSxVQUFVLEVBQUUsaUJBTHFCO0FBTWpDQyxFQUFBQSxLQUFLLEVBQUUsWUFOMEI7QUFPakNDLEVBQUFBLFdBQVcsRUFBRSxrQkFQb0I7QUFRakNDLEVBQUFBLFlBQVksRUFBRSxtQkFSbUI7QUFTakNDLEVBQUFBLG1CQUFtQixFQUFFLDBCQVRZO0FBVWpDQyxFQUFBQSxJQUFJLEVBQUUsV0FWMkI7QUFZakNDLEVBQUFBLEdBQUcsRUFBRSxVQVo0QjtBQWFqQ0MsRUFBQUEsU0FBUyxFQUFFLGdCQWJzQjtBQWNqQ0MsRUFBQUEsS0FBSyxFQUFFLFlBZDBCO0FBZWpDQyxFQUFBQSxZQUFZLEVBQUUsbUJBZm1CO0FBZ0JqQ0MsRUFBQUEsbUJBQW1CLEVBQUUsMEJBaEJZO0FBa0JqQ0MsRUFBQUEsTUFBTSxFQUFFLGFBbEJ5QjtBQW9CakNDLEVBQUFBLFNBQVMsRUFBRSxnQkFwQnNCO0FBcUJqQ0MsRUFBQUEsV0FBVyxFQUFFLGtCQXJCb0I7QUFzQmpDQyxFQUFBQSxZQUFZLEVBQUUsbUJBdEJtQjtBQXVCakNDLEVBQUFBLGFBQWEsRUFBRSxvQkF2QmtCO0FBeUJqQ0MsRUFBQUEsV0FBVyxFQUFFLHNCQXpCb0I7QUEyQmpDQyxFQUFBQSxvQkFBb0IsRUFBRSxzQkEzQlc7QUE0QmpDQyxFQUFBQSxtQkFBbUIsRUFBRTtBQTVCWSxDQUFuQzs7QUErQkF4QixRQUFRLENBQUN5QixPQUFULEdBQW1CLGVBQWVBLE9BQWYsQ0FBd0JDLE1BQXhCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUN2RCxNQUFJRCxNQUFNLENBQUNFLEtBQVAsQ0FBYSxTQUFiLENBQUosRUFBNkI7QUFDM0JDLG9CQUFJQyxJQUFKLENBQVUsZ0NBQStCSixNQUFPLEdBQWhEOztBQUNBQSxJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ssT0FBUCxDQUFlLFNBQWYsRUFBMEIsRUFBMUIsRUFBOEJDLElBQTlCLEVBQVQ7QUFDQSxXQUFPLE1BQU0sS0FBS0MsbUJBQUwsQ0FBeUJQLE1BQXpCLEVBQWlDUSxnQkFBRUMsT0FBRixDQUFVUixJQUFWLElBQWtCQSxJQUFJLENBQUMsQ0FBRCxDQUF0QixHQUE0QkEsSUFBN0QsQ0FBYjtBQUNEOztBQUNELFFBQU0sSUFBSVMseUJBQU9DLG1CQUFYLEVBQU47QUFDRCxDQVBEOztBQVNBckMsUUFBUSxDQUFDaUMsbUJBQVQsR0FBK0IsZUFBZUEsbUJBQWYsQ0FBb0NLLE9BQXBDLEVBQTZDQyxJQUFJLEdBQUcsRUFBcEQsRUFBd0Q7QUFDckYsTUFBSSxDQUFDTCxnQkFBRU0sR0FBRixDQUFNdkMsMEJBQU4sRUFBa0NxQyxPQUFsQyxDQUFMLEVBQWlEO0FBQy9DLFVBQU0sSUFBSUYseUJBQU9LLG1CQUFYLENBQWdDLDhCQUE2QkgsT0FBUSxLQUF0QyxHQUNsQyxRQUFPSixnQkFBRXZCLElBQUYsQ0FBT1YsMEJBQVAsQ0FBbUMsMEJBRHZDLENBQU47QUFFRDs7QUFDRCxTQUFPLE1BQU0sS0FBS0EsMEJBQTBCLENBQUNxQyxPQUFELENBQS9CLEVBQTBDQyxJQUExQyxDQUFiO0FBQ0QsQ0FORDs7ZUFRZXZDLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuY29uc3QgRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkcgPSB7XG4gIHNldFZhbHVlOiAnbWFjb3NTZXRWYWx1ZScsXG4gIGNsaWNrOiAnbWFjb3NDbGljaycsXG4gIHNjcm9sbDogJ21hY29zU2Nyb2xsJyxcbiAgc3dpcGU6ICdtYWNvc1N3aXBlJyxcbiAgcmlnaHRDbGljazogJ21hY29zUmlnaHRDbGljaycsXG4gIGhvdmVyOiAnbWFjb3NIb3ZlcicsXG4gIGRvdWJsZUNsaWNrOiAnbWFjb3NEb3VibGVDbGljaycsXG4gIGNsaWNrQW5kRHJhZzogJ21hY29zQ2xpY2tBbmREcmFnJyxcbiAgY2xpY2tBbmREcmFnQW5kSG9sZDogJ21hY29zQ2xpY2tBbmREcmFnQW5kSG9sZCcsXG4gIGtleXM6ICdtYWNvc0tleXMnLFxuXG4gIHRhcDogJ21hY29zVGFwJyxcbiAgZG91YmxlVGFwOiAnbWFjb3NEb3VibGVUYXAnLFxuICBwcmVzczogJ21hY29zUHJlc3MnLFxuICBwcmVzc0FuZERyYWc6ICdtYWNvc1ByZXNzQW5kRHJhZycsXG4gIHByZXNzQW5kRHJhZ0FuZEhvbGQ6ICdtYWNvc1ByZXNzQW5kRHJhZ0FuZEhvbGQnLFxuXG4gIHNvdXJjZTogJ21hY29zU291cmNlJyxcblxuICBsYXVuY2hBcHA6ICdtYWNvc0xhdW5jaEFwcCcsXG4gIGFjdGl2YXRlQXBwOiAnbWFjb3NBY3RpdmF0ZUFwcCcsXG4gIHRlcm1pbmF0ZUFwcDogJ21hY29zVGVybWluYXRlQXBwJyxcbiAgcXVlcnlBcHBTdGF0ZTogJ21hY29zUXVlcnlBcHBTdGF0ZScsXG5cbiAgYXBwbGVTY3JpcHQ6ICdtYWNvc0V4ZWNBcHBsZVNjcmlwdCcsXG5cbiAgc3RhcnRSZWNvcmRpbmdTY3JlZW46ICdzdGFydFJlY29yZGluZ1NjcmVlbicsXG4gIHN0b3BSZWNvcmRpbmdTY3JlZW46ICdzdG9wUmVjb3JkaW5nU2NyZWVuJyxcbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGUgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKHNjcmlwdC5tYXRjaCgvXm1hY29zOi8pKSB7XG4gICAgbG9nLmluZm8oYEV4ZWN1dGluZyBleHRlbnNpb24gY29tbWFuZCAnJHtzY3JpcHR9J2ApO1xuICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKC9ebWFjb3M6LywgJycpLnRyaW0oKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlTWFjb3NDb21tYW5kKHNjcmlwdCwgXy5pc0FycmF5KGFyZ3MpID8gYXJnc1swXSA6IGFyZ3MpO1xuICB9XG4gIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xufTtcblxuY29tbWFuZHMuZXhlY3V0ZU1hY29zQ29tbWFuZCA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVNYWNvc0NvbW1hbmQgKGNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICBpZiAoIV8uaGFzKEVYVEVOU0lPTl9DT01NQU5EU19NQVBQSU5HLCBjb21tYW5kKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkNvbW1hbmRFcnJvcihgVW5rbm93biBleHRlbnNpb24gY29tbWFuZCBcIiR7Y29tbWFuZH1cIi4gYCArXG4gICAgICBgT25seSAke18ua2V5cyhFWFRFTlNJT05fQ09NTUFORFNfTUFQUElORyl9IGNvbW1hbmRzIGFyZSBzdXBwb3J0ZWQuYCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXNbRVhURU5TSU9OX0NPTU1BTkRTX01BUFBJTkdbY29tbWFuZF1dKG9wdHMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
