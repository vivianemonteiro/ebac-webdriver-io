"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _axios = _interopRequireDefault(require("axios"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const hubUri = config => {
  const protocol = config.hubProtocol || 'http';
  return `${protocol}://${config.hubHost}:${config.hubPort}`;
};

async function registerNode(configFile, addr, port) {
  let data;

  try {
    data = await _appiumSupport.fs.readFile(configFile, 'utf-8');
  } catch (err) {
    _logger.default.error(`Unable to load node configuration file to register with grid: ${err.message}`);

    return;
  }

  if (!data) {
    _logger.default.error('No data found in the node configuration file to send to the grid');

    return;
  }

  postRequest(data, addr, port);
}

async function registerToGrid(postOptions, configHolder) {
  try {
    const {
      status
    } = await (0, _axios.default)(postOptions);

    if (status !== 200) {
      throw new Error(`Request failed with code ${status}`);
    }

    _logger.default.debug(`Appium successfully registered with the the grid on ` + hubUri(configHolder.configuration));
  } catch (err) {
    _logger.default.error(`An attempt to register with the grid was unsuccessful: ${err.message}`);
  }
}

function postRequest(data, addr, port) {
  let configHolder;

  try {
    configHolder = JSON.parse(data);
  } catch (err) {
    _logger.default.errorAndThrow(`Syntax error in node configuration file: ${err.message}`);
  }

  if (!_lodash.default.has(configHolder, 'configuration')) {
    let configuration = {};

    for (const property in configHolder) {
      if (_lodash.default.has(configHolder, property) && property !== 'capabilities') {
        configuration[property] = configHolder[property];
        delete configHolder[property];
      }
    }

    configHolder.configuration = configuration;
  }

  if (!configHolder.configuration.url || !configHolder.configuration.host || !configHolder.configuration.port) {
    configHolder.configuration.url = `http://${addr}:${port}/wd/hub`;
    configHolder.configuration.host = addr;
    configHolder.configuration.port = port;
  }

  if (!configHolder.configuration.id) {
    configHolder.configuration.id = `http://${configHolder.configuration.host}:${configHolder.configuration.port}`;
  }

  const regRequest = {
    url: `${hubUri(configHolder.configuration)}/grid/register`,
    method: 'POST',
    data: configHolder
  };

  if (configHolder.configuration.register !== true) {
    _logger.default.debug(`No registration sent (${configHolder.configuration.register} = false)`);

    return;
  }

  const registerCycleInterval = configHolder.configuration.registerCycle;

  if (isNaN(registerCycleInterval) || registerCycleInterval <= 0) {
    _logger.default.warn(`'registerCycle' is not a valid positive number. ` + `No registration request will be sent to the grid.`);

    return;
  }

  let first = true;

  _logger.default.debug(`Starting auto register thread for the grid. ` + `Will try to register every ${registerCycleInterval} ms.`);

  setInterval(async function registerRetry() {
    if (first) {
      first = false;
      await registerToGrid(regRequest, configHolder);
    } else if (!(await isAlreadyRegistered(configHolder))) {
      await registerToGrid(regRequest, configHolder);
    }
  }, registerCycleInterval);
}

async function isAlreadyRegistered(configHolder) {
  const id = configHolder.configuration.id;

  try {
    const {
      data,
      status
    } = await (0, _axios.default)({
      url: `${hubUri(configHolder.configuration)}/grid/api/proxy?id=${id}`,
      timeout: 10000
    });

    if (status !== 200) {
      throw new Error(`Request failed with code ${status}`);
    }

    if (!data.success) {
      _logger.default.debug(`Grid registration error: ${data.msg}`);
    }

    return data.success;
  } catch (err) {
    _logger.default.debug(`Hub down or not responding: ${err.message}`);
  }
}

var _default = registerNode;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
