"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StoreDeprecatedTrueAction = exports.StoreDeprecatedDefaultCapabilityTrueAction = exports.StoreDeprecatedDefaultCapabilityAction = exports.StoreDeprecatedAction = exports.DEFAULT_CAPS_ARG = void 0;

require("source-map-support/register");

var _argparse = require("argparse");

const DEFAULT_CAPS_ARG = '--default-capabilities';
exports.DEFAULT_CAPS_ARG = DEFAULT_CAPS_ARG;

class StoreDeprecatedAction extends _argparse.Action {
  constructor(options = {}) {
    const opts = Object.assign({}, options);
    let helpPrefix = '[DEPRECATED]';

    if (opts.deprecated_for) {
      helpPrefix = `[DEPRECATED, use ${opts.deprecated_for} instead]`;
      delete opts.deprecated_for;
    }

    if (opts.help) {
      opts.help = `${helpPrefix} - ${opts.help}`;
    } else {
      opts.help = helpPrefix;
    }

    super(opts);
  }

  call(parser, namespace, values) {
    namespace[this.dest] = values;
  }

}

exports.StoreDeprecatedAction = StoreDeprecatedAction;

class StoreDeprecatedTrueAction extends StoreDeprecatedAction {
  constructor(options = {}) {
    super(Object.assign({}, options, {
      const: true,
      nargs: 0
    }));
  }

  call(parser, namespace) {
    namespace[this.dest] = this.const;
  }

}

exports.StoreDeprecatedTrueAction = StoreDeprecatedTrueAction;

class StoreDeprecatedDefaultCapabilityAction extends StoreDeprecatedAction {
  constructor(options = {}) {
    super(Object.assign({}, options, {
      deprecated_for: DEFAULT_CAPS_ARG
    }));
  }

  _writeDefaultCap(namespace, value) {
    namespace[this.dest] = value;

    if (value === this.default) {
      return;
    }

    if (!namespace.defaultCapabilities) {
      namespace.defaultCapabilities = {};
    }

    namespace.defaultCapabilities[this.dest] = value;
  }

  call(parser, namespace, values) {
    this._writeDefaultCap(namespace, values);
  }

}

exports.StoreDeprecatedDefaultCapabilityAction = StoreDeprecatedDefaultCapabilityAction;

class StoreDeprecatedDefaultCapabilityTrueAction extends StoreDeprecatedDefaultCapabilityAction {
  constructor(options = {}) {
    super(Object.assign({}, options, {
      const: true,
      nargs: 0
    }));
  }

  call(parser, namespace) {
    this._writeDefaultCap(namespace, this.const);
  }

}

exports.StoreDeprecatedDefaultCapabilityTrueAction = StoreDeprecatedDefaultCapabilityTrueAction;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hcmdzcGFyc2UtYWN0aW9ucy5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX0NBUFNfQVJHIiwiU3RvcmVEZXByZWNhdGVkQWN0aW9uIiwiQWN0aW9uIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsImhlbHBQcmVmaXgiLCJkZXByZWNhdGVkX2ZvciIsImhlbHAiLCJjYWxsIiwicGFyc2VyIiwibmFtZXNwYWNlIiwidmFsdWVzIiwiZGVzdCIsIlN0b3JlRGVwcmVjYXRlZFRydWVBY3Rpb24iLCJjb25zdCIsIm5hcmdzIiwiU3RvcmVEZXByZWNhdGVkRGVmYXVsdENhcGFiaWxpdHlBY3Rpb24iLCJfd3JpdGVEZWZhdWx0Q2FwIiwidmFsdWUiLCJkZWZhdWx0IiwiZGVmYXVsdENhcGFiaWxpdGllcyIsIlN0b3JlRGVwcmVjYXRlZERlZmF1bHRDYXBhYmlsaXR5VHJ1ZUFjdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBR0EsTUFBTUEsZ0JBQWdCLEdBQUcsd0JBQXpCOzs7QUFHQSxNQUFNQyxxQkFBTixTQUFvQ0MsZ0JBQXBDLENBQTJDO0FBQ3pDQyxFQUFBQSxXQUFXLENBQUVDLE9BQU8sR0FBRyxFQUFaLEVBQWdCO0FBQ3pCLFVBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkgsT0FBbEIsQ0FBYjtBQUNBLFFBQUlJLFVBQVUsR0FBRyxjQUFqQjs7QUFDQSxRQUFJSCxJQUFJLENBQUNJLGNBQVQsRUFBeUI7QUFDdkJELE1BQUFBLFVBQVUsR0FBSSxvQkFBbUJILElBQUksQ0FBQ0ksY0FBZSxXQUFyRDtBQUNBLGFBQU9KLElBQUksQ0FBQ0ksY0FBWjtBQUNEOztBQUNELFFBQUlKLElBQUksQ0FBQ0ssSUFBVCxFQUFlO0FBQ2JMLE1BQUFBLElBQUksQ0FBQ0ssSUFBTCxHQUFhLEdBQUVGLFVBQVcsTUFBS0gsSUFBSSxDQUFDSyxJQUFLLEVBQXpDO0FBQ0QsS0FGRCxNQUVPO0FBQ0xMLE1BQUFBLElBQUksQ0FBQ0ssSUFBTCxHQUFZRixVQUFaO0FBQ0Q7O0FBQ0QsVUFBTUgsSUFBTjtBQUNEOztBQUVETSxFQUFBQSxJQUFJLENBQUVDLE1BQUYsRUFBVUMsU0FBVixFQUFxQkMsTUFBckIsRUFBNkI7QUFDL0JELElBQUFBLFNBQVMsQ0FBQyxLQUFLRSxJQUFOLENBQVQsR0FBdUJELE1BQXZCO0FBQ0Q7O0FBbEJ3Qzs7OztBQXNCM0MsTUFBTUUseUJBQU4sU0FBd0NmLHFCQUF4QyxDQUE4RDtBQUM1REUsRUFBQUEsV0FBVyxDQUFFQyxPQUFPLEdBQUcsRUFBWixFQUFnQjtBQUN6QixVQUFNRSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSCxPQUFsQixFQUEyQjtBQUFDYSxNQUFBQSxLQUFLLEVBQUUsSUFBUjtBQUFjQyxNQUFBQSxLQUFLLEVBQUU7QUFBckIsS0FBM0IsQ0FBTjtBQUNEOztBQUVEUCxFQUFBQSxJQUFJLENBQUVDLE1BQUYsRUFBVUMsU0FBVixFQUFxQjtBQUN2QkEsSUFBQUEsU0FBUyxDQUFDLEtBQUtFLElBQU4sQ0FBVCxHQUF1QixLQUFLRSxLQUE1QjtBQUNEOztBQVAyRDs7OztBQVc5RCxNQUFNRSxzQ0FBTixTQUFxRGxCLHFCQUFyRCxDQUEyRTtBQUN6RUUsRUFBQUEsV0FBVyxDQUFFQyxPQUFPLEdBQUcsRUFBWixFQUFnQjtBQUN6QixVQUFNRSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSCxPQUFsQixFQUEyQjtBQUFDSyxNQUFBQSxjQUFjLEVBQUVUO0FBQWpCLEtBQTNCLENBQU47QUFDRDs7QUFFRG9CLEVBQUFBLGdCQUFnQixDQUFFUCxTQUFGLEVBQWFRLEtBQWIsRUFBb0I7QUFDbENSLElBQUFBLFNBQVMsQ0FBQyxLQUFLRSxJQUFOLENBQVQsR0FBdUJNLEtBQXZCOztBQUNBLFFBQUlBLEtBQUssS0FBSyxLQUFLQyxPQUFuQixFQUE0QjtBQUMxQjtBQUNEOztBQUVELFFBQUksQ0FBQ1QsU0FBUyxDQUFDVSxtQkFBZixFQUFvQztBQUNsQ1YsTUFBQUEsU0FBUyxDQUFDVSxtQkFBVixHQUFnQyxFQUFoQztBQUNEOztBQUNEVixJQUFBQSxTQUFTLENBQUNVLG1CQUFWLENBQThCLEtBQUtSLElBQW5DLElBQTJDTSxLQUEzQztBQUNEOztBQUVEVixFQUFBQSxJQUFJLENBQUVDLE1BQUYsRUFBVUMsU0FBVixFQUFxQkMsTUFBckIsRUFBNkI7QUFDL0IsU0FBS00sZ0JBQUwsQ0FBc0JQLFNBQXRCLEVBQWlDQyxNQUFqQztBQUNEOztBQW5Cd0U7Ozs7QUF1QjNFLE1BQU1VLDBDQUFOLFNBQXlETCxzQ0FBekQsQ0FBZ0c7QUFDOUZoQixFQUFBQSxXQUFXLENBQUVDLE9BQU8sR0FBRyxFQUFaLEVBQWdCO0FBQ3pCLFVBQU1FLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JILE9BQWxCLEVBQTJCO0FBQUNhLE1BQUFBLEtBQUssRUFBRSxJQUFSO0FBQWNDLE1BQUFBLEtBQUssRUFBRTtBQUFyQixLQUEzQixDQUFOO0FBQ0Q7O0FBRURQLEVBQUFBLElBQUksQ0FBRUMsTUFBRixFQUFVQyxTQUFWLEVBQXFCO0FBQ3ZCLFNBQUtPLGdCQUFMLENBQXNCUCxTQUF0QixFQUFpQyxLQUFLSSxLQUF0QztBQUNEOztBQVA2RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ2FyZ3BhcnNlJztcblxuXG5jb25zdCBERUZBVUxUX0NBUFNfQVJHID0gJy0tZGVmYXVsdC1jYXBhYmlsaXRpZXMnO1xuXG5cbmNsYXNzIFN0b3JlRGVwcmVjYXRlZEFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgbGV0IGhlbHBQcmVmaXggPSAnW0RFUFJFQ0FURURdJztcbiAgICBpZiAob3B0cy5kZXByZWNhdGVkX2Zvcikge1xuICAgICAgaGVscFByZWZpeCA9IGBbREVQUkVDQVRFRCwgdXNlICR7b3B0cy5kZXByZWNhdGVkX2Zvcn0gaW5zdGVhZF1gO1xuICAgICAgZGVsZXRlIG9wdHMuZGVwcmVjYXRlZF9mb3I7XG4gICAgfVxuICAgIGlmIChvcHRzLmhlbHApIHtcbiAgICAgIG9wdHMuaGVscCA9IGAke2hlbHBQcmVmaXh9IC0gJHtvcHRzLmhlbHB9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0cy5oZWxwID0gaGVscFByZWZpeDtcbiAgICB9XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICBjYWxsIChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzKSB7XG4gICAgbmFtZXNwYWNlW3RoaXMuZGVzdF0gPSB2YWx1ZXM7XG4gIH1cbn1cblxuXG5jbGFzcyBTdG9yZURlcHJlY2F0ZWRUcnVlQWN0aW9uIGV4dGVuZHMgU3RvcmVEZXByZWNhdGVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtjb25zdDogdHJ1ZSwgbmFyZ3M6IDB9KSk7XG4gIH1cblxuICBjYWxsIChwYXJzZXIsIG5hbWVzcGFjZSkge1xuICAgIG5hbWVzcGFjZVt0aGlzLmRlc3RdID0gdGhpcy5jb25zdDtcbiAgfVxufVxuXG5cbmNsYXNzIFN0b3JlRGVwcmVjYXRlZERlZmF1bHRDYXBhYmlsaXR5QWN0aW9uIGV4dGVuZHMgU3RvcmVEZXByZWNhdGVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtkZXByZWNhdGVkX2ZvcjogREVGQVVMVF9DQVBTX0FSR30pKTtcbiAgfVxuXG4gIF93cml0ZURlZmF1bHRDYXAgKG5hbWVzcGFjZSwgdmFsdWUpIHtcbiAgICBuYW1lc3BhY2VbdGhpcy5kZXN0XSA9IHZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5kZWZhdWx0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFuYW1lc3BhY2UuZGVmYXVsdENhcGFiaWxpdGllcykge1xuICAgICAgbmFtZXNwYWNlLmRlZmF1bHRDYXBhYmlsaXRpZXMgPSB7fTtcbiAgICB9XG4gICAgbmFtZXNwYWNlLmRlZmF1bHRDYXBhYmlsaXRpZXNbdGhpcy5kZXN0XSA9IHZhbHVlO1xuICB9XG5cbiAgY2FsbCAocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcykge1xuICAgIHRoaXMuX3dyaXRlRGVmYXVsdENhcChuYW1lc3BhY2UsIHZhbHVlcyk7XG4gIH1cbn1cblxuXG5jbGFzcyBTdG9yZURlcHJlY2F0ZWREZWZhdWx0Q2FwYWJpbGl0eVRydWVBY3Rpb24gZXh0ZW5kcyBTdG9yZURlcHJlY2F0ZWREZWZhdWx0Q2FwYWJpbGl0eUFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7Y29uc3Q6IHRydWUsIG5hcmdzOiAwfSkpO1xuICB9XG5cbiAgY2FsbCAocGFyc2VyLCBuYW1lc3BhY2UpIHtcbiAgICB0aGlzLl93cml0ZURlZmF1bHRDYXAobmFtZXNwYWNlLCB0aGlzLmNvbnN0KTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBTdG9yZURlcHJlY2F0ZWRBY3Rpb24sIFN0b3JlRGVwcmVjYXRlZFRydWVBY3Rpb24sXG4gIFN0b3JlRGVwcmVjYXRlZERlZmF1bHRDYXBhYmlsaXR5QWN0aW9uLCBTdG9yZURlcHJlY2F0ZWREZWZhdWx0Q2FwYWJpbGl0eVRydWVBY3Rpb24sXG4gIERFRkFVTFRfQ0FQU19BUkcsXG59O1xuIl0sImZpbGUiOiJsaWIvYXJnc3BhcnNlLWFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
