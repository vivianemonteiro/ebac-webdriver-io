#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

require("source-map-support/register");

var _logsink = require("./logsink");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _parser = _interopRequireWildcard(require("./parser"));

var _appiumSupport = require("appium-support");

var _config = require("./config");

var _appium = require("./appium");

var _gridRegister = _interopRequireDefault(require("./grid-register"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function preflightChecks(parser, args, throwInsteadOfExit = false) {
  try {
    (0, _config.checkNodeOk)();

    if (args.longStacktrace) {
      require('longjohn').async_trace_limit = -1;
    }

    if (args.showConfig) {
      await (0, _config.showConfig)();
      process.exit(0);
    }

    (0, _config.warnNodeDeprecations)();
    (0, _config.validateServerArgs)(parser, args);

    if (args.tmpDir) {
      await (0, _config.validateTmpDir)(args.tmpDir);
    }
  } catch (err) {
    _logger.default.error(err.message.red);

    if (throwInsteadOfExit) {
      throw err;
    }

    process.exit(1);
  }
}

function logDeprecationWarning(deprecatedArgs) {
  _logger.default.warn('Deprecated server args:');

  for (let [arg, realArg] of _lodash.default.toPairs(deprecatedArgs)) {
    _logger.default.warn(`  ${arg.red} => ${realArg}`);
  }
}

function logNonDefaultArgsWarning(args) {
  _logger.default.info('Non-default server args:');

  (0, _utils.inspectObject)(args);
}

function logDefaultCapabilitiesWarning(caps) {
  _logger.default.info('Default capabilities, which will be added to each request ' + 'unless overridden by desired capabilities:');

  (0, _utils.inspectObject)(caps);
}

async function logStartupInfo(parser, args) {
  let welcome = `Welcome to Appium v${_config.APPIUM_VER}`;
  let appiumRev = await (0, _config.getGitRev)();

  if (appiumRev) {
    welcome += ` (REV ${appiumRev})`;
  }

  _logger.default.info(welcome);

  let showArgs = (0, _config.getNonDefaultArgs)(parser, args);

  if (_lodash.default.size(showArgs)) {
    logNonDefaultArgsWarning(showArgs);
  }

  let deprecatedArgs = (0, _config.getDeprecatedArgs)(parser, args);

  if (_lodash.default.size(deprecatedArgs)) {
    logDeprecationWarning(deprecatedArgs);
  }

  if (!_lodash.default.isEmpty(args.defaultCapabilities)) {
    logDefaultCapabilitiesWarning(args.defaultCapabilities);
  }
}

function logServerPort(address, port) {
  let logMessage = `Appium REST http interface listener started on ` + `${address}:${port}`;

  _logger.default.info(logMessage);
}

async function main(args = null) {
  let parser = (0, _parser.default)();
  let throwInsteadOfExit = false;

  if (args) {
    args = Object.assign({}, (0, _parser.getDefaultArgs)(), args);

    if (args.throwInsteadOfExit) {
      throwInsteadOfExit = true;
      delete args.throwInsteadOfExit;
    }
  } else {
    args = parser.parse_args();
  }

  await (0, _logsink.init)(args);

  if (args.logFilters) {
    const {
      issues,
      rules
    } = await _appiumSupport.logger.loadSecureValuesPreprocessingRules(args.logFilters);

    if (!_lodash.default.isEmpty(issues)) {
      throw new Error(`The log filtering rules config '${args.logFilters}' has issues: ` + JSON.stringify(issues, null, 2));
    }

    if (_lodash.default.isEmpty(rules)) {
      _logger.default.warn(`Found no log filtering rules in '${args.logFilters}'. Is that expected?`);
    } else {
      _logger.default.info(`Loaded ${_appiumSupport.util.pluralize('filtering rule', rules.length, true)} from '${args.logFilters}'`);
    }
  }

  await preflightChecks(parser, args, throwInsteadOfExit);
  await logStartupInfo(parser, args);
  let appiumDriver = new _appium.AppiumDriver(args);
  let routeConfiguringFunction = (0, _appiumBaseDriver.routeConfiguringFunction)(appiumDriver);
  const serverOpts = {
    routeConfiguringFunction,
    port: args.port,
    hostname: args.address,
    allowCors: args.allowCors,
    basePath: args.basePath
  };

  if (args.keepAliveTimeout) {
    serverOpts.keepAliveTimeout = args.keepAliveTimeout * 1000;
  }

  let server = await (0, _appiumBaseDriver.server)(serverOpts);

  if (args.allowCors) {
    _logger.default.warn('You have enabled CORS requests from any host. Be careful not ' + 'to visit sites which could maliciously try to start Appium ' + 'sessions on your machine');
  }

  appiumDriver.server = server;

  try {
    if (args.nodeconfig !== null) {
      await (0, _gridRegister.default)(args.nodeconfig, args.address, args.port);
    }
  } catch (err) {
    await server.close();
    throw err;
  }

  for (const signal of ['SIGINT', 'SIGTERM']) {
    process.once(signal, async function onSignal() {
      _logger.default.info(`Received ${signal} - shutting down`);

      try {
        try {
          await appiumDriver.deleteAllSessions({
            force: true,
            reason: `The process has received ${signal} signal`
          });
          (0, _logsink.clear)();
        } finally {
          await server.close();
        }

        process.exit(0);
      } catch (e) {
        _logger.default.error(e.message);

        process.exit(1);
      }
    });
  }

  logServerPort(args.address, args.port);
  return server;
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
