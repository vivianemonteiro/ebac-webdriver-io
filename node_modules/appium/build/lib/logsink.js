"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clear = clear;
exports.default = void 0;
exports.init = init;

require("source-map-support/register");

var _npmlog = _interopRequireDefault(require("npmlog"));

var _winston = require("winston");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

_appiumSupport.logger.patchLogger(_npmlog.default);

global._global_npmlog = _npmlog.default;
_npmlog.default.level = 'silent';
const levels = {
  debug: 4,
  info: 3,
  warn: 2,
  error: 1
};
const colors = {
  info: 'cyan',
  debug: 'grey',
  warn: 'yellow',
  error: 'red'
};
const npmToWinstonLevels = {
  silly: 'debug',
  verbose: 'debug',
  debug: 'debug',
  info: 'info',
  http: 'info',
  warn: 'warn',
  error: 'error'
};
let log = null;
let useLocalTimeZone = false;

const timestampFormat = _winston.format.timestamp({
  format() {
    let date = new Date();

    if (useLocalTimeZone) {
      date = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
    }

    return date.toISOString().replace(/[TZ]/g, ' ').replace(/\./g, ':').trim();
  }

});

const colorizeFormat = _winston.format.colorize({
  colors
});

const stripColorFormat = (0, _winston.format)(function stripColor(info) {
  const code = /\u001b\[(\d+(;\d+)*)?m/g;
  info.message = info.message.replace(code, '');
  return info;
})();

function createConsoleTransport(args, logLvl) {
  return new _winston.transports.Console({
    name: 'console',
    handleExceptions: true,
    exitOnError: false,
    json: false,
    level: logLvl,
    stderrLevels: ['error'],
    format: _winston.format.combine((0, _winston.format)(function adjustDebug(info) {
      if (info.level === 'debug') {
        info.level = 'info';
        info.message = `[debug] ${info.message}`;
      }

      return info;
    })(), timestampFormat, args.logNoColors ? stripColorFormat : colorizeFormat, _winston.format.printf(function printInfo(info) {
      return `${args.logTimestamp ? `${info.timestamp} - ` : ''}${info.message}`;
    }))
  });
}

function createFileTransport(args, logLvl) {
  return new _winston.transports.File({
    name: 'file',
    filename: args.logFile,
    maxFiles: 1,
    handleExceptions: true,
    exitOnError: false,
    json: false,
    level: logLvl,
    format: _winston.format.combine(stripColorFormat, timestampFormat, _winston.format.printf(function printInfo(info) {
      return `${info.timestamp} ${info.message}`;
    }))
  });
}

function createHttpTransport(args, logLvl) {
  let host = '127.0.0.1';
  let port = 9003;

  if (args.webhook.match(':')) {
    const hostAndPort = args.webhook.split(':');
    host = hostAndPort[0];
    port = parseInt(hostAndPort[1], 10);
  }

  return new _winston.transports.Http({
    name: 'http',
    host,
    port,
    path: '/',
    handleExceptions: true,
    exitOnError: false,
    json: false,
    level: logLvl,
    format: _winston.format.combine(stripColorFormat, _winston.format.printf(function printInfo(info) {
      return `${info.timestamp} ${info.message}`;
    }))
  });
}

async function createTransports(args) {
  let transports = [];
  let consoleLogLevel = null;
  let fileLogLevel = null;

  if (args.loglevel && args.loglevel.match(':')) {
    const lvlPair = args.loglevel.split(':');
    consoleLogLevel = lvlPair[0] || consoleLogLevel;
    fileLogLevel = lvlPair[1] || fileLogLevel;
  } else {
    consoleLogLevel = fileLogLevel = args.loglevel;
  }

  transports.push(createConsoleTransport(args, consoleLogLevel));

  if (args.logFile) {
    try {
      if (await _appiumSupport.fs.exists(args.logFile)) {
        await _appiumSupport.fs.unlink(args.logFile);
      }

      transports.push(createFileTransport(args, fileLogLevel));
    } catch (e) {
      console.log(`Tried to attach logging to file '${args.logFile}' but an error ` + `occurred: ${e.message}`);
    }
  }

  if (args.webhook) {
    try {
      transports.push(createHttpTransport(args, fileLogLevel));
    } catch (e) {
      console.log(`Tried to attach logging to Http at ${args.webhook} but ` + `an error occurred: ${e.message}`);
    }
  }

  return transports;
}

async function init(args) {
  useLocalTimeZone = args.localTimezone;
  clear();
  log = (0, _winston.createLogger)({
    transports: await createTransports(args),
    levels
  });

  _npmlog.default.on('log', logObj => {
    const winstonLevel = npmToWinstonLevels[logObj.level] || 'info';
    let msg = logObj.message;

    if (logObj.prefix) {
      const prefix = `[${logObj.prefix}]`;
      msg = `${args.logNoColors ? prefix : prefix.magenta} ${msg}`;
    }

    log[winstonLevel](msg);

    if (args.logHandler && _lodash.default.isFunction(args.logHandler)) {
      args.logHandler(logObj.level, msg);
    }
  });
}

function clear() {
  if (log) {
    for (let transport of _lodash.default.keys(log.transports)) {
      log.remove(transport);
    }
  }

  _npmlog.default.removeAllListeners('log');
}

var _default = init;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
